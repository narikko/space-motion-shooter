
stm32-final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e48  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800a008  0800a008  0000b008  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a620  0800a620  0000c23c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a620  0800a620  0000b620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a628  0800a628  0000c23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a628  0800a628  0000b628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a62c  0800a62c  0000b62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  0800a630  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  2000023c  0800a86c  0000c23c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  0800a86c  0000c4f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c23c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013454  00000000  00000000  0000c26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b17  00000000  00000000  0001f6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  000221d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2d  00000000  00000000  000231b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c317  00000000  00000000  00023de5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147ce  00000000  00000000  000500fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108c9d  00000000  00000000  000648ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016d567  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  0016d5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00172a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009ff0 	.word	0x08009ff0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000240 	.word	0x20000240
 80001fc:	08009ff0 	.word	0x08009ff0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f6c:	f5ad 6d88 	sub.w	sp, sp, #1088	@ 0x440
 8000f70:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f72:	f001 f963 	bl	800223c <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_ACCELERO_Init();
 8000f76:	f000 fc7d 	bl	8001874 <BSP_ACCELERO_Init>
  BSP_MAGNETO_Init();
 8000f7a:	f000 fcd1 	bl	8001920 <BSP_MAGNETO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f9ed 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f000 fac9 	bl	8001518 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000f86:	f000 fa3b 	bl	8001400 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000f8a:	f000 fa79 	bl	8001480 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  int16_t acceleroVal[3];
  int16_t magnetoVal[3];

  float pitch = 0;
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	f207 422c 	addw	r2, r7, #1068	@ 0x42c
 8000f96:	6013      	str	r3, [r2, #0]
  float roll = 0;
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8000fa0:	6013      	str	r3, [r2, #0]
  float yaw = 0;
 8000fa2:	f04f 0300 	mov.w	r3, #0
 8000fa6:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 8000faa:	6013      	str	r3, [r2, #0]

  char output[1000];
  float deltaT = 0.1f;
 8000fac:	4be6      	ldr	r3, [pc, #920]	@ (8001348 <main+0x3e0>)
 8000fae:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000fb2:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_ACCELERO_AccGetXYZ(acceleroVal);
 8000fb4:	f507 737c 	add.w	r3, r7, #1008	@ 0x3f0
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fc99 	bl	80018f0 <BSP_ACCELERO_AccGetXYZ>
	  BSP_MAGNETO_GetXYZ(magnetoVal);
 8000fbe:	f507 737a 	add.w	r3, r7, #1000	@ 0x3e8
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 fcd8 	bl	8001978 <BSP_MAGNETO_GetXYZ>

	  // Accelerometer calculations for pitch, roll, and yaw
	     float ax = (float)acceleroVal[0];  // X-axis acceleration
 8000fc8:	f9b7 33f0 	ldrsh.w	r3, [r7, #1008]	@ 0x3f0
 8000fcc:	ee07 3a90 	vmov	s15, r3
 8000fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fd4:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8000fd8:	edc3 7a00 	vstr	s15, [r3]
	     float ay = (float)acceleroVal[1];  // Y-axis acceleration
 8000fdc:	f9b7 33f2 	ldrsh.w	r3, [r7, #1010]	@ 0x3f2
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe8:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000fec:	edc3 7a00 	vstr	s15, [r3]
	     float az = (float)acceleroVal[2];  // Z-axis acceleration
 8000ff0:	f9b7 33f4 	ldrsh.w	r3, [r7, #1012]	@ 0x3f4
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffc:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8001000:	edc3 7a00 	vstr	s15, [r3]

	     float magX = (float)magnetoVal[0];
 8001004:	f9b7 33e8 	ldrsh.w	r3, [r7, #1000]	@ 0x3e8
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001010:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001014:	edc3 7a00 	vstr	s15, [r3]
	     float magY = (float)magnetoVal[1];
 8001018:	f9b7 33ea 	ldrsh.w	r3, [r7, #1002]	@ 0x3ea
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001024:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001028:	edc3 7a00 	vstr	s15, [r3]
	     float magZ = (float)magnetoVal[2];
 800102c:	f9b7 33ec 	ldrsh.w	r3, [r7, #1004]	@ 0x3ec
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001038:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800103c:	edc3 7a00 	vstr	s15, [r3]

	     float accel_pitch_denom = sqrtf(ay * ay + az * az);
 8001040:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800104c:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001058:	ee77 7a27 	vadd.f32	s15, s14, s15
 800105c:	eeb0 0a67 	vmov.f32	s0, s15
 8001060:	f007 fe4c 	bl	8008cfc <sqrtf>
 8001064:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 8001068:	ed83 0a00 	vstr	s0, [r3]
	     float accel_roll_denom = sqrtf(ax * ax + az * az);
 800106c:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001078:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001088:	eeb0 0a67 	vmov.f32	s0, s15
 800108c:	f007 fe36 	bl	8008cfc <sqrtf>
 8001090:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001094:	ed83 0a00 	vstr	s0, [r3]

	     float magXh = magX * cos(pitch) + magZ * sin(pitch);
 8001098:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800109c:	6818      	ldr	r0, [r3, #0]
 800109e:	f7ff fa6b 	bl	8000578 <__aeabi_f2d>
 80010a2:	4604      	mov	r4, r0
 80010a4:	460d      	mov	r5, r1
 80010a6:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	f7ff fa64 	bl	8000578 <__aeabi_f2d>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	ec43 2b10 	vmov	d0, r2, r3
 80010b8:	f007 fd76 	bl	8008ba8 <cos>
 80010bc:	ec53 2b10 	vmov	r2, r3, d0
 80010c0:	4620      	mov	r0, r4
 80010c2:	4629      	mov	r1, r5
 80010c4:	f7ff fab0 	bl	8000628 <__aeabi_dmul>
 80010c8:	4602      	mov	r2, r0
 80010ca:	460b      	mov	r3, r1
 80010cc:	4690      	mov	r8, r2
 80010ce:	4699      	mov	r9, r3
 80010d0:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	f7ff fa4f 	bl	8000578 <__aeabi_f2d>
 80010da:	4604      	mov	r4, r0
 80010dc:	460d      	mov	r5, r1
 80010de:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f7ff fa48 	bl	8000578 <__aeabi_f2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	ec43 2b10 	vmov	d0, r2, r3
 80010f0:	f007 fdae 	bl	8008c50 <sin>
 80010f4:	ec53 2b10 	vmov	r2, r3, d0
 80010f8:	4620      	mov	r0, r4
 80010fa:	4629      	mov	r1, r5
 80010fc:	f7ff fa94 	bl	8000628 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4640      	mov	r0, r8
 8001106:	4649      	mov	r1, r9
 8001108:	f7ff f8d8 	bl	80002bc <__adddf3>
 800110c:	4602      	mov	r2, r0
 800110e:	460b      	mov	r3, r1
 8001110:	4610      	mov	r0, r2
 8001112:	4619      	mov	r1, r3
 8001114:	f7ff fd60 	bl	8000bd8 <__aeabi_d2f>
 8001118:	4603      	mov	r3, r0
 800111a:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
	     float magYh = magX * sin(roll) * sin(pitch) + magY * cos(roll) - magZ * sin(roll) * cos(pitch);
 800111e:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	f7ff fa28 	bl	8000578 <__aeabi_f2d>
 8001128:	4604      	mov	r4, r0
 800112a:	460d      	mov	r5, r1
 800112c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	f7ff fa21 	bl	8000578 <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	ec43 2b10 	vmov	d0, r2, r3
 800113e:	f007 fd87 	bl	8008c50 <sin>
 8001142:	ec53 2b10 	vmov	r2, r3, d0
 8001146:	4620      	mov	r0, r4
 8001148:	4629      	mov	r1, r5
 800114a:	f7ff fa6d 	bl	8000628 <__aeabi_dmul>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	4614      	mov	r4, r2
 8001154:	461d      	mov	r5, r3
 8001156:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 800115a:	6818      	ldr	r0, [r3, #0]
 800115c:	f7ff fa0c 	bl	8000578 <__aeabi_f2d>
 8001160:	4602      	mov	r2, r0
 8001162:	460b      	mov	r3, r1
 8001164:	ec43 2b10 	vmov	d0, r2, r3
 8001168:	f007 fd72 	bl	8008c50 <sin>
 800116c:	ec53 2b10 	vmov	r2, r3, d0
 8001170:	4620      	mov	r0, r4
 8001172:	4629      	mov	r1, r5
 8001174:	f7ff fa58 	bl	8000628 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4690      	mov	r8, r2
 800117e:	4699      	mov	r9, r3
 8001180:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 8001184:	6818      	ldr	r0, [r3, #0]
 8001186:	f7ff f9f7 	bl	8000578 <__aeabi_f2d>
 800118a:	4604      	mov	r4, r0
 800118c:	460d      	mov	r5, r1
 800118e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f7ff f9f0 	bl	8000578 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	ec43 2b10 	vmov	d0, r2, r3
 80011a0:	f007 fd02 	bl	8008ba8 <cos>
 80011a4:	ec53 2b10 	vmov	r2, r3, d0
 80011a8:	4620      	mov	r0, r4
 80011aa:	4629      	mov	r1, r5
 80011ac:	f7ff fa3c 	bl	8000628 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4640      	mov	r0, r8
 80011b6:	4649      	mov	r1, r9
 80011b8:	f7ff f880 	bl	80002bc <__adddf3>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4690      	mov	r8, r2
 80011c2:	4699      	mov	r9, r3
 80011c4:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	f7ff f9d5 	bl	8000578 <__aeabi_f2d>
 80011ce:	4604      	mov	r4, r0
 80011d0:	460d      	mov	r5, r1
 80011d2:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80011d6:	6818      	ldr	r0, [r3, #0]
 80011d8:	f7ff f9ce 	bl	8000578 <__aeabi_f2d>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	ec43 2b10 	vmov	d0, r2, r3
 80011e4:	f007 fd34 	bl	8008c50 <sin>
 80011e8:	ec53 2b10 	vmov	r2, r3, d0
 80011ec:	4620      	mov	r0, r4
 80011ee:	4629      	mov	r1, r5
 80011f0:	f7ff fa1a 	bl	8000628 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4614      	mov	r4, r2
 80011fa:	461d      	mov	r5, r3
 80011fc:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	f7ff f9b9 	bl	8000578 <__aeabi_f2d>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	ec43 2b10 	vmov	d0, r2, r3
 800120e:	f007 fccb 	bl	8008ba8 <cos>
 8001212:	ec53 2b10 	vmov	r2, r3, d0
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff fa05 	bl	8000628 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4640      	mov	r0, r8
 8001224:	4649      	mov	r1, r9
 8001226:	f7ff f847 	bl	80002b8 <__aeabi_dsub>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fcd1 	bl	8000bd8 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	f8c7 33f8 	str.w	r3, [r7, #1016]	@ 0x3f8

	     // Using atan2f for better numerical stability
	     pitch = atan2f(-ax, accel_pitch_denom) * (180.0f / PI);  // Convert to degrees
 800123c:	f207 431c 	addw	r3, r7, #1052	@ 0x41c
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	eef1 7a67 	vneg.f32	s15, s15
 8001248:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 800124c:	edd3 0a00 	vldr	s1, [r3]
 8001250:	eeb0 0a67 	vmov.f32	s0, s15
 8001254:	f007 fd50 	bl	8008cf8 <atan2f>
 8001258:	eef0 7a40 	vmov.f32	s15, s0
 800125c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800134c <main+0x3e4>
 8001260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001264:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 8001268:	edc3 7a00 	vstr	s15, [r3]
	     roll = atan2f(ay, accel_roll_denom) * (180.0f / PI);     // Convert to degrees
 800126c:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8001270:	edd3 0a00 	vldr	s1, [r3]
 8001274:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001278:	ed93 0a00 	vldr	s0, [r3]
 800127c:	f007 fd3c 	bl	8008cf8 <atan2f>
 8001280:	eef0 7a40 	vmov.f32	s15, s0
 8001284:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800134c <main+0x3e4>
 8001288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128c:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001290:	edc3 7a00 	vstr	s15, [r3]
	     yaw = atan2f(-magYh, magXh) * 180.0f / M_PI;
 8001294:	edd7 7afe 	vldr	s15, [r7, #1016]	@ 0x3f8
 8001298:	eef1 7a67 	vneg.f32	s15, s15
 800129c:	edd7 0aff 	vldr	s1, [r7, #1020]	@ 0x3fc
 80012a0:	eeb0 0a67 	vmov.f32	s0, s15
 80012a4:	f007 fd28 	bl	8008cf8 <atan2f>
 80012a8:	eef0 7a40 	vmov.f32	s15, s0
 80012ac:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001350 <main+0x3e8>
 80012b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b4:	ee17 0a90 	vmov	r0, s15
 80012b8:	f7ff f95e 	bl	8000578 <__aeabi_f2d>
 80012bc:	a320      	add	r3, pc, #128	@ (adr r3, 8001340 <main+0x3d8>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff fadb 	bl	800087c <__aeabi_ddiv>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fc83 	bl	8000bd8 <__aeabi_d2f>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 80012d8:	6013      	str	r3, [r2, #0]


	     // Format and send output via UART
	     sprintf(output, "Pitch: %.2f, Roll: %.2f, Yaw: %.2f\r\n",
 80012da:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f7ff f94a 	bl	8000578 <__aeabi_f2d>
 80012e4:	4680      	mov	r8, r0
 80012e6:	4689      	mov	r9, r1
 80012e8:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f7ff f943 	bl	8000578 <__aeabi_f2d>
 80012f2:	4604      	mov	r4, r0
 80012f4:	460d      	mov	r5, r1
 80012f6:	f207 4324 	addw	r3, r7, #1060	@ 0x424
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	f7ff f93c 	bl	8000578 <__aeabi_f2d>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4638      	mov	r0, r7
 8001306:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800130a:	e9cd 4500 	strd	r4, r5, [sp]
 800130e:	4642      	mov	r2, r8
 8001310:	464b      	mov	r3, r9
 8001312:	4910      	ldr	r1, [pc, #64]	@ (8001354 <main+0x3ec>)
 8001314:	f005 fb18 	bl	8006948 <siprintf>
	    		 pitch, roll, yaw);

	     uint16_t len = strlen(output);
 8001318:	463b      	mov	r3, r7
 800131a:	4618      	mov	r0, r3
 800131c:	f7fe ffc0 	bl	80002a0 <strlen>
 8001320:	4603      	mov	r3, r0
 8001322:	f8a7 33f6 	strh.w	r3, [r7, #1014]	@ 0x3f6
	     HAL_UART_Transmit(&huart1, (uint8_t*)output, len, 10000);
 8001326:	f8b7 23f6 	ldrh.w	r2, [r7, #1014]	@ 0x3f6
 800132a:	4639      	mov	r1, r7
 800132c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001330:	4809      	ldr	r0, [pc, #36]	@ (8001358 <main+0x3f0>)
 8001332:	f003 ff43 	bl	80051bc <HAL_UART_Transmit>

	  HAL_Delay(100);
 8001336:	2064      	movs	r0, #100	@ 0x64
 8001338:	f000 fff4 	bl	8002324 <HAL_Delay>
  {
 800133c:	bf00      	nop
 800133e:	e639      	b.n	8000fb4 <main+0x4c>
 8001340:	54442d18 	.word	0x54442d18
 8001344:	400921fb 	.word	0x400921fb
 8001348:	3dcccccd 	.word	0x3dcccccd
 800134c:	42652ee0 	.word	0x42652ee0
 8001350:	43340000 	.word	0x43340000
 8001354:	0800a008 	.word	0x0800a008
 8001358:	200002ac 	.word	0x200002ac

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b096      	sub	sp, #88	@ 0x58
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	2244      	movs	r2, #68	@ 0x44
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f005 fb4f 	bl	8006a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	463b      	mov	r3, r7
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800137e:	2000      	movs	r0, #0
 8001380:	f002 fa38 	bl	80037f4 <HAL_PWREx_ControlVoltageScaling>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800138a:	f000 f91d 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800138e:	2310      	movs	r3, #16
 8001390:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001392:	2301      	movs	r3, #1
 8001394:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800139a:	2360      	movs	r3, #96	@ 0x60
 800139c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013a2:	2301      	movs	r3, #1
 80013a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013aa:	233c      	movs	r3, #60	@ 0x3c
 80013ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4618      	mov	r0, r3
 80013c0:	f002 fabc 	bl	800393c <HAL_RCC_OscConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013ca:	f000 f8fd 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ce:	230f      	movs	r3, #15
 80013d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	2303      	movs	r3, #3
 80013d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013e2:	463b      	mov	r3, r7
 80013e4:	2105      	movs	r1, #5
 80013e6:	4618      	mov	r0, r3
 80013e8:	f002 fec2 	bl	8004170 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013f2:	f000 f8e9 	bl	80015c8 <Error_Handler>
  }
}
 80013f6:	bf00      	nop
 80013f8:	3758      	adds	r7, #88	@ 0x58
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001404:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <MX_I2C2_Init+0x74>)
 8001406:	4a1c      	ldr	r2, [pc, #112]	@ (8001478 <MX_I2C2_Init+0x78>)
 8001408:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <MX_I2C2_Init+0x74>)
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <MX_I2C2_Init+0x7c>)
 800140e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001410:	4b18      	ldr	r3, [pc, #96]	@ (8001474 <MX_I2C2_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001416:	4b17      	ldr	r3, [pc, #92]	@ (8001474 <MX_I2C2_Init+0x74>)
 8001418:	2201      	movs	r2, #1
 800141a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	@ (8001474 <MX_I2C2_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001422:	4b14      	ldr	r3, [pc, #80]	@ (8001474 <MX_I2C2_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001428:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <MX_I2C2_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800142e:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_I2C2_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <MX_I2C2_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800143a:	480e      	ldr	r0, [pc, #56]	@ (8001474 <MX_I2C2_Init+0x74>)
 800143c:	f001 fb67 	bl	8002b0e <HAL_I2C_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001446:	f000 f8bf 	bl	80015c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	4809      	ldr	r0, [pc, #36]	@ (8001474 <MX_I2C2_Init+0x74>)
 800144e:	f002 f919 	bl	8003684 <HAL_I2CEx_ConfigAnalogFilter>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001458:	f000 f8b6 	bl	80015c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800145c:	2100      	movs	r1, #0
 800145e:	4805      	ldr	r0, [pc, #20]	@ (8001474 <MX_I2C2_Init+0x74>)
 8001460:	f002 f95b 	bl	800371a <HAL_I2CEx_ConfigDigitalFilter>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800146a:	f000 f8ad 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000258 	.word	0x20000258
 8001478:	40005800 	.word	0x40005800
 800147c:	30a175ab 	.word	0x30a175ab

08001480 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001484:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 8001486:	4a23      	ldr	r2, [pc, #140]	@ (8001514 <MX_USART1_UART_Init+0x94>)
 8001488:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800148a:	4b21      	ldr	r3, [pc, #132]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 800148c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001490:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001498:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014a6:	220c      	movs	r2, #12
 80014a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014be:	2200      	movs	r2, #0
 80014c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014c8:	4811      	ldr	r0, [pc, #68]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014ca:	f003 fe27 	bl	800511c <HAL_UART_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014d4:	f000 f878 	bl	80015c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d8:	2100      	movs	r1, #0
 80014da:	480d      	ldr	r0, [pc, #52]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014dc:	f004 fc50 	bl	8005d80 <HAL_UARTEx_SetTxFifoThreshold>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014e6:	f000 f86f 	bl	80015c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ea:	2100      	movs	r1, #0
 80014ec:	4808      	ldr	r0, [pc, #32]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014ee:	f004 fc85 	bl	8005dfc <HAL_UARTEx_SetRxFifoThreshold>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014f8:	f000 f866 	bl	80015c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	@ (8001510 <MX_USART1_UART_Init+0x90>)
 80014fe:	f004 fc06 	bl	8005d0e <HAL_UARTEx_DisableFifoMode>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001508:	f000 f85e 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200002ac 	.word	0x200002ac
 8001514:	40013800 	.word	0x40013800

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152e:	4b23      	ldr	r3, [pc, #140]	@ (80015bc <MX_GPIO_Init+0xa4>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a22      	ldr	r2, [pc, #136]	@ (80015bc <MX_GPIO_Init+0xa4>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b20      	ldr	r3, [pc, #128]	@ (80015bc <MX_GPIO_Init+0xa4>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60bb      	str	r3, [r7, #8]
 8001544:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b1d      	ldr	r3, [pc, #116]	@ (80015bc <MX_GPIO_Init+0xa4>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a1c      	ldr	r2, [pc, #112]	@ (80015bc <MX_GPIO_Init+0xa4>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <MX_GPIO_Init+0xa4>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001564:	4816      	ldr	r0, [pc, #88]	@ (80015c0 <MX_GPIO_Init+0xa8>)
 8001566:	f001 fa97 	bl	8002a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800156a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001570:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001574:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157a:	f107 030c 	add.w	r3, r7, #12
 800157e:	4619      	mov	r1, r3
 8001580:	4810      	ldr	r0, [pc, #64]	@ (80015c4 <MX_GPIO_Init+0xac>)
 8001582:	f001 f805 	bl	8002590 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001586:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800158a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	4808      	ldr	r0, [pc, #32]	@ (80015c0 <MX_GPIO_Init+0xa8>)
 80015a0:	f000 fff6 	bl	8002590 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2100      	movs	r1, #0
 80015a8:	2028      	movs	r0, #40	@ 0x28
 80015aa:	f000 ffba 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ae:	2028      	movs	r0, #40	@ 0x28
 80015b0:	f000 ffd3 	bl	800255a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000
 80015c0:	48000400 	.word	0x48000400
 80015c4:	48000800 	.word	0x48000800

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <Error_Handler+0x8>

080015d4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80015dc:	4b27      	ldr	r3, [pc, #156]	@ (800167c <I2Cx_MspInit+0xa8>)
 80015de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e0:	4a26      	ldr	r2, [pc, #152]	@ (800167c <I2Cx_MspInit+0xa8>)
 80015e2:	f043 0302 	orr.w	r3, r3, #2
 80015e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e8:	4b24      	ldr	r3, [pc, #144]	@ (800167c <I2Cx_MspInit+0xa8>)
 80015ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80015f4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80015f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80015fa:	2312      	movs	r3, #18
 80015fc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	2303      	movs	r3, #3
 8001604:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001606:	2304      	movs	r3, #4
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	481b      	ldr	r0, [pc, #108]	@ (8001680 <I2Cx_MspInit+0xac>)
 8001612:	f000 ffbd 	bl	8002590 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4818      	ldr	r0, [pc, #96]	@ (8001680 <I2Cx_MspInit+0xac>)
 800161e:	f000 ffb7 	bl	8002590 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001622:	4b16      	ldr	r3, [pc, #88]	@ (800167c <I2Cx_MspInit+0xa8>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001626:	4a15      	ldr	r2, [pc, #84]	@ (800167c <I2Cx_MspInit+0xa8>)
 8001628:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800162c:	6593      	str	r3, [r2, #88]	@ 0x58
 800162e:	4b13      	ldr	r3, [pc, #76]	@ (800167c <I2Cx_MspInit+0xa8>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800163a:	4b10      	ldr	r3, [pc, #64]	@ (800167c <I2Cx_MspInit+0xa8>)
 800163c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800163e:	4a0f      	ldr	r2, [pc, #60]	@ (800167c <I2Cx_MspInit+0xa8>)
 8001640:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001644:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <I2Cx_MspInit+0xa8>)
 8001648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800164a:	4a0c      	ldr	r2, [pc, #48]	@ (800167c <I2Cx_MspInit+0xa8>)
 800164c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001650:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	210f      	movs	r1, #15
 8001656:	2021      	movs	r0, #33	@ 0x21
 8001658:	f000 ff63 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800165c:	2021      	movs	r0, #33	@ 0x21
 800165e:	f000 ff7c 	bl	800255a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	210f      	movs	r1, #15
 8001666:	2022      	movs	r0, #34	@ 0x22
 8001668:	f000 ff5b 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800166c:	2022      	movs	r0, #34	@ 0x22
 800166e:	f000 ff74 	bl	800255a <HAL_NVIC_EnableIRQ>
}
 8001672:	bf00      	nop
 8001674:	3728      	adds	r7, #40	@ 0x28
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	48000400 	.word	0x48000400

08001684 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <I2Cx_Init+0x54>)
 8001690:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a11      	ldr	r2, [pc, #68]	@ (80016dc <I2Cx_Init+0x58>)
 8001696:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f7ff ff89 	bl	80015d4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f001 fa23 	bl	8002b0e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80016c8:	2100      	movs	r1, #0
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f001 ffda 	bl	8003684 <HAL_I2CEx_ConfigAnalogFilter>
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40005800 	.word	0x40005800
 80016dc:	00702681 	.word	0x00702681

080016e0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	@ 0x28
 80016e4:	af04      	add	r7, sp, #16
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	4608      	mov	r0, r1
 80016ea:	4611      	mov	r1, r2
 80016ec:	461a      	mov	r2, r3
 80016ee:	4603      	mov	r3, r0
 80016f0:	72fb      	strb	r3, [r7, #11]
 80016f2:	460b      	mov	r3, r1
 80016f4:	813b      	strh	r3, [r7, #8]
 80016f6:	4613      	mov	r3, r2
 80016f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80016fe:	7afb      	ldrb	r3, [r7, #11]
 8001700:	b299      	uxth	r1, r3
 8001702:	88f8      	ldrh	r0, [r7, #6]
 8001704:	893a      	ldrh	r2, [r7, #8]
 8001706:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800170a:	9302      	str	r3, [sp, #8]
 800170c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800170e:	9301      	str	r3, [sp, #4]
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	4603      	mov	r3, r0
 8001716:	68f8      	ldr	r0, [r7, #12]
 8001718:	f001 fbd8 	bl	8002ecc <HAL_I2C_Mem_Read>
 800171c:	4603      	mov	r3, r0
 800171e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d004      	beq.n	8001730 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001726:	7afb      	ldrb	r3, [r7, #11]
 8001728:	4619      	mov	r1, r3
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 f832 	bl	8001794 <I2Cx_Error>
  }
  return status;
 8001730:	7dfb      	ldrb	r3, [r7, #23]
}
 8001732:	4618      	mov	r0, r3
 8001734:	3718      	adds	r7, #24
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b08a      	sub	sp, #40	@ 0x28
 800173e:	af04      	add	r7, sp, #16
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	4608      	mov	r0, r1
 8001744:	4611      	mov	r1, r2
 8001746:	461a      	mov	r2, r3
 8001748:	4603      	mov	r3, r0
 800174a:	72fb      	strb	r3, [r7, #11]
 800174c:	460b      	mov	r3, r1
 800174e:	813b      	strh	r3, [r7, #8]
 8001750:	4613      	mov	r3, r2
 8001752:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	b299      	uxth	r1, r3
 800175c:	88f8      	ldrh	r0, [r7, #6]
 800175e:	893a      	ldrh	r2, [r7, #8]
 8001760:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001764:	9302      	str	r3, [sp, #8]
 8001766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	4603      	mov	r3, r0
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f001 fa97 	bl	8002ca4 <HAL_I2C_Mem_Write>
 8001776:	4603      	mov	r3, r0
 8001778:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001780:	7afb      	ldrb	r3, [r7, #11]
 8001782:	4619      	mov	r1, r3
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f000 f805 	bl	8001794 <I2Cx_Error>
  }
  return status;
 800178a:	7dfb      	ldrb	r3, [r7, #23]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	460b      	mov	r3, r1
 800179e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f001 fa4f 	bl	8002c44 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff6c 	bl	8001684 <I2Cx_Init>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <SENSOR_IO_Init+0x10>)
 80017ba:	f7ff ff63 	bl	8001684 <I2Cx_Init>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000340 	.word	0x20000340

080017c8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
 80017d2:	460b      	mov	r3, r1
 80017d4:	71bb      	strb	r3, [r7, #6]
 80017d6:	4613      	mov	r3, r2
 80017d8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80017da:	79bb      	ldrb	r3, [r7, #6]
 80017dc:	b29a      	uxth	r2, r3
 80017de:	79f9      	ldrb	r1, [r7, #7]
 80017e0:	2301      	movs	r3, #1
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	1d7b      	adds	r3, r7, #5
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	2301      	movs	r3, #1
 80017ea:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <SENSOR_IO_Write+0x30>)
 80017ec:	f7ff ffa5 	bl	800173a <I2Cx_WriteMultiple>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000340 	.word	0x20000340

080017fc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	4603      	mov	r3, r0
 8001804:	460a      	mov	r2, r1
 8001806:	71fb      	strb	r3, [r7, #7]
 8001808:	4613      	mov	r3, r2
 800180a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001810:	79bb      	ldrb	r3, [r7, #6]
 8001812:	b29a      	uxth	r2, r3
 8001814:	79f9      	ldrb	r1, [r7, #7]
 8001816:	2301      	movs	r3, #1
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	f107 030f 	add.w	r3, r7, #15
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2301      	movs	r3, #1
 8001822:	4804      	ldr	r0, [pc, #16]	@ (8001834 <SENSOR_IO_Read+0x38>)
 8001824:	f7ff ff5c 	bl	80016e0 <I2Cx_ReadMultiple>

  return read_value;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000340 	.word	0x20000340

08001838 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af02      	add	r7, sp, #8
 800183e:	603a      	str	r2, [r7, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	460b      	mov	r3, r1
 8001848:	71bb      	strb	r3, [r7, #6]
 800184a:	4613      	mov	r3, r2
 800184c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800184e:	79bb      	ldrb	r3, [r7, #6]
 8001850:	b29a      	uxth	r2, r3
 8001852:	79f9      	ldrb	r1, [r7, #7]
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2301      	movs	r3, #1
 800185e:	4804      	ldr	r0, [pc, #16]	@ (8001870 <SENSOR_IO_ReadMultiple+0x38>)
 8001860:	f7ff ff3e 	bl	80016e0 <I2Cx_ReadMultiple>
 8001864:	4603      	mov	r3, r0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000340 	.word	0x20000340

08001874 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800187e:	2300      	movs	r3, #0
 8001880:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001882:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <BSP_ACCELERO_Init+0x74>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	4798      	blx	r3
 8001888:	4603      	mov	r3, r0
 800188a:	2b6a      	cmp	r3, #106	@ 0x6a
 800188c:	d002      	beq.n	8001894 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	73fb      	strb	r3, [r7, #15]
 8001892:	e024      	b.n	80018de <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001894:	4b15      	ldr	r3, [pc, #84]	@ (80018ec <BSP_ACCELERO_Init+0x78>)
 8001896:	4a14      	ldr	r2, [pc, #80]	@ (80018e8 <BSP_ACCELERO_Init+0x74>)
 8001898:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800189a:	2330      	movs	r3, #48	@ 0x30
 800189c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800189e:	2300      	movs	r3, #0
 80018a0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80018a2:	2300      	movs	r3, #0
 80018a4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80018a6:	2340      	movs	r3, #64	@ 0x40
 80018a8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80018b2:	797a      	ldrb	r2, [r7, #5]
 80018b4:	7abb      	ldrb	r3, [r7, #10]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80018bc:	7a3b      	ldrb	r3, [r7, #8]
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	021b      	lsls	r3, r3, #8
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	b21b      	sxth	r3, r3
 80018d0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <BSP_ACCELERO_Init+0x78>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	89ba      	ldrh	r2, [r7, #12]
 80018da:	4610      	mov	r0, r2
 80018dc:	4798      	blx	r3
  }  

  return ret;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000038 	.word	0x20000038
 80018ec:	20000394 	.word	0x20000394

080018f0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80018f8:	4b08      	ldr	r3, [pc, #32]	@ (800191c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d009      	beq.n	8001914 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	2b00      	cmp	r3, #0
 8001908:	d004      	beq.n	8001914 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800190a:	4b04      	ldr	r3, [pc, #16]	@ (800191c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
    }
  }
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000394 	.word	0x20000394

08001920 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001926:	2300      	movs	r3, #0
 8001928:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 800192a:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <BSP_MAGNETO_Init+0x50>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	4798      	blx	r3
 8001930:	4603      	mov	r3, r0
 8001932:	2b3d      	cmp	r3, #61	@ 0x3d
 8001934:	d002      	beq.n	800193c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	71fb      	strb	r3, [r7, #7]
 800193a:	e013      	b.n	8001964 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 800193c:	4b0d      	ldr	r3, [pc, #52]	@ (8001974 <BSP_MAGNETO_Init+0x54>)
 800193e:	4a0c      	ldr	r2, [pc, #48]	@ (8001970 <BSP_MAGNETO_Init+0x50>)
 8001940:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001942:	2358      	movs	r3, #88	@ 0x58
 8001944:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001946:	2300      	movs	r3, #0
 8001948:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 800194a:	2300      	movs	r3, #0
 800194c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 800194e:	2308      	movs	r3, #8
 8001950:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001952:	2340      	movs	r3, #64	@ 0x40
 8001954:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <BSP_MAGNETO_Init+0x54>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	463a      	mov	r2, r7
 800195e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001962:	4798      	blx	r3
  } 

  return ret;  
 8001964:	79fb      	ldrb	r3, [r7, #7]
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000004 	.word	0x20000004
 8001974:	20000398 	.word	0x20000398

08001978 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d009      	beq.n	800199c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <BSP_MAGNETO_GetXYZ+0x2c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001992:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	4798      	blx	r3
    }
  }
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000398 	.word	0x20000398

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b0f      	ldr	r3, [pc, #60]	@ (80019ec <HAL_MspInit+0x44>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	4a0e      	ldr	r2, [pc, #56]	@ (80019ec <HAL_MspInit+0x44>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ba:	4b0c      	ldr	r3, [pc, #48]	@ (80019ec <HAL_MspInit+0x44>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_MspInit+0x44>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	4a08      	ldr	r2, [pc, #32]	@ (80019ec <HAL_MspInit+0x44>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_MspInit+0x44>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b0ae      	sub	sp, #184	@ 0xb8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	2294      	movs	r2, #148	@ 0x94
 8001a0e:	2100      	movs	r1, #0
 8001a10:	4618      	mov	r0, r3
 8001a12:	f004 fffc 	bl	8006a0e <memset>
  if(hi2c->Instance==I2C2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a21      	ldr	r2, [pc, #132]	@ (8001aa0 <HAL_I2C_MspInit+0xb0>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d13b      	bne.n	8001a98 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a20:	2380      	movs	r3, #128	@ 0x80
 8001a22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a28:	f107 0310 	add.w	r3, r7, #16
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f002 fe5d 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a38:	f7ff fdc6 	bl	80015c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3c:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_I2C_MspInit+0xb4>)
 8001a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a40:	4a18      	ldr	r2, [pc, #96]	@ (8001aa4 <HAL_I2C_MspInit+0xb4>)
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a48:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <HAL_I2C_MspInit+0xb4>)
 8001a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a54:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5c:	2312      	movs	r3, #18
 8001a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a6e:	2304      	movs	r3, #4
 8001a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480b      	ldr	r0, [pc, #44]	@ (8001aa8 <HAL_I2C_MspInit+0xb8>)
 8001a7c:	f000 fd88 	bl	8002590 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <HAL_I2C_MspInit+0xb4>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a84:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <HAL_I2C_MspInit+0xb4>)
 8001a86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a8c:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <HAL_I2C_MspInit+0xb4>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a98:	bf00      	nop
 8001a9a:	37b8      	adds	r7, #184	@ 0xb8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40005800 	.word	0x40005800
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	48000400 	.word	0x48000400

08001aac <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae8 <HAL_I2C_MspDeInit+0x3c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d10f      	bne.n	8001ade <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001abe:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <HAL_I2C_MspDeInit+0x40>)
 8001ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8001aec <HAL_I2C_MspDeInit+0x40>)
 8001ac4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001ac8:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001aca:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001ace:	4808      	ldr	r0, [pc, #32]	@ (8001af0 <HAL_I2C_MspDeInit+0x44>)
 8001ad0:	f000 fef0 	bl	80028b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001ad4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ad8:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <HAL_I2C_MspDeInit+0x44>)
 8001ada:	f000 feeb 	bl	80028b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40005800 	.word	0x40005800
 8001aec:	40021000 	.word	0x40021000
 8001af0:	48000400 	.word	0x48000400

08001af4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b0ae      	sub	sp, #184	@ 0xb8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	2294      	movs	r2, #148	@ 0x94
 8001b12:	2100      	movs	r1, #0
 8001b14:	4618      	mov	r0, r3
 8001b16:	f004 ff7a 	bl	8006a0e <memset>
  if(huart->Instance==USART1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ba4 <HAL_UART_MspInit+0xb0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d13a      	bne.n	8001b9a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 fddb 	bl	80046ec <HAL_RCCEx_PeriphCLKConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b3c:	f7ff fd44 	bl	80015c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_UART_MspInit+0xb4>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b44:	4a18      	ldr	r2, [pc, #96]	@ (8001ba8 <HAL_UART_MspInit+0xb4>)
 8001b46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b4a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <HAL_UART_MspInit+0xb4>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b13      	ldr	r3, [pc, #76]	@ (8001ba8 <HAL_UART_MspInit+0xb4>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5c:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <HAL_UART_MspInit+0xb4>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b64:	4b10      	ldr	r3, [pc, #64]	@ (8001ba8 <HAL_UART_MspInit+0xb4>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b70:	23c0      	movs	r3, #192	@ 0xc0
 8001b72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b76:	2302      	movs	r3, #2
 8001b78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b88:	2307      	movs	r3, #7
 8001b8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	@ (8001bac <HAL_UART_MspInit+0xb8>)
 8001b96:	f000 fcfb 	bl	8002590 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001b9a:	bf00      	nop
 8001b9c:	37b8      	adds	r7, #184	@ 0xb8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40013800 	.word	0x40013800
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	48000400 	.word	0x48000400

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <HardFault_Handler+0x4>

08001bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc4:	bf00      	nop
 8001bc6:	e7fd      	b.n	8001bc4 <MemManage_Handler+0x4>

08001bc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <BusFault_Handler+0x4>

08001bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <UsageFault_Handler+0x4>

08001bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c02:	b580      	push	{r7, lr}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c06:	f000 fb6d 	bl	80022e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c12:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001c16:	f000 ff57 	bl	8002ac8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
  return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <_kill>:

int _kill(int pid, int sig)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b082      	sub	sp, #8
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c38:	f004 ff3c 	bl	8006ab4 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2216      	movs	r2, #22
 8001c40:	601a      	str	r2, [r3, #0]
  return -1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_exit>:

void _exit (int status)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c56:	f04f 31ff 	mov.w	r1, #4294967295
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffe7 	bl	8001c2e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c60:	bf00      	nop
 8001c62:	e7fd      	b.n	8001c60 <_exit+0x12>

08001c64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	e00a      	b.n	8001c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c76:	f3af 8000 	nop.w
 8001c7a:	4601      	mov	r1, r0
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	1c5a      	adds	r2, r3, #1
 8001c80:	60ba      	str	r2, [r7, #8]
 8001c82:	b2ca      	uxtb	r2, r1
 8001c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	617b      	str	r3, [r7, #20]
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	dbf0      	blt.n	8001c76 <_read+0x12>
  }

  return len;
 8001c94:	687b      	ldr	r3, [r7, #4]
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e009      	b.n	8001cc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	1c5a      	adds	r2, r3, #1
 8001cb4:	60ba      	str	r2, [r7, #8]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbf1      	blt.n	8001cb0 <_write+0x12>
  }
  return len;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_close>:

int _close(int file)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr

08001cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <_isatty>:

int _isatty(int file)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d16:	2301      	movs	r3, #1
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
	...

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f004 fea0 	bl	8006ab4 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200a0000 	.word	0x200a0000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	2000039c 	.word	0x2000039c
 8001da8:	200004f0 	.word	0x200004f0

08001dac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001db0:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <SystemInit+0x20>)
 8001db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <SystemInit+0x20>)
 8001db8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dbc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dd4:	f7ff ffea 	bl	8001dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <LoopForever+0x6>)
  ldr r1, =_edata
 8001dda:	490d      	ldr	r1, [pc, #52]	@ (8001e10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e14 <LoopForever+0xe>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001de0:	e002      	b.n	8001de8 <LoopCopyDataInit>

08001de2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001de2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001de4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001de6:	3304      	adds	r3, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dec:	d3f9      	bcc.n	8001de2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dee:	4a0a      	ldr	r2, [pc, #40]	@ (8001e18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001df0:	4c0a      	ldr	r4, [pc, #40]	@ (8001e1c <LoopForever+0x16>)
  movs r3, #0
 8001df2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001df4:	e001      	b.n	8001dfa <LoopFillZerobss>

08001df6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001df6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df8:	3204      	adds	r2, #4

08001dfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dfc:	d3fb      	bcc.n	8001df6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dfe:	f004 fe5f 	bl	8006ac0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e02:	f7ff f8b1 	bl	8000f68 <main>

08001e06 <LoopForever>:

LoopForever:
    b LoopForever
 8001e06:	e7fe      	b.n	8001e06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e08:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e10:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8001e14:	0800a630 	.word	0x0800a630
  ldr r2, =_sbss
 8001e18:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8001e1c:	200004f0 	.word	0x200004f0

08001e20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e20:	e7fe      	b.n	8001e20 <ADC1_IRQHandler>

08001e22 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	463b      	mov	r3, r7
 8001e2a:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001e2e:	783b      	ldrb	r3, [r7, #0]
 8001e30:	461a      	mov	r2, r3
 8001e32:	2120      	movs	r1, #32
 8001e34:	203c      	movs	r0, #60	@ 0x3c
 8001e36:	f7ff fcc7 	bl	80017c8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001e3a:	787b      	ldrb	r3, [r7, #1]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2121      	movs	r1, #33	@ 0x21
 8001e40:	203c      	movs	r0, #60	@ 0x3c
 8001e42:	f7ff fcc1 	bl	80017c8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001e46:	78bb      	ldrb	r3, [r7, #2]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2122      	movs	r1, #34	@ 0x22
 8001e4c:	203c      	movs	r0, #60	@ 0x3c
 8001e4e:	f7ff fcbb 	bl	80017c8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	461a      	mov	r2, r3
 8001e56:	2123      	movs	r1, #35	@ 0x23
 8001e58:	203c      	movs	r0, #60	@ 0x3c
 8001e5a:	f7ff fcb5 	bl	80017c8 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001e5e:	793b      	ldrb	r3, [r7, #4]
 8001e60:	461a      	mov	r2, r3
 8001e62:	2124      	movs	r1, #36	@ 0x24
 8001e64:	203c      	movs	r0, #60	@ 0x3c
 8001e66:	f7ff fcaf 	bl	80017c8 <SENSOR_IO_Write>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001e7c:	2122      	movs	r1, #34	@ 0x22
 8001e7e:	203c      	movs	r0, #60	@ 0x3c
 8001e80:	f7ff fcbc 	bl	80017fc <SENSOR_IO_Read>
 8001e84:	4603      	mov	r3, r0
 8001e86:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	f023 0303 	bic.w	r3, r3, #3
 8001e8e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	f043 0303 	orr.w	r3, r3, #3
 8001e96:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	2122      	movs	r1, #34	@ 0x22
 8001e9e:	203c      	movs	r0, #60	@ 0x3c
 8001ea0:	f7ff fc92 	bl	80017c8 <SENSOR_IO_Write>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001eb0:	f7ff fc80 	bl	80017b4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001eb4:	210f      	movs	r1, #15
 8001eb6:	203c      	movs	r0, #60	@ 0x3c
 8001eb8:	f7ff fca0 	bl	80017fc <SENSOR_IO_Read>
 8001ebc:	4603      	mov	r3, r0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b084      	sub	sp, #16
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001ed0:	2122      	movs	r1, #34	@ 0x22
 8001ed2:	203c      	movs	r0, #60	@ 0x3c
 8001ed4:	f7ff fc92 	bl	80017fc <SENSOR_IO_Read>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	f023 0320 	bic.w	r3, r3, #32
 8001ee2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001ee4:	88fb      	ldrh	r3, [r7, #6]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d003      	beq.n	8001ef2 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	f043 0320 	orr.w	r3, r3, #32
 8001ef0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	2122      	movs	r1, #34	@ 0x22
 8001ef8:	203c      	movs	r0, #60	@ 0x3c
 8001efa:	f7ff fc65 	bl	80017c8 <SENSOR_IO_Write>
}
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001f18:	f04f 0300 	mov.w	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001f1e:	2121      	movs	r1, #33	@ 0x21
 8001f20:	203c      	movs	r0, #60	@ 0x3c
 8001f22:	f7ff fc6b 	bl	80017fc <SENSOR_IO_Read>
 8001f26:	4603      	mov	r3, r0
 8001f28:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001f2a:	f107 0208 	add.w	r2, r7, #8
 8001f2e:	2306      	movs	r3, #6
 8001f30:	21a8      	movs	r1, #168	@ 0xa8
 8001f32:	203c      	movs	r0, #60	@ 0x3c
 8001f34:	f7ff fc80 	bl	8001838 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001f38:	2300      	movs	r3, #0
 8001f3a:	77fb      	strb	r3, [r7, #31]
 8001f3c:	e01a      	b.n	8001f74 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001f3e:	7ffb      	ldrb	r3, [r7, #31]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	3301      	adds	r3, #1
 8001f44:	3320      	adds	r3, #32
 8001f46:	443b      	add	r3, r7
 8001f48:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	7ffa      	ldrb	r2, [r7, #31]
 8001f52:	0052      	lsls	r2, r2, #1
 8001f54:	3220      	adds	r2, #32
 8001f56:	443a      	add	r2, r7
 8001f58:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	7ffb      	ldrb	r3, [r7, #31]
 8001f62:	b212      	sxth	r2, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	3320      	adds	r3, #32
 8001f68:	443b      	add	r3, r7
 8001f6a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001f6e:	7ffb      	ldrb	r3, [r7, #31]
 8001f70:	3301      	adds	r3, #1
 8001f72:	77fb      	strb	r3, [r7, #31]
 8001f74:	7ffb      	ldrb	r3, [r7, #31]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d9e1      	bls.n	8001f3e <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001f7a:	7dfb      	ldrb	r3, [r7, #23]
 8001f7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8001f80:	2b60      	cmp	r3, #96	@ 0x60
 8001f82:	d013      	beq.n	8001fac <LIS3MDL_MagReadXYZ+0xa4>
 8001f84:	2b60      	cmp	r3, #96	@ 0x60
 8001f86:	dc14      	bgt.n	8001fb2 <LIS3MDL_MagReadXYZ+0xaa>
 8001f88:	2b40      	cmp	r3, #64	@ 0x40
 8001f8a:	d00c      	beq.n	8001fa6 <LIS3MDL_MagReadXYZ+0x9e>
 8001f8c:	2b40      	cmp	r3, #64	@ 0x40
 8001f8e:	dc10      	bgt.n	8001fb2 <LIS3MDL_MagReadXYZ+0xaa>
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d002      	beq.n	8001f9a <LIS3MDL_MagReadXYZ+0x92>
 8001f94:	2b20      	cmp	r3, #32
 8001f96:	d003      	beq.n	8001fa0 <LIS3MDL_MagReadXYZ+0x98>
 8001f98:	e00b      	b.n	8001fb2 <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <LIS3MDL_MagReadXYZ+0xf8>)
 8001f9c:	61bb      	str	r3, [r7, #24]
    break;
 8001f9e:	e008      	b.n	8001fb2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <LIS3MDL_MagReadXYZ+0xfc>)
 8001fa2:	61bb      	str	r3, [r7, #24]
    break;
 8001fa4:	e005      	b.n	8001fb2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	@ (8002008 <LIS3MDL_MagReadXYZ+0x100>)
 8001fa8:	61bb      	str	r3, [r7, #24]
    break;
 8001faa:	e002      	b.n	8001fb2 <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8001fac:	4b17      	ldr	r3, [pc, #92]	@ (800200c <LIS3MDL_MagReadXYZ+0x104>)
 8001fae:	61bb      	str	r3, [r7, #24]
    break;    
 8001fb0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	77fb      	strb	r3, [r7, #31]
 8001fb6:	e01a      	b.n	8001fee <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001fb8:	7ffb      	ldrb	r3, [r7, #31]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	3320      	adds	r3, #32
 8001fbe:	443b      	add	r3, r7
 8001fc0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001fc4:	ee07 3a90 	vmov	s15, r3
 8001fc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fcc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	7ffb      	ldrb	r3, [r7, #31]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe0:	ee17 2a90 	vmov	r2, s15
 8001fe4:	b212      	sxth	r2, r2
 8001fe6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001fe8:	7ffb      	ldrb	r3, [r7, #31]
 8001fea:	3301      	adds	r3, #1
 8001fec:	77fb      	strb	r3, [r7, #31]
 8001fee:	7ffb      	ldrb	r3, [r7, #31]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d9e1      	bls.n	8001fb8 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	3e0f5c29 	.word	0x3e0f5c29
 8002004:	3e947ae1 	.word	0x3e947ae1
 8002008:	3edc28f6 	.word	0x3edc28f6
 800200c:	3f147ae1 	.word	0x3f147ae1

08002010 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800201a:	2300      	movs	r3, #0
 800201c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800201e:	2110      	movs	r1, #16
 8002020:	20d4      	movs	r0, #212	@ 0xd4
 8002022:	f7ff fbeb 	bl	80017fc <SENSOR_IO_Read>
 8002026:	4603      	mov	r3, r0
 8002028:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800202e:	7bbb      	ldrb	r3, [r7, #14]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002036:	7bba      	ldrb	r2, [r7, #14]
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	4313      	orrs	r3, r2
 800203c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800203e:	7bbb      	ldrb	r3, [r7, #14]
 8002040:	461a      	mov	r2, r3
 8002042:	2110      	movs	r1, #16
 8002044:	20d4      	movs	r0, #212	@ 0xd4
 8002046:	f7ff fbbf 	bl	80017c8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800204a:	2112      	movs	r1, #18
 800204c:	20d4      	movs	r0, #212	@ 0xd4
 800204e:	f7ff fbd5 	bl	80017fc <SENSOR_IO_Read>
 8002052:	4603      	mov	r3, r0
 8002054:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	b29b      	uxth	r3, r3
 800205c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800205e:	7bbb      	ldrb	r3, [r7, #14]
 8002060:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002064:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002066:	7bba      	ldrb	r2, [r7, #14]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	4313      	orrs	r3, r2
 800206c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800206e:	7bbb      	ldrb	r3, [r7, #14]
 8002070:	461a      	mov	r2, r3
 8002072:	2112      	movs	r1, #18
 8002074:	20d4      	movs	r0, #212	@ 0xd4
 8002076:	f7ff fba7 	bl	80017c8 <SENSOR_IO_Write>
}
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002088:	2300      	movs	r3, #0
 800208a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800208c:	2110      	movs	r1, #16
 800208e:	20d4      	movs	r0, #212	@ 0xd4
 8002090:	f7ff fbb4 	bl	80017fc <SENSOR_IO_Read>
 8002094:	4603      	mov	r3, r0
 8002096:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	461a      	mov	r2, r3
 80020a4:	2110      	movs	r1, #16
 80020a6:	20d4      	movs	r0, #212	@ 0xd4
 80020a8:	f7ff fb8e 	bl	80017c8 <SENSOR_IO_Write>
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80020b8:	f7ff fb7c 	bl	80017b4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80020bc:	210f      	movs	r1, #15
 80020be:	20d4      	movs	r0, #212	@ 0xd4
 80020c0:	f7ff fb9c 	bl	80017fc <SENSOR_IO_Read>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}

080020ca <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80020d8:	2115      	movs	r1, #21
 80020da:	20d4      	movs	r0, #212	@ 0xd4
 80020dc:	f7ff fb8e 	bl	80017fc <SENSOR_IO_Read>
 80020e0:	4603      	mov	r3, r0
 80020e2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
 80020e6:	f023 0310 	bic.w	r3, r3, #16
 80020ea:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	f043 0310 	orr.w	r3, r3, #16
 80020f8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
 80020fc:	461a      	mov	r2, r3
 80020fe:	2115      	movs	r1, #21
 8002100:	20d4      	movs	r0, #212	@ 0xd4
 8002102:	f7ff fb61 	bl	80017c8 <SENSOR_IO_Write>
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002118:	2300      	movs	r3, #0
 800211a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002120:	f04f 0300 	mov.w	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002126:	2110      	movs	r1, #16
 8002128:	20d4      	movs	r0, #212	@ 0xd4
 800212a:	f7ff fb67 	bl	80017fc <SENSOR_IO_Read>
 800212e:	4603      	mov	r3, r0
 8002130:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002132:	f107 0208 	add.w	r2, r7, #8
 8002136:	2306      	movs	r3, #6
 8002138:	2128      	movs	r1, #40	@ 0x28
 800213a:	20d4      	movs	r0, #212	@ 0xd4
 800213c:	f7ff fb7c 	bl	8001838 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002140:	2300      	movs	r3, #0
 8002142:	77fb      	strb	r3, [r7, #31]
 8002144:	e01a      	b.n	800217c <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002146:	7ffb      	ldrb	r3, [r7, #31]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	3301      	adds	r3, #1
 800214c:	3320      	adds	r3, #32
 800214e:	443b      	add	r3, r7
 8002150:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	b29b      	uxth	r3, r3
 8002158:	7ffa      	ldrb	r2, [r7, #31]
 800215a:	0052      	lsls	r2, r2, #1
 800215c:	3220      	adds	r2, #32
 800215e:	443a      	add	r2, r7
 8002160:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002164:	4413      	add	r3, r2
 8002166:	b29a      	uxth	r2, r3
 8002168:	7ffb      	ldrb	r3, [r7, #31]
 800216a:	b212      	sxth	r2, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	3320      	adds	r3, #32
 8002170:	443b      	add	r3, r7
 8002172:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002176:	7ffb      	ldrb	r3, [r7, #31]
 8002178:	3301      	adds	r3, #1
 800217a:	77fb      	strb	r3, [r7, #31]
 800217c:	7ffb      	ldrb	r3, [r7, #31]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d9e1      	bls.n	8002146 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002182:	7dfb      	ldrb	r3, [r7, #23]
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	2b0c      	cmp	r3, #12
 800218a:	d829      	bhi.n	80021e0 <LSM6DSL_AccReadXYZ+0xd0>
 800218c:	a201      	add	r2, pc, #4	@ (adr r2, 8002194 <LSM6DSL_AccReadXYZ+0x84>)
 800218e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002192:	bf00      	nop
 8002194:	080021c9 	.word	0x080021c9
 8002198:	080021e1 	.word	0x080021e1
 800219c:	080021e1 	.word	0x080021e1
 80021a0:	080021e1 	.word	0x080021e1
 80021a4:	080021db 	.word	0x080021db
 80021a8:	080021e1 	.word	0x080021e1
 80021ac:	080021e1 	.word	0x080021e1
 80021b0:	080021e1 	.word	0x080021e1
 80021b4:	080021cf 	.word	0x080021cf
 80021b8:	080021e1 	.word	0x080021e1
 80021bc:	080021e1 	.word	0x080021e1
 80021c0:	080021e1 	.word	0x080021e1
 80021c4:	080021d5 	.word	0x080021d5
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80021c8:	4b18      	ldr	r3, [pc, #96]	@ (800222c <LSM6DSL_AccReadXYZ+0x11c>)
 80021ca:	61bb      	str	r3, [r7, #24]
    break;
 80021cc:	e008      	b.n	80021e0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80021ce:	4b18      	ldr	r3, [pc, #96]	@ (8002230 <LSM6DSL_AccReadXYZ+0x120>)
 80021d0:	61bb      	str	r3, [r7, #24]
    break;
 80021d2:	e005      	b.n	80021e0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <LSM6DSL_AccReadXYZ+0x124>)
 80021d6:	61bb      	str	r3, [r7, #24]
    break;
 80021d8:	e002      	b.n	80021e0 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80021da:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <LSM6DSL_AccReadXYZ+0x128>)
 80021dc:	61bb      	str	r3, [r7, #24]
    break;    
 80021de:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80021e0:	2300      	movs	r3, #0
 80021e2:	77fb      	strb	r3, [r7, #31]
 80021e4:	e01a      	b.n	800221c <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80021e6:	7ffb      	ldrb	r3, [r7, #31]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	3320      	adds	r3, #32
 80021ec:	443b      	add	r3, r7
 80021ee:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80021fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002202:	7ffb      	ldrb	r3, [r7, #31]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800220e:	ee17 2a90 	vmov	r2, s15
 8002212:	b212      	sxth	r2, r2
 8002214:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002216:	7ffb      	ldrb	r3, [r7, #31]
 8002218:	3301      	adds	r3, #1
 800221a:	77fb      	strb	r3, [r7, #31]
 800221c:	7ffb      	ldrb	r3, [r7, #31]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d9e1      	bls.n	80021e6 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8002222:	bf00      	nop
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	3d79db23 	.word	0x3d79db23
 8002230:	3df9db23 	.word	0x3df9db23
 8002234:	3e79db23 	.word	0x3e79db23
 8002238:	3ef9db23 	.word	0x3ef9db23

0800223c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002246:	2003      	movs	r0, #3
 8002248:	f000 f960 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800224c:	2000      	movs	r0, #0
 800224e:	f000 f80d 	bl	800226c <HAL_InitTick>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	71fb      	strb	r3, [r7, #7]
 800225c:	e001      	b.n	8002262 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800225e:	f7ff fba3 	bl	80019a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002262:	79fb      	ldrb	r3, [r7, #7]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002278:	4b17      	ldr	r3, [pc, #92]	@ (80022d8 <HAL_InitTick+0x6c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d023      	beq.n	80022c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002280:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <HAL_InitTick+0x70>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <HAL_InitTick+0x6c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4619      	mov	r1, r3
 800228a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800228e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f96d 	bl	8002576 <HAL_SYSTICK_Config>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10f      	bne.n	80022c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d809      	bhi.n	80022bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295
 80022b0:	f000 f937 	bl	8002522 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b4:	4a0a      	ldr	r2, [pc, #40]	@ (80022e0 <HAL_InitTick+0x74>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e007      	b.n	80022cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
 80022c0:	e004      	b.n	80022cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
 80022c6:	e001      	b.n	80022cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000070 	.word	0x20000070
 80022dc:	20000000 	.word	0x20000000
 80022e0:	2000006c 	.word	0x2000006c

080022e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022e8:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_IncTick+0x20>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b06      	ldr	r3, [pc, #24]	@ (8002308 <HAL_IncTick+0x24>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	4a04      	ldr	r2, [pc, #16]	@ (8002308 <HAL_IncTick+0x24>)
 80022f6:	6013      	str	r3, [r2, #0]
}
 80022f8:	bf00      	nop
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	20000070 	.word	0x20000070
 8002308:	200003a0 	.word	0x200003a0

0800230c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTick;
 8002310:	4b03      	ldr	r3, [pc, #12]	@ (8002320 <HAL_GetTick+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	200003a0 	.word	0x200003a0

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff ffee 	bl	800230c <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800233e:	4b0a      	ldr	r3, [pc, #40]	@ (8002368 <HAL_Delay+0x44>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffde 	bl	800230c <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
  {
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000070 	.word	0x20000070

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0c      	ldr	r3, [pc, #48]	@ (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002394:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	@ (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4907      	ldr	r1, [pc, #28]	@ (8002408 <__NVIC_EnableIRQ+0x38>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	@ (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	@ (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	@ 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	@ 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	@ (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	@ (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	@ (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff29 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff3e 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff31 	bl	80023d0 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa2 	bl	80024c8 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002590:	b480      	push	{r7}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259e:	e166      	b.n	800286e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2101      	movs	r1, #1
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f000 8158 	beq.w	8002868 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d005      	beq.n	80025d0 <HAL_GPIO_Init+0x40>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d130      	bne.n	8002632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	2203      	movs	r2, #3
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4013      	ands	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68da      	ldr	r2, [r3, #12]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002606:	2201      	movs	r2, #1
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43db      	mvns	r3, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4013      	ands	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	091b      	lsrs	r3, r3, #4
 800261c:	f003 0201 	and.w	r2, r3, #1
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	4313      	orrs	r3, r2
 800262a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b03      	cmp	r3, #3
 800263c:	d017      	beq.n	800266e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	2203      	movs	r2, #3
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43db      	mvns	r3, r3
 8002650:	693a      	ldr	r2, [r7, #16]
 8002652:	4013      	ands	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d123      	bne.n	80026c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	08da      	lsrs	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3208      	adds	r2, #8
 8002682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002686:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	220f      	movs	r2, #15
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43db      	mvns	r3, r3
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	4013      	ands	r3, r2
 800269c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	08da      	lsrs	r2, r3, #3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3208      	adds	r2, #8
 80026bc:	6939      	ldr	r1, [r7, #16]
 80026be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	2203      	movs	r2, #3
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43db      	mvns	r3, r3
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0203 	and.w	r2, r3, #3
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f000 80b2 	beq.w	8002868 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002704:	4b61      	ldr	r3, [pc, #388]	@ (800288c <HAL_GPIO_Init+0x2fc>)
 8002706:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002708:	4a60      	ldr	r2, [pc, #384]	@ (800288c <HAL_GPIO_Init+0x2fc>)
 800270a:	f043 0301 	orr.w	r3, r3, #1
 800270e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002710:	4b5e      	ldr	r3, [pc, #376]	@ (800288c <HAL_GPIO_Init+0x2fc>)
 8002712:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800271c:	4a5c      	ldr	r2, [pc, #368]	@ (8002890 <HAL_GPIO_Init+0x300>)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	089b      	lsrs	r3, r3, #2
 8002722:	3302      	adds	r3, #2
 8002724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002728:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	220f      	movs	r2, #15
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002746:	d02b      	beq.n	80027a0 <HAL_GPIO_Init+0x210>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a52      	ldr	r2, [pc, #328]	@ (8002894 <HAL_GPIO_Init+0x304>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d025      	beq.n	800279c <HAL_GPIO_Init+0x20c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a51      	ldr	r2, [pc, #324]	@ (8002898 <HAL_GPIO_Init+0x308>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d01f      	beq.n	8002798 <HAL_GPIO_Init+0x208>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a50      	ldr	r2, [pc, #320]	@ (800289c <HAL_GPIO_Init+0x30c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d019      	beq.n	8002794 <HAL_GPIO_Init+0x204>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a4f      	ldr	r2, [pc, #316]	@ (80028a0 <HAL_GPIO_Init+0x310>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d013      	beq.n	8002790 <HAL_GPIO_Init+0x200>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	4a4e      	ldr	r2, [pc, #312]	@ (80028a4 <HAL_GPIO_Init+0x314>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d00d      	beq.n	800278c <HAL_GPIO_Init+0x1fc>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a4d      	ldr	r2, [pc, #308]	@ (80028a8 <HAL_GPIO_Init+0x318>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d007      	beq.n	8002788 <HAL_GPIO_Init+0x1f8>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a4c      	ldr	r2, [pc, #304]	@ (80028ac <HAL_GPIO_Init+0x31c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d101      	bne.n	8002784 <HAL_GPIO_Init+0x1f4>
 8002780:	2307      	movs	r3, #7
 8002782:	e00e      	b.n	80027a2 <HAL_GPIO_Init+0x212>
 8002784:	2308      	movs	r3, #8
 8002786:	e00c      	b.n	80027a2 <HAL_GPIO_Init+0x212>
 8002788:	2306      	movs	r3, #6
 800278a:	e00a      	b.n	80027a2 <HAL_GPIO_Init+0x212>
 800278c:	2305      	movs	r3, #5
 800278e:	e008      	b.n	80027a2 <HAL_GPIO_Init+0x212>
 8002790:	2304      	movs	r3, #4
 8002792:	e006      	b.n	80027a2 <HAL_GPIO_Init+0x212>
 8002794:	2303      	movs	r3, #3
 8002796:	e004      	b.n	80027a2 <HAL_GPIO_Init+0x212>
 8002798:	2302      	movs	r3, #2
 800279a:	e002      	b.n	80027a2 <HAL_GPIO_Init+0x212>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <HAL_GPIO_Init+0x212>
 80027a0:	2300      	movs	r3, #0
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	f002 0203 	and.w	r2, r2, #3
 80027a8:	0092      	lsls	r2, r2, #2
 80027aa:	4093      	lsls	r3, r2
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80027b2:	4937      	ldr	r1, [pc, #220]	@ (8002890 <HAL_GPIO_Init+0x300>)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	089b      	lsrs	r3, r3, #2
 80027b8:	3302      	adds	r3, #2
 80027ba:	693a      	ldr	r2, [r7, #16]
 80027bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027c0:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <HAL_GPIO_Init+0x320>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	43db      	mvns	r3, r3
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027e4:	4a32      	ldr	r2, [pc, #200]	@ (80028b0 <HAL_GPIO_Init+0x320>)
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ea:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <HAL_GPIO_Init+0x320>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	43db      	mvns	r3, r3
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	4013      	ands	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002806:	693a      	ldr	r2, [r7, #16]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800280e:	4a28      	ldr	r2, [pc, #160]	@ (80028b0 <HAL_GPIO_Init+0x320>)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002814:	4b26      	ldr	r3, [pc, #152]	@ (80028b0 <HAL_GPIO_Init+0x320>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	43db      	mvns	r3, r3
 800281e:	693a      	ldr	r2, [r7, #16]
 8002820:	4013      	ands	r3, r2
 8002822:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002838:	4a1d      	ldr	r2, [pc, #116]	@ (80028b0 <HAL_GPIO_Init+0x320>)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800283e:	4b1c      	ldr	r3, [pc, #112]	@ (80028b0 <HAL_GPIO_Init+0x320>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002862:	4a13      	ldr	r2, [pc, #76]	@ (80028b0 <HAL_GPIO_Init+0x320>)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	3301      	adds	r3, #1
 800286c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	f47f ae91 	bne.w	80025a0 <HAL_GPIO_Init+0x10>
  }
}
 800287e:	bf00      	nop
 8002880:	bf00      	nop
 8002882:	371c      	adds	r7, #28
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	40021000 	.word	0x40021000
 8002890:	40010000 	.word	0x40010000
 8002894:	48000400 	.word	0x48000400
 8002898:	48000800 	.word	0x48000800
 800289c:	48000c00 	.word	0x48000c00
 80028a0:	48001000 	.word	0x48001000
 80028a4:	48001400 	.word	0x48001400
 80028a8:	48001800 	.word	0x48001800
 80028ac:	48001c00 	.word	0x48001c00
 80028b0:	40010400 	.word	0x40010400

080028b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80028c2:	e0c9      	b.n	8002a58 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80028c4:	2201      	movs	r2, #1
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4013      	ands	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80bc 	beq.w	8002a52 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80028da:	4a66      	ldr	r2, [pc, #408]	@ (8002a74 <HAL_GPIO_DeInit+0x1c0>)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4013      	ands	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002902:	d02b      	beq.n	800295c <HAL_GPIO_DeInit+0xa8>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a5c      	ldr	r2, [pc, #368]	@ (8002a78 <HAL_GPIO_DeInit+0x1c4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d025      	beq.n	8002958 <HAL_GPIO_DeInit+0xa4>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a7c <HAL_GPIO_DeInit+0x1c8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d01f      	beq.n	8002954 <HAL_GPIO_DeInit+0xa0>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a5a      	ldr	r2, [pc, #360]	@ (8002a80 <HAL_GPIO_DeInit+0x1cc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d019      	beq.n	8002950 <HAL_GPIO_DeInit+0x9c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a59      	ldr	r2, [pc, #356]	@ (8002a84 <HAL_GPIO_DeInit+0x1d0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d013      	beq.n	800294c <HAL_GPIO_DeInit+0x98>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a58      	ldr	r2, [pc, #352]	@ (8002a88 <HAL_GPIO_DeInit+0x1d4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d00d      	beq.n	8002948 <HAL_GPIO_DeInit+0x94>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a57      	ldr	r2, [pc, #348]	@ (8002a8c <HAL_GPIO_DeInit+0x1d8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d007      	beq.n	8002944 <HAL_GPIO_DeInit+0x90>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a56      	ldr	r2, [pc, #344]	@ (8002a90 <HAL_GPIO_DeInit+0x1dc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d101      	bne.n	8002940 <HAL_GPIO_DeInit+0x8c>
 800293c:	2307      	movs	r3, #7
 800293e:	e00e      	b.n	800295e <HAL_GPIO_DeInit+0xaa>
 8002940:	2308      	movs	r3, #8
 8002942:	e00c      	b.n	800295e <HAL_GPIO_DeInit+0xaa>
 8002944:	2306      	movs	r3, #6
 8002946:	e00a      	b.n	800295e <HAL_GPIO_DeInit+0xaa>
 8002948:	2305      	movs	r3, #5
 800294a:	e008      	b.n	800295e <HAL_GPIO_DeInit+0xaa>
 800294c:	2304      	movs	r3, #4
 800294e:	e006      	b.n	800295e <HAL_GPIO_DeInit+0xaa>
 8002950:	2303      	movs	r3, #3
 8002952:	e004      	b.n	800295e <HAL_GPIO_DeInit+0xaa>
 8002954:	2302      	movs	r3, #2
 8002956:	e002      	b.n	800295e <HAL_GPIO_DeInit+0xaa>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_GPIO_DeInit+0xaa>
 800295c:	2300      	movs	r3, #0
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	f002 0203 	and.w	r2, r2, #3
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	4093      	lsls	r3, r2
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	429a      	cmp	r2, r3
 800296c:	d132      	bne.n	80029d4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800296e:	4b49      	ldr	r3, [pc, #292]	@ (8002a94 <HAL_GPIO_DeInit+0x1e0>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	4947      	ldr	r1, [pc, #284]	@ (8002a94 <HAL_GPIO_DeInit+0x1e0>)
 8002978:	4013      	ands	r3, r2
 800297a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800297c:	4b45      	ldr	r3, [pc, #276]	@ (8002a94 <HAL_GPIO_DeInit+0x1e0>)
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	4943      	ldr	r1, [pc, #268]	@ (8002a94 <HAL_GPIO_DeInit+0x1e0>)
 8002986:	4013      	ands	r3, r2
 8002988:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800298a:	4b42      	ldr	r3, [pc, #264]	@ (8002a94 <HAL_GPIO_DeInit+0x1e0>)
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	43db      	mvns	r3, r3
 8002992:	4940      	ldr	r1, [pc, #256]	@ (8002a94 <HAL_GPIO_DeInit+0x1e0>)
 8002994:	4013      	ands	r3, r2
 8002996:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002998:	4b3e      	ldr	r3, [pc, #248]	@ (8002a94 <HAL_GPIO_DeInit+0x1e0>)
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	493c      	ldr	r1, [pc, #240]	@ (8002a94 <HAL_GPIO_DeInit+0x1e0>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	220f      	movs	r2, #15
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80029b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a74 <HAL_GPIO_DeInit+0x1c0>)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	3302      	adds	r3, #2
 80029be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	43da      	mvns	r2, r3
 80029c6:	482b      	ldr	r0, [pc, #172]	@ (8002a74 <HAL_GPIO_DeInit+0x1c0>)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	400a      	ands	r2, r1
 80029ce:	3302      	adds	r3, #2
 80029d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	2103      	movs	r1, #3
 80029de:	fa01 f303 	lsl.w	r3, r1, r3
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	08da      	lsrs	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3208      	adds	r2, #8
 80029f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	220f      	movs	r2, #15
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	08d2      	lsrs	r2, r2, #3
 8002a08:	4019      	ands	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	3208      	adds	r2, #8
 8002a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	2103      	movs	r1, #3
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa01 f303 	lsl.w	r3, r1, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	401a      	ands	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	2103      	movs	r1, #3
 8002a46:	fa01 f303 	lsl.w	r3, r1, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	401a      	ands	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3301      	adds	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f47f af2f 	bne.w	80028c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	40010000 	.word	0x40010000
 8002a78:	48000400 	.word	0x48000400
 8002a7c:	48000800 	.word	0x48000800
 8002a80:	48000c00 	.word	0x48000c00
 8002a84:	48001000 	.word	0x48001000
 8002a88:	48001400 	.word	0x48001400
 8002a8c:	48001800 	.word	0x48001800
 8002a90:	48001c00 	.word	0x48001c00
 8002a94:	40010400 	.word	0x40010400

08002a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	460b      	mov	r3, r1
 8002aa2:	807b      	strh	r3, [r7, #2]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aa8:	787b      	ldrb	r3, [r7, #1]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002aae:	887a      	ldrh	r2, [r7, #2]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ab4:	e002      	b.n	8002abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ab6:	887a      	ldrh	r2, [r7, #2]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ad2:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad4:	695a      	ldr	r2, [r3, #20]
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d006      	beq.n	8002aec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ade:	4a05      	ldr	r2, [pc, #20]	@ (8002af4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ae4:	88fb      	ldrh	r3, [r7, #6]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f806 	bl	8002af8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40010400 	.word	0x40010400

08002af8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e08d      	b.n	8002c3c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d106      	bne.n	8002b3a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fe ff5b 	bl	80019f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2224      	movs	r2, #36	@ 0x24
 8002b3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d107      	bne.n	8002b88 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	e006      	b.n	8002b96 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002b94:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d108      	bne.n	8002bb0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	e007      	b.n	8002bc0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bd2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	68da      	ldr	r2, [r3, #12]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002be2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69d9      	ldr	r1, [r3, #28]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1a      	ldr	r2, [r3, #32]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e021      	b.n	8002c9a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2224      	movs	r2, #36	@ 0x24
 8002c5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0201 	bic.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f7fe ff1c 	bl	8001aac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b088      	sub	sp, #32
 8002ca8:	af02      	add	r7, sp, #8
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	4608      	mov	r0, r1
 8002cae:	4611      	mov	r1, r2
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	817b      	strh	r3, [r7, #10]
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	813b      	strh	r3, [r7, #8]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b20      	cmp	r3, #32
 8002cc8:	f040 80f9 	bne.w	8002ebe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <HAL_I2C_Mem_Write+0x34>
 8002cd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cde:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0ed      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d101      	bne.n	8002cf2 <HAL_I2C_Mem_Write+0x4e>
 8002cee:	2302      	movs	r3, #2
 8002cf0:	e0e6      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cfa:	f7ff fb07 	bl	800230c <HAL_GetTick>
 8002cfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2319      	movs	r3, #25
 8002d06:	2201      	movs	r2, #1
 8002d08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fac3 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0d1      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2221      	movs	r2, #33	@ 0x21
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2240      	movs	r2, #64	@ 0x40
 8002d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d44:	88f8      	ldrh	r0, [r7, #6]
 8002d46:	893a      	ldrh	r2, [r7, #8]
 8002d48:	8979      	ldrh	r1, [r7, #10]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	4603      	mov	r3, r0
 8002d54:	68f8      	ldr	r0, [r7, #12]
 8002d56:	f000 f9d3 	bl	8003100 <I2C_RequestMemoryWrite>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e0a9      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2bff      	cmp	r3, #255	@ 0xff
 8002d74:	d90e      	bls.n	8002d94 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	22ff      	movs	r2, #255	@ 0xff
 8002d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	8979      	ldrh	r1, [r7, #10]
 8002d84:	2300      	movs	r3, #0
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fc47 	bl	8003620 <I2C_TransferConfig>
 8002d92:	e00f      	b.n	8002db4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	8979      	ldrh	r1, [r7, #10]
 8002da6:	2300      	movs	r3, #0
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 fc36 	bl	8003620 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f000 fac6 	bl	800334a <I2C_WaitOnTXISFlagUntilTimeout>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e07b      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	781a      	ldrb	r2, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	1c5a      	adds	r2, r3, #1
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d034      	beq.n	8002e6c <HAL_I2C_Mem_Write+0x1c8>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d130      	bne.n	8002e6c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e10:	2200      	movs	r2, #0
 8002e12:	2180      	movs	r1, #128	@ 0x80
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 fa3f 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e04d      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	2bff      	cmp	r3, #255	@ 0xff
 8002e2c:	d90e      	bls.n	8002e4c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	22ff      	movs	r2, #255	@ 0xff
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	8979      	ldrh	r1, [r7, #10]
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fbeb 	bl	8003620 <I2C_TransferConfig>
 8002e4a:	e00f      	b.n	8002e6c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	8979      	ldrh	r1, [r7, #10]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f000 fbda 	bl	8003620 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d19e      	bne.n	8002db4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 faac 	bl	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e01a      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec8 <HAL_I2C_Mem_Write+0x224>)
 8002e9e:	400b      	ands	r3, r1
 8002ea0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	e000      	b.n	8002ec0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	fe00e800 	.word	0xfe00e800

08002ecc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	817b      	strh	r3, [r7, #10]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	813b      	strh	r3, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	f040 80fd 	bne.w	80030ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_I2C_Mem_Read+0x34>
 8002efa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d105      	bne.n	8002f0c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f06:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0f1      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d101      	bne.n	8002f1a <HAL_I2C_Mem_Read+0x4e>
 8002f16:	2302      	movs	r3, #2
 8002f18:	e0ea      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f22:	f7ff f9f3 	bl	800230c <HAL_GetTick>
 8002f26:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2319      	movs	r3, #25
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f9af 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0d5      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2222      	movs	r2, #34	@ 0x22
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2240      	movs	r2, #64	@ 0x40
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f6c:	88f8      	ldrh	r0, [r7, #6]
 8002f6e:	893a      	ldrh	r2, [r7, #8]
 8002f70:	8979      	ldrh	r1, [r7, #10]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f913 	bl	80031a8 <I2C_RequestMemoryRead>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e0ad      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	2bff      	cmp	r3, #255	@ 0xff
 8002f9c:	d90e      	bls.n	8002fbc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	8979      	ldrh	r1, [r7, #10]
 8002fac:	4b52      	ldr	r3, [pc, #328]	@ (80030f8 <HAL_I2C_Mem_Read+0x22c>)
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fb33 	bl	8003620 <I2C_TransferConfig>
 8002fba:	e00f      	b.n	8002fdc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	8979      	ldrh	r1, [r7, #10]
 8002fce:	4b4a      	ldr	r3, [pc, #296]	@ (80030f8 <HAL_I2C_Mem_Read+0x22c>)
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fb22 	bl	8003620 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2104      	movs	r1, #4
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 f956 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e07c      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003000:	b2d2      	uxtb	r2, r2
 8003002:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	1c5a      	adds	r2, r3, #1
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d034      	beq.n	800309c <HAL_I2C_Mem_Read+0x1d0>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	d130      	bne.n	800309c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003040:	2200      	movs	r2, #0
 8003042:	2180      	movs	r1, #128	@ 0x80
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f927 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e04d      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003058:	b29b      	uxth	r3, r3
 800305a:	2bff      	cmp	r3, #255	@ 0xff
 800305c:	d90e      	bls.n	800307c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003068:	b2da      	uxtb	r2, r3
 800306a:	8979      	ldrh	r1, [r7, #10]
 800306c:	2300      	movs	r3, #0
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fad3 	bl	8003620 <I2C_TransferConfig>
 800307a:	e00f      	b.n	800309c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800308a:	b2da      	uxtb	r2, r3
 800308c:	8979      	ldrh	r1, [r7, #10]
 800308e:	2300      	movs	r3, #0
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fac2 	bl	8003620 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d19a      	bne.n	8002fdc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	f000 f994 	bl	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e01a      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2220      	movs	r2, #32
 80030c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_I2C_Mem_Read+0x230>)
 80030ce:	400b      	ands	r3, r1
 80030d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	e000      	b.n	80030f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80030ee:	2302      	movs	r3, #2
  }
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	80002400 	.word	0x80002400
 80030fc:	fe00e800 	.word	0xfe00e800

08003100 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	817b      	strh	r3, [r7, #10]
 8003112:	460b      	mov	r3, r1
 8003114:	813b      	strh	r3, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	b2da      	uxtb	r2, r3
 800311e:	8979      	ldrh	r1, [r7, #10]
 8003120:	4b20      	ldr	r3, [pc, #128]	@ (80031a4 <I2C_RequestMemoryWrite+0xa4>)
 8003122:	9300      	str	r3, [sp, #0]
 8003124:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fa79 	bl	8003620 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	69b9      	ldr	r1, [r7, #24]
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f909 	bl	800334a <I2C_WaitOnTXISFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e02c      	b.n	800319c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d105      	bne.n	8003154 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003148:	893b      	ldrh	r3, [r7, #8]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	629a      	str	r2, [r3, #40]	@ 0x28
 8003152:	e015      	b.n	8003180 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003154:	893b      	ldrh	r3, [r7, #8]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	b29b      	uxth	r3, r3
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003162:	69fa      	ldr	r2, [r7, #28]
 8003164:	69b9      	ldr	r1, [r7, #24]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 f8ef 	bl	800334a <I2C_WaitOnTXISFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e012      	b.n	800319c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003176:	893b      	ldrh	r3, [r7, #8]
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	2200      	movs	r2, #0
 8003188:	2180      	movs	r1, #128	@ 0x80
 800318a:	68f8      	ldr	r0, [r7, #12]
 800318c:	f000 f884 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e000      	b.n	800319c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	80002000 	.word	0x80002000

080031a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b086      	sub	sp, #24
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	4608      	mov	r0, r1
 80031b2:	4611      	mov	r1, r2
 80031b4:	461a      	mov	r2, r3
 80031b6:	4603      	mov	r3, r0
 80031b8:	817b      	strh	r3, [r7, #10]
 80031ba:	460b      	mov	r3, r1
 80031bc:	813b      	strh	r3, [r7, #8]
 80031be:	4613      	mov	r3, r2
 80031c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	8979      	ldrh	r1, [r7, #10]
 80031c8:	4b20      	ldr	r3, [pc, #128]	@ (800324c <I2C_RequestMemoryRead+0xa4>)
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	2300      	movs	r3, #0
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 fa26 	bl	8003620 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f8b6 	bl	800334a <I2C_WaitOnTXISFlagUntilTimeout>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e02c      	b.n	8003242 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031ee:	893b      	ldrh	r3, [r7, #8]
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80031f8:	e015      	b.n	8003226 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031fa:	893b      	ldrh	r3, [r7, #8]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	b29b      	uxth	r3, r3
 8003200:	b2da      	uxtb	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	69b9      	ldr	r1, [r7, #24]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f89c 	bl	800334a <I2C_WaitOnTXISFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e012      	b.n	8003242 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800321c:	893b      	ldrh	r3, [r7, #8]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	2200      	movs	r2, #0
 800322e:	2140      	movs	r1, #64	@ 0x40
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f831 	bl	8003298 <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3710      	adds	r7, #16
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	80002000 	.word	0x80002000

08003250 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b02      	cmp	r3, #2
 8003264:	d103      	bne.n	800326e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	f003 0301 	and.w	r3, r3, #1
 8003278:	2b01      	cmp	r3, #1
 800327a:	d007      	beq.n	800328c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f042 0201 	orr.w	r2, r2, #1
 800328a:	619a      	str	r2, [r3, #24]
  }
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	4613      	mov	r3, r2
 80032a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032a8:	e03b      	b.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	6839      	ldr	r1, [r7, #0]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f8d6 	bl	8003460 <I2C_IsErrorOccurred>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e041      	b.n	8003342 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c4:	d02d      	beq.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c6:	f7ff f821 	bl	800230c <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d302      	bcc.n	80032dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d122      	bne.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	4013      	ands	r3, r2
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d113      	bne.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	429a      	cmp	r2, r3
 800333e:	d0b4      	beq.n	80032aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003356:	e033      	b.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f87f 	bl	8003460 <I2C_IsErrorOccurred>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e031      	b.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d025      	beq.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fe ffca 	bl	800230c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d11a      	bne.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b02      	cmp	r3, #2
 8003396:	d013      	beq.n	80033c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2220      	movs	r2, #32
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e007      	b.n	80033d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d1c4      	bne.n	8003358 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	60f8      	str	r0, [r7, #12]
 80033e0:	60b9      	str	r1, [r7, #8]
 80033e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033e4:	e02f      	b.n	8003446 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f838 	bl	8003460 <I2C_IsErrorOccurred>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e02d      	b.n	8003456 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe ff87 	bl	800230c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11a      	bne.n	8003446 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	f003 0320 	and.w	r3, r3, #32
 800341a:	2b20      	cmp	r3, #32
 800341c:	d013      	beq.n	8003446 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e007      	b.n	8003456 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b20      	cmp	r3, #32
 8003452:	d1c8      	bne.n	80033e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	@ 0x28
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	f003 0310 	and.w	r3, r3, #16
 8003488:	2b00      	cmp	r3, #0
 800348a:	d068      	beq.n	800355e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2210      	movs	r2, #16
 8003492:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003494:	e049      	b.n	800352a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d045      	beq.n	800352a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800349e:	f7fe ff35 	bl	800230c <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d302      	bcc.n	80034b4 <I2C_IsErrorOccurred+0x54>
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d13a      	bne.n	800352a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d6:	d121      	bne.n	800351c <I2C_IsErrorOccurred+0xbc>
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034de:	d01d      	beq.n	800351c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034e0:	7cfb      	ldrb	r3, [r7, #19]
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d01a      	beq.n	800351c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034f6:	f7fe ff09 	bl	800230c <HAL_GetTick>
 80034fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034fc:	e00e      	b.n	800351c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034fe:	f7fe ff05 	bl	800230c <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b19      	cmp	r3, #25
 800350a:	d907      	bls.n	800351c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	f043 0320 	orr.w	r3, r3, #32
 8003512:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800351a:	e006      	b.n	800352a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0320 	and.w	r3, r3, #32
 8003526:	2b20      	cmp	r3, #32
 8003528:	d1e9      	bne.n	80034fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b20      	cmp	r3, #32
 8003536:	d003      	beq.n	8003540 <I2C_IsErrorOccurred+0xe0>
 8003538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0aa      	beq.n	8003496 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003544:	2b00      	cmp	r3, #0
 8003546:	d103      	bne.n	8003550 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2220      	movs	r2, #32
 800354e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003580:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00b      	beq.n	80035aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003592:	6a3b      	ldr	r3, [r7, #32]
 8003594:	f043 0308 	orr.w	r3, r3, #8
 8003598:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00b      	beq.n	80035cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035b4:	6a3b      	ldr	r3, [r7, #32]
 80035b6:	f043 0302 	orr.w	r3, r3, #2
 80035ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80035cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01c      	beq.n	800360e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7ff fe3b 	bl	8003250 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6859      	ldr	r1, [r3, #4]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <I2C_IsErrorOccurred+0x1bc>)
 80035e6:	400b      	ands	r3, r1
 80035e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800360e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003612:	4618      	mov	r0, r3
 8003614:	3728      	adds	r7, #40	@ 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	fe00e800 	.word	0xfe00e800

08003620 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003620:	b480      	push	{r7}
 8003622:	b087      	sub	sp, #28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	607b      	str	r3, [r7, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	817b      	strh	r3, [r7, #10]
 800362e:	4613      	mov	r3, r2
 8003630:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003632:	897b      	ldrh	r3, [r7, #10]
 8003634:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003638:	7a7b      	ldrb	r3, [r7, #9]
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003640:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	4313      	orrs	r3, r2
 800364a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800364e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	0d5b      	lsrs	r3, r3, #21
 800365a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800365e:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <I2C_TransferConfig+0x60>)
 8003660:	430b      	orrs	r3, r1
 8003662:	43db      	mvns	r3, r3
 8003664:	ea02 0103 	and.w	r1, r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003672:	bf00      	nop
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	03ff63ff 	.word	0x03ff63ff

08003684 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b20      	cmp	r3, #32
 8003698:	d138      	bne.n	800370c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e032      	b.n	800370e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2224      	movs	r2, #36	@ 0x24
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036d6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6819      	ldr	r1, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003708:	2300      	movs	r3, #0
 800370a:	e000      	b.n	800370e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800370c:	2302      	movs	r3, #2
  }
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b20      	cmp	r3, #32
 800372e:	d139      	bne.n	80037a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800373a:	2302      	movs	r3, #2
 800373c:	e033      	b.n	80037a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2224      	movs	r2, #36	@ 0x24
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 0201 	bic.w	r2, r2, #1
 800375c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800376c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
  }
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
	...

080037b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80037b8:	4b0d      	ldr	r3, [pc, #52]	@ (80037f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c4:	d102      	bne.n	80037cc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80037c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037ca:	e00b      	b.n	80037e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80037cc:	4b08      	ldr	r3, [pc, #32]	@ (80037f0 <HAL_PWREx_GetVoltageRange+0x3c>)
 80037ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037da:	d102      	bne.n	80037e2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80037dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037e0:	e000      	b.n	80037e4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80037e2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40007000 	.word	0x40007000

080037f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d141      	bne.n	8003886 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003802:	4b4b      	ldr	r3, [pc, #300]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800380a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800380e:	d131      	bne.n	8003874 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003810:	4b47      	ldr	r3, [pc, #284]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003812:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003816:	4a46      	ldr	r2, [pc, #280]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800381c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003820:	4b43      	ldr	r3, [pc, #268]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003828:	4a41      	ldr	r2, [pc, #260]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800382e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003830:	4b40      	ldr	r3, [pc, #256]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2232      	movs	r2, #50	@ 0x32
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a3f      	ldr	r2, [pc, #252]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	0c9b      	lsrs	r3, r3, #18
 8003842:	3301      	adds	r3, #1
 8003844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003846:	e002      	b.n	800384e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	3b01      	subs	r3, #1
 800384c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800384e:	4b38      	ldr	r3, [pc, #224]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003856:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800385a:	d102      	bne.n	8003862 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f2      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003862:	4b33      	ldr	r3, [pc, #204]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386e:	d158      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e057      	b.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003874:	4b2e      	ldr	r3, [pc, #184]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003876:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800387a:	4a2d      	ldr	r2, [pc, #180]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800387c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003880:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003884:	e04d      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800388c:	d141      	bne.n	8003912 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800388e:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003896:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800389a:	d131      	bne.n	8003900 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800389c:	4b24      	ldr	r3, [pc, #144]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800389e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038a2:	4a23      	ldr	r2, [pc, #140]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ac:	4b20      	ldr	r3, [pc, #128]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80038b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80038bc:	4b1d      	ldr	r3, [pc, #116]	@ (8003934 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2232      	movs	r2, #50	@ 0x32
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003938 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	3301      	adds	r3, #1
 80038d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d2:	e002      	b.n	80038da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038da:	4b15      	ldr	r3, [pc, #84]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e6:	d102      	bne.n	80038ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f2      	bne.n	80038d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ee:	4b10      	ldr	r3, [pc, #64]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038fa:	d112      	bne.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	e011      	b.n	8003924 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003900:	4b0b      	ldr	r3, [pc, #44]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003906:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003908:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800390c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003910:	e007      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003912:	4b07      	ldr	r3, [pc, #28]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800391a:	4a05      	ldr	r2, [pc, #20]	@ (8003930 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003920:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	40007000 	.word	0x40007000
 8003934:	20000000 	.word	0x20000000
 8003938:	431bde83 	.word	0x431bde83

0800393c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d102      	bne.n	8003950 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f000 bc08 	b.w	8004160 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003950:	4b96      	ldr	r3, [pc, #600]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 030c 	and.w	r3, r3, #12
 8003958:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800395a:	4b94      	ldr	r3, [pc, #592]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0310 	and.w	r3, r3, #16
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80e4 	beq.w	8003b3a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d007      	beq.n	8003988 <HAL_RCC_OscConfig+0x4c>
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	f040 808b 	bne.w	8003a96 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2b01      	cmp	r3, #1
 8003984:	f040 8087 	bne.w	8003a96 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003988:	4b88      	ldr	r3, [pc, #544]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d005      	beq.n	80039a0 <HAL_RCC_OscConfig+0x64>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d101      	bne.n	80039a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e3df      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a1a      	ldr	r2, [r3, #32]
 80039a4:	4b81      	ldr	r3, [pc, #516]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d004      	beq.n	80039ba <HAL_RCC_OscConfig+0x7e>
 80039b0:	4b7e      	ldr	r3, [pc, #504]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039b8:	e005      	b.n	80039c6 <HAL_RCC_OscConfig+0x8a>
 80039ba:	4b7c      	ldr	r3, [pc, #496]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 80039bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d223      	bcs.n	8003a12 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 fdcc 	bl	800456c <RCC_SetFlashLatencyFromMSIRange>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e3c0      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039de:	4b73      	ldr	r3, [pc, #460]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a72      	ldr	r2, [pc, #456]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 80039e4:	f043 0308 	orr.w	r3, r3, #8
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b70      	ldr	r3, [pc, #448]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	496d      	ldr	r1, [pc, #436]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039fc:	4b6b      	ldr	r3, [pc, #428]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	021b      	lsls	r3, r3, #8
 8003a0a:	4968      	ldr	r1, [pc, #416]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	604b      	str	r3, [r1, #4]
 8003a10:	e025      	b.n	8003a5e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a12:	4b66      	ldr	r3, [pc, #408]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a65      	ldr	r2, [pc, #404]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a18:	f043 0308 	orr.w	r3, r3, #8
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4b63      	ldr	r3, [pc, #396]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	4960      	ldr	r1, [pc, #384]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a30:	4b5e      	ldr	r3, [pc, #376]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69db      	ldr	r3, [r3, #28]
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	495b      	ldr	r1, [pc, #364]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a40:	4313      	orrs	r3, r2
 8003a42:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fd8c 	bl	800456c <RCC_SetFlashLatencyFromMSIRange>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e380      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a5e:	f000 fcc1 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8003a62:	4602      	mov	r2, r0
 8003a64:	4b51      	ldr	r3, [pc, #324]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	4950      	ldr	r1, [pc, #320]	@ (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a70:	5ccb      	ldrb	r3, [r1, r3]
 8003a72:	f003 031f 	and.w	r3, r3, #31
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb4 <HAL_RCC_OscConfig+0x278>)
 8003a7c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fbf2 	bl	800226c <HAL_InitTick>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d052      	beq.n	8003b38 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
 8003a94:	e364      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d032      	beq.n	8003b04 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a9e:	4b43      	ldr	r3, [pc, #268]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a42      	ldr	r2, [pc, #264]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003aa4:	f043 0301 	orr.w	r3, r3, #1
 8003aa8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aaa:	f7fe fc2f 	bl	800230c <HAL_GetTick>
 8003aae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ab0:	e008      	b.n	8003ac4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab2:	f7fe fc2b 	bl	800230c <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d901      	bls.n	8003ac4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e34d      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ac4:	4b39      	ldr	r3, [pc, #228]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0f0      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ad0:	4b36      	ldr	r3, [pc, #216]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a35      	ldr	r2, [pc, #212]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ad6:	f043 0308 	orr.w	r3, r3, #8
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b33      	ldr	r3, [pc, #204]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4930      	ldr	r1, [pc, #192]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aee:	4b2f      	ldr	r3, [pc, #188]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	492b      	ldr	r1, [pc, #172]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	604b      	str	r3, [r1, #4]
 8003b02:	e01a      	b.n	8003b3a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b04:	4b29      	ldr	r3, [pc, #164]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a28      	ldr	r2, [pc, #160]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b0a:	f023 0301 	bic.w	r3, r3, #1
 8003b0e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b10:	f7fe fbfc 	bl	800230c <HAL_GetTick>
 8003b14:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b16:	e008      	b.n	8003b2a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b18:	f7fe fbf8 	bl	800230c <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	2b02      	cmp	r3, #2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e31a      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b2a:	4b20      	ldr	r3, [pc, #128]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f0      	bne.n	8003b18 <HAL_RCC_OscConfig+0x1dc>
 8003b36:	e000      	b.n	8003b3a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d073      	beq.n	8003c2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_OscConfig+0x21c>
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d10e      	bne.n	8003b70 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2b03      	cmp	r3, #3
 8003b56:	d10b      	bne.n	8003b70 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b58:	4b14      	ldr	r3, [pc, #80]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d063      	beq.n	8003c2c <HAL_RCC_OscConfig+0x2f0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d15f      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e2f7      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b78:	d106      	bne.n	8003b88 <HAL_RCC_OscConfig+0x24c>
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a0b      	ldr	r2, [pc, #44]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	e025      	b.n	8003bd4 <HAL_RCC_OscConfig+0x298>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b90:	d114      	bne.n	8003bbc <HAL_RCC_OscConfig+0x280>
 8003b92:	4b06      	ldr	r3, [pc, #24]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a05      	ldr	r2, [pc, #20]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b03      	ldr	r3, [pc, #12]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a02      	ldr	r2, [pc, #8]	@ (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e013      	b.n	8003bd4 <HAL_RCC_OscConfig+0x298>
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	0800a030 	.word	0x0800a030
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	2000006c 	.word	0x2000006c
 8003bbc:	4ba0      	ldr	r3, [pc, #640]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a9f      	ldr	r2, [pc, #636]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b9d      	ldr	r3, [pc, #628]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a9c      	ldr	r2, [pc, #624]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fe fb96 	bl	800230c <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fe fb92 	bl	800230c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	@ 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e2b4      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf6:	4b92      	ldr	r3, [pc, #584]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2a8>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe fb82 	bl	800230c <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fe fb7e 	bl	800230c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	@ 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e2a0      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c1e:	4b88      	ldr	r3, [pc, #544]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x2d0>
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d060      	beq.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_OscConfig+0x310>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d119      	bne.n	8003c7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d116      	bne.n	8003c7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c4c:	4b7c      	ldr	r3, [pc, #496]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_OscConfig+0x328>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e27d      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	4b76      	ldr	r3, [pc, #472]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	061b      	lsls	r3, r3, #24
 8003c72:	4973      	ldr	r1, [pc, #460]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c78:	e040      	b.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d023      	beq.n	8003cca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c82:	4b6f      	ldr	r3, [pc, #444]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6e      	ldr	r2, [pc, #440]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fe fb3d 	bl	800230c <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fe fb39 	bl	800230c <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e25b      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca8:	4b65      	ldr	r3, [pc, #404]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b62      	ldr	r3, [pc, #392]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	495f      	ldr	r1, [pc, #380]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
 8003cc8:	e018      	b.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	4b5d      	ldr	r3, [pc, #372]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5c      	ldr	r2, [pc, #368]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fe fb19 	bl	800230c <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cde:	f7fe fb15 	bl	800230c <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e237      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cf0:	4b53      	ldr	r3, [pc, #332]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d03c      	beq.n	8003d82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01c      	beq.n	8003d4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d10:	4b4b      	ldr	r3, [pc, #300]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d16:	4a4a      	ldr	r2, [pc, #296]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fe faf4 	bl	800230c <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fe faf0 	bl	800230c <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e212      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d3a:	4b41      	ldr	r3, [pc, #260]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ef      	beq.n	8003d28 <HAL_RCC_OscConfig+0x3ec>
 8003d48:	e01b      	b.n	8003d82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d50:	4a3b      	ldr	r2, [pc, #236]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fe fad7 	bl	800230c <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d62:	f7fe fad3 	bl	800230c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e1f5      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d74:	4b32      	ldr	r3, [pc, #200]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1ef      	bne.n	8003d62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80a6 	beq.w	8003edc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d94:	4b2a      	ldr	r3, [pc, #168]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	4b27      	ldr	r3, [pc, #156]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da4:	4a26      	ldr	r2, [pc, #152]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dac:	4b24      	ldr	r3, [pc, #144]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db8:	2301      	movs	r3, #1
 8003dba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbc:	4b21      	ldr	r3, [pc, #132]	@ (8003e44 <HAL_RCC_OscConfig+0x508>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d118      	bne.n	8003dfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	@ (8003e44 <HAL_RCC_OscConfig+0x508>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e44 <HAL_RCC_OscConfig+0x508>)
 8003dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd4:	f7fe fa9a 	bl	800230c <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ddc:	f7fe fa96 	bl	800230c <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e1b8      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dee:	4b15      	ldr	r3, [pc, #84]	@ (8003e44 <HAL_RCC_OscConfig+0x508>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d108      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4d8>
 8003e02:	4b0f      	ldr	r3, [pc, #60]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e08:	4a0d      	ldr	r2, [pc, #52]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e12:	e029      	b.n	8003e68 <HAL_RCC_OscConfig+0x52c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	d115      	bne.n	8003e48 <HAL_RCC_OscConfig+0x50c>
 8003e1c:	4b08      	ldr	r3, [pc, #32]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e22:	4a07      	ldr	r2, [pc, #28]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e2c:	4b04      	ldr	r3, [pc, #16]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	4a03      	ldr	r2, [pc, #12]	@ (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e3c:	e014      	b.n	8003e68 <HAL_RCC_OscConfig+0x52c>
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40007000 	.word	0x40007000
 8003e48:	4b9d      	ldr	r3, [pc, #628]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4e:	4a9c      	ldr	r2, [pc, #624]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e58:	4b99      	ldr	r3, [pc, #612]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5e:	4a98      	ldr	r2, [pc, #608]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d016      	beq.n	8003e9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fe fa4c 	bl	800230c <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fe fa48 	bl	800230c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e168      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8e:	4b8c      	ldr	r3, [pc, #560]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ed      	beq.n	8003e78 <HAL_RCC_OscConfig+0x53c>
 8003e9c:	e015      	b.n	8003eca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fe fa35 	bl	800230c <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fe fa31 	bl	800230c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e151      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ebc:	4b80      	ldr	r3, [pc, #512]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1ed      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed0:	4b7b      	ldr	r3, [pc, #492]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed4:	4a7a      	ldr	r2, [pc, #488]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003ed6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0320 	and.w	r3, r3, #32
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d03c      	beq.n	8003f62 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01c      	beq.n	8003f2a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ef0:	4b73      	ldr	r3, [pc, #460]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ef6:	4a72      	ldr	r2, [pc, #456]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f00:	f7fe fa04 	bl	800230c <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f08:	f7fe fa00 	bl	800230c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e122      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f1a:	4b69      	ldr	r3, [pc, #420]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ef      	beq.n	8003f08 <HAL_RCC_OscConfig+0x5cc>
 8003f28:	e01b      	b.n	8003f62 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f2a:	4b65      	ldr	r3, [pc, #404]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f30:	4a63      	ldr	r2, [pc, #396]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3a:	f7fe f9e7 	bl	800230c <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f42:	f7fe f9e3 	bl	800230c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e105      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f54:	4b5a      	ldr	r3, [pc, #360]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1ef      	bne.n	8003f42 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f000 80f9 	beq.w	800415e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	f040 80cf 	bne.w	8004114 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f76:	4b52      	ldr	r3, [pc, #328]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	f003 0203 	and.w	r2, r3, #3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d12c      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f94:	3b01      	subs	r3, #1
 8003f96:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d123      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fa6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d11b      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d113      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fc6:	085b      	lsrs	r3, r3, #1
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d109      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	085b      	lsrs	r3, r3, #1
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d071      	beq.n	80040c8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	2b0c      	cmp	r3, #12
 8003fe8:	d068      	beq.n	80040bc <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fea:	4b35      	ldr	r3, [pc, #212]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d105      	bne.n	8004002 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ff6:	4b32      	ldr	r3, [pc, #200]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e0ac      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004006:	4b2e      	ldr	r3, [pc, #184]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2d      	ldr	r2, [pc, #180]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 800400c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004010:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004012:	f7fe f97b 	bl	800230c <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800401a:	f7fe f977 	bl	800230c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e099      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800402c:	4b24      	ldr	r3, [pc, #144]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004038:	4b21      	ldr	r3, [pc, #132]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	4b21      	ldr	r3, [pc, #132]	@ (80040c4 <HAL_RCC_OscConfig+0x788>)
 800403e:	4013      	ands	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004048:	3a01      	subs	r2, #1
 800404a:	0112      	lsls	r2, r2, #4
 800404c:	4311      	orrs	r1, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004052:	0212      	lsls	r2, r2, #8
 8004054:	4311      	orrs	r1, r2
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800405a:	0852      	lsrs	r2, r2, #1
 800405c:	3a01      	subs	r2, #1
 800405e:	0552      	lsls	r2, r2, #21
 8004060:	4311      	orrs	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004066:	0852      	lsrs	r2, r2, #1
 8004068:	3a01      	subs	r2, #1
 800406a:	0652      	lsls	r2, r2, #25
 800406c:	4311      	orrs	r1, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004072:	06d2      	lsls	r2, r2, #27
 8004074:	430a      	orrs	r2, r1
 8004076:	4912      	ldr	r1, [pc, #72]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8004078:	4313      	orrs	r3, r2
 800407a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800407c:	4b10      	ldr	r3, [pc, #64]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a0f      	ldr	r2, [pc, #60]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 8004082:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004086:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004088:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a0c      	ldr	r2, [pc, #48]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 800408e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004092:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004094:	f7fe f93a 	bl	800230c <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409c:	f7fe f936 	bl	800230c <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e058      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ae:	4b04      	ldr	r3, [pc, #16]	@ (80040c0 <HAL_RCC_OscConfig+0x784>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d0f0      	beq.n	800409c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ba:	e050      	b.n	800415e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e04f      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
 80040c0:	40021000 	.word	0x40021000
 80040c4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040c8:	4b27      	ldr	r3, [pc, #156]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d144      	bne.n	800415e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040d4:	4b24      	ldr	r3, [pc, #144]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a23      	ldr	r2, [pc, #140]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 80040da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040de:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040e0:	4b21      	ldr	r3, [pc, #132]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	4a20      	ldr	r2, [pc, #128]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 80040e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040ec:	f7fe f90e 	bl	800230c <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fe f90a 	bl	800230c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e02c      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004106:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d0f0      	beq.n	80040f4 <HAL_RCC_OscConfig+0x7b8>
 8004112:	e024      	b.n	800415e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004114:	69bb      	ldr	r3, [r7, #24]
 8004116:	2b0c      	cmp	r3, #12
 8004118:	d01f      	beq.n	800415a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800411a:	4b13      	ldr	r3, [pc, #76]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a12      	ldr	r2, [pc, #72]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 8004120:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004126:	f7fe f8f1 	bl	800230c <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412e:	f7fe f8ed 	bl	800230c <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e00f      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004140:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 800414e:	68da      	ldr	r2, [r3, #12]
 8004150:	4905      	ldr	r1, [pc, #20]	@ (8004168 <HAL_RCC_OscConfig+0x82c>)
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_RCC_OscConfig+0x830>)
 8004154:	4013      	ands	r3, r2
 8004156:	60cb      	str	r3, [r1, #12]
 8004158:	e001      	b.n	800415e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e000      	b.n	8004160 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	feeefffc 	.word	0xfeeefffc

08004170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800417a:	2300      	movs	r3, #0
 800417c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e11d      	b.n	80043c4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004188:	4b90      	ldr	r3, [pc, #576]	@ (80043cc <HAL_RCC_ClockConfig+0x25c>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d910      	bls.n	80041b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b8d      	ldr	r3, [pc, #564]	@ (80043cc <HAL_RCC_ClockConfig+0x25c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 020f 	bic.w	r2, r3, #15
 800419e:	498b      	ldr	r1, [pc, #556]	@ (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b89      	ldr	r3, [pc, #548]	@ (80043cc <HAL_RCC_ClockConfig+0x25c>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e105      	b.n	80043c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d010      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	4b81      	ldr	r3, [pc, #516]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d908      	bls.n	80041e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041d4:	4b7e      	ldr	r3, [pc, #504]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	497b      	ldr	r1, [pc, #492]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d079      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d11e      	bne.n	8004238 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041fa:	4b75      	ldr	r3, [pc, #468]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e0dc      	b.n	80043c4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800420a:	f000 fa09 	bl	8004620 <RCC_GetSysClockFreqFromPLLSource>
 800420e:	4603      	mov	r3, r0
 8004210:	4a70      	ldr	r2, [pc, #448]	@ (80043d4 <HAL_RCC_ClockConfig+0x264>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d946      	bls.n	80042a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004216:	4b6e      	ldr	r3, [pc, #440]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d140      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004222:	4b6b      	ldr	r3, [pc, #428]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800422a:	4a69      	ldr	r2, [pc, #420]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800422c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004230:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004232:	2380      	movs	r3, #128	@ 0x80
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	e035      	b.n	80042a4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d107      	bne.n	8004250 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004240:	4b63      	ldr	r3, [pc, #396]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d115      	bne.n	8004278 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0b9      	b.n	80043c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004258:	4b5d      	ldr	r3, [pc, #372]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e0ad      	b.n	80043c4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004268:	4b59      	ldr	r3, [pc, #356]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e0a5      	b.n	80043c4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004278:	f000 f8b4 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 800427c:	4603      	mov	r3, r0
 800427e:	4a55      	ldr	r2, [pc, #340]	@ (80043d4 <HAL_RCC_ClockConfig+0x264>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d90f      	bls.n	80042a4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004284:	4b52      	ldr	r3, [pc, #328]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d109      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004290:	4b4f      	ldr	r3, [pc, #316]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004298:	4a4d      	ldr	r2, [pc, #308]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800429a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800429e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042a0:	2380      	movs	r3, #128	@ 0x80
 80042a2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042a4:	4b4a      	ldr	r3, [pc, #296]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f023 0203 	bic.w	r2, r3, #3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4947      	ldr	r1, [pc, #284]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042b6:	f7fe f829 	bl	800230c <HAL_GetTick>
 80042ba:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042bc:	e00a      	b.n	80042d4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042be:	f7fe f825 	bl	800230c <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e077      	b.n	80043c4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d4:	4b3e      	ldr	r3, [pc, #248]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f003 020c 	and.w	r2, r3, #12
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d1eb      	bne.n	80042be <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2b80      	cmp	r3, #128	@ 0x80
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80042ec:	4b38      	ldr	r3, [pc, #224]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	4a37      	ldr	r2, [pc, #220]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 80042f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042f6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d010      	beq.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	4b31      	ldr	r3, [pc, #196]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004310:	429a      	cmp	r2, r3
 8004312:	d208      	bcs.n	8004326 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004314:	4b2e      	ldr	r3, [pc, #184]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	492b      	ldr	r1, [pc, #172]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004326:	4b29      	ldr	r3, [pc, #164]	@ (80043cc <HAL_RCC_ClockConfig+0x25c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 030f 	and.w	r3, r3, #15
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d210      	bcs.n	8004356 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004334:	4b25      	ldr	r3, [pc, #148]	@ (80043cc <HAL_RCC_ClockConfig+0x25c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f023 020f 	bic.w	r2, r3, #15
 800433c:	4923      	ldr	r1, [pc, #140]	@ (80043cc <HAL_RCC_ClockConfig+0x25c>)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	4313      	orrs	r3, r2
 8004342:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004344:	4b21      	ldr	r3, [pc, #132]	@ (80043cc <HAL_RCC_ClockConfig+0x25c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d001      	beq.n	8004356 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e036      	b.n	80043c4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0304 	and.w	r3, r3, #4
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004362:	4b1b      	ldr	r3, [pc, #108]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	4918      	ldr	r1, [pc, #96]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d009      	beq.n	8004394 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004380:	4b13      	ldr	r3, [pc, #76]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4910      	ldr	r1, [pc, #64]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 8004390:	4313      	orrs	r3, r2
 8004392:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004394:	f000 f826 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8004398:	4602      	mov	r2, r0
 800439a:	4b0d      	ldr	r3, [pc, #52]	@ (80043d0 <HAL_RCC_ClockConfig+0x260>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	091b      	lsrs	r3, r3, #4
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	490c      	ldr	r1, [pc, #48]	@ (80043d8 <HAL_RCC_ClockConfig+0x268>)
 80043a6:	5ccb      	ldrb	r3, [r1, r3]
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	fa22 f303 	lsr.w	r3, r2, r3
 80043b0:	4a0a      	ldr	r2, [pc, #40]	@ (80043dc <HAL_RCC_ClockConfig+0x26c>)
 80043b2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043b4:	4b0a      	ldr	r3, [pc, #40]	@ (80043e0 <HAL_RCC_ClockConfig+0x270>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7fd ff57 	bl	800226c <HAL_InitTick>
 80043be:	4603      	mov	r3, r0
 80043c0:	73fb      	strb	r3, [r7, #15]

  return status;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40022000 	.word	0x40022000
 80043d0:	40021000 	.word	0x40021000
 80043d4:	04c4b400 	.word	0x04c4b400
 80043d8:	0800a030 	.word	0x0800a030
 80043dc:	20000000 	.word	0x20000000
 80043e0:	2000006c 	.word	0x2000006c

080043e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b089      	sub	sp, #36	@ 0x24
 80043e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f2:	4b3e      	ldr	r3, [pc, #248]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x108>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043fc:	4b3b      	ldr	r3, [pc, #236]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x108>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x34>
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d121      	bne.n	8004456 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d11e      	bne.n	8004456 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004418:	4b34      	ldr	r3, [pc, #208]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x108>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d107      	bne.n	8004434 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004424:	4b31      	ldr	r3, [pc, #196]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004426:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800442a:	0a1b      	lsrs	r3, r3, #8
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	61fb      	str	r3, [r7, #28]
 8004432:	e005      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004434:	4b2d      	ldr	r3, [pc, #180]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004440:	4a2b      	ldr	r2, [pc, #172]	@ (80044f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004448:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10d      	bne.n	800446c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004454:	e00a      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b04      	cmp	r3, #4
 800445a:	d102      	bne.n	8004462 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800445c:	4b25      	ldr	r3, [pc, #148]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	e004      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	2b08      	cmp	r3, #8
 8004466:	d101      	bne.n	800446c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004468:	4b23      	ldr	r3, [pc, #140]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800446a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b0c      	cmp	r3, #12
 8004470:	d134      	bne.n	80044dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004472:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x108>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 0303 	and.w	r3, r3, #3
 800447a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d003      	beq.n	800448a <HAL_RCC_GetSysClockFreq+0xa6>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b03      	cmp	r3, #3
 8004486:	d003      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0xac>
 8004488:	e005      	b.n	8004496 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800448a:	4b1a      	ldr	r3, [pc, #104]	@ (80044f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800448c:	617b      	str	r3, [r7, #20]
      break;
 800448e:	e005      	b.n	800449c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004490:	4b19      	ldr	r3, [pc, #100]	@ (80044f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004492:	617b      	str	r3, [r7, #20]
      break;
 8004494:	e002      	b.n	800449c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	617b      	str	r3, [r7, #20]
      break;
 800449a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800449c:	4b13      	ldr	r3, [pc, #76]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x108>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	091b      	lsrs	r3, r3, #4
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	3301      	adds	r3, #1
 80044a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044aa:	4b10      	ldr	r3, [pc, #64]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x108>)
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	fb03 f202 	mul.w	r2, r3, r2
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044c2:	4b0a      	ldr	r3, [pc, #40]	@ (80044ec <HAL_RCC_GetSysClockFreq+0x108>)
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	0e5b      	lsrs	r3, r3, #25
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	3301      	adds	r3, #1
 80044ce:	005b      	lsls	r3, r3, #1
 80044d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044dc:	69bb      	ldr	r3, [r7, #24]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3724      	adds	r7, #36	@ 0x24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40021000 	.word	0x40021000
 80044f0:	0800a048 	.word	0x0800a048
 80044f4:	00f42400 	.word	0x00f42400
 80044f8:	007a1200 	.word	0x007a1200

080044fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004500:	4b03      	ldr	r3, [pc, #12]	@ (8004510 <HAL_RCC_GetHCLKFreq+0x14>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000000 	.word	0x20000000

08004514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004518:	f7ff fff0 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0a1b      	lsrs	r3, r3, #8
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4904      	ldr	r1, [pc, #16]	@ (800453c <HAL_RCC_GetPCLK1Freq+0x28>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004534:	4618      	mov	r0, r3
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40021000 	.word	0x40021000
 800453c:	0800a040 	.word	0x0800a040

08004540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004544:	f7ff ffda 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004548:	4602      	mov	r2, r0
 800454a:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	0adb      	lsrs	r3, r3, #11
 8004550:	f003 0307 	and.w	r3, r3, #7
 8004554:	4904      	ldr	r1, [pc, #16]	@ (8004568 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004556:	5ccb      	ldrb	r3, [r1, r3]
 8004558:	f003 031f 	and.w	r3, r3, #31
 800455c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004560:	4618      	mov	r0, r3
 8004562:	bd80      	pop	{r7, pc}
 8004564:	40021000 	.word	0x40021000
 8004568:	0800a040 	.word	0x0800a040

0800456c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004574:	2300      	movs	r3, #0
 8004576:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004578:	4b27      	ldr	r3, [pc, #156]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800457c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004584:	f7ff f916 	bl	80037b4 <HAL_PWREx_GetVoltageRange>
 8004588:	6178      	str	r0, [r7, #20]
 800458a:	e014      	b.n	80045b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800458c:	4b22      	ldr	r3, [pc, #136]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004590:	4a21      	ldr	r2, [pc, #132]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004596:	6593      	str	r3, [r2, #88]	@ 0x58
 8004598:	4b1f      	ldr	r3, [pc, #124]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800459a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800459c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045a4:	f7ff f906 	bl	80037b4 <HAL_PWREx_GetVoltageRange>
 80045a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ae:	4a1a      	ldr	r2, [pc, #104]	@ (8004618 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80045b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045bc:	d10b      	bne.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b80      	cmp	r3, #128	@ 0x80
 80045c2:	d913      	bls.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80045c8:	d902      	bls.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045ca:	2302      	movs	r3, #2
 80045cc:	613b      	str	r3, [r7, #16]
 80045ce:	e00d      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045d0:	2301      	movs	r3, #1
 80045d2:	613b      	str	r3, [r7, #16]
 80045d4:	e00a      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80045da:	d902      	bls.n	80045e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80045dc:	2302      	movs	r3, #2
 80045de:	613b      	str	r3, [r7, #16]
 80045e0:	e004      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2b70      	cmp	r3, #112	@ 0x70
 80045e6:	d101      	bne.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045e8:	2301      	movs	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045ec:	4b0b      	ldr	r3, [pc, #44]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f023 020f 	bic.w	r2, r3, #15
 80045f4:	4909      	ldr	r1, [pc, #36]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045fc:	4b07      	ldr	r3, [pc, #28]	@ (800461c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 030f 	and.w	r3, r3, #15
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	429a      	cmp	r2, r3
 8004608:	d001      	beq.n	800460e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3718      	adds	r7, #24
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	40021000 	.word	0x40021000
 800461c:	40022000 	.word	0x40022000

08004620 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004626:	4b2d      	ldr	r3, [pc, #180]	@ (80046dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b03      	cmp	r3, #3
 8004634:	d00b      	beq.n	800464e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b03      	cmp	r3, #3
 800463a:	d825      	bhi.n	8004688 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d008      	beq.n	8004654 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d11f      	bne.n	8004688 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004648:	4b25      	ldr	r3, [pc, #148]	@ (80046e0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800464a:	613b      	str	r3, [r7, #16]
    break;
 800464c:	e01f      	b.n	800468e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800464e:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004650:	613b      	str	r3, [r7, #16]
    break;
 8004652:	e01c      	b.n	800468e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004654:	4b21      	ldr	r3, [pc, #132]	@ (80046dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0308 	and.w	r3, r3, #8
 800465c:	2b00      	cmp	r3, #0
 800465e:	d107      	bne.n	8004670 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004660:	4b1e      	ldr	r3, [pc, #120]	@ (80046dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004662:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e005      	b.n	800467c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004670:	4b1a      	ldr	r3, [pc, #104]	@ (80046dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800467c:	4a1a      	ldr	r2, [pc, #104]	@ (80046e8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004684:	613b      	str	r3, [r7, #16]
    break;
 8004686:	e002      	b.n	800468e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	613b      	str	r3, [r7, #16]
    break;
 800468c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800468e:	4b13      	ldr	r3, [pc, #76]	@ (80046dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	091b      	lsrs	r3, r3, #4
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	3301      	adds	r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800469c:	4b0f      	ldr	r3, [pc, #60]	@ (80046dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	fb03 f202 	mul.w	r2, r3, r2
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046b4:	4b09      	ldr	r3, [pc, #36]	@ (80046dc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0e5b      	lsrs	r3, r3, #25
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	3301      	adds	r3, #1
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80046ce:	683b      	ldr	r3, [r7, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	40021000 	.word	0x40021000
 80046e0:	00f42400 	.word	0x00f42400
 80046e4:	007a1200 	.word	0x007a1200
 80046e8:	0800a048 	.word	0x0800a048

080046ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046f4:	2300      	movs	r3, #0
 80046f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046f8:	2300      	movs	r3, #0
 80046fa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004704:	2b00      	cmp	r3, #0
 8004706:	d040      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800470c:	2b80      	cmp	r3, #128	@ 0x80
 800470e:	d02a      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004710:	2b80      	cmp	r3, #128	@ 0x80
 8004712:	d825      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004714:	2b60      	cmp	r3, #96	@ 0x60
 8004716:	d026      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004718:	2b60      	cmp	r3, #96	@ 0x60
 800471a:	d821      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800471c:	2b40      	cmp	r3, #64	@ 0x40
 800471e:	d006      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	d81d      	bhi.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004728:	2b20      	cmp	r3, #32
 800472a:	d010      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x62>
 800472c:	e018      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800472e:	4b89      	ldr	r3, [pc, #548]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	4a88      	ldr	r2, [pc, #544]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004738:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800473a:	e015      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	2100      	movs	r1, #0
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fb02 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800474c:	e00c      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3320      	adds	r3, #32
 8004752:	2100      	movs	r1, #0
 8004754:	4618      	mov	r0, r3
 8004756:	f000 fbed 	bl	8004f34 <RCCEx_PLLSAI2_Config>
 800475a:	4603      	mov	r3, r0
 800475c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800475e:	e003      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	74fb      	strb	r3, [r7, #19]
      break;
 8004764:	e000      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004766:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004768:	7cfb      	ldrb	r3, [r7, #19]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800476e:	4b79      	ldr	r3, [pc, #484]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004770:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004774:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800477c:	4975      	ldr	r1, [pc, #468]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004784:	e001      	b.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d047      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800479a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800479e:	d030      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047a4:	d82a      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047aa:	d02a      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80047ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047b0:	d824      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047b6:	d008      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0xde>
 80047b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047bc:	d81e      	bhi.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x110>
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c6:	d010      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80047c8:	e018      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047ca:	4b62      	ldr	r3, [pc, #392]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	4a61      	ldr	r2, [pc, #388]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80047d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047d6:	e015      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	3304      	adds	r3, #4
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 fab4 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 80047e4:	4603      	mov	r3, r0
 80047e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047e8:	e00c      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	3320      	adds	r3, #32
 80047ee:	2100      	movs	r1, #0
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fb9f 	bl	8004f34 <RCCEx_PLLSAI2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047fa:	e003      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	74fb      	strb	r3, [r7, #19]
      break;
 8004800:	e000      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10b      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800480a:	4b52      	ldr	r3, [pc, #328]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800480c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004810:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004818:	494e      	ldr	r1, [pc, #312]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004820:	e001      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	7cfb      	ldrb	r3, [r7, #19]
 8004824:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 809f 	beq.w	8004972 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004834:	2300      	movs	r3, #0
 8004836:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004838:	4b46      	ldr	r3, [pc, #280]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800483a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800483c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004848:	2300      	movs	r3, #0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800484e:	4b41      	ldr	r3, [pc, #260]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004852:	4a40      	ldr	r2, [pc, #256]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004854:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004858:	6593      	str	r3, [r2, #88]	@ 0x58
 800485a:	4b3e      	ldr	r3, [pc, #248]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800485c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004862:	60bb      	str	r3, [r7, #8]
 8004864:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004866:	2301      	movs	r3, #1
 8004868:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800486a:	4b3b      	ldr	r3, [pc, #236]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a3a      	ldr	r2, [pc, #232]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004874:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004876:	f7fd fd49 	bl	800230c <HAL_GetTick>
 800487a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800487c:	e009      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800487e:	f7fd fd45 	bl	800230c <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	2b02      	cmp	r3, #2
 800488a:	d902      	bls.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	74fb      	strb	r3, [r7, #19]
        break;
 8004890:	e005      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004892:	4b31      	ldr	r3, [pc, #196]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0ef      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800489e:	7cfb      	ldrb	r3, [r7, #19]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d15b      	bne.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ae:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d01f      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d019      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048c2:	4b24      	ldr	r3, [pc, #144]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048cc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048ce:	4b21      	ldr	r3, [pc, #132]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048de:	4b1d      	ldr	r3, [pc, #116]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048ee:	4a19      	ldr	r2, [pc, #100]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d016      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004900:	f7fd fd04 	bl	800230c <HAL_GetTick>
 8004904:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004906:	e00b      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004908:	f7fd fd00 	bl	800230c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004916:	4293      	cmp	r3, r2
 8004918:	d902      	bls.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	74fb      	strb	r3, [r7, #19]
            break;
 800491e:	e006      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004920:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0ec      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800492e:	7cfb      	ldrb	r3, [r7, #19]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10c      	bne.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004934:	4b07      	ldr	r3, [pc, #28]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800493a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004944:	4903      	ldr	r1, [pc, #12]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800494c:	e008      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800494e:	7cfb      	ldrb	r3, [r7, #19]
 8004950:	74bb      	strb	r3, [r7, #18]
 8004952:	e005      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004954:	40021000 	.word	0x40021000
 8004958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495c:	7cfb      	ldrb	r3, [r7, #19]
 800495e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004960:	7c7b      	ldrb	r3, [r7, #17]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d105      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004966:	4ba0      	ldr	r3, [pc, #640]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	4a9f      	ldr	r2, [pc, #636]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800496c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004970:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800497e:	4b9a      	ldr	r3, [pc, #616]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004984:	f023 0203 	bic.w	r2, r3, #3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498c:	4996      	ldr	r1, [pc, #600]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049a0:	4b91      	ldr	r3, [pc, #580]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a6:	f023 020c 	bic.w	r2, r3, #12
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ae:	498e      	ldr	r1, [pc, #568]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049c2:	4b89      	ldr	r3, [pc, #548]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d0:	4985      	ldr	r1, [pc, #532]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00a      	beq.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049e4:	4b80      	ldr	r3, [pc, #512]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f2:	497d      	ldr	r1, [pc, #500]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0310 	and.w	r3, r3, #16
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a06:	4b78      	ldr	r3, [pc, #480]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a14:	4974      	ldr	r1, [pc, #464]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0320 	and.w	r3, r3, #32
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a28:	4b6f      	ldr	r3, [pc, #444]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a36:	496c      	ldr	r1, [pc, #432]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a4a:	4b67      	ldr	r3, [pc, #412]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a58:	4963      	ldr	r1, [pc, #396]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00a      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a6c:	4b5e      	ldr	r3, [pc, #376]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a7a:	495b      	ldr	r1, [pc, #364]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a8e:	4b56      	ldr	r3, [pc, #344]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a9c:	4952      	ldr	r1, [pc, #328]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00a      	beq.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ab0:	4b4d      	ldr	r3, [pc, #308]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004abe:	494a      	ldr	r1, [pc, #296]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ad2:	4b45      	ldr	r3, [pc, #276]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae0:	4941      	ldr	r1, [pc, #260]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00a      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004af4:	4b3c      	ldr	r3, [pc, #240]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004af6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b02:	4939      	ldr	r1, [pc, #228]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d028      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b16:	4b34      	ldr	r3, [pc, #208]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b24:	4930      	ldr	r1, [pc, #192]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b34:	d106      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b36:	4b2c      	ldr	r3, [pc, #176]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b38:	68db      	ldr	r3, [r3, #12]
 8004b3a:	4a2b      	ldr	r2, [pc, #172]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b40:	60d3      	str	r3, [r2, #12]
 8004b42:	e011      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b48:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2101      	movs	r1, #1
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 f8f9 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b5e:	7cfb      	ldrb	r3, [r7, #19]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d04d      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b7c:	d108      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b80:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b84:	4a18      	ldr	r2, [pc, #96]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b86:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b8a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004b8e:	e012      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004b90:	4b15      	ldr	r3, [pc, #84]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b96:	4a14      	ldr	r2, [pc, #80]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004b98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004ba0:	4b11      	ldr	r3, [pc, #68]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bae:	490e      	ldr	r1, [pc, #56]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bbe:	d106      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc0:	4b09      	ldr	r3, [pc, #36]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4a08      	ldr	r2, [pc, #32]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bca:	60d3      	str	r3, [r2, #12]
 8004bcc:	e020      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bd6:	d109      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bd8:	4b03      	ldr	r3, [pc, #12]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	4a02      	ldr	r2, [pc, #8]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004be2:	60d3      	str	r3, [r2, #12]
 8004be4:	e014      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004bf0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004bf4:	d10c      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	3304      	adds	r3, #4
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 f8a5 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 8004c02:	4603      	mov	r3, r0
 8004c04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c06:	7cfb      	ldrb	r3, [r7, #19]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d028      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c1c:	4b4a      	ldr	r3, [pc, #296]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c22:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c2a:	4947      	ldr	r1, [pc, #284]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c36:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c3a:	d106      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c3c:	4b42      	ldr	r3, [pc, #264]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a41      	ldr	r2, [pc, #260]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c46:	60d3      	str	r3, [r2, #12]
 8004c48:	e011      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c52:	d10c      	bne.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	2101      	movs	r1, #1
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 f876 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004c6a:	7cfb      	ldrb	r3, [r7, #19]
 8004c6c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d01e      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c7a:	4b33      	ldr	r3, [pc, #204]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c80:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c8a:	492f      	ldr	r1, [pc, #188]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	2102      	movs	r1, #2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f851 	bl	8004d4c <RCCEx_PLLSAI1_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00b      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cc4:	4b20      	ldr	r3, [pc, #128]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cca:	f023 0204 	bic.w	r2, r3, #4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cd4:	491c      	ldr	r1, [pc, #112]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004ce8:	4b17      	ldr	r3, [pc, #92]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004cee:	f023 0218 	bic.w	r2, r3, #24
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf8:	4913      	ldr	r1, [pc, #76]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d017      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004d12:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d1c:	490a      	ldr	r1, [pc, #40]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d2e:	d105      	bne.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	4a04      	ldr	r2, [pc, #16]	@ (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004d3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000

08004d4c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d5a:	4b72      	ldr	r3, [pc, #456]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00e      	beq.n	8004d84 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d66:	4b6f      	ldr	r3, [pc, #444]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	f003 0203 	and.w	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d103      	bne.n	8004d7e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
       ||
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d142      	bne.n	8004e04 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	73fb      	strb	r3, [r7, #15]
 8004d82:	e03f      	b.n	8004e04 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2b03      	cmp	r3, #3
 8004d8a:	d018      	beq.n	8004dbe <RCCEx_PLLSAI1_Config+0x72>
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d825      	bhi.n	8004ddc <RCCEx_PLLSAI1_Config+0x90>
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d002      	beq.n	8004d9a <RCCEx_PLLSAI1_Config+0x4e>
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d009      	beq.n	8004dac <RCCEx_PLLSAI1_Config+0x60>
 8004d98:	e020      	b.n	8004ddc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d9a:	4b62      	ldr	r3, [pc, #392]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d11d      	bne.n	8004de2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004daa:	e01a      	b.n	8004de2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dac:	4b5d      	ldr	r3, [pc, #372]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d116      	bne.n	8004de6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dbc:	e013      	b.n	8004de6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dbe:	4b59      	ldr	r3, [pc, #356]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10f      	bne.n	8004dea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004dca:	4b56      	ldr	r3, [pc, #344]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d109      	bne.n	8004dea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004dda:	e006      	b.n	8004dea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	73fb      	strb	r3, [r7, #15]
      break;
 8004de0:	e004      	b.n	8004dec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004de2:	bf00      	nop
 8004de4:	e002      	b.n	8004dec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004de6:	bf00      	nop
 8004de8:	e000      	b.n	8004dec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004dea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dec:	7bfb      	ldrb	r3, [r7, #15]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d108      	bne.n	8004e04 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004df2:	4b4c      	ldr	r3, [pc, #304]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f023 0203 	bic.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4949      	ldr	r1, [pc, #292]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e00:	4313      	orrs	r3, r2
 8004e02:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	f040 8086 	bne.w	8004f18 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e0c:	4b45      	ldr	r3, [pc, #276]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a44      	ldr	r2, [pc, #272]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e18:	f7fd fa78 	bl	800230c <HAL_GetTick>
 8004e1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e1e:	e009      	b.n	8004e34 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e20:	f7fd fa74 	bl	800230c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d902      	bls.n	8004e34 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	73fb      	strb	r3, [r7, #15]
        break;
 8004e32:	e005      	b.n	8004e40 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e34:	4b3b      	ldr	r3, [pc, #236]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1ef      	bne.n	8004e20 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d168      	bne.n	8004f18 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d113      	bne.n	8004e74 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e4c:	4b35      	ldr	r3, [pc, #212]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	4b35      	ldr	r3, [pc, #212]	@ (8004f28 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	687a      	ldr	r2, [r7, #4]
 8004e56:	6892      	ldr	r2, [r2, #8]
 8004e58:	0211      	lsls	r1, r2, #8
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	68d2      	ldr	r2, [r2, #12]
 8004e5e:	06d2      	lsls	r2, r2, #27
 8004e60:	4311      	orrs	r1, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6852      	ldr	r2, [r2, #4]
 8004e66:	3a01      	subs	r2, #1
 8004e68:	0112      	lsls	r2, r2, #4
 8004e6a:	430a      	orrs	r2, r1
 8004e6c:	492d      	ldr	r1, [pc, #180]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	610b      	str	r3, [r1, #16]
 8004e72:	e02d      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d115      	bne.n	8004ea6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e7a:	4b2a      	ldr	r3, [pc, #168]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8004f2c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6892      	ldr	r2, [r2, #8]
 8004e86:	0211      	lsls	r1, r2, #8
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6912      	ldr	r2, [r2, #16]
 8004e8c:	0852      	lsrs	r2, r2, #1
 8004e8e:	3a01      	subs	r2, #1
 8004e90:	0552      	lsls	r2, r2, #21
 8004e92:	4311      	orrs	r1, r2
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6852      	ldr	r2, [r2, #4]
 8004e98:	3a01      	subs	r2, #1
 8004e9a:	0112      	lsls	r2, r2, #4
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	4921      	ldr	r1, [pc, #132]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	610b      	str	r3, [r1, #16]
 8004ea4:	e014      	b.n	8004ed0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ea8:	691a      	ldr	r2, [r3, #16]
 8004eaa:	4b21      	ldr	r3, [pc, #132]	@ (8004f30 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6892      	ldr	r2, [r2, #8]
 8004eb2:	0211      	lsls	r1, r2, #8
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6952      	ldr	r2, [r2, #20]
 8004eb8:	0852      	lsrs	r2, r2, #1
 8004eba:	3a01      	subs	r2, #1
 8004ebc:	0652      	lsls	r2, r2, #25
 8004ebe:	4311      	orrs	r1, r2
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6852      	ldr	r2, [r2, #4]
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	0112      	lsls	r2, r2, #4
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	4916      	ldr	r1, [pc, #88]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ed0:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a13      	ldr	r2, [pc, #76]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ed6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004eda:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004edc:	f7fd fa16 	bl	800230c <HAL_GetTick>
 8004ee0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ee2:	e009      	b.n	8004ef8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ee4:	f7fd fa12 	bl	800230c <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d902      	bls.n	8004ef8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ef6:	e005      	b.n	8004f04 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ef      	beq.n	8004ee4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f0a:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	4904      	ldr	r1, [pc, #16]	@ (8004f24 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	40021000 	.word	0x40021000
 8004f28:	07ff800f 	.word	0x07ff800f
 8004f2c:	ff9f800f 	.word	0xff9f800f
 8004f30:	f9ff800f 	.word	0xf9ff800f

08004f34 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f42:	4b72      	ldr	r3, [pc, #456]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f003 0303 	and.w	r3, r3, #3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00e      	beq.n	8004f6c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f4e:	4b6f      	ldr	r3, [pc, #444]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f003 0203 	and.w	r2, r3, #3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d103      	bne.n	8004f66 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
       ||
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d142      	bne.n	8004fec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	73fb      	strb	r3, [r7, #15]
 8004f6a:	e03f      	b.n	8004fec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b03      	cmp	r3, #3
 8004f72:	d018      	beq.n	8004fa6 <RCCEx_PLLSAI2_Config+0x72>
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d825      	bhi.n	8004fc4 <RCCEx_PLLSAI2_Config+0x90>
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d002      	beq.n	8004f82 <RCCEx_PLLSAI2_Config+0x4e>
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d009      	beq.n	8004f94 <RCCEx_PLLSAI2_Config+0x60>
 8004f80:	e020      	b.n	8004fc4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f82:	4b62      	ldr	r3, [pc, #392]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d11d      	bne.n	8004fca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f92:	e01a      	b.n	8004fca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f94:	4b5d      	ldr	r3, [pc, #372]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d116      	bne.n	8004fce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa4:	e013      	b.n	8004fce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fa6:	4b59      	ldr	r3, [pc, #356]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10f      	bne.n	8004fd2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fb2:	4b56      	ldr	r3, [pc, #344]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d109      	bne.n	8004fd2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fc2:	e006      	b.n	8004fd2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc8:	e004      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fca:	bf00      	nop
 8004fcc:	e002      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fce:	bf00      	nop
 8004fd0:	e000      	b.n	8004fd4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004fd2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004fda:	4b4c      	ldr	r3, [pc, #304]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f023 0203 	bic.w	r2, r3, #3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4949      	ldr	r1, [pc, #292]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f040 8086 	bne.w	8005100 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ff4:	4b45      	ldr	r3, [pc, #276]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a44      	ldr	r2, [pc, #272]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ffa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005000:	f7fd f984 	bl	800230c <HAL_GetTick>
 8005004:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005006:	e009      	b.n	800501c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005008:	f7fd f980 	bl	800230c <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d902      	bls.n	800501c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	73fb      	strb	r3, [r7, #15]
        break;
 800501a:	e005      	b.n	8005028 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800501c:	4b3b      	ldr	r3, [pc, #236]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1ef      	bne.n	8005008 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d168      	bne.n	8005100 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d113      	bne.n	800505c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005034:	4b35      	ldr	r3, [pc, #212]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	4b35      	ldr	r3, [pc, #212]	@ (8005110 <RCCEx_PLLSAI2_Config+0x1dc>)
 800503a:	4013      	ands	r3, r2
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6892      	ldr	r2, [r2, #8]
 8005040:	0211      	lsls	r1, r2, #8
 8005042:	687a      	ldr	r2, [r7, #4]
 8005044:	68d2      	ldr	r2, [r2, #12]
 8005046:	06d2      	lsls	r2, r2, #27
 8005048:	4311      	orrs	r1, r2
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	6852      	ldr	r2, [r2, #4]
 800504e:	3a01      	subs	r2, #1
 8005050:	0112      	lsls	r2, r2, #4
 8005052:	430a      	orrs	r2, r1
 8005054:	492d      	ldr	r1, [pc, #180]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005056:	4313      	orrs	r3, r2
 8005058:	614b      	str	r3, [r1, #20]
 800505a:	e02d      	b.n	80050b8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	2b01      	cmp	r3, #1
 8005060:	d115      	bne.n	800508e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005062:	4b2a      	ldr	r3, [pc, #168]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005064:	695a      	ldr	r2, [r3, #20]
 8005066:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6892      	ldr	r2, [r2, #8]
 800506e:	0211      	lsls	r1, r2, #8
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	6912      	ldr	r2, [r2, #16]
 8005074:	0852      	lsrs	r2, r2, #1
 8005076:	3a01      	subs	r2, #1
 8005078:	0552      	lsls	r2, r2, #21
 800507a:	4311      	orrs	r1, r2
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6852      	ldr	r2, [r2, #4]
 8005080:	3a01      	subs	r2, #1
 8005082:	0112      	lsls	r2, r2, #4
 8005084:	430a      	orrs	r2, r1
 8005086:	4921      	ldr	r1, [pc, #132]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005088:	4313      	orrs	r3, r2
 800508a:	614b      	str	r3, [r1, #20]
 800508c:	e014      	b.n	80050b8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800508e:	4b1f      	ldr	r3, [pc, #124]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005090:	695a      	ldr	r2, [r3, #20]
 8005092:	4b21      	ldr	r3, [pc, #132]	@ (8005118 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6892      	ldr	r2, [r2, #8]
 800509a:	0211      	lsls	r1, r2, #8
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6952      	ldr	r2, [r2, #20]
 80050a0:	0852      	lsrs	r2, r2, #1
 80050a2:	3a01      	subs	r2, #1
 80050a4:	0652      	lsls	r2, r2, #25
 80050a6:	4311      	orrs	r1, r2
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6852      	ldr	r2, [r2, #4]
 80050ac:	3a01      	subs	r2, #1
 80050ae:	0112      	lsls	r2, r2, #4
 80050b0:	430a      	orrs	r2, r1
 80050b2:	4916      	ldr	r1, [pc, #88]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80050b8:	4b14      	ldr	r3, [pc, #80]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a13      	ldr	r2, [pc, #76]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050c4:	f7fd f922 	bl	800230c <HAL_GetTick>
 80050c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050ca:	e009      	b.n	80050e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050cc:	f7fd f91e 	bl	800230c <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d902      	bls.n	80050e0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	73fb      	strb	r3, [r7, #15]
          break;
 80050de:	e005      	b.n	80050ec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80050e0:	4b0a      	ldr	r3, [pc, #40]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d0ef      	beq.n	80050cc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80050ec:	7bfb      	ldrb	r3, [r7, #15]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80050f2:	4b06      	ldr	r3, [pc, #24]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050f4:	695a      	ldr	r2, [r3, #20]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	4904      	ldr	r1, [pc, #16]	@ (800510c <RCCEx_PLLSAI2_Config+0x1d8>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000
 8005110:	07ff800f 	.word	0x07ff800f
 8005114:	ff9f800f 	.word	0xff9f800f
 8005118:	f9ff800f 	.word	0xf9ff800f

0800511c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e042      	b.n	80051b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005134:	2b00      	cmp	r3, #0
 8005136:	d106      	bne.n	8005146 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f7fc fcd7 	bl	8001af4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2224      	movs	r2, #36	@ 0x24
 800514a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005162:	2b00      	cmp	r3, #0
 8005164:	d002      	beq.n	800516c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fbb2 	bl	80058d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 f8b3 	bl	80052d8 <UART_SetConfig>
 8005172:	4603      	mov	r3, r0
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e01b      	b.n	80051b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800518a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800519a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 fc31 	bl	8005a14 <UART_CheckIdleState>
 80051b2:	4603      	mov	r3, r0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	@ 0x28
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d17b      	bne.n	80052ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_UART_Transmit+0x26>
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e074      	b.n	80052d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2221      	movs	r2, #33	@ 0x21
 80051f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f6:	f7fd f889 	bl	800230c <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	88fa      	ldrh	r2, [r7, #6]
 8005208:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005214:	d108      	bne.n	8005228 <HAL_UART_Transmit+0x6c>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	e003      	b.n	8005230 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005230:	e030      	b.n	8005294 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	2180      	movs	r1, #128	@ 0x80
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fc93 	bl	8005b68 <UART_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e03d      	b.n	80052d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	881a      	ldrh	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005266:	b292      	uxth	r2, r2
 8005268:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	3302      	adds	r3, #2
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	e007      	b.n	8005282 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	3301      	adds	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1c8      	bne.n	8005232 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2200      	movs	r2, #0
 80052a8:	2140      	movs	r1, #64	@ 0x40
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fc5c 	bl	8005b68 <UART_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e006      	b.n	80052d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e000      	b.n	80052d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80052ce:	2302      	movs	r3, #2
  }
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052dc:	b08c      	sub	sp, #48	@ 0x30
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	431a      	orrs	r2, r3
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	4baa      	ldr	r3, [pc, #680]	@ (80055b0 <UART_SetConfig+0x2d8>)
 8005308:	4013      	ands	r3, r2
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005310:	430b      	orrs	r3, r1
 8005312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a9f      	ldr	r2, [pc, #636]	@ (80055b4 <UART_SetConfig+0x2dc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005340:	4313      	orrs	r3, r2
 8005342:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800534e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005358:	430b      	orrs	r3, r1
 800535a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005362:	f023 010f 	bic.w	r1, r3, #15
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a90      	ldr	r2, [pc, #576]	@ (80055b8 <UART_SetConfig+0x2e0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d125      	bne.n	80053c8 <UART_SetConfig+0xf0>
 800537c:	4b8f      	ldr	r3, [pc, #572]	@ (80055bc <UART_SetConfig+0x2e4>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	2b03      	cmp	r3, #3
 8005388:	d81a      	bhi.n	80053c0 <UART_SetConfig+0xe8>
 800538a:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <UART_SetConfig+0xb8>)
 800538c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005390:	080053a1 	.word	0x080053a1
 8005394:	080053b1 	.word	0x080053b1
 8005398:	080053a9 	.word	0x080053a9
 800539c:	080053b9 	.word	0x080053b9
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a6:	e116      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80053a8:	2302      	movs	r3, #2
 80053aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ae:	e112      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80053b0:	2304      	movs	r3, #4
 80053b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b6:	e10e      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80053b8:	2308      	movs	r3, #8
 80053ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053be:	e10a      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80053c0:	2310      	movs	r3, #16
 80053c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c6:	e106      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a7c      	ldr	r2, [pc, #496]	@ (80055c0 <UART_SetConfig+0x2e8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d138      	bne.n	8005444 <UART_SetConfig+0x16c>
 80053d2:	4b7a      	ldr	r3, [pc, #488]	@ (80055bc <UART_SetConfig+0x2e4>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d8:	f003 030c 	and.w	r3, r3, #12
 80053dc:	2b0c      	cmp	r3, #12
 80053de:	d82d      	bhi.n	800543c <UART_SetConfig+0x164>
 80053e0:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <UART_SetConfig+0x110>)
 80053e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e6:	bf00      	nop
 80053e8:	0800541d 	.word	0x0800541d
 80053ec:	0800543d 	.word	0x0800543d
 80053f0:	0800543d 	.word	0x0800543d
 80053f4:	0800543d 	.word	0x0800543d
 80053f8:	0800542d 	.word	0x0800542d
 80053fc:	0800543d 	.word	0x0800543d
 8005400:	0800543d 	.word	0x0800543d
 8005404:	0800543d 	.word	0x0800543d
 8005408:	08005425 	.word	0x08005425
 800540c:	0800543d 	.word	0x0800543d
 8005410:	0800543d 	.word	0x0800543d
 8005414:	0800543d 	.word	0x0800543d
 8005418:	08005435 	.word	0x08005435
 800541c:	2300      	movs	r3, #0
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005422:	e0d8      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005424:	2302      	movs	r3, #2
 8005426:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542a:	e0d4      	b.n	80055d6 <UART_SetConfig+0x2fe>
 800542c:	2304      	movs	r3, #4
 800542e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005432:	e0d0      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005434:	2308      	movs	r3, #8
 8005436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543a:	e0cc      	b.n	80055d6 <UART_SetConfig+0x2fe>
 800543c:	2310      	movs	r3, #16
 800543e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005442:	e0c8      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a5e      	ldr	r2, [pc, #376]	@ (80055c4 <UART_SetConfig+0x2ec>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d125      	bne.n	800549a <UART_SetConfig+0x1c2>
 800544e:	4b5b      	ldr	r3, [pc, #364]	@ (80055bc <UART_SetConfig+0x2e4>)
 8005450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005454:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005458:	2b30      	cmp	r3, #48	@ 0x30
 800545a:	d016      	beq.n	800548a <UART_SetConfig+0x1b2>
 800545c:	2b30      	cmp	r3, #48	@ 0x30
 800545e:	d818      	bhi.n	8005492 <UART_SetConfig+0x1ba>
 8005460:	2b20      	cmp	r3, #32
 8005462:	d00a      	beq.n	800547a <UART_SetConfig+0x1a2>
 8005464:	2b20      	cmp	r3, #32
 8005466:	d814      	bhi.n	8005492 <UART_SetConfig+0x1ba>
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <UART_SetConfig+0x19a>
 800546c:	2b10      	cmp	r3, #16
 800546e:	d008      	beq.n	8005482 <UART_SetConfig+0x1aa>
 8005470:	e00f      	b.n	8005492 <UART_SetConfig+0x1ba>
 8005472:	2300      	movs	r3, #0
 8005474:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005478:	e0ad      	b.n	80055d6 <UART_SetConfig+0x2fe>
 800547a:	2302      	movs	r3, #2
 800547c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005480:	e0a9      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005482:	2304      	movs	r3, #4
 8005484:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005488:	e0a5      	b.n	80055d6 <UART_SetConfig+0x2fe>
 800548a:	2308      	movs	r3, #8
 800548c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005490:	e0a1      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005492:	2310      	movs	r3, #16
 8005494:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005498:	e09d      	b.n	80055d6 <UART_SetConfig+0x2fe>
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a4a      	ldr	r2, [pc, #296]	@ (80055c8 <UART_SetConfig+0x2f0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d125      	bne.n	80054f0 <UART_SetConfig+0x218>
 80054a4:	4b45      	ldr	r3, [pc, #276]	@ (80055bc <UART_SetConfig+0x2e4>)
 80054a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80054b0:	d016      	beq.n	80054e0 <UART_SetConfig+0x208>
 80054b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80054b4:	d818      	bhi.n	80054e8 <UART_SetConfig+0x210>
 80054b6:	2b80      	cmp	r3, #128	@ 0x80
 80054b8:	d00a      	beq.n	80054d0 <UART_SetConfig+0x1f8>
 80054ba:	2b80      	cmp	r3, #128	@ 0x80
 80054bc:	d814      	bhi.n	80054e8 <UART_SetConfig+0x210>
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <UART_SetConfig+0x1f0>
 80054c2:	2b40      	cmp	r3, #64	@ 0x40
 80054c4:	d008      	beq.n	80054d8 <UART_SetConfig+0x200>
 80054c6:	e00f      	b.n	80054e8 <UART_SetConfig+0x210>
 80054c8:	2300      	movs	r3, #0
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ce:	e082      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80054d0:	2302      	movs	r3, #2
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d6:	e07e      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80054d8:	2304      	movs	r3, #4
 80054da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054de:	e07a      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80054e0:	2308      	movs	r3, #8
 80054e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054e6:	e076      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80054e8:	2310      	movs	r3, #16
 80054ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ee:	e072      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a35      	ldr	r2, [pc, #212]	@ (80055cc <UART_SetConfig+0x2f4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d12a      	bne.n	8005550 <UART_SetConfig+0x278>
 80054fa:	4b30      	ldr	r3, [pc, #192]	@ (80055bc <UART_SetConfig+0x2e4>)
 80054fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005500:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005504:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005508:	d01a      	beq.n	8005540 <UART_SetConfig+0x268>
 800550a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800550e:	d81b      	bhi.n	8005548 <UART_SetConfig+0x270>
 8005510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005514:	d00c      	beq.n	8005530 <UART_SetConfig+0x258>
 8005516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800551a:	d815      	bhi.n	8005548 <UART_SetConfig+0x270>
 800551c:	2b00      	cmp	r3, #0
 800551e:	d003      	beq.n	8005528 <UART_SetConfig+0x250>
 8005520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005524:	d008      	beq.n	8005538 <UART_SetConfig+0x260>
 8005526:	e00f      	b.n	8005548 <UART_SetConfig+0x270>
 8005528:	2300      	movs	r3, #0
 800552a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800552e:	e052      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005530:	2302      	movs	r3, #2
 8005532:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005536:	e04e      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005538:	2304      	movs	r3, #4
 800553a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800553e:	e04a      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005540:	2308      	movs	r3, #8
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005546:	e046      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005548:	2310      	movs	r3, #16
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800554e:	e042      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a17      	ldr	r2, [pc, #92]	@ (80055b4 <UART_SetConfig+0x2dc>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d13a      	bne.n	80055d0 <UART_SetConfig+0x2f8>
 800555a:	4b18      	ldr	r3, [pc, #96]	@ (80055bc <UART_SetConfig+0x2e4>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005560:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005564:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005568:	d01a      	beq.n	80055a0 <UART_SetConfig+0x2c8>
 800556a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800556e:	d81b      	bhi.n	80055a8 <UART_SetConfig+0x2d0>
 8005570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005574:	d00c      	beq.n	8005590 <UART_SetConfig+0x2b8>
 8005576:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800557a:	d815      	bhi.n	80055a8 <UART_SetConfig+0x2d0>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <UART_SetConfig+0x2b0>
 8005580:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005584:	d008      	beq.n	8005598 <UART_SetConfig+0x2c0>
 8005586:	e00f      	b.n	80055a8 <UART_SetConfig+0x2d0>
 8005588:	2300      	movs	r3, #0
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800558e:	e022      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005590:	2302      	movs	r3, #2
 8005592:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005596:	e01e      	b.n	80055d6 <UART_SetConfig+0x2fe>
 8005598:	2304      	movs	r3, #4
 800559a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800559e:	e01a      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80055a0:	2308      	movs	r3, #8
 80055a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055a6:	e016      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80055a8:	2310      	movs	r3, #16
 80055aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80055ae:	e012      	b.n	80055d6 <UART_SetConfig+0x2fe>
 80055b0:	cfff69f3 	.word	0xcfff69f3
 80055b4:	40008000 	.word	0x40008000
 80055b8:	40013800 	.word	0x40013800
 80055bc:	40021000 	.word	0x40021000
 80055c0:	40004400 	.word	0x40004400
 80055c4:	40004800 	.word	0x40004800
 80055c8:	40004c00 	.word	0x40004c00
 80055cc:	40005000 	.word	0x40005000
 80055d0:	2310      	movs	r3, #16
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4aae      	ldr	r2, [pc, #696]	@ (8005894 <UART_SetConfig+0x5bc>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	f040 8097 	bne.w	8005710 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d823      	bhi.n	8005632 <UART_SetConfig+0x35a>
 80055ea:	a201      	add	r2, pc, #4	@ (adr r2, 80055f0 <UART_SetConfig+0x318>)
 80055ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f0:	08005615 	.word	0x08005615
 80055f4:	08005633 	.word	0x08005633
 80055f8:	0800561d 	.word	0x0800561d
 80055fc:	08005633 	.word	0x08005633
 8005600:	08005623 	.word	0x08005623
 8005604:	08005633 	.word	0x08005633
 8005608:	08005633 	.word	0x08005633
 800560c:	08005633 	.word	0x08005633
 8005610:	0800562b 	.word	0x0800562b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe ff7e 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 8005618:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800561a:	e010      	b.n	800563e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800561c:	4b9e      	ldr	r3, [pc, #632]	@ (8005898 <UART_SetConfig+0x5c0>)
 800561e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005620:	e00d      	b.n	800563e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005622:	f7fe fedf 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8005626:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005628:	e009      	b.n	800563e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800562a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005630:	e005      	b.n	800563e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005632:	2300      	movs	r3, #0
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800563c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 8130 	beq.w	80058a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564a:	4a94      	ldr	r2, [pc, #592]	@ (800589c <UART_SetConfig+0x5c4>)
 800564c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005650:	461a      	mov	r2, r3
 8005652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005654:	fbb3 f3f2 	udiv	r3, r3, r2
 8005658:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	429a      	cmp	r2, r3
 8005668:	d305      	bcc.n	8005676 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	429a      	cmp	r2, r3
 8005674:	d903      	bls.n	800567e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800567c:	e113      	b.n	80058a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	2200      	movs	r2, #0
 8005682:	60bb      	str	r3, [r7, #8]
 8005684:	60fa      	str	r2, [r7, #12]
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	4a84      	ldr	r2, [pc, #528]	@ (800589c <UART_SetConfig+0x5c4>)
 800568c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005690:	b29b      	uxth	r3, r3
 8005692:	2200      	movs	r2, #0
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800569c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80056a0:	f7fb faea 	bl	8000c78 <__aeabi_uldivmod>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	4610      	mov	r0, r2
 80056aa:	4619      	mov	r1, r3
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	020b      	lsls	r3, r1, #8
 80056b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056ba:	0202      	lsls	r2, r0, #8
 80056bc:	6979      	ldr	r1, [r7, #20]
 80056be:	6849      	ldr	r1, [r1, #4]
 80056c0:	0849      	lsrs	r1, r1, #1
 80056c2:	2000      	movs	r0, #0
 80056c4:	460c      	mov	r4, r1
 80056c6:	4605      	mov	r5, r0
 80056c8:	eb12 0804 	adds.w	r8, r2, r4
 80056cc:	eb43 0905 	adc.w	r9, r3, r5
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	469a      	mov	sl, r3
 80056d8:	4693      	mov	fp, r2
 80056da:	4652      	mov	r2, sl
 80056dc:	465b      	mov	r3, fp
 80056de:	4640      	mov	r0, r8
 80056e0:	4649      	mov	r1, r9
 80056e2:	f7fb fac9 	bl	8000c78 <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4613      	mov	r3, r2
 80056ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056f4:	d308      	bcc.n	8005708 <UART_SetConfig+0x430>
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056fc:	d204      	bcs.n	8005708 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6a3a      	ldr	r2, [r7, #32]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	e0ce      	b.n	80058a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800570e:	e0ca      	b.n	80058a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005718:	d166      	bne.n	80057e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800571a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800571e:	2b08      	cmp	r3, #8
 8005720:	d827      	bhi.n	8005772 <UART_SetConfig+0x49a>
 8005722:	a201      	add	r2, pc, #4	@ (adr r2, 8005728 <UART_SetConfig+0x450>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	0800574d 	.word	0x0800574d
 800572c:	08005755 	.word	0x08005755
 8005730:	0800575d 	.word	0x0800575d
 8005734:	08005773 	.word	0x08005773
 8005738:	08005763 	.word	0x08005763
 800573c:	08005773 	.word	0x08005773
 8005740:	08005773 	.word	0x08005773
 8005744:	08005773 	.word	0x08005773
 8005748:	0800576b 	.word	0x0800576b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800574c:	f7fe fee2 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 8005750:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005752:	e014      	b.n	800577e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005754:	f7fe fef4 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8005758:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800575a:	e010      	b.n	800577e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800575c:	4b4e      	ldr	r3, [pc, #312]	@ (8005898 <UART_SetConfig+0x5c0>)
 800575e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005760:	e00d      	b.n	800577e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005762:	f7fe fe3f 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8005766:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005768:	e009      	b.n	800577e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800576a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800576e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005770:	e005      	b.n	800577e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005772:	2300      	movs	r3, #0
 8005774:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800577c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 8090 	beq.w	80058a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578a:	4a44      	ldr	r2, [pc, #272]	@ (800589c <UART_SetConfig+0x5c4>)
 800578c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005790:	461a      	mov	r2, r3
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	fbb3 f3f2 	udiv	r3, r3, r2
 8005798:	005a      	lsls	r2, r3, #1
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	085b      	lsrs	r3, r3, #1
 80057a0:	441a      	add	r2, r3
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	2b0f      	cmp	r3, #15
 80057b0:	d916      	bls.n	80057e0 <UART_SetConfig+0x508>
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b8:	d212      	bcs.n	80057e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	f023 030f 	bic.w	r3, r3, #15
 80057c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	f003 0307 	and.w	r3, r3, #7
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	8bfb      	ldrh	r3, [r7, #30]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	8bfa      	ldrh	r2, [r7, #30]
 80057dc:	60da      	str	r2, [r3, #12]
 80057de:	e062      	b.n	80058a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80057e6:	e05e      	b.n	80058a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80057ec:	2b08      	cmp	r3, #8
 80057ee:	d828      	bhi.n	8005842 <UART_SetConfig+0x56a>
 80057f0:	a201      	add	r2, pc, #4	@ (adr r2, 80057f8 <UART_SetConfig+0x520>)
 80057f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f6:	bf00      	nop
 80057f8:	0800581d 	.word	0x0800581d
 80057fc:	08005825 	.word	0x08005825
 8005800:	0800582d 	.word	0x0800582d
 8005804:	08005843 	.word	0x08005843
 8005808:	08005833 	.word	0x08005833
 800580c:	08005843 	.word	0x08005843
 8005810:	08005843 	.word	0x08005843
 8005814:	08005843 	.word	0x08005843
 8005818:	0800583b 	.word	0x0800583b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800581c:	f7fe fe7a 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 8005820:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005822:	e014      	b.n	800584e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005824:	f7fe fe8c 	bl	8004540 <HAL_RCC_GetPCLK2Freq>
 8005828:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800582a:	e010      	b.n	800584e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800582c:	4b1a      	ldr	r3, [pc, #104]	@ (8005898 <UART_SetConfig+0x5c0>)
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005830:	e00d      	b.n	800584e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005832:	f7fe fdd7 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8005836:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005838:	e009      	b.n	800584e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800583a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800583e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005840:	e005      	b.n	800584e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800584c:	bf00      	nop
    }

    if (pclk != 0U)
 800584e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005850:	2b00      	cmp	r3, #0
 8005852:	d028      	beq.n	80058a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005858:	4a10      	ldr	r2, [pc, #64]	@ (800589c <UART_SetConfig+0x5c4>)
 800585a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800585e:	461a      	mov	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005862:	fbb3 f2f2 	udiv	r2, r3, r2
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	441a      	add	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	fbb2 f3f3 	udiv	r3, r2, r3
 8005876:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	2b0f      	cmp	r3, #15
 800587c:	d910      	bls.n	80058a0 <UART_SetConfig+0x5c8>
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005884:	d20c      	bcs.n	80058a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	b29a      	uxth	r2, r3
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	60da      	str	r2, [r3, #12]
 8005890:	e009      	b.n	80058a6 <UART_SetConfig+0x5ce>
 8005892:	bf00      	nop
 8005894:	40008000 	.word	0x40008000
 8005898:	00f42400 	.word	0x00f42400
 800589c:	0800a078 	.word	0x0800a078
      }
      else
      {
        ret = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2200      	movs	r2, #0
 80058ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	2200      	movs	r2, #0
 80058c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80058c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3730      	adds	r7, #48	@ 0x30
 80058ca:	46bd      	mov	sp, r7
 80058cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080058d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00a      	beq.n	80058fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	430a      	orrs	r2, r1
 80058f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00a      	beq.n	800591c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	430a      	orrs	r2, r1
 800591a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00a      	beq.n	800593e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005942:	f003 0304 	and.w	r3, r3, #4
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00a      	beq.n	8005960 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005964:	f003 0310 	and.w	r3, r3, #16
 8005968:	2b00      	cmp	r3, #0
 800596a:	d00a      	beq.n	8005982 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005986:	f003 0320 	and.w	r3, r3, #32
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00a      	beq.n	80059a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d01a      	beq.n	80059e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059ce:	d10a      	bne.n	80059e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	430a      	orrs	r2, r1
 80059e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	605a      	str	r2, [r3, #4]
  }
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b098      	sub	sp, #96	@ 0x60
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a24:	f7fc fc72 	bl	800230c <HAL_GetTick>
 8005a28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d12f      	bne.n	8005a98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a3c:	9300      	str	r3, [sp, #0]
 8005a3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a40:	2200      	movs	r2, #0
 8005a42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f88e 	bl	8005b68 <UART_WaitOnFlagUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d022      	beq.n	8005a98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a66:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a72:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a78:	e841 2300 	strex	r3, r2, [r1]
 8005a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e6      	bne.n	8005a52 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e063      	b.n	8005b60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0304 	and.w	r3, r3, #4
 8005aa2:	2b04      	cmp	r3, #4
 8005aa4:	d149      	bne.n	8005b3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f857 	bl	8005b68 <UART_WaitOnFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d03c      	beq.n	8005b3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ade:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ae0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e6      	bne.n	8005ac0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	3308      	adds	r3, #8
 8005af8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	e853 3f00 	ldrex	r3, [r3]
 8005b00:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b12:	61fa      	str	r2, [r7, #28]
 8005b14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b16:	69b9      	ldr	r1, [r7, #24]
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	e841 2300 	strex	r3, r2, [r1]
 8005b1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1e5      	bne.n	8005af2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e012      	b.n	8005b60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3758      	adds	r7, #88	@ 0x58
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b78:	e04f      	b.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b80:	d04b      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b82:	f7fc fbc3 	bl	800230c <HAL_GetTick>
 8005b86:	4602      	mov	r2, r0
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d302      	bcc.n	8005b98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e04e      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d037      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2b80      	cmp	r3, #128	@ 0x80
 8005bae:	d034      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2b40      	cmp	r3, #64	@ 0x40
 8005bb4:	d031      	beq.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f003 0308 	and.w	r3, r3, #8
 8005bc0:	2b08      	cmp	r3, #8
 8005bc2:	d110      	bne.n	8005be6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2208      	movs	r2, #8
 8005bca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f838 	bl	8005c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e029      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	69db      	ldr	r3, [r3, #28]
 8005bec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bf0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bf4:	d111      	bne.n	8005c1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f000 f81e 	bl	8005c42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e00f      	b.n	8005c3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	69da      	ldr	r2, [r3, #28]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4013      	ands	r3, r2
 8005c24:	68ba      	ldr	r2, [r7, #8]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	bf0c      	ite	eq
 8005c2a:	2301      	moveq	r3, #1
 8005c2c:	2300      	movne	r3, #0
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d0a0      	beq.n	8005b7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b095      	sub	sp, #84	@ 0x54
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c52:	e853 3f00 	ldrex	r3, [r3]
 8005c56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	461a      	mov	r2, r3
 8005c66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c70:	e841 2300 	strex	r3, r2, [r1]
 8005c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d1e6      	bne.n	8005c4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	3308      	adds	r3, #8
 8005c82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	f023 0301 	bic.w	r3, r3, #1
 8005c96:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ca0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e3      	bne.n	8005c7c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d118      	bne.n	8005cee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	f023 0310 	bic.w	r3, r3, #16
 8005cd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cde:	6979      	ldr	r1, [r7, #20]
 8005ce0:	69ba      	ldr	r2, [r7, #24]
 8005ce2:	e841 2300 	strex	r3, r2, [r1]
 8005ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d1e6      	bne.n	8005cbc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005d02:	bf00      	nop
 8005d04:	3754      	adds	r7, #84	@ 0x54
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e027      	b.n	8005d74 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2224      	movs	r2, #36	@ 0x24
 8005d30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0201 	bic.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005d52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e02d      	b.n	8005df4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2224      	movs	r2, #36	@ 0x24
 8005da4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 0201 	bic.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	430a      	orrs	r2, r1
 8005dd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f84f 	bl	8005e78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d101      	bne.n	8005e14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e10:	2302      	movs	r3, #2
 8005e12:	e02d      	b.n	8005e70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2224      	movs	r2, #36	@ 0x24
 8005e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f811 	bl	8005e78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2220      	movs	r2, #32
 8005e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d108      	bne.n	8005e9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e98:	e031      	b.n	8005efe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e9a:	2308      	movs	r3, #8
 8005e9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e9e:	2308      	movs	r3, #8
 8005ea0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	0e5b      	lsrs	r3, r3, #25
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	0f5b      	lsrs	r3, r3, #29
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ec2:	7bbb      	ldrb	r3, [r7, #14]
 8005ec4:	7b3a      	ldrb	r2, [r7, #12]
 8005ec6:	4911      	ldr	r1, [pc, #68]	@ (8005f0c <UARTEx_SetNbDataToProcess+0x94>)
 8005ec8:	5c8a      	ldrb	r2, [r1, r2]
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ece:	7b3a      	ldrb	r2, [r7, #12]
 8005ed0:	490f      	ldr	r1, [pc, #60]	@ (8005f10 <UARTEx_SetNbDataToProcess+0x98>)
 8005ed2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ed4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ed8:	b29a      	uxth	r2, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	7b7a      	ldrb	r2, [r7, #13]
 8005ee4:	4909      	ldr	r1, [pc, #36]	@ (8005f0c <UARTEx_SetNbDataToProcess+0x94>)
 8005ee6:	5c8a      	ldrb	r2, [r1, r2]
 8005ee8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005eec:	7b7a      	ldrb	r2, [r7, #13]
 8005eee:	4908      	ldr	r1, [pc, #32]	@ (8005f10 <UARTEx_SetNbDataToProcess+0x98>)
 8005ef0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ef2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	0800a090 	.word	0x0800a090
 8005f10:	0800a098 	.word	0x0800a098

08005f14 <__cvt>:
 8005f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f18:	ec57 6b10 	vmov	r6, r7, d0
 8005f1c:	2f00      	cmp	r7, #0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	4619      	mov	r1, r3
 8005f22:	463b      	mov	r3, r7
 8005f24:	bfbb      	ittet	lt
 8005f26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005f2a:	461f      	movlt	r7, r3
 8005f2c:	2300      	movge	r3, #0
 8005f2e:	232d      	movlt	r3, #45	@ 0x2d
 8005f30:	700b      	strb	r3, [r1, #0]
 8005f32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005f38:	4691      	mov	r9, r2
 8005f3a:	f023 0820 	bic.w	r8, r3, #32
 8005f3e:	bfbc      	itt	lt
 8005f40:	4632      	movlt	r2, r6
 8005f42:	4616      	movlt	r6, r2
 8005f44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005f48:	d005      	beq.n	8005f56 <__cvt+0x42>
 8005f4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005f4e:	d100      	bne.n	8005f52 <__cvt+0x3e>
 8005f50:	3401      	adds	r4, #1
 8005f52:	2102      	movs	r1, #2
 8005f54:	e000      	b.n	8005f58 <__cvt+0x44>
 8005f56:	2103      	movs	r1, #3
 8005f58:	ab03      	add	r3, sp, #12
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	ab02      	add	r3, sp, #8
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	ec47 6b10 	vmov	d0, r6, r7
 8005f64:	4653      	mov	r3, sl
 8005f66:	4622      	mov	r2, r4
 8005f68:	f000 fe6a 	bl	8006c40 <_dtoa_r>
 8005f6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005f70:	4605      	mov	r5, r0
 8005f72:	d119      	bne.n	8005fa8 <__cvt+0x94>
 8005f74:	f019 0f01 	tst.w	r9, #1
 8005f78:	d00e      	beq.n	8005f98 <__cvt+0x84>
 8005f7a:	eb00 0904 	add.w	r9, r0, r4
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2300      	movs	r3, #0
 8005f82:	4630      	mov	r0, r6
 8005f84:	4639      	mov	r1, r7
 8005f86:	f7fa fdb7 	bl	8000af8 <__aeabi_dcmpeq>
 8005f8a:	b108      	cbz	r0, 8005f90 <__cvt+0x7c>
 8005f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005f90:	2230      	movs	r2, #48	@ 0x30
 8005f92:	9b03      	ldr	r3, [sp, #12]
 8005f94:	454b      	cmp	r3, r9
 8005f96:	d31e      	bcc.n	8005fd6 <__cvt+0xc2>
 8005f98:	9b03      	ldr	r3, [sp, #12]
 8005f9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005f9c:	1b5b      	subs	r3, r3, r5
 8005f9e:	4628      	mov	r0, r5
 8005fa0:	6013      	str	r3, [r2, #0]
 8005fa2:	b004      	add	sp, #16
 8005fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fac:	eb00 0904 	add.w	r9, r0, r4
 8005fb0:	d1e5      	bne.n	8005f7e <__cvt+0x6a>
 8005fb2:	7803      	ldrb	r3, [r0, #0]
 8005fb4:	2b30      	cmp	r3, #48	@ 0x30
 8005fb6:	d10a      	bne.n	8005fce <__cvt+0xba>
 8005fb8:	2200      	movs	r2, #0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4630      	mov	r0, r6
 8005fbe:	4639      	mov	r1, r7
 8005fc0:	f7fa fd9a 	bl	8000af8 <__aeabi_dcmpeq>
 8005fc4:	b918      	cbnz	r0, 8005fce <__cvt+0xba>
 8005fc6:	f1c4 0401 	rsb	r4, r4, #1
 8005fca:	f8ca 4000 	str.w	r4, [sl]
 8005fce:	f8da 3000 	ldr.w	r3, [sl]
 8005fd2:	4499      	add	r9, r3
 8005fd4:	e7d3      	b.n	8005f7e <__cvt+0x6a>
 8005fd6:	1c59      	adds	r1, r3, #1
 8005fd8:	9103      	str	r1, [sp, #12]
 8005fda:	701a      	strb	r2, [r3, #0]
 8005fdc:	e7d9      	b.n	8005f92 <__cvt+0x7e>

08005fde <__exponent>:
 8005fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fe0:	2900      	cmp	r1, #0
 8005fe2:	bfba      	itte	lt
 8005fe4:	4249      	neglt	r1, r1
 8005fe6:	232d      	movlt	r3, #45	@ 0x2d
 8005fe8:	232b      	movge	r3, #43	@ 0x2b
 8005fea:	2909      	cmp	r1, #9
 8005fec:	7002      	strb	r2, [r0, #0]
 8005fee:	7043      	strb	r3, [r0, #1]
 8005ff0:	dd29      	ble.n	8006046 <__exponent+0x68>
 8005ff2:	f10d 0307 	add.w	r3, sp, #7
 8005ff6:	461d      	mov	r5, r3
 8005ff8:	270a      	movs	r7, #10
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	fbb1 f6f7 	udiv	r6, r1, r7
 8006000:	fb07 1416 	mls	r4, r7, r6, r1
 8006004:	3430      	adds	r4, #48	@ 0x30
 8006006:	f802 4c01 	strb.w	r4, [r2, #-1]
 800600a:	460c      	mov	r4, r1
 800600c:	2c63      	cmp	r4, #99	@ 0x63
 800600e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006012:	4631      	mov	r1, r6
 8006014:	dcf1      	bgt.n	8005ffa <__exponent+0x1c>
 8006016:	3130      	adds	r1, #48	@ 0x30
 8006018:	1e94      	subs	r4, r2, #2
 800601a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800601e:	1c41      	adds	r1, r0, #1
 8006020:	4623      	mov	r3, r4
 8006022:	42ab      	cmp	r3, r5
 8006024:	d30a      	bcc.n	800603c <__exponent+0x5e>
 8006026:	f10d 0309 	add.w	r3, sp, #9
 800602a:	1a9b      	subs	r3, r3, r2
 800602c:	42ac      	cmp	r4, r5
 800602e:	bf88      	it	hi
 8006030:	2300      	movhi	r3, #0
 8006032:	3302      	adds	r3, #2
 8006034:	4403      	add	r3, r0
 8006036:	1a18      	subs	r0, r3, r0
 8006038:	b003      	add	sp, #12
 800603a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800603c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006040:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006044:	e7ed      	b.n	8006022 <__exponent+0x44>
 8006046:	2330      	movs	r3, #48	@ 0x30
 8006048:	3130      	adds	r1, #48	@ 0x30
 800604a:	7083      	strb	r3, [r0, #2]
 800604c:	70c1      	strb	r1, [r0, #3]
 800604e:	1d03      	adds	r3, r0, #4
 8006050:	e7f1      	b.n	8006036 <__exponent+0x58>
	...

08006054 <_printf_float>:
 8006054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006058:	b08d      	sub	sp, #52	@ 0x34
 800605a:	460c      	mov	r4, r1
 800605c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006060:	4616      	mov	r6, r2
 8006062:	461f      	mov	r7, r3
 8006064:	4605      	mov	r5, r0
 8006066:	f000 fcdb 	bl	8006a20 <_localeconv_r>
 800606a:	6803      	ldr	r3, [r0, #0]
 800606c:	9304      	str	r3, [sp, #16]
 800606e:	4618      	mov	r0, r3
 8006070:	f7fa f916 	bl	80002a0 <strlen>
 8006074:	2300      	movs	r3, #0
 8006076:	930a      	str	r3, [sp, #40]	@ 0x28
 8006078:	f8d8 3000 	ldr.w	r3, [r8]
 800607c:	9005      	str	r0, [sp, #20]
 800607e:	3307      	adds	r3, #7
 8006080:	f023 0307 	bic.w	r3, r3, #7
 8006084:	f103 0208 	add.w	r2, r3, #8
 8006088:	f894 a018 	ldrb.w	sl, [r4, #24]
 800608c:	f8d4 b000 	ldr.w	fp, [r4]
 8006090:	f8c8 2000 	str.w	r2, [r8]
 8006094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006098:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800609c:	9307      	str	r3, [sp, #28]
 800609e:	f8cd 8018 	str.w	r8, [sp, #24]
 80060a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80060a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060aa:	4b9c      	ldr	r3, [pc, #624]	@ (800631c <_printf_float+0x2c8>)
 80060ac:	f04f 32ff 	mov.w	r2, #4294967295
 80060b0:	f7fa fd54 	bl	8000b5c <__aeabi_dcmpun>
 80060b4:	bb70      	cbnz	r0, 8006114 <_printf_float+0xc0>
 80060b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80060ba:	4b98      	ldr	r3, [pc, #608]	@ (800631c <_printf_float+0x2c8>)
 80060bc:	f04f 32ff 	mov.w	r2, #4294967295
 80060c0:	f7fa fd2e 	bl	8000b20 <__aeabi_dcmple>
 80060c4:	bb30      	cbnz	r0, 8006114 <_printf_float+0xc0>
 80060c6:	2200      	movs	r2, #0
 80060c8:	2300      	movs	r3, #0
 80060ca:	4640      	mov	r0, r8
 80060cc:	4649      	mov	r1, r9
 80060ce:	f7fa fd1d 	bl	8000b0c <__aeabi_dcmplt>
 80060d2:	b110      	cbz	r0, 80060da <_printf_float+0x86>
 80060d4:	232d      	movs	r3, #45	@ 0x2d
 80060d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060da:	4a91      	ldr	r2, [pc, #580]	@ (8006320 <_printf_float+0x2cc>)
 80060dc:	4b91      	ldr	r3, [pc, #580]	@ (8006324 <_printf_float+0x2d0>)
 80060de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80060e2:	bf94      	ite	ls
 80060e4:	4690      	movls	r8, r2
 80060e6:	4698      	movhi	r8, r3
 80060e8:	2303      	movs	r3, #3
 80060ea:	6123      	str	r3, [r4, #16]
 80060ec:	f02b 0304 	bic.w	r3, fp, #4
 80060f0:	6023      	str	r3, [r4, #0]
 80060f2:	f04f 0900 	mov.w	r9, #0
 80060f6:	9700      	str	r7, [sp, #0]
 80060f8:	4633      	mov	r3, r6
 80060fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80060fc:	4621      	mov	r1, r4
 80060fe:	4628      	mov	r0, r5
 8006100:	f000 f9d2 	bl	80064a8 <_printf_common>
 8006104:	3001      	adds	r0, #1
 8006106:	f040 808d 	bne.w	8006224 <_printf_float+0x1d0>
 800610a:	f04f 30ff 	mov.w	r0, #4294967295
 800610e:	b00d      	add	sp, #52	@ 0x34
 8006110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006114:	4642      	mov	r2, r8
 8006116:	464b      	mov	r3, r9
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa fd1e 	bl	8000b5c <__aeabi_dcmpun>
 8006120:	b140      	cbz	r0, 8006134 <_printf_float+0xe0>
 8006122:	464b      	mov	r3, r9
 8006124:	2b00      	cmp	r3, #0
 8006126:	bfbc      	itt	lt
 8006128:	232d      	movlt	r3, #45	@ 0x2d
 800612a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800612e:	4a7e      	ldr	r2, [pc, #504]	@ (8006328 <_printf_float+0x2d4>)
 8006130:	4b7e      	ldr	r3, [pc, #504]	@ (800632c <_printf_float+0x2d8>)
 8006132:	e7d4      	b.n	80060de <_printf_float+0x8a>
 8006134:	6863      	ldr	r3, [r4, #4]
 8006136:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800613a:	9206      	str	r2, [sp, #24]
 800613c:	1c5a      	adds	r2, r3, #1
 800613e:	d13b      	bne.n	80061b8 <_printf_float+0x164>
 8006140:	2306      	movs	r3, #6
 8006142:	6063      	str	r3, [r4, #4]
 8006144:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006148:	2300      	movs	r3, #0
 800614a:	6022      	str	r2, [r4, #0]
 800614c:	9303      	str	r3, [sp, #12]
 800614e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006150:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006154:	ab09      	add	r3, sp, #36	@ 0x24
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	6861      	ldr	r1, [r4, #4]
 800615a:	ec49 8b10 	vmov	d0, r8, r9
 800615e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006162:	4628      	mov	r0, r5
 8006164:	f7ff fed6 	bl	8005f14 <__cvt>
 8006168:	9b06      	ldr	r3, [sp, #24]
 800616a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800616c:	2b47      	cmp	r3, #71	@ 0x47
 800616e:	4680      	mov	r8, r0
 8006170:	d129      	bne.n	80061c6 <_printf_float+0x172>
 8006172:	1cc8      	adds	r0, r1, #3
 8006174:	db02      	blt.n	800617c <_printf_float+0x128>
 8006176:	6863      	ldr	r3, [r4, #4]
 8006178:	4299      	cmp	r1, r3
 800617a:	dd41      	ble.n	8006200 <_printf_float+0x1ac>
 800617c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006180:	fa5f fa8a 	uxtb.w	sl, sl
 8006184:	3901      	subs	r1, #1
 8006186:	4652      	mov	r2, sl
 8006188:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800618c:	9109      	str	r1, [sp, #36]	@ 0x24
 800618e:	f7ff ff26 	bl	8005fde <__exponent>
 8006192:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006194:	1813      	adds	r3, r2, r0
 8006196:	2a01      	cmp	r2, #1
 8006198:	4681      	mov	r9, r0
 800619a:	6123      	str	r3, [r4, #16]
 800619c:	dc02      	bgt.n	80061a4 <_printf_float+0x150>
 800619e:	6822      	ldr	r2, [r4, #0]
 80061a0:	07d2      	lsls	r2, r2, #31
 80061a2:	d501      	bpl.n	80061a8 <_printf_float+0x154>
 80061a4:	3301      	adds	r3, #1
 80061a6:	6123      	str	r3, [r4, #16]
 80061a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0a2      	beq.n	80060f6 <_printf_float+0xa2>
 80061b0:	232d      	movs	r3, #45	@ 0x2d
 80061b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061b6:	e79e      	b.n	80060f6 <_printf_float+0xa2>
 80061b8:	9a06      	ldr	r2, [sp, #24]
 80061ba:	2a47      	cmp	r2, #71	@ 0x47
 80061bc:	d1c2      	bne.n	8006144 <_printf_float+0xf0>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1c0      	bne.n	8006144 <_printf_float+0xf0>
 80061c2:	2301      	movs	r3, #1
 80061c4:	e7bd      	b.n	8006142 <_printf_float+0xee>
 80061c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80061ca:	d9db      	bls.n	8006184 <_printf_float+0x130>
 80061cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80061d0:	d118      	bne.n	8006204 <_printf_float+0x1b0>
 80061d2:	2900      	cmp	r1, #0
 80061d4:	6863      	ldr	r3, [r4, #4]
 80061d6:	dd0b      	ble.n	80061f0 <_printf_float+0x19c>
 80061d8:	6121      	str	r1, [r4, #16]
 80061da:	b913      	cbnz	r3, 80061e2 <_printf_float+0x18e>
 80061dc:	6822      	ldr	r2, [r4, #0]
 80061de:	07d0      	lsls	r0, r2, #31
 80061e0:	d502      	bpl.n	80061e8 <_printf_float+0x194>
 80061e2:	3301      	adds	r3, #1
 80061e4:	440b      	add	r3, r1
 80061e6:	6123      	str	r3, [r4, #16]
 80061e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80061ea:	f04f 0900 	mov.w	r9, #0
 80061ee:	e7db      	b.n	80061a8 <_printf_float+0x154>
 80061f0:	b913      	cbnz	r3, 80061f8 <_printf_float+0x1a4>
 80061f2:	6822      	ldr	r2, [r4, #0]
 80061f4:	07d2      	lsls	r2, r2, #31
 80061f6:	d501      	bpl.n	80061fc <_printf_float+0x1a8>
 80061f8:	3302      	adds	r3, #2
 80061fa:	e7f4      	b.n	80061e6 <_printf_float+0x192>
 80061fc:	2301      	movs	r3, #1
 80061fe:	e7f2      	b.n	80061e6 <_printf_float+0x192>
 8006200:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006206:	4299      	cmp	r1, r3
 8006208:	db05      	blt.n	8006216 <_printf_float+0x1c2>
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	6121      	str	r1, [r4, #16]
 800620e:	07d8      	lsls	r0, r3, #31
 8006210:	d5ea      	bpl.n	80061e8 <_printf_float+0x194>
 8006212:	1c4b      	adds	r3, r1, #1
 8006214:	e7e7      	b.n	80061e6 <_printf_float+0x192>
 8006216:	2900      	cmp	r1, #0
 8006218:	bfd4      	ite	le
 800621a:	f1c1 0202 	rsble	r2, r1, #2
 800621e:	2201      	movgt	r2, #1
 8006220:	4413      	add	r3, r2
 8006222:	e7e0      	b.n	80061e6 <_printf_float+0x192>
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	055a      	lsls	r2, r3, #21
 8006228:	d407      	bmi.n	800623a <_printf_float+0x1e6>
 800622a:	6923      	ldr	r3, [r4, #16]
 800622c:	4642      	mov	r2, r8
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	d12b      	bne.n	8006290 <_printf_float+0x23c>
 8006238:	e767      	b.n	800610a <_printf_float+0xb6>
 800623a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800623e:	f240 80dd 	bls.w	80063fc <_printf_float+0x3a8>
 8006242:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006246:	2200      	movs	r2, #0
 8006248:	2300      	movs	r3, #0
 800624a:	f7fa fc55 	bl	8000af8 <__aeabi_dcmpeq>
 800624e:	2800      	cmp	r0, #0
 8006250:	d033      	beq.n	80062ba <_printf_float+0x266>
 8006252:	4a37      	ldr	r2, [pc, #220]	@ (8006330 <_printf_float+0x2dc>)
 8006254:	2301      	movs	r3, #1
 8006256:	4631      	mov	r1, r6
 8006258:	4628      	mov	r0, r5
 800625a:	47b8      	blx	r7
 800625c:	3001      	adds	r0, #1
 800625e:	f43f af54 	beq.w	800610a <_printf_float+0xb6>
 8006262:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006266:	4543      	cmp	r3, r8
 8006268:	db02      	blt.n	8006270 <_printf_float+0x21c>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	07d8      	lsls	r0, r3, #31
 800626e:	d50f      	bpl.n	8006290 <_printf_float+0x23c>
 8006270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006274:	4631      	mov	r1, r6
 8006276:	4628      	mov	r0, r5
 8006278:	47b8      	blx	r7
 800627a:	3001      	adds	r0, #1
 800627c:	f43f af45 	beq.w	800610a <_printf_float+0xb6>
 8006280:	f04f 0900 	mov.w	r9, #0
 8006284:	f108 38ff 	add.w	r8, r8, #4294967295
 8006288:	f104 0a1a 	add.w	sl, r4, #26
 800628c:	45c8      	cmp	r8, r9
 800628e:	dc09      	bgt.n	80062a4 <_printf_float+0x250>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	079b      	lsls	r3, r3, #30
 8006294:	f100 8103 	bmi.w	800649e <_printf_float+0x44a>
 8006298:	68e0      	ldr	r0, [r4, #12]
 800629a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800629c:	4298      	cmp	r0, r3
 800629e:	bfb8      	it	lt
 80062a0:	4618      	movlt	r0, r3
 80062a2:	e734      	b.n	800610e <_printf_float+0xba>
 80062a4:	2301      	movs	r3, #1
 80062a6:	4652      	mov	r2, sl
 80062a8:	4631      	mov	r1, r6
 80062aa:	4628      	mov	r0, r5
 80062ac:	47b8      	blx	r7
 80062ae:	3001      	adds	r0, #1
 80062b0:	f43f af2b 	beq.w	800610a <_printf_float+0xb6>
 80062b4:	f109 0901 	add.w	r9, r9, #1
 80062b8:	e7e8      	b.n	800628c <_printf_float+0x238>
 80062ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dc39      	bgt.n	8006334 <_printf_float+0x2e0>
 80062c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006330 <_printf_float+0x2dc>)
 80062c2:	2301      	movs	r3, #1
 80062c4:	4631      	mov	r1, r6
 80062c6:	4628      	mov	r0, r5
 80062c8:	47b8      	blx	r7
 80062ca:	3001      	adds	r0, #1
 80062cc:	f43f af1d 	beq.w	800610a <_printf_float+0xb6>
 80062d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80062d4:	ea59 0303 	orrs.w	r3, r9, r3
 80062d8:	d102      	bne.n	80062e0 <_printf_float+0x28c>
 80062da:	6823      	ldr	r3, [r4, #0]
 80062dc:	07d9      	lsls	r1, r3, #31
 80062de:	d5d7      	bpl.n	8006290 <_printf_float+0x23c>
 80062e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062e4:	4631      	mov	r1, r6
 80062e6:	4628      	mov	r0, r5
 80062e8:	47b8      	blx	r7
 80062ea:	3001      	adds	r0, #1
 80062ec:	f43f af0d 	beq.w	800610a <_printf_float+0xb6>
 80062f0:	f04f 0a00 	mov.w	sl, #0
 80062f4:	f104 0b1a 	add.w	fp, r4, #26
 80062f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062fa:	425b      	negs	r3, r3
 80062fc:	4553      	cmp	r3, sl
 80062fe:	dc01      	bgt.n	8006304 <_printf_float+0x2b0>
 8006300:	464b      	mov	r3, r9
 8006302:	e793      	b.n	800622c <_printf_float+0x1d8>
 8006304:	2301      	movs	r3, #1
 8006306:	465a      	mov	r2, fp
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	f43f aefb 	beq.w	800610a <_printf_float+0xb6>
 8006314:	f10a 0a01 	add.w	sl, sl, #1
 8006318:	e7ee      	b.n	80062f8 <_printf_float+0x2a4>
 800631a:	bf00      	nop
 800631c:	7fefffff 	.word	0x7fefffff
 8006320:	0800a0a0 	.word	0x0800a0a0
 8006324:	0800a0a4 	.word	0x0800a0a4
 8006328:	0800a0a8 	.word	0x0800a0a8
 800632c:	0800a0ac 	.word	0x0800a0ac
 8006330:	0800a0b0 	.word	0x0800a0b0
 8006334:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006336:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800633a:	4553      	cmp	r3, sl
 800633c:	bfa8      	it	ge
 800633e:	4653      	movge	r3, sl
 8006340:	2b00      	cmp	r3, #0
 8006342:	4699      	mov	r9, r3
 8006344:	dc36      	bgt.n	80063b4 <_printf_float+0x360>
 8006346:	f04f 0b00 	mov.w	fp, #0
 800634a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800634e:	f104 021a 	add.w	r2, r4, #26
 8006352:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006354:	9306      	str	r3, [sp, #24]
 8006356:	eba3 0309 	sub.w	r3, r3, r9
 800635a:	455b      	cmp	r3, fp
 800635c:	dc31      	bgt.n	80063c2 <_printf_float+0x36e>
 800635e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006360:	459a      	cmp	sl, r3
 8006362:	dc3a      	bgt.n	80063da <_printf_float+0x386>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	07da      	lsls	r2, r3, #31
 8006368:	d437      	bmi.n	80063da <_printf_float+0x386>
 800636a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800636c:	ebaa 0903 	sub.w	r9, sl, r3
 8006370:	9b06      	ldr	r3, [sp, #24]
 8006372:	ebaa 0303 	sub.w	r3, sl, r3
 8006376:	4599      	cmp	r9, r3
 8006378:	bfa8      	it	ge
 800637a:	4699      	movge	r9, r3
 800637c:	f1b9 0f00 	cmp.w	r9, #0
 8006380:	dc33      	bgt.n	80063ea <_printf_float+0x396>
 8006382:	f04f 0800 	mov.w	r8, #0
 8006386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800638a:	f104 0b1a 	add.w	fp, r4, #26
 800638e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006390:	ebaa 0303 	sub.w	r3, sl, r3
 8006394:	eba3 0309 	sub.w	r3, r3, r9
 8006398:	4543      	cmp	r3, r8
 800639a:	f77f af79 	ble.w	8006290 <_printf_float+0x23c>
 800639e:	2301      	movs	r3, #1
 80063a0:	465a      	mov	r2, fp
 80063a2:	4631      	mov	r1, r6
 80063a4:	4628      	mov	r0, r5
 80063a6:	47b8      	blx	r7
 80063a8:	3001      	adds	r0, #1
 80063aa:	f43f aeae 	beq.w	800610a <_printf_float+0xb6>
 80063ae:	f108 0801 	add.w	r8, r8, #1
 80063b2:	e7ec      	b.n	800638e <_printf_float+0x33a>
 80063b4:	4642      	mov	r2, r8
 80063b6:	4631      	mov	r1, r6
 80063b8:	4628      	mov	r0, r5
 80063ba:	47b8      	blx	r7
 80063bc:	3001      	adds	r0, #1
 80063be:	d1c2      	bne.n	8006346 <_printf_float+0x2f2>
 80063c0:	e6a3      	b.n	800610a <_printf_float+0xb6>
 80063c2:	2301      	movs	r3, #1
 80063c4:	4631      	mov	r1, r6
 80063c6:	4628      	mov	r0, r5
 80063c8:	9206      	str	r2, [sp, #24]
 80063ca:	47b8      	blx	r7
 80063cc:	3001      	adds	r0, #1
 80063ce:	f43f ae9c 	beq.w	800610a <_printf_float+0xb6>
 80063d2:	9a06      	ldr	r2, [sp, #24]
 80063d4:	f10b 0b01 	add.w	fp, fp, #1
 80063d8:	e7bb      	b.n	8006352 <_printf_float+0x2fe>
 80063da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063de:	4631      	mov	r1, r6
 80063e0:	4628      	mov	r0, r5
 80063e2:	47b8      	blx	r7
 80063e4:	3001      	adds	r0, #1
 80063e6:	d1c0      	bne.n	800636a <_printf_float+0x316>
 80063e8:	e68f      	b.n	800610a <_printf_float+0xb6>
 80063ea:	9a06      	ldr	r2, [sp, #24]
 80063ec:	464b      	mov	r3, r9
 80063ee:	4442      	add	r2, r8
 80063f0:	4631      	mov	r1, r6
 80063f2:	4628      	mov	r0, r5
 80063f4:	47b8      	blx	r7
 80063f6:	3001      	adds	r0, #1
 80063f8:	d1c3      	bne.n	8006382 <_printf_float+0x32e>
 80063fa:	e686      	b.n	800610a <_printf_float+0xb6>
 80063fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006400:	f1ba 0f01 	cmp.w	sl, #1
 8006404:	dc01      	bgt.n	800640a <_printf_float+0x3b6>
 8006406:	07db      	lsls	r3, r3, #31
 8006408:	d536      	bpl.n	8006478 <_printf_float+0x424>
 800640a:	2301      	movs	r3, #1
 800640c:	4642      	mov	r2, r8
 800640e:	4631      	mov	r1, r6
 8006410:	4628      	mov	r0, r5
 8006412:	47b8      	blx	r7
 8006414:	3001      	adds	r0, #1
 8006416:	f43f ae78 	beq.w	800610a <_printf_float+0xb6>
 800641a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800641e:	4631      	mov	r1, r6
 8006420:	4628      	mov	r0, r5
 8006422:	47b8      	blx	r7
 8006424:	3001      	adds	r0, #1
 8006426:	f43f ae70 	beq.w	800610a <_printf_float+0xb6>
 800642a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800642e:	2200      	movs	r2, #0
 8006430:	2300      	movs	r3, #0
 8006432:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006436:	f7fa fb5f 	bl	8000af8 <__aeabi_dcmpeq>
 800643a:	b9c0      	cbnz	r0, 800646e <_printf_float+0x41a>
 800643c:	4653      	mov	r3, sl
 800643e:	f108 0201 	add.w	r2, r8, #1
 8006442:	4631      	mov	r1, r6
 8006444:	4628      	mov	r0, r5
 8006446:	47b8      	blx	r7
 8006448:	3001      	adds	r0, #1
 800644a:	d10c      	bne.n	8006466 <_printf_float+0x412>
 800644c:	e65d      	b.n	800610a <_printf_float+0xb6>
 800644e:	2301      	movs	r3, #1
 8006450:	465a      	mov	r2, fp
 8006452:	4631      	mov	r1, r6
 8006454:	4628      	mov	r0, r5
 8006456:	47b8      	blx	r7
 8006458:	3001      	adds	r0, #1
 800645a:	f43f ae56 	beq.w	800610a <_printf_float+0xb6>
 800645e:	f108 0801 	add.w	r8, r8, #1
 8006462:	45d0      	cmp	r8, sl
 8006464:	dbf3      	blt.n	800644e <_printf_float+0x3fa>
 8006466:	464b      	mov	r3, r9
 8006468:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800646c:	e6df      	b.n	800622e <_printf_float+0x1da>
 800646e:	f04f 0800 	mov.w	r8, #0
 8006472:	f104 0b1a 	add.w	fp, r4, #26
 8006476:	e7f4      	b.n	8006462 <_printf_float+0x40e>
 8006478:	2301      	movs	r3, #1
 800647a:	4642      	mov	r2, r8
 800647c:	e7e1      	b.n	8006442 <_printf_float+0x3ee>
 800647e:	2301      	movs	r3, #1
 8006480:	464a      	mov	r2, r9
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	47b8      	blx	r7
 8006488:	3001      	adds	r0, #1
 800648a:	f43f ae3e 	beq.w	800610a <_printf_float+0xb6>
 800648e:	f108 0801 	add.w	r8, r8, #1
 8006492:	68e3      	ldr	r3, [r4, #12]
 8006494:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006496:	1a5b      	subs	r3, r3, r1
 8006498:	4543      	cmp	r3, r8
 800649a:	dcf0      	bgt.n	800647e <_printf_float+0x42a>
 800649c:	e6fc      	b.n	8006298 <_printf_float+0x244>
 800649e:	f04f 0800 	mov.w	r8, #0
 80064a2:	f104 0919 	add.w	r9, r4, #25
 80064a6:	e7f4      	b.n	8006492 <_printf_float+0x43e>

080064a8 <_printf_common>:
 80064a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ac:	4616      	mov	r6, r2
 80064ae:	4698      	mov	r8, r3
 80064b0:	688a      	ldr	r2, [r1, #8]
 80064b2:	690b      	ldr	r3, [r1, #16]
 80064b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	bfb8      	it	lt
 80064bc:	4613      	movlt	r3, r2
 80064be:	6033      	str	r3, [r6, #0]
 80064c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80064c4:	4607      	mov	r7, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	b10a      	cbz	r2, 80064ce <_printf_common+0x26>
 80064ca:	3301      	adds	r3, #1
 80064cc:	6033      	str	r3, [r6, #0]
 80064ce:	6823      	ldr	r3, [r4, #0]
 80064d0:	0699      	lsls	r1, r3, #26
 80064d2:	bf42      	ittt	mi
 80064d4:	6833      	ldrmi	r3, [r6, #0]
 80064d6:	3302      	addmi	r3, #2
 80064d8:	6033      	strmi	r3, [r6, #0]
 80064da:	6825      	ldr	r5, [r4, #0]
 80064dc:	f015 0506 	ands.w	r5, r5, #6
 80064e0:	d106      	bne.n	80064f0 <_printf_common+0x48>
 80064e2:	f104 0a19 	add.w	sl, r4, #25
 80064e6:	68e3      	ldr	r3, [r4, #12]
 80064e8:	6832      	ldr	r2, [r6, #0]
 80064ea:	1a9b      	subs	r3, r3, r2
 80064ec:	42ab      	cmp	r3, r5
 80064ee:	dc26      	bgt.n	800653e <_printf_common+0x96>
 80064f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064f4:	6822      	ldr	r2, [r4, #0]
 80064f6:	3b00      	subs	r3, #0
 80064f8:	bf18      	it	ne
 80064fa:	2301      	movne	r3, #1
 80064fc:	0692      	lsls	r2, r2, #26
 80064fe:	d42b      	bmi.n	8006558 <_printf_common+0xb0>
 8006500:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006504:	4641      	mov	r1, r8
 8006506:	4638      	mov	r0, r7
 8006508:	47c8      	blx	r9
 800650a:	3001      	adds	r0, #1
 800650c:	d01e      	beq.n	800654c <_printf_common+0xa4>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	6922      	ldr	r2, [r4, #16]
 8006512:	f003 0306 	and.w	r3, r3, #6
 8006516:	2b04      	cmp	r3, #4
 8006518:	bf02      	ittt	eq
 800651a:	68e5      	ldreq	r5, [r4, #12]
 800651c:	6833      	ldreq	r3, [r6, #0]
 800651e:	1aed      	subeq	r5, r5, r3
 8006520:	68a3      	ldr	r3, [r4, #8]
 8006522:	bf0c      	ite	eq
 8006524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006528:	2500      	movne	r5, #0
 800652a:	4293      	cmp	r3, r2
 800652c:	bfc4      	itt	gt
 800652e:	1a9b      	subgt	r3, r3, r2
 8006530:	18ed      	addgt	r5, r5, r3
 8006532:	2600      	movs	r6, #0
 8006534:	341a      	adds	r4, #26
 8006536:	42b5      	cmp	r5, r6
 8006538:	d11a      	bne.n	8006570 <_printf_common+0xc8>
 800653a:	2000      	movs	r0, #0
 800653c:	e008      	b.n	8006550 <_printf_common+0xa8>
 800653e:	2301      	movs	r3, #1
 8006540:	4652      	mov	r2, sl
 8006542:	4641      	mov	r1, r8
 8006544:	4638      	mov	r0, r7
 8006546:	47c8      	blx	r9
 8006548:	3001      	adds	r0, #1
 800654a:	d103      	bne.n	8006554 <_printf_common+0xac>
 800654c:	f04f 30ff 	mov.w	r0, #4294967295
 8006550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006554:	3501      	adds	r5, #1
 8006556:	e7c6      	b.n	80064e6 <_printf_common+0x3e>
 8006558:	18e1      	adds	r1, r4, r3
 800655a:	1c5a      	adds	r2, r3, #1
 800655c:	2030      	movs	r0, #48	@ 0x30
 800655e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006562:	4422      	add	r2, r4
 8006564:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006568:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800656c:	3302      	adds	r3, #2
 800656e:	e7c7      	b.n	8006500 <_printf_common+0x58>
 8006570:	2301      	movs	r3, #1
 8006572:	4622      	mov	r2, r4
 8006574:	4641      	mov	r1, r8
 8006576:	4638      	mov	r0, r7
 8006578:	47c8      	blx	r9
 800657a:	3001      	adds	r0, #1
 800657c:	d0e6      	beq.n	800654c <_printf_common+0xa4>
 800657e:	3601      	adds	r6, #1
 8006580:	e7d9      	b.n	8006536 <_printf_common+0x8e>
	...

08006584 <_printf_i>:
 8006584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006588:	7e0f      	ldrb	r7, [r1, #24]
 800658a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800658c:	2f78      	cmp	r7, #120	@ 0x78
 800658e:	4691      	mov	r9, r2
 8006590:	4680      	mov	r8, r0
 8006592:	460c      	mov	r4, r1
 8006594:	469a      	mov	sl, r3
 8006596:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800659a:	d807      	bhi.n	80065ac <_printf_i+0x28>
 800659c:	2f62      	cmp	r7, #98	@ 0x62
 800659e:	d80a      	bhi.n	80065b6 <_printf_i+0x32>
 80065a0:	2f00      	cmp	r7, #0
 80065a2:	f000 80d2 	beq.w	800674a <_printf_i+0x1c6>
 80065a6:	2f58      	cmp	r7, #88	@ 0x58
 80065a8:	f000 80b9 	beq.w	800671e <_printf_i+0x19a>
 80065ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80065b4:	e03a      	b.n	800662c <_printf_i+0xa8>
 80065b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80065ba:	2b15      	cmp	r3, #21
 80065bc:	d8f6      	bhi.n	80065ac <_printf_i+0x28>
 80065be:	a101      	add	r1, pc, #4	@ (adr r1, 80065c4 <_printf_i+0x40>)
 80065c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065c4:	0800661d 	.word	0x0800661d
 80065c8:	08006631 	.word	0x08006631
 80065cc:	080065ad 	.word	0x080065ad
 80065d0:	080065ad 	.word	0x080065ad
 80065d4:	080065ad 	.word	0x080065ad
 80065d8:	080065ad 	.word	0x080065ad
 80065dc:	08006631 	.word	0x08006631
 80065e0:	080065ad 	.word	0x080065ad
 80065e4:	080065ad 	.word	0x080065ad
 80065e8:	080065ad 	.word	0x080065ad
 80065ec:	080065ad 	.word	0x080065ad
 80065f0:	08006731 	.word	0x08006731
 80065f4:	0800665b 	.word	0x0800665b
 80065f8:	080066eb 	.word	0x080066eb
 80065fc:	080065ad 	.word	0x080065ad
 8006600:	080065ad 	.word	0x080065ad
 8006604:	08006753 	.word	0x08006753
 8006608:	080065ad 	.word	0x080065ad
 800660c:	0800665b 	.word	0x0800665b
 8006610:	080065ad 	.word	0x080065ad
 8006614:	080065ad 	.word	0x080065ad
 8006618:	080066f3 	.word	0x080066f3
 800661c:	6833      	ldr	r3, [r6, #0]
 800661e:	1d1a      	adds	r2, r3, #4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	6032      	str	r2, [r6, #0]
 8006624:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006628:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800662c:	2301      	movs	r3, #1
 800662e:	e09d      	b.n	800676c <_printf_i+0x1e8>
 8006630:	6833      	ldr	r3, [r6, #0]
 8006632:	6820      	ldr	r0, [r4, #0]
 8006634:	1d19      	adds	r1, r3, #4
 8006636:	6031      	str	r1, [r6, #0]
 8006638:	0606      	lsls	r6, r0, #24
 800663a:	d501      	bpl.n	8006640 <_printf_i+0xbc>
 800663c:	681d      	ldr	r5, [r3, #0]
 800663e:	e003      	b.n	8006648 <_printf_i+0xc4>
 8006640:	0645      	lsls	r5, r0, #25
 8006642:	d5fb      	bpl.n	800663c <_printf_i+0xb8>
 8006644:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006648:	2d00      	cmp	r5, #0
 800664a:	da03      	bge.n	8006654 <_printf_i+0xd0>
 800664c:	232d      	movs	r3, #45	@ 0x2d
 800664e:	426d      	negs	r5, r5
 8006650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006654:	4859      	ldr	r0, [pc, #356]	@ (80067bc <_printf_i+0x238>)
 8006656:	230a      	movs	r3, #10
 8006658:	e011      	b.n	800667e <_printf_i+0xfa>
 800665a:	6821      	ldr	r1, [r4, #0]
 800665c:	6833      	ldr	r3, [r6, #0]
 800665e:	0608      	lsls	r0, r1, #24
 8006660:	f853 5b04 	ldr.w	r5, [r3], #4
 8006664:	d402      	bmi.n	800666c <_printf_i+0xe8>
 8006666:	0649      	lsls	r1, r1, #25
 8006668:	bf48      	it	mi
 800666a:	b2ad      	uxthmi	r5, r5
 800666c:	2f6f      	cmp	r7, #111	@ 0x6f
 800666e:	4853      	ldr	r0, [pc, #332]	@ (80067bc <_printf_i+0x238>)
 8006670:	6033      	str	r3, [r6, #0]
 8006672:	bf14      	ite	ne
 8006674:	230a      	movne	r3, #10
 8006676:	2308      	moveq	r3, #8
 8006678:	2100      	movs	r1, #0
 800667a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800667e:	6866      	ldr	r6, [r4, #4]
 8006680:	60a6      	str	r6, [r4, #8]
 8006682:	2e00      	cmp	r6, #0
 8006684:	bfa2      	ittt	ge
 8006686:	6821      	ldrge	r1, [r4, #0]
 8006688:	f021 0104 	bicge.w	r1, r1, #4
 800668c:	6021      	strge	r1, [r4, #0]
 800668e:	b90d      	cbnz	r5, 8006694 <_printf_i+0x110>
 8006690:	2e00      	cmp	r6, #0
 8006692:	d04b      	beq.n	800672c <_printf_i+0x1a8>
 8006694:	4616      	mov	r6, r2
 8006696:	fbb5 f1f3 	udiv	r1, r5, r3
 800669a:	fb03 5711 	mls	r7, r3, r1, r5
 800669e:	5dc7      	ldrb	r7, [r0, r7]
 80066a0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80066a4:	462f      	mov	r7, r5
 80066a6:	42bb      	cmp	r3, r7
 80066a8:	460d      	mov	r5, r1
 80066aa:	d9f4      	bls.n	8006696 <_printf_i+0x112>
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d10b      	bne.n	80066c8 <_printf_i+0x144>
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	07df      	lsls	r7, r3, #31
 80066b4:	d508      	bpl.n	80066c8 <_printf_i+0x144>
 80066b6:	6923      	ldr	r3, [r4, #16]
 80066b8:	6861      	ldr	r1, [r4, #4]
 80066ba:	4299      	cmp	r1, r3
 80066bc:	bfde      	ittt	le
 80066be:	2330      	movle	r3, #48	@ 0x30
 80066c0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80066c4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80066c8:	1b92      	subs	r2, r2, r6
 80066ca:	6122      	str	r2, [r4, #16]
 80066cc:	f8cd a000 	str.w	sl, [sp]
 80066d0:	464b      	mov	r3, r9
 80066d2:	aa03      	add	r2, sp, #12
 80066d4:	4621      	mov	r1, r4
 80066d6:	4640      	mov	r0, r8
 80066d8:	f7ff fee6 	bl	80064a8 <_printf_common>
 80066dc:	3001      	adds	r0, #1
 80066de:	d14a      	bne.n	8006776 <_printf_i+0x1f2>
 80066e0:	f04f 30ff 	mov.w	r0, #4294967295
 80066e4:	b004      	add	sp, #16
 80066e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	f043 0320 	orr.w	r3, r3, #32
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	4833      	ldr	r0, [pc, #204]	@ (80067c0 <_printf_i+0x23c>)
 80066f4:	2778      	movs	r7, #120	@ 0x78
 80066f6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	6831      	ldr	r1, [r6, #0]
 80066fe:	061f      	lsls	r7, r3, #24
 8006700:	f851 5b04 	ldr.w	r5, [r1], #4
 8006704:	d402      	bmi.n	800670c <_printf_i+0x188>
 8006706:	065f      	lsls	r7, r3, #25
 8006708:	bf48      	it	mi
 800670a:	b2ad      	uxthmi	r5, r5
 800670c:	6031      	str	r1, [r6, #0]
 800670e:	07d9      	lsls	r1, r3, #31
 8006710:	bf44      	itt	mi
 8006712:	f043 0320 	orrmi.w	r3, r3, #32
 8006716:	6023      	strmi	r3, [r4, #0]
 8006718:	b11d      	cbz	r5, 8006722 <_printf_i+0x19e>
 800671a:	2310      	movs	r3, #16
 800671c:	e7ac      	b.n	8006678 <_printf_i+0xf4>
 800671e:	4827      	ldr	r0, [pc, #156]	@ (80067bc <_printf_i+0x238>)
 8006720:	e7e9      	b.n	80066f6 <_printf_i+0x172>
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f023 0320 	bic.w	r3, r3, #32
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	e7f6      	b.n	800671a <_printf_i+0x196>
 800672c:	4616      	mov	r6, r2
 800672e:	e7bd      	b.n	80066ac <_printf_i+0x128>
 8006730:	6833      	ldr	r3, [r6, #0]
 8006732:	6825      	ldr	r5, [r4, #0]
 8006734:	6961      	ldr	r1, [r4, #20]
 8006736:	1d18      	adds	r0, r3, #4
 8006738:	6030      	str	r0, [r6, #0]
 800673a:	062e      	lsls	r6, r5, #24
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	d501      	bpl.n	8006744 <_printf_i+0x1c0>
 8006740:	6019      	str	r1, [r3, #0]
 8006742:	e002      	b.n	800674a <_printf_i+0x1c6>
 8006744:	0668      	lsls	r0, r5, #25
 8006746:	d5fb      	bpl.n	8006740 <_printf_i+0x1bc>
 8006748:	8019      	strh	r1, [r3, #0]
 800674a:	2300      	movs	r3, #0
 800674c:	6123      	str	r3, [r4, #16]
 800674e:	4616      	mov	r6, r2
 8006750:	e7bc      	b.n	80066cc <_printf_i+0x148>
 8006752:	6833      	ldr	r3, [r6, #0]
 8006754:	1d1a      	adds	r2, r3, #4
 8006756:	6032      	str	r2, [r6, #0]
 8006758:	681e      	ldr	r6, [r3, #0]
 800675a:	6862      	ldr	r2, [r4, #4]
 800675c:	2100      	movs	r1, #0
 800675e:	4630      	mov	r0, r6
 8006760:	f7f9 fd4e 	bl	8000200 <memchr>
 8006764:	b108      	cbz	r0, 800676a <_printf_i+0x1e6>
 8006766:	1b80      	subs	r0, r0, r6
 8006768:	6060      	str	r0, [r4, #4]
 800676a:	6863      	ldr	r3, [r4, #4]
 800676c:	6123      	str	r3, [r4, #16]
 800676e:	2300      	movs	r3, #0
 8006770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006774:	e7aa      	b.n	80066cc <_printf_i+0x148>
 8006776:	6923      	ldr	r3, [r4, #16]
 8006778:	4632      	mov	r2, r6
 800677a:	4649      	mov	r1, r9
 800677c:	4640      	mov	r0, r8
 800677e:	47d0      	blx	sl
 8006780:	3001      	adds	r0, #1
 8006782:	d0ad      	beq.n	80066e0 <_printf_i+0x15c>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	079b      	lsls	r3, r3, #30
 8006788:	d413      	bmi.n	80067b2 <_printf_i+0x22e>
 800678a:	68e0      	ldr	r0, [r4, #12]
 800678c:	9b03      	ldr	r3, [sp, #12]
 800678e:	4298      	cmp	r0, r3
 8006790:	bfb8      	it	lt
 8006792:	4618      	movlt	r0, r3
 8006794:	e7a6      	b.n	80066e4 <_printf_i+0x160>
 8006796:	2301      	movs	r3, #1
 8006798:	4632      	mov	r2, r6
 800679a:	4649      	mov	r1, r9
 800679c:	4640      	mov	r0, r8
 800679e:	47d0      	blx	sl
 80067a0:	3001      	adds	r0, #1
 80067a2:	d09d      	beq.n	80066e0 <_printf_i+0x15c>
 80067a4:	3501      	adds	r5, #1
 80067a6:	68e3      	ldr	r3, [r4, #12]
 80067a8:	9903      	ldr	r1, [sp, #12]
 80067aa:	1a5b      	subs	r3, r3, r1
 80067ac:	42ab      	cmp	r3, r5
 80067ae:	dcf2      	bgt.n	8006796 <_printf_i+0x212>
 80067b0:	e7eb      	b.n	800678a <_printf_i+0x206>
 80067b2:	2500      	movs	r5, #0
 80067b4:	f104 0619 	add.w	r6, r4, #25
 80067b8:	e7f5      	b.n	80067a6 <_printf_i+0x222>
 80067ba:	bf00      	nop
 80067bc:	0800a0b2 	.word	0x0800a0b2
 80067c0:	0800a0c3 	.word	0x0800a0c3

080067c4 <std>:
 80067c4:	2300      	movs	r3, #0
 80067c6:	b510      	push	{r4, lr}
 80067c8:	4604      	mov	r4, r0
 80067ca:	e9c0 3300 	strd	r3, r3, [r0]
 80067ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80067d2:	6083      	str	r3, [r0, #8]
 80067d4:	8181      	strh	r1, [r0, #12]
 80067d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80067d8:	81c2      	strh	r2, [r0, #14]
 80067da:	6183      	str	r3, [r0, #24]
 80067dc:	4619      	mov	r1, r3
 80067de:	2208      	movs	r2, #8
 80067e0:	305c      	adds	r0, #92	@ 0x5c
 80067e2:	f000 f914 	bl	8006a0e <memset>
 80067e6:	4b0d      	ldr	r3, [pc, #52]	@ (800681c <std+0x58>)
 80067e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80067ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006820 <std+0x5c>)
 80067ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80067ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006824 <std+0x60>)
 80067f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80067f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006828 <std+0x64>)
 80067f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80067f6:	4b0d      	ldr	r3, [pc, #52]	@ (800682c <std+0x68>)
 80067f8:	6224      	str	r4, [r4, #32]
 80067fa:	429c      	cmp	r4, r3
 80067fc:	d006      	beq.n	800680c <std+0x48>
 80067fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006802:	4294      	cmp	r4, r2
 8006804:	d002      	beq.n	800680c <std+0x48>
 8006806:	33d0      	adds	r3, #208	@ 0xd0
 8006808:	429c      	cmp	r4, r3
 800680a:	d105      	bne.n	8006818 <std+0x54>
 800680c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006814:	f000 b978 	b.w	8006b08 <__retarget_lock_init_recursive>
 8006818:	bd10      	pop	{r4, pc}
 800681a:	bf00      	nop
 800681c:	08006989 	.word	0x08006989
 8006820:	080069ab 	.word	0x080069ab
 8006824:	080069e3 	.word	0x080069e3
 8006828:	08006a07 	.word	0x08006a07
 800682c:	200003a4 	.word	0x200003a4

08006830 <stdio_exit_handler>:
 8006830:	4a02      	ldr	r2, [pc, #8]	@ (800683c <stdio_exit_handler+0xc>)
 8006832:	4903      	ldr	r1, [pc, #12]	@ (8006840 <stdio_exit_handler+0x10>)
 8006834:	4803      	ldr	r0, [pc, #12]	@ (8006844 <stdio_exit_handler+0x14>)
 8006836:	f000 b869 	b.w	800690c <_fwalk_sglue>
 800683a:	bf00      	nop
 800683c:	20000074 	.word	0x20000074
 8006840:	08008485 	.word	0x08008485
 8006844:	20000084 	.word	0x20000084

08006848 <cleanup_stdio>:
 8006848:	6841      	ldr	r1, [r0, #4]
 800684a:	4b0c      	ldr	r3, [pc, #48]	@ (800687c <cleanup_stdio+0x34>)
 800684c:	4299      	cmp	r1, r3
 800684e:	b510      	push	{r4, lr}
 8006850:	4604      	mov	r4, r0
 8006852:	d001      	beq.n	8006858 <cleanup_stdio+0x10>
 8006854:	f001 fe16 	bl	8008484 <_fflush_r>
 8006858:	68a1      	ldr	r1, [r4, #8]
 800685a:	4b09      	ldr	r3, [pc, #36]	@ (8006880 <cleanup_stdio+0x38>)
 800685c:	4299      	cmp	r1, r3
 800685e:	d002      	beq.n	8006866 <cleanup_stdio+0x1e>
 8006860:	4620      	mov	r0, r4
 8006862:	f001 fe0f 	bl	8008484 <_fflush_r>
 8006866:	68e1      	ldr	r1, [r4, #12]
 8006868:	4b06      	ldr	r3, [pc, #24]	@ (8006884 <cleanup_stdio+0x3c>)
 800686a:	4299      	cmp	r1, r3
 800686c:	d004      	beq.n	8006878 <cleanup_stdio+0x30>
 800686e:	4620      	mov	r0, r4
 8006870:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006874:	f001 be06 	b.w	8008484 <_fflush_r>
 8006878:	bd10      	pop	{r4, pc}
 800687a:	bf00      	nop
 800687c:	200003a4 	.word	0x200003a4
 8006880:	2000040c 	.word	0x2000040c
 8006884:	20000474 	.word	0x20000474

08006888 <global_stdio_init.part.0>:
 8006888:	b510      	push	{r4, lr}
 800688a:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <global_stdio_init.part.0+0x30>)
 800688c:	4c0b      	ldr	r4, [pc, #44]	@ (80068bc <global_stdio_init.part.0+0x34>)
 800688e:	4a0c      	ldr	r2, [pc, #48]	@ (80068c0 <global_stdio_init.part.0+0x38>)
 8006890:	601a      	str	r2, [r3, #0]
 8006892:	4620      	mov	r0, r4
 8006894:	2200      	movs	r2, #0
 8006896:	2104      	movs	r1, #4
 8006898:	f7ff ff94 	bl	80067c4 <std>
 800689c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068a0:	2201      	movs	r2, #1
 80068a2:	2109      	movs	r1, #9
 80068a4:	f7ff ff8e 	bl	80067c4 <std>
 80068a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80068ac:	2202      	movs	r2, #2
 80068ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068b2:	2112      	movs	r1, #18
 80068b4:	f7ff bf86 	b.w	80067c4 <std>
 80068b8:	200004dc 	.word	0x200004dc
 80068bc:	200003a4 	.word	0x200003a4
 80068c0:	08006831 	.word	0x08006831

080068c4 <__sfp_lock_acquire>:
 80068c4:	4801      	ldr	r0, [pc, #4]	@ (80068cc <__sfp_lock_acquire+0x8>)
 80068c6:	f000 b920 	b.w	8006b0a <__retarget_lock_acquire_recursive>
 80068ca:	bf00      	nop
 80068cc:	200004e5 	.word	0x200004e5

080068d0 <__sfp_lock_release>:
 80068d0:	4801      	ldr	r0, [pc, #4]	@ (80068d8 <__sfp_lock_release+0x8>)
 80068d2:	f000 b91b 	b.w	8006b0c <__retarget_lock_release_recursive>
 80068d6:	bf00      	nop
 80068d8:	200004e5 	.word	0x200004e5

080068dc <__sinit>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	4604      	mov	r4, r0
 80068e0:	f7ff fff0 	bl	80068c4 <__sfp_lock_acquire>
 80068e4:	6a23      	ldr	r3, [r4, #32]
 80068e6:	b11b      	cbz	r3, 80068f0 <__sinit+0x14>
 80068e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068ec:	f7ff bff0 	b.w	80068d0 <__sfp_lock_release>
 80068f0:	4b04      	ldr	r3, [pc, #16]	@ (8006904 <__sinit+0x28>)
 80068f2:	6223      	str	r3, [r4, #32]
 80068f4:	4b04      	ldr	r3, [pc, #16]	@ (8006908 <__sinit+0x2c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d1f5      	bne.n	80068e8 <__sinit+0xc>
 80068fc:	f7ff ffc4 	bl	8006888 <global_stdio_init.part.0>
 8006900:	e7f2      	b.n	80068e8 <__sinit+0xc>
 8006902:	bf00      	nop
 8006904:	08006849 	.word	0x08006849
 8006908:	200004dc 	.word	0x200004dc

0800690c <_fwalk_sglue>:
 800690c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006910:	4607      	mov	r7, r0
 8006912:	4688      	mov	r8, r1
 8006914:	4614      	mov	r4, r2
 8006916:	2600      	movs	r6, #0
 8006918:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800691c:	f1b9 0901 	subs.w	r9, r9, #1
 8006920:	d505      	bpl.n	800692e <_fwalk_sglue+0x22>
 8006922:	6824      	ldr	r4, [r4, #0]
 8006924:	2c00      	cmp	r4, #0
 8006926:	d1f7      	bne.n	8006918 <_fwalk_sglue+0xc>
 8006928:	4630      	mov	r0, r6
 800692a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800692e:	89ab      	ldrh	r3, [r5, #12]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d907      	bls.n	8006944 <_fwalk_sglue+0x38>
 8006934:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006938:	3301      	adds	r3, #1
 800693a:	d003      	beq.n	8006944 <_fwalk_sglue+0x38>
 800693c:	4629      	mov	r1, r5
 800693e:	4638      	mov	r0, r7
 8006940:	47c0      	blx	r8
 8006942:	4306      	orrs	r6, r0
 8006944:	3568      	adds	r5, #104	@ 0x68
 8006946:	e7e9      	b.n	800691c <_fwalk_sglue+0x10>

08006948 <siprintf>:
 8006948:	b40e      	push	{r1, r2, r3}
 800694a:	b500      	push	{lr}
 800694c:	b09c      	sub	sp, #112	@ 0x70
 800694e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006950:	9002      	str	r0, [sp, #8]
 8006952:	9006      	str	r0, [sp, #24]
 8006954:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006958:	4809      	ldr	r0, [pc, #36]	@ (8006980 <siprintf+0x38>)
 800695a:	9107      	str	r1, [sp, #28]
 800695c:	9104      	str	r1, [sp, #16]
 800695e:	4909      	ldr	r1, [pc, #36]	@ (8006984 <siprintf+0x3c>)
 8006960:	f853 2b04 	ldr.w	r2, [r3], #4
 8006964:	9105      	str	r1, [sp, #20]
 8006966:	6800      	ldr	r0, [r0, #0]
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	a902      	add	r1, sp, #8
 800696c:	f001 fc0a 	bl	8008184 <_svfiprintf_r>
 8006970:	9b02      	ldr	r3, [sp, #8]
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	b01c      	add	sp, #112	@ 0x70
 8006978:	f85d eb04 	ldr.w	lr, [sp], #4
 800697c:	b003      	add	sp, #12
 800697e:	4770      	bx	lr
 8006980:	20000080 	.word	0x20000080
 8006984:	ffff0208 	.word	0xffff0208

08006988 <__sread>:
 8006988:	b510      	push	{r4, lr}
 800698a:	460c      	mov	r4, r1
 800698c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006990:	f000 f86c 	bl	8006a6c <_read_r>
 8006994:	2800      	cmp	r0, #0
 8006996:	bfab      	itete	ge
 8006998:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800699a:	89a3      	ldrhlt	r3, [r4, #12]
 800699c:	181b      	addge	r3, r3, r0
 800699e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80069a2:	bfac      	ite	ge
 80069a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80069a6:	81a3      	strhlt	r3, [r4, #12]
 80069a8:	bd10      	pop	{r4, pc}

080069aa <__swrite>:
 80069aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ae:	461f      	mov	r7, r3
 80069b0:	898b      	ldrh	r3, [r1, #12]
 80069b2:	05db      	lsls	r3, r3, #23
 80069b4:	4605      	mov	r5, r0
 80069b6:	460c      	mov	r4, r1
 80069b8:	4616      	mov	r6, r2
 80069ba:	d505      	bpl.n	80069c8 <__swrite+0x1e>
 80069bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069c0:	2302      	movs	r3, #2
 80069c2:	2200      	movs	r2, #0
 80069c4:	f000 f840 	bl	8006a48 <_lseek_r>
 80069c8:	89a3      	ldrh	r3, [r4, #12]
 80069ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80069d2:	81a3      	strh	r3, [r4, #12]
 80069d4:	4632      	mov	r2, r6
 80069d6:	463b      	mov	r3, r7
 80069d8:	4628      	mov	r0, r5
 80069da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069de:	f000 b857 	b.w	8006a90 <_write_r>

080069e2 <__sseek>:
 80069e2:	b510      	push	{r4, lr}
 80069e4:	460c      	mov	r4, r1
 80069e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069ea:	f000 f82d 	bl	8006a48 <_lseek_r>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	89a3      	ldrh	r3, [r4, #12]
 80069f2:	bf15      	itete	ne
 80069f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80069f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80069fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80069fe:	81a3      	strheq	r3, [r4, #12]
 8006a00:	bf18      	it	ne
 8006a02:	81a3      	strhne	r3, [r4, #12]
 8006a04:	bd10      	pop	{r4, pc}

08006a06 <__sclose>:
 8006a06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a0a:	f000 b80d 	b.w	8006a28 <_close_r>

08006a0e <memset>:
 8006a0e:	4402      	add	r2, r0
 8006a10:	4603      	mov	r3, r0
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d100      	bne.n	8006a18 <memset+0xa>
 8006a16:	4770      	bx	lr
 8006a18:	f803 1b01 	strb.w	r1, [r3], #1
 8006a1c:	e7f9      	b.n	8006a12 <memset+0x4>
	...

08006a20 <_localeconv_r>:
 8006a20:	4800      	ldr	r0, [pc, #0]	@ (8006a24 <_localeconv_r+0x4>)
 8006a22:	4770      	bx	lr
 8006a24:	200001c0 	.word	0x200001c0

08006a28 <_close_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d06      	ldr	r5, [pc, #24]	@ (8006a44 <_close_r+0x1c>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	602b      	str	r3, [r5, #0]
 8006a34:	f7fb f94f 	bl	8001cd6 <_close>
 8006a38:	1c43      	adds	r3, r0, #1
 8006a3a:	d102      	bne.n	8006a42 <_close_r+0x1a>
 8006a3c:	682b      	ldr	r3, [r5, #0]
 8006a3e:	b103      	cbz	r3, 8006a42 <_close_r+0x1a>
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	bd38      	pop	{r3, r4, r5, pc}
 8006a44:	200004e0 	.word	0x200004e0

08006a48 <_lseek_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4d07      	ldr	r5, [pc, #28]	@ (8006a68 <_lseek_r+0x20>)
 8006a4c:	4604      	mov	r4, r0
 8006a4e:	4608      	mov	r0, r1
 8006a50:	4611      	mov	r1, r2
 8006a52:	2200      	movs	r2, #0
 8006a54:	602a      	str	r2, [r5, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f7fb f964 	bl	8001d24 <_lseek>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_lseek_r+0x1e>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_lseek_r+0x1e>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	200004e0 	.word	0x200004e0

08006a6c <_read_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d07      	ldr	r5, [pc, #28]	@ (8006a8c <_read_r+0x20>)
 8006a70:	4604      	mov	r4, r0
 8006a72:	4608      	mov	r0, r1
 8006a74:	4611      	mov	r1, r2
 8006a76:	2200      	movs	r2, #0
 8006a78:	602a      	str	r2, [r5, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	f7fb f8f2 	bl	8001c64 <_read>
 8006a80:	1c43      	adds	r3, r0, #1
 8006a82:	d102      	bne.n	8006a8a <_read_r+0x1e>
 8006a84:	682b      	ldr	r3, [r5, #0]
 8006a86:	b103      	cbz	r3, 8006a8a <_read_r+0x1e>
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	bd38      	pop	{r3, r4, r5, pc}
 8006a8c:	200004e0 	.word	0x200004e0

08006a90 <_write_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4d07      	ldr	r5, [pc, #28]	@ (8006ab0 <_write_r+0x20>)
 8006a94:	4604      	mov	r4, r0
 8006a96:	4608      	mov	r0, r1
 8006a98:	4611      	mov	r1, r2
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	602a      	str	r2, [r5, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f7fb f8fd 	bl	8001c9e <_write>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d102      	bne.n	8006aae <_write_r+0x1e>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	b103      	cbz	r3, 8006aae <_write_r+0x1e>
 8006aac:	6023      	str	r3, [r4, #0]
 8006aae:	bd38      	pop	{r3, r4, r5, pc}
 8006ab0:	200004e0 	.word	0x200004e0

08006ab4 <__errno>:
 8006ab4:	4b01      	ldr	r3, [pc, #4]	@ (8006abc <__errno+0x8>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	20000080 	.word	0x20000080

08006ac0 <__libc_init_array>:
 8006ac0:	b570      	push	{r4, r5, r6, lr}
 8006ac2:	4d0d      	ldr	r5, [pc, #52]	@ (8006af8 <__libc_init_array+0x38>)
 8006ac4:	4c0d      	ldr	r4, [pc, #52]	@ (8006afc <__libc_init_array+0x3c>)
 8006ac6:	1b64      	subs	r4, r4, r5
 8006ac8:	10a4      	asrs	r4, r4, #2
 8006aca:	2600      	movs	r6, #0
 8006acc:	42a6      	cmp	r6, r4
 8006ace:	d109      	bne.n	8006ae4 <__libc_init_array+0x24>
 8006ad0:	4d0b      	ldr	r5, [pc, #44]	@ (8006b00 <__libc_init_array+0x40>)
 8006ad2:	4c0c      	ldr	r4, [pc, #48]	@ (8006b04 <__libc_init_array+0x44>)
 8006ad4:	f003 fa8c 	bl	8009ff0 <_init>
 8006ad8:	1b64      	subs	r4, r4, r5
 8006ada:	10a4      	asrs	r4, r4, #2
 8006adc:	2600      	movs	r6, #0
 8006ade:	42a6      	cmp	r6, r4
 8006ae0:	d105      	bne.n	8006aee <__libc_init_array+0x2e>
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ae8:	4798      	blx	r3
 8006aea:	3601      	adds	r6, #1
 8006aec:	e7ee      	b.n	8006acc <__libc_init_array+0xc>
 8006aee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af2:	4798      	blx	r3
 8006af4:	3601      	adds	r6, #1
 8006af6:	e7f2      	b.n	8006ade <__libc_init_array+0x1e>
 8006af8:	0800a628 	.word	0x0800a628
 8006afc:	0800a628 	.word	0x0800a628
 8006b00:	0800a628 	.word	0x0800a628
 8006b04:	0800a62c 	.word	0x0800a62c

08006b08 <__retarget_lock_init_recursive>:
 8006b08:	4770      	bx	lr

08006b0a <__retarget_lock_acquire_recursive>:
 8006b0a:	4770      	bx	lr

08006b0c <__retarget_lock_release_recursive>:
 8006b0c:	4770      	bx	lr

08006b0e <memcpy>:
 8006b0e:	440a      	add	r2, r1
 8006b10:	4291      	cmp	r1, r2
 8006b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b16:	d100      	bne.n	8006b1a <memcpy+0xc>
 8006b18:	4770      	bx	lr
 8006b1a:	b510      	push	{r4, lr}
 8006b1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b24:	4291      	cmp	r1, r2
 8006b26:	d1f9      	bne.n	8006b1c <memcpy+0xe>
 8006b28:	bd10      	pop	{r4, pc}

08006b2a <quorem>:
 8006b2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2e:	6903      	ldr	r3, [r0, #16]
 8006b30:	690c      	ldr	r4, [r1, #16]
 8006b32:	42a3      	cmp	r3, r4
 8006b34:	4607      	mov	r7, r0
 8006b36:	db7e      	blt.n	8006c36 <quorem+0x10c>
 8006b38:	3c01      	subs	r4, #1
 8006b3a:	f101 0814 	add.w	r8, r1, #20
 8006b3e:	00a3      	lsls	r3, r4, #2
 8006b40:	f100 0514 	add.w	r5, r0, #20
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b4a:	9301      	str	r3, [sp, #4]
 8006b4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006b50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b54:	3301      	adds	r3, #1
 8006b56:	429a      	cmp	r2, r3
 8006b58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006b5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006b60:	d32e      	bcc.n	8006bc0 <quorem+0x96>
 8006b62:	f04f 0a00 	mov.w	sl, #0
 8006b66:	46c4      	mov	ip, r8
 8006b68:	46ae      	mov	lr, r5
 8006b6a:	46d3      	mov	fp, sl
 8006b6c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006b70:	b298      	uxth	r0, r3
 8006b72:	fb06 a000 	mla	r0, r6, r0, sl
 8006b76:	0c02      	lsrs	r2, r0, #16
 8006b78:	0c1b      	lsrs	r3, r3, #16
 8006b7a:	fb06 2303 	mla	r3, r6, r3, r2
 8006b7e:	f8de 2000 	ldr.w	r2, [lr]
 8006b82:	b280      	uxth	r0, r0
 8006b84:	b292      	uxth	r2, r2
 8006b86:	1a12      	subs	r2, r2, r0
 8006b88:	445a      	add	r2, fp
 8006b8a:	f8de 0000 	ldr.w	r0, [lr]
 8006b8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006b98:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006b9c:	b292      	uxth	r2, r2
 8006b9e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ba2:	45e1      	cmp	r9, ip
 8006ba4:	f84e 2b04 	str.w	r2, [lr], #4
 8006ba8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006bac:	d2de      	bcs.n	8006b6c <quorem+0x42>
 8006bae:	9b00      	ldr	r3, [sp, #0]
 8006bb0:	58eb      	ldr	r3, [r5, r3]
 8006bb2:	b92b      	cbnz	r3, 8006bc0 <quorem+0x96>
 8006bb4:	9b01      	ldr	r3, [sp, #4]
 8006bb6:	3b04      	subs	r3, #4
 8006bb8:	429d      	cmp	r5, r3
 8006bba:	461a      	mov	r2, r3
 8006bbc:	d32f      	bcc.n	8006c1e <quorem+0xf4>
 8006bbe:	613c      	str	r4, [r7, #16]
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f001 f97b 	bl	8007ebc <__mcmp>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	db25      	blt.n	8006c16 <quorem+0xec>
 8006bca:	4629      	mov	r1, r5
 8006bcc:	2000      	movs	r0, #0
 8006bce:	f858 2b04 	ldr.w	r2, [r8], #4
 8006bd2:	f8d1 c000 	ldr.w	ip, [r1]
 8006bd6:	fa1f fe82 	uxth.w	lr, r2
 8006bda:	fa1f f38c 	uxth.w	r3, ip
 8006bde:	eba3 030e 	sub.w	r3, r3, lr
 8006be2:	4403      	add	r3, r0
 8006be4:	0c12      	lsrs	r2, r2, #16
 8006be6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006bea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006bf4:	45c1      	cmp	r9, r8
 8006bf6:	f841 3b04 	str.w	r3, [r1], #4
 8006bfa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006bfe:	d2e6      	bcs.n	8006bce <quorem+0xa4>
 8006c00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c04:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c08:	b922      	cbnz	r2, 8006c14 <quorem+0xea>
 8006c0a:	3b04      	subs	r3, #4
 8006c0c:	429d      	cmp	r5, r3
 8006c0e:	461a      	mov	r2, r3
 8006c10:	d30b      	bcc.n	8006c2a <quorem+0x100>
 8006c12:	613c      	str	r4, [r7, #16]
 8006c14:	3601      	adds	r6, #1
 8006c16:	4630      	mov	r0, r6
 8006c18:	b003      	add	sp, #12
 8006c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	3b04      	subs	r3, #4
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	d1cb      	bne.n	8006bbe <quorem+0x94>
 8006c26:	3c01      	subs	r4, #1
 8006c28:	e7c6      	b.n	8006bb8 <quorem+0x8e>
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	3b04      	subs	r3, #4
 8006c2e:	2a00      	cmp	r2, #0
 8006c30:	d1ef      	bne.n	8006c12 <quorem+0xe8>
 8006c32:	3c01      	subs	r4, #1
 8006c34:	e7ea      	b.n	8006c0c <quorem+0xe2>
 8006c36:	2000      	movs	r0, #0
 8006c38:	e7ee      	b.n	8006c18 <quorem+0xee>
 8006c3a:	0000      	movs	r0, r0
 8006c3c:	0000      	movs	r0, r0
	...

08006c40 <_dtoa_r>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	69c7      	ldr	r7, [r0, #28]
 8006c46:	b099      	sub	sp, #100	@ 0x64
 8006c48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006c4c:	ec55 4b10 	vmov	r4, r5, d0
 8006c50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006c52:	9109      	str	r1, [sp, #36]	@ 0x24
 8006c54:	4683      	mov	fp, r0
 8006c56:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c5a:	b97f      	cbnz	r7, 8006c7c <_dtoa_r+0x3c>
 8006c5c:	2010      	movs	r0, #16
 8006c5e:	f000 fdfd 	bl	800785c <malloc>
 8006c62:	4602      	mov	r2, r0
 8006c64:	f8cb 001c 	str.w	r0, [fp, #28]
 8006c68:	b920      	cbnz	r0, 8006c74 <_dtoa_r+0x34>
 8006c6a:	4ba7      	ldr	r3, [pc, #668]	@ (8006f08 <_dtoa_r+0x2c8>)
 8006c6c:	21ef      	movs	r1, #239	@ 0xef
 8006c6e:	48a7      	ldr	r0, [pc, #668]	@ (8006f0c <_dtoa_r+0x2cc>)
 8006c70:	f001 fc5a 	bl	8008528 <__assert_func>
 8006c74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006c78:	6007      	str	r7, [r0, #0]
 8006c7a:	60c7      	str	r7, [r0, #12]
 8006c7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c80:	6819      	ldr	r1, [r3, #0]
 8006c82:	b159      	cbz	r1, 8006c9c <_dtoa_r+0x5c>
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	604a      	str	r2, [r1, #4]
 8006c88:	2301      	movs	r3, #1
 8006c8a:	4093      	lsls	r3, r2
 8006c8c:	608b      	str	r3, [r1, #8]
 8006c8e:	4658      	mov	r0, fp
 8006c90:	f000 feda 	bl	8007a48 <_Bfree>
 8006c94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	1e2b      	subs	r3, r5, #0
 8006c9e:	bfb9      	ittee	lt
 8006ca0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006ca4:	9303      	strlt	r3, [sp, #12]
 8006ca6:	2300      	movge	r3, #0
 8006ca8:	6033      	strge	r3, [r6, #0]
 8006caa:	9f03      	ldr	r7, [sp, #12]
 8006cac:	4b98      	ldr	r3, [pc, #608]	@ (8006f10 <_dtoa_r+0x2d0>)
 8006cae:	bfbc      	itt	lt
 8006cb0:	2201      	movlt	r2, #1
 8006cb2:	6032      	strlt	r2, [r6, #0]
 8006cb4:	43bb      	bics	r3, r7
 8006cb6:	d112      	bne.n	8006cde <_dtoa_r+0x9e>
 8006cb8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006cc4:	4323      	orrs	r3, r4
 8006cc6:	f000 854d 	beq.w	8007764 <_dtoa_r+0xb24>
 8006cca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ccc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006f24 <_dtoa_r+0x2e4>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	f000 854f 	beq.w	8007774 <_dtoa_r+0xb34>
 8006cd6:	f10a 0303 	add.w	r3, sl, #3
 8006cda:	f000 bd49 	b.w	8007770 <_dtoa_r+0xb30>
 8006cde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	ec51 0b17 	vmov	r0, r1, d7
 8006ce8:	2300      	movs	r3, #0
 8006cea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006cee:	f7f9 ff03 	bl	8000af8 <__aeabi_dcmpeq>
 8006cf2:	4680      	mov	r8, r0
 8006cf4:	b158      	cbz	r0, 8006d0e <_dtoa_r+0xce>
 8006cf6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	6013      	str	r3, [r2, #0]
 8006cfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cfe:	b113      	cbz	r3, 8006d06 <_dtoa_r+0xc6>
 8006d00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006d02:	4b84      	ldr	r3, [pc, #528]	@ (8006f14 <_dtoa_r+0x2d4>)
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006f28 <_dtoa_r+0x2e8>
 8006d0a:	f000 bd33 	b.w	8007774 <_dtoa_r+0xb34>
 8006d0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006d12:	aa16      	add	r2, sp, #88	@ 0x58
 8006d14:	a917      	add	r1, sp, #92	@ 0x5c
 8006d16:	4658      	mov	r0, fp
 8006d18:	f001 f980 	bl	800801c <__d2b>
 8006d1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006d20:	4681      	mov	r9, r0
 8006d22:	2e00      	cmp	r6, #0
 8006d24:	d077      	beq.n	8006e16 <_dtoa_r+0x1d6>
 8006d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006d2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006d38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006d3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006d40:	4619      	mov	r1, r3
 8006d42:	2200      	movs	r2, #0
 8006d44:	4b74      	ldr	r3, [pc, #464]	@ (8006f18 <_dtoa_r+0x2d8>)
 8006d46:	f7f9 fab7 	bl	80002b8 <__aeabi_dsub>
 8006d4a:	a369      	add	r3, pc, #420	@ (adr r3, 8006ef0 <_dtoa_r+0x2b0>)
 8006d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d50:	f7f9 fc6a 	bl	8000628 <__aeabi_dmul>
 8006d54:	a368      	add	r3, pc, #416	@ (adr r3, 8006ef8 <_dtoa_r+0x2b8>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 faaf 	bl	80002bc <__adddf3>
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4630      	mov	r0, r6
 8006d62:	460d      	mov	r5, r1
 8006d64:	f7f9 fbf6 	bl	8000554 <__aeabi_i2d>
 8006d68:	a365      	add	r3, pc, #404	@ (adr r3, 8006f00 <_dtoa_r+0x2c0>)
 8006d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6e:	f7f9 fc5b 	bl	8000628 <__aeabi_dmul>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4620      	mov	r0, r4
 8006d78:	4629      	mov	r1, r5
 8006d7a:	f7f9 fa9f 	bl	80002bc <__adddf3>
 8006d7e:	4604      	mov	r4, r0
 8006d80:	460d      	mov	r5, r1
 8006d82:	f7f9 ff01 	bl	8000b88 <__aeabi_d2iz>
 8006d86:	2200      	movs	r2, #0
 8006d88:	4607      	mov	r7, r0
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	4629      	mov	r1, r5
 8006d90:	f7f9 febc 	bl	8000b0c <__aeabi_dcmplt>
 8006d94:	b140      	cbz	r0, 8006da8 <_dtoa_r+0x168>
 8006d96:	4638      	mov	r0, r7
 8006d98:	f7f9 fbdc 	bl	8000554 <__aeabi_i2d>
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	462b      	mov	r3, r5
 8006da0:	f7f9 feaa 	bl	8000af8 <__aeabi_dcmpeq>
 8006da4:	b900      	cbnz	r0, 8006da8 <_dtoa_r+0x168>
 8006da6:	3f01      	subs	r7, #1
 8006da8:	2f16      	cmp	r7, #22
 8006daa:	d851      	bhi.n	8006e50 <_dtoa_r+0x210>
 8006dac:	4b5b      	ldr	r3, [pc, #364]	@ (8006f1c <_dtoa_r+0x2dc>)
 8006dae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006dba:	f7f9 fea7 	bl	8000b0c <__aeabi_dcmplt>
 8006dbe:	2800      	cmp	r0, #0
 8006dc0:	d048      	beq.n	8006e54 <_dtoa_r+0x214>
 8006dc2:	3f01      	subs	r7, #1
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	9312      	str	r3, [sp, #72]	@ 0x48
 8006dc8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006dca:	1b9b      	subs	r3, r3, r6
 8006dcc:	1e5a      	subs	r2, r3, #1
 8006dce:	bf44      	itt	mi
 8006dd0:	f1c3 0801 	rsbmi	r8, r3, #1
 8006dd4:	2300      	movmi	r3, #0
 8006dd6:	9208      	str	r2, [sp, #32]
 8006dd8:	bf54      	ite	pl
 8006dda:	f04f 0800 	movpl.w	r8, #0
 8006dde:	9308      	strmi	r3, [sp, #32]
 8006de0:	2f00      	cmp	r7, #0
 8006de2:	db39      	blt.n	8006e58 <_dtoa_r+0x218>
 8006de4:	9b08      	ldr	r3, [sp, #32]
 8006de6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006de8:	443b      	add	r3, r7
 8006dea:	9308      	str	r3, [sp, #32]
 8006dec:	2300      	movs	r3, #0
 8006dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8006df0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006df2:	2b09      	cmp	r3, #9
 8006df4:	d864      	bhi.n	8006ec0 <_dtoa_r+0x280>
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	bfc4      	itt	gt
 8006dfa:	3b04      	subgt	r3, #4
 8006dfc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e00:	f1a3 0302 	sub.w	r3, r3, #2
 8006e04:	bfcc      	ite	gt
 8006e06:	2400      	movgt	r4, #0
 8006e08:	2401      	movle	r4, #1
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d863      	bhi.n	8006ed6 <_dtoa_r+0x296>
 8006e0e:	e8df f003 	tbb	[pc, r3]
 8006e12:	372a      	.short	0x372a
 8006e14:	5535      	.short	0x5535
 8006e16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006e1a:	441e      	add	r6, r3
 8006e1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	bfc1      	itttt	gt
 8006e24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006e28:	409f      	lslgt	r7, r3
 8006e2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006e2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006e32:	bfd6      	itet	le
 8006e34:	f1c3 0320 	rsble	r3, r3, #32
 8006e38:	ea47 0003 	orrgt.w	r0, r7, r3
 8006e3c:	fa04 f003 	lslle.w	r0, r4, r3
 8006e40:	f7f9 fb78 	bl	8000534 <__aeabi_ui2d>
 8006e44:	2201      	movs	r2, #1
 8006e46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006e4a:	3e01      	subs	r6, #1
 8006e4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006e4e:	e777      	b.n	8006d40 <_dtoa_r+0x100>
 8006e50:	2301      	movs	r3, #1
 8006e52:	e7b8      	b.n	8006dc6 <_dtoa_r+0x186>
 8006e54:	9012      	str	r0, [sp, #72]	@ 0x48
 8006e56:	e7b7      	b.n	8006dc8 <_dtoa_r+0x188>
 8006e58:	427b      	negs	r3, r7
 8006e5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	eba8 0807 	sub.w	r8, r8, r7
 8006e62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e64:	e7c4      	b.n	8006df0 <_dtoa_r+0x1b0>
 8006e66:	2300      	movs	r3, #0
 8006e68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dc35      	bgt.n	8006edc <_dtoa_r+0x29c>
 8006e70:	2301      	movs	r3, #1
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	9307      	str	r3, [sp, #28]
 8006e76:	461a      	mov	r2, r3
 8006e78:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e7a:	e00b      	b.n	8006e94 <_dtoa_r+0x254>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e7f3      	b.n	8006e68 <_dtoa_r+0x228>
 8006e80:	2300      	movs	r3, #0
 8006e82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e86:	18fb      	adds	r3, r7, r3
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	9307      	str	r3, [sp, #28]
 8006e90:	bfb8      	it	lt
 8006e92:	2301      	movlt	r3, #1
 8006e94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006e98:	2100      	movs	r1, #0
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	f102 0514 	add.w	r5, r2, #20
 8006ea0:	429d      	cmp	r5, r3
 8006ea2:	d91f      	bls.n	8006ee4 <_dtoa_r+0x2a4>
 8006ea4:	6041      	str	r1, [r0, #4]
 8006ea6:	4658      	mov	r0, fp
 8006ea8:	f000 fd8e 	bl	80079c8 <_Balloc>
 8006eac:	4682      	mov	sl, r0
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d13c      	bne.n	8006f2c <_dtoa_r+0x2ec>
 8006eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <_dtoa_r+0x2e0>)
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8006eba:	e6d8      	b.n	8006c6e <_dtoa_r+0x2e>
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e7e0      	b.n	8006e82 <_dtoa_r+0x242>
 8006ec0:	2401      	movs	r4, #1
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ec6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ec8:	f04f 33ff 	mov.w	r3, #4294967295
 8006ecc:	9300      	str	r3, [sp, #0]
 8006ece:	9307      	str	r3, [sp, #28]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	2312      	movs	r3, #18
 8006ed4:	e7d0      	b.n	8006e78 <_dtoa_r+0x238>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eda:	e7f5      	b.n	8006ec8 <_dtoa_r+0x288>
 8006edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	9307      	str	r3, [sp, #28]
 8006ee2:	e7d7      	b.n	8006e94 <_dtoa_r+0x254>
 8006ee4:	3101      	adds	r1, #1
 8006ee6:	0052      	lsls	r2, r2, #1
 8006ee8:	e7d8      	b.n	8006e9c <_dtoa_r+0x25c>
 8006eea:	bf00      	nop
 8006eec:	f3af 8000 	nop.w
 8006ef0:	636f4361 	.word	0x636f4361
 8006ef4:	3fd287a7 	.word	0x3fd287a7
 8006ef8:	8b60c8b3 	.word	0x8b60c8b3
 8006efc:	3fc68a28 	.word	0x3fc68a28
 8006f00:	509f79fb 	.word	0x509f79fb
 8006f04:	3fd34413 	.word	0x3fd34413
 8006f08:	0800a0e1 	.word	0x0800a0e1
 8006f0c:	0800a0f8 	.word	0x0800a0f8
 8006f10:	7ff00000 	.word	0x7ff00000
 8006f14:	0800a0b1 	.word	0x0800a0b1
 8006f18:	3ff80000 	.word	0x3ff80000
 8006f1c:	0800a1f0 	.word	0x0800a1f0
 8006f20:	0800a150 	.word	0x0800a150
 8006f24:	0800a0dd 	.word	0x0800a0dd
 8006f28:	0800a0b0 	.word	0x0800a0b0
 8006f2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f30:	6018      	str	r0, [r3, #0]
 8006f32:	9b07      	ldr	r3, [sp, #28]
 8006f34:	2b0e      	cmp	r3, #14
 8006f36:	f200 80a4 	bhi.w	8007082 <_dtoa_r+0x442>
 8006f3a:	2c00      	cmp	r4, #0
 8006f3c:	f000 80a1 	beq.w	8007082 <_dtoa_r+0x442>
 8006f40:	2f00      	cmp	r7, #0
 8006f42:	dd33      	ble.n	8006fac <_dtoa_r+0x36c>
 8006f44:	4bad      	ldr	r3, [pc, #692]	@ (80071fc <_dtoa_r+0x5bc>)
 8006f46:	f007 020f 	and.w	r2, r7, #15
 8006f4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f4e:	ed93 7b00 	vldr	d7, [r3]
 8006f52:	05f8      	lsls	r0, r7, #23
 8006f54:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006f58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006f5c:	d516      	bpl.n	8006f8c <_dtoa_r+0x34c>
 8006f5e:	4ba8      	ldr	r3, [pc, #672]	@ (8007200 <_dtoa_r+0x5c0>)
 8006f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f68:	f7f9 fc88 	bl	800087c <__aeabi_ddiv>
 8006f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f70:	f004 040f 	and.w	r4, r4, #15
 8006f74:	2603      	movs	r6, #3
 8006f76:	4da2      	ldr	r5, [pc, #648]	@ (8007200 <_dtoa_r+0x5c0>)
 8006f78:	b954      	cbnz	r4, 8006f90 <_dtoa_r+0x350>
 8006f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f82:	f7f9 fc7b 	bl	800087c <__aeabi_ddiv>
 8006f86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f8a:	e028      	b.n	8006fde <_dtoa_r+0x39e>
 8006f8c:	2602      	movs	r6, #2
 8006f8e:	e7f2      	b.n	8006f76 <_dtoa_r+0x336>
 8006f90:	07e1      	lsls	r1, r4, #31
 8006f92:	d508      	bpl.n	8006fa6 <_dtoa_r+0x366>
 8006f94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f9c:	f7f9 fb44 	bl	8000628 <__aeabi_dmul>
 8006fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fa4:	3601      	adds	r6, #1
 8006fa6:	1064      	asrs	r4, r4, #1
 8006fa8:	3508      	adds	r5, #8
 8006faa:	e7e5      	b.n	8006f78 <_dtoa_r+0x338>
 8006fac:	f000 80d2 	beq.w	8007154 <_dtoa_r+0x514>
 8006fb0:	427c      	negs	r4, r7
 8006fb2:	4b92      	ldr	r3, [pc, #584]	@ (80071fc <_dtoa_r+0x5bc>)
 8006fb4:	4d92      	ldr	r5, [pc, #584]	@ (8007200 <_dtoa_r+0x5c0>)
 8006fb6:	f004 020f 	and.w	r2, r4, #15
 8006fba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fc6:	f7f9 fb2f 	bl	8000628 <__aeabi_dmul>
 8006fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fce:	1124      	asrs	r4, r4, #4
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	2602      	movs	r6, #2
 8006fd4:	2c00      	cmp	r4, #0
 8006fd6:	f040 80b2 	bne.w	800713e <_dtoa_r+0x4fe>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1d3      	bne.n	8006f86 <_dtoa_r+0x346>
 8006fde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006fe0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f000 80b7 	beq.w	8007158 <_dtoa_r+0x518>
 8006fea:	4b86      	ldr	r3, [pc, #536]	@ (8007204 <_dtoa_r+0x5c4>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	4620      	mov	r0, r4
 8006ff0:	4629      	mov	r1, r5
 8006ff2:	f7f9 fd8b 	bl	8000b0c <__aeabi_dcmplt>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	f000 80ae 	beq.w	8007158 <_dtoa_r+0x518>
 8006ffc:	9b07      	ldr	r3, [sp, #28]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 80aa 	beq.w	8007158 <_dtoa_r+0x518>
 8007004:	9b00      	ldr	r3, [sp, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	dd37      	ble.n	800707a <_dtoa_r+0x43a>
 800700a:	1e7b      	subs	r3, r7, #1
 800700c:	9304      	str	r3, [sp, #16]
 800700e:	4620      	mov	r0, r4
 8007010:	4b7d      	ldr	r3, [pc, #500]	@ (8007208 <_dtoa_r+0x5c8>)
 8007012:	2200      	movs	r2, #0
 8007014:	4629      	mov	r1, r5
 8007016:	f7f9 fb07 	bl	8000628 <__aeabi_dmul>
 800701a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800701e:	9c00      	ldr	r4, [sp, #0]
 8007020:	3601      	adds	r6, #1
 8007022:	4630      	mov	r0, r6
 8007024:	f7f9 fa96 	bl	8000554 <__aeabi_i2d>
 8007028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800702c:	f7f9 fafc 	bl	8000628 <__aeabi_dmul>
 8007030:	4b76      	ldr	r3, [pc, #472]	@ (800720c <_dtoa_r+0x5cc>)
 8007032:	2200      	movs	r2, #0
 8007034:	f7f9 f942 	bl	80002bc <__adddf3>
 8007038:	4605      	mov	r5, r0
 800703a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800703e:	2c00      	cmp	r4, #0
 8007040:	f040 808d 	bne.w	800715e <_dtoa_r+0x51e>
 8007044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007048:	4b71      	ldr	r3, [pc, #452]	@ (8007210 <_dtoa_r+0x5d0>)
 800704a:	2200      	movs	r2, #0
 800704c:	f7f9 f934 	bl	80002b8 <__aeabi_dsub>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007058:	462a      	mov	r2, r5
 800705a:	4633      	mov	r3, r6
 800705c:	f7f9 fd74 	bl	8000b48 <__aeabi_dcmpgt>
 8007060:	2800      	cmp	r0, #0
 8007062:	f040 828b 	bne.w	800757c <_dtoa_r+0x93c>
 8007066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800706a:	462a      	mov	r2, r5
 800706c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007070:	f7f9 fd4c 	bl	8000b0c <__aeabi_dcmplt>
 8007074:	2800      	cmp	r0, #0
 8007076:	f040 8128 	bne.w	80072ca <_dtoa_r+0x68a>
 800707a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800707e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007082:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007084:	2b00      	cmp	r3, #0
 8007086:	f2c0 815a 	blt.w	800733e <_dtoa_r+0x6fe>
 800708a:	2f0e      	cmp	r7, #14
 800708c:	f300 8157 	bgt.w	800733e <_dtoa_r+0x6fe>
 8007090:	4b5a      	ldr	r3, [pc, #360]	@ (80071fc <_dtoa_r+0x5bc>)
 8007092:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007096:	ed93 7b00 	vldr	d7, [r3]
 800709a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800709c:	2b00      	cmp	r3, #0
 800709e:	ed8d 7b00 	vstr	d7, [sp]
 80070a2:	da03      	bge.n	80070ac <_dtoa_r+0x46c>
 80070a4:	9b07      	ldr	r3, [sp, #28]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	f340 8101 	ble.w	80072ae <_dtoa_r+0x66e>
 80070ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80070b0:	4656      	mov	r6, sl
 80070b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070b6:	4620      	mov	r0, r4
 80070b8:	4629      	mov	r1, r5
 80070ba:	f7f9 fbdf 	bl	800087c <__aeabi_ddiv>
 80070be:	f7f9 fd63 	bl	8000b88 <__aeabi_d2iz>
 80070c2:	4680      	mov	r8, r0
 80070c4:	f7f9 fa46 	bl	8000554 <__aeabi_i2d>
 80070c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070cc:	f7f9 faac 	bl	8000628 <__aeabi_dmul>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	4620      	mov	r0, r4
 80070d6:	4629      	mov	r1, r5
 80070d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80070dc:	f7f9 f8ec 	bl	80002b8 <__aeabi_dsub>
 80070e0:	f806 4b01 	strb.w	r4, [r6], #1
 80070e4:	9d07      	ldr	r5, [sp, #28]
 80070e6:	eba6 040a 	sub.w	r4, r6, sl
 80070ea:	42a5      	cmp	r5, r4
 80070ec:	4602      	mov	r2, r0
 80070ee:	460b      	mov	r3, r1
 80070f0:	f040 8117 	bne.w	8007322 <_dtoa_r+0x6e2>
 80070f4:	f7f9 f8e2 	bl	80002bc <__adddf3>
 80070f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070fc:	4604      	mov	r4, r0
 80070fe:	460d      	mov	r5, r1
 8007100:	f7f9 fd22 	bl	8000b48 <__aeabi_dcmpgt>
 8007104:	2800      	cmp	r0, #0
 8007106:	f040 80f9 	bne.w	80072fc <_dtoa_r+0x6bc>
 800710a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800710e:	4620      	mov	r0, r4
 8007110:	4629      	mov	r1, r5
 8007112:	f7f9 fcf1 	bl	8000af8 <__aeabi_dcmpeq>
 8007116:	b118      	cbz	r0, 8007120 <_dtoa_r+0x4e0>
 8007118:	f018 0f01 	tst.w	r8, #1
 800711c:	f040 80ee 	bne.w	80072fc <_dtoa_r+0x6bc>
 8007120:	4649      	mov	r1, r9
 8007122:	4658      	mov	r0, fp
 8007124:	f000 fc90 	bl	8007a48 <_Bfree>
 8007128:	2300      	movs	r3, #0
 800712a:	7033      	strb	r3, [r6, #0]
 800712c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800712e:	3701      	adds	r7, #1
 8007130:	601f      	str	r7, [r3, #0]
 8007132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 831d 	beq.w	8007774 <_dtoa_r+0xb34>
 800713a:	601e      	str	r6, [r3, #0]
 800713c:	e31a      	b.n	8007774 <_dtoa_r+0xb34>
 800713e:	07e2      	lsls	r2, r4, #31
 8007140:	d505      	bpl.n	800714e <_dtoa_r+0x50e>
 8007142:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007146:	f7f9 fa6f 	bl	8000628 <__aeabi_dmul>
 800714a:	3601      	adds	r6, #1
 800714c:	2301      	movs	r3, #1
 800714e:	1064      	asrs	r4, r4, #1
 8007150:	3508      	adds	r5, #8
 8007152:	e73f      	b.n	8006fd4 <_dtoa_r+0x394>
 8007154:	2602      	movs	r6, #2
 8007156:	e742      	b.n	8006fde <_dtoa_r+0x39e>
 8007158:	9c07      	ldr	r4, [sp, #28]
 800715a:	9704      	str	r7, [sp, #16]
 800715c:	e761      	b.n	8007022 <_dtoa_r+0x3e2>
 800715e:	4b27      	ldr	r3, [pc, #156]	@ (80071fc <_dtoa_r+0x5bc>)
 8007160:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007162:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007166:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800716a:	4454      	add	r4, sl
 800716c:	2900      	cmp	r1, #0
 800716e:	d053      	beq.n	8007218 <_dtoa_r+0x5d8>
 8007170:	4928      	ldr	r1, [pc, #160]	@ (8007214 <_dtoa_r+0x5d4>)
 8007172:	2000      	movs	r0, #0
 8007174:	f7f9 fb82 	bl	800087c <__aeabi_ddiv>
 8007178:	4633      	mov	r3, r6
 800717a:	462a      	mov	r2, r5
 800717c:	f7f9 f89c 	bl	80002b8 <__aeabi_dsub>
 8007180:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007184:	4656      	mov	r6, sl
 8007186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800718a:	f7f9 fcfd 	bl	8000b88 <__aeabi_d2iz>
 800718e:	4605      	mov	r5, r0
 8007190:	f7f9 f9e0 	bl	8000554 <__aeabi_i2d>
 8007194:	4602      	mov	r2, r0
 8007196:	460b      	mov	r3, r1
 8007198:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800719c:	f7f9 f88c 	bl	80002b8 <__aeabi_dsub>
 80071a0:	3530      	adds	r5, #48	@ 0x30
 80071a2:	4602      	mov	r2, r0
 80071a4:	460b      	mov	r3, r1
 80071a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071aa:	f806 5b01 	strb.w	r5, [r6], #1
 80071ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071b2:	f7f9 fcab 	bl	8000b0c <__aeabi_dcmplt>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d171      	bne.n	800729e <_dtoa_r+0x65e>
 80071ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071be:	4911      	ldr	r1, [pc, #68]	@ (8007204 <_dtoa_r+0x5c4>)
 80071c0:	2000      	movs	r0, #0
 80071c2:	f7f9 f879 	bl	80002b8 <__aeabi_dsub>
 80071c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80071ca:	f7f9 fc9f 	bl	8000b0c <__aeabi_dcmplt>
 80071ce:	2800      	cmp	r0, #0
 80071d0:	f040 8095 	bne.w	80072fe <_dtoa_r+0x6be>
 80071d4:	42a6      	cmp	r6, r4
 80071d6:	f43f af50 	beq.w	800707a <_dtoa_r+0x43a>
 80071da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80071de:	4b0a      	ldr	r3, [pc, #40]	@ (8007208 <_dtoa_r+0x5c8>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	f7f9 fa21 	bl	8000628 <__aeabi_dmul>
 80071e6:	4b08      	ldr	r3, [pc, #32]	@ (8007208 <_dtoa_r+0x5c8>)
 80071e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80071ec:	2200      	movs	r2, #0
 80071ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071f2:	f7f9 fa19 	bl	8000628 <__aeabi_dmul>
 80071f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071fa:	e7c4      	b.n	8007186 <_dtoa_r+0x546>
 80071fc:	0800a1f0 	.word	0x0800a1f0
 8007200:	0800a1c8 	.word	0x0800a1c8
 8007204:	3ff00000 	.word	0x3ff00000
 8007208:	40240000 	.word	0x40240000
 800720c:	401c0000 	.word	0x401c0000
 8007210:	40140000 	.word	0x40140000
 8007214:	3fe00000 	.word	0x3fe00000
 8007218:	4631      	mov	r1, r6
 800721a:	4628      	mov	r0, r5
 800721c:	f7f9 fa04 	bl	8000628 <__aeabi_dmul>
 8007220:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007224:	9415      	str	r4, [sp, #84]	@ 0x54
 8007226:	4656      	mov	r6, sl
 8007228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800722c:	f7f9 fcac 	bl	8000b88 <__aeabi_d2iz>
 8007230:	4605      	mov	r5, r0
 8007232:	f7f9 f98f 	bl	8000554 <__aeabi_i2d>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800723e:	f7f9 f83b 	bl	80002b8 <__aeabi_dsub>
 8007242:	3530      	adds	r5, #48	@ 0x30
 8007244:	f806 5b01 	strb.w	r5, [r6], #1
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	42a6      	cmp	r6, r4
 800724e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007252:	f04f 0200 	mov.w	r2, #0
 8007256:	d124      	bne.n	80072a2 <_dtoa_r+0x662>
 8007258:	4bac      	ldr	r3, [pc, #688]	@ (800750c <_dtoa_r+0x8cc>)
 800725a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800725e:	f7f9 f82d 	bl	80002bc <__adddf3>
 8007262:	4602      	mov	r2, r0
 8007264:	460b      	mov	r3, r1
 8007266:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800726a:	f7f9 fc6d 	bl	8000b48 <__aeabi_dcmpgt>
 800726e:	2800      	cmp	r0, #0
 8007270:	d145      	bne.n	80072fe <_dtoa_r+0x6be>
 8007272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007276:	49a5      	ldr	r1, [pc, #660]	@ (800750c <_dtoa_r+0x8cc>)
 8007278:	2000      	movs	r0, #0
 800727a:	f7f9 f81d 	bl	80002b8 <__aeabi_dsub>
 800727e:	4602      	mov	r2, r0
 8007280:	460b      	mov	r3, r1
 8007282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007286:	f7f9 fc41 	bl	8000b0c <__aeabi_dcmplt>
 800728a:	2800      	cmp	r0, #0
 800728c:	f43f aef5 	beq.w	800707a <_dtoa_r+0x43a>
 8007290:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007292:	1e73      	subs	r3, r6, #1
 8007294:	9315      	str	r3, [sp, #84]	@ 0x54
 8007296:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800729a:	2b30      	cmp	r3, #48	@ 0x30
 800729c:	d0f8      	beq.n	8007290 <_dtoa_r+0x650>
 800729e:	9f04      	ldr	r7, [sp, #16]
 80072a0:	e73e      	b.n	8007120 <_dtoa_r+0x4e0>
 80072a2:	4b9b      	ldr	r3, [pc, #620]	@ (8007510 <_dtoa_r+0x8d0>)
 80072a4:	f7f9 f9c0 	bl	8000628 <__aeabi_dmul>
 80072a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ac:	e7bc      	b.n	8007228 <_dtoa_r+0x5e8>
 80072ae:	d10c      	bne.n	80072ca <_dtoa_r+0x68a>
 80072b0:	4b98      	ldr	r3, [pc, #608]	@ (8007514 <_dtoa_r+0x8d4>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072b8:	f7f9 f9b6 	bl	8000628 <__aeabi_dmul>
 80072bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072c0:	f7f9 fc38 	bl	8000b34 <__aeabi_dcmpge>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	f000 8157 	beq.w	8007578 <_dtoa_r+0x938>
 80072ca:	2400      	movs	r4, #0
 80072cc:	4625      	mov	r5, r4
 80072ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80072d0:	43db      	mvns	r3, r3
 80072d2:	9304      	str	r3, [sp, #16]
 80072d4:	4656      	mov	r6, sl
 80072d6:	2700      	movs	r7, #0
 80072d8:	4621      	mov	r1, r4
 80072da:	4658      	mov	r0, fp
 80072dc:	f000 fbb4 	bl	8007a48 <_Bfree>
 80072e0:	2d00      	cmp	r5, #0
 80072e2:	d0dc      	beq.n	800729e <_dtoa_r+0x65e>
 80072e4:	b12f      	cbz	r7, 80072f2 <_dtoa_r+0x6b2>
 80072e6:	42af      	cmp	r7, r5
 80072e8:	d003      	beq.n	80072f2 <_dtoa_r+0x6b2>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4658      	mov	r0, fp
 80072ee:	f000 fbab 	bl	8007a48 <_Bfree>
 80072f2:	4629      	mov	r1, r5
 80072f4:	4658      	mov	r0, fp
 80072f6:	f000 fba7 	bl	8007a48 <_Bfree>
 80072fa:	e7d0      	b.n	800729e <_dtoa_r+0x65e>
 80072fc:	9704      	str	r7, [sp, #16]
 80072fe:	4633      	mov	r3, r6
 8007300:	461e      	mov	r6, r3
 8007302:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007306:	2a39      	cmp	r2, #57	@ 0x39
 8007308:	d107      	bne.n	800731a <_dtoa_r+0x6da>
 800730a:	459a      	cmp	sl, r3
 800730c:	d1f8      	bne.n	8007300 <_dtoa_r+0x6c0>
 800730e:	9a04      	ldr	r2, [sp, #16]
 8007310:	3201      	adds	r2, #1
 8007312:	9204      	str	r2, [sp, #16]
 8007314:	2230      	movs	r2, #48	@ 0x30
 8007316:	f88a 2000 	strb.w	r2, [sl]
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	3201      	adds	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e7bd      	b.n	800729e <_dtoa_r+0x65e>
 8007322:	4b7b      	ldr	r3, [pc, #492]	@ (8007510 <_dtoa_r+0x8d0>)
 8007324:	2200      	movs	r2, #0
 8007326:	f7f9 f97f 	bl	8000628 <__aeabi_dmul>
 800732a:	2200      	movs	r2, #0
 800732c:	2300      	movs	r3, #0
 800732e:	4604      	mov	r4, r0
 8007330:	460d      	mov	r5, r1
 8007332:	f7f9 fbe1 	bl	8000af8 <__aeabi_dcmpeq>
 8007336:	2800      	cmp	r0, #0
 8007338:	f43f aebb 	beq.w	80070b2 <_dtoa_r+0x472>
 800733c:	e6f0      	b.n	8007120 <_dtoa_r+0x4e0>
 800733e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007340:	2a00      	cmp	r2, #0
 8007342:	f000 80db 	beq.w	80074fc <_dtoa_r+0x8bc>
 8007346:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007348:	2a01      	cmp	r2, #1
 800734a:	f300 80bf 	bgt.w	80074cc <_dtoa_r+0x88c>
 800734e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007350:	2a00      	cmp	r2, #0
 8007352:	f000 80b7 	beq.w	80074c4 <_dtoa_r+0x884>
 8007356:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800735a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800735c:	4646      	mov	r6, r8
 800735e:	9a08      	ldr	r2, [sp, #32]
 8007360:	2101      	movs	r1, #1
 8007362:	441a      	add	r2, r3
 8007364:	4658      	mov	r0, fp
 8007366:	4498      	add	r8, r3
 8007368:	9208      	str	r2, [sp, #32]
 800736a:	f000 fc21 	bl	8007bb0 <__i2b>
 800736e:	4605      	mov	r5, r0
 8007370:	b15e      	cbz	r6, 800738a <_dtoa_r+0x74a>
 8007372:	9b08      	ldr	r3, [sp, #32]
 8007374:	2b00      	cmp	r3, #0
 8007376:	dd08      	ble.n	800738a <_dtoa_r+0x74a>
 8007378:	42b3      	cmp	r3, r6
 800737a:	9a08      	ldr	r2, [sp, #32]
 800737c:	bfa8      	it	ge
 800737e:	4633      	movge	r3, r6
 8007380:	eba8 0803 	sub.w	r8, r8, r3
 8007384:	1af6      	subs	r6, r6, r3
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	9308      	str	r3, [sp, #32]
 800738a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800738c:	b1f3      	cbz	r3, 80073cc <_dtoa_r+0x78c>
 800738e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007390:	2b00      	cmp	r3, #0
 8007392:	f000 80b7 	beq.w	8007504 <_dtoa_r+0x8c4>
 8007396:	b18c      	cbz	r4, 80073bc <_dtoa_r+0x77c>
 8007398:	4629      	mov	r1, r5
 800739a:	4622      	mov	r2, r4
 800739c:	4658      	mov	r0, fp
 800739e:	f000 fcc7 	bl	8007d30 <__pow5mult>
 80073a2:	464a      	mov	r2, r9
 80073a4:	4601      	mov	r1, r0
 80073a6:	4605      	mov	r5, r0
 80073a8:	4658      	mov	r0, fp
 80073aa:	f000 fc17 	bl	8007bdc <__multiply>
 80073ae:	4649      	mov	r1, r9
 80073b0:	9004      	str	r0, [sp, #16]
 80073b2:	4658      	mov	r0, fp
 80073b4:	f000 fb48 	bl	8007a48 <_Bfree>
 80073b8:	9b04      	ldr	r3, [sp, #16]
 80073ba:	4699      	mov	r9, r3
 80073bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073be:	1b1a      	subs	r2, r3, r4
 80073c0:	d004      	beq.n	80073cc <_dtoa_r+0x78c>
 80073c2:	4649      	mov	r1, r9
 80073c4:	4658      	mov	r0, fp
 80073c6:	f000 fcb3 	bl	8007d30 <__pow5mult>
 80073ca:	4681      	mov	r9, r0
 80073cc:	2101      	movs	r1, #1
 80073ce:	4658      	mov	r0, fp
 80073d0:	f000 fbee 	bl	8007bb0 <__i2b>
 80073d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073d6:	4604      	mov	r4, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f000 81cf 	beq.w	800777c <_dtoa_r+0xb3c>
 80073de:	461a      	mov	r2, r3
 80073e0:	4601      	mov	r1, r0
 80073e2:	4658      	mov	r0, fp
 80073e4:	f000 fca4 	bl	8007d30 <__pow5mult>
 80073e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	4604      	mov	r4, r0
 80073ee:	f300 8095 	bgt.w	800751c <_dtoa_r+0x8dc>
 80073f2:	9b02      	ldr	r3, [sp, #8]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f040 8087 	bne.w	8007508 <_dtoa_r+0x8c8>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007400:	2b00      	cmp	r3, #0
 8007402:	f040 8089 	bne.w	8007518 <_dtoa_r+0x8d8>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800740c:	0d1b      	lsrs	r3, r3, #20
 800740e:	051b      	lsls	r3, r3, #20
 8007410:	b12b      	cbz	r3, 800741e <_dtoa_r+0x7de>
 8007412:	9b08      	ldr	r3, [sp, #32]
 8007414:	3301      	adds	r3, #1
 8007416:	9308      	str	r3, [sp, #32]
 8007418:	f108 0801 	add.w	r8, r8, #1
 800741c:	2301      	movs	r3, #1
 800741e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007420:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 81b0 	beq.w	8007788 <_dtoa_r+0xb48>
 8007428:	6923      	ldr	r3, [r4, #16]
 800742a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800742e:	6918      	ldr	r0, [r3, #16]
 8007430:	f000 fb72 	bl	8007b18 <__hi0bits>
 8007434:	f1c0 0020 	rsb	r0, r0, #32
 8007438:	9b08      	ldr	r3, [sp, #32]
 800743a:	4418      	add	r0, r3
 800743c:	f010 001f 	ands.w	r0, r0, #31
 8007440:	d077      	beq.n	8007532 <_dtoa_r+0x8f2>
 8007442:	f1c0 0320 	rsb	r3, r0, #32
 8007446:	2b04      	cmp	r3, #4
 8007448:	dd6b      	ble.n	8007522 <_dtoa_r+0x8e2>
 800744a:	9b08      	ldr	r3, [sp, #32]
 800744c:	f1c0 001c 	rsb	r0, r0, #28
 8007450:	4403      	add	r3, r0
 8007452:	4480      	add	r8, r0
 8007454:	4406      	add	r6, r0
 8007456:	9308      	str	r3, [sp, #32]
 8007458:	f1b8 0f00 	cmp.w	r8, #0
 800745c:	dd05      	ble.n	800746a <_dtoa_r+0x82a>
 800745e:	4649      	mov	r1, r9
 8007460:	4642      	mov	r2, r8
 8007462:	4658      	mov	r0, fp
 8007464:	f000 fcbe 	bl	8007de4 <__lshift>
 8007468:	4681      	mov	r9, r0
 800746a:	9b08      	ldr	r3, [sp, #32]
 800746c:	2b00      	cmp	r3, #0
 800746e:	dd05      	ble.n	800747c <_dtoa_r+0x83c>
 8007470:	4621      	mov	r1, r4
 8007472:	461a      	mov	r2, r3
 8007474:	4658      	mov	r0, fp
 8007476:	f000 fcb5 	bl	8007de4 <__lshift>
 800747a:	4604      	mov	r4, r0
 800747c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800747e:	2b00      	cmp	r3, #0
 8007480:	d059      	beq.n	8007536 <_dtoa_r+0x8f6>
 8007482:	4621      	mov	r1, r4
 8007484:	4648      	mov	r0, r9
 8007486:	f000 fd19 	bl	8007ebc <__mcmp>
 800748a:	2800      	cmp	r0, #0
 800748c:	da53      	bge.n	8007536 <_dtoa_r+0x8f6>
 800748e:	1e7b      	subs	r3, r7, #1
 8007490:	9304      	str	r3, [sp, #16]
 8007492:	4649      	mov	r1, r9
 8007494:	2300      	movs	r3, #0
 8007496:	220a      	movs	r2, #10
 8007498:	4658      	mov	r0, fp
 800749a:	f000 faf7 	bl	8007a8c <__multadd>
 800749e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074a0:	4681      	mov	r9, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 8172 	beq.w	800778c <_dtoa_r+0xb4c>
 80074a8:	2300      	movs	r3, #0
 80074aa:	4629      	mov	r1, r5
 80074ac:	220a      	movs	r2, #10
 80074ae:	4658      	mov	r0, fp
 80074b0:	f000 faec 	bl	8007a8c <__multadd>
 80074b4:	9b00      	ldr	r3, [sp, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	4605      	mov	r5, r0
 80074ba:	dc67      	bgt.n	800758c <_dtoa_r+0x94c>
 80074bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074be:	2b02      	cmp	r3, #2
 80074c0:	dc41      	bgt.n	8007546 <_dtoa_r+0x906>
 80074c2:	e063      	b.n	800758c <_dtoa_r+0x94c>
 80074c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80074c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80074ca:	e746      	b.n	800735a <_dtoa_r+0x71a>
 80074cc:	9b07      	ldr	r3, [sp, #28]
 80074ce:	1e5c      	subs	r4, r3, #1
 80074d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	bfbf      	itttt	lt
 80074d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80074d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80074da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80074dc:	1ae3      	sublt	r3, r4, r3
 80074de:	bfb4      	ite	lt
 80074e0:	18d2      	addlt	r2, r2, r3
 80074e2:	1b1c      	subge	r4, r3, r4
 80074e4:	9b07      	ldr	r3, [sp, #28]
 80074e6:	bfbc      	itt	lt
 80074e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80074ea:	2400      	movlt	r4, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	bfb5      	itete	lt
 80074f0:	eba8 0603 	sublt.w	r6, r8, r3
 80074f4:	9b07      	ldrge	r3, [sp, #28]
 80074f6:	2300      	movlt	r3, #0
 80074f8:	4646      	movge	r6, r8
 80074fa:	e730      	b.n	800735e <_dtoa_r+0x71e>
 80074fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007500:	4646      	mov	r6, r8
 8007502:	e735      	b.n	8007370 <_dtoa_r+0x730>
 8007504:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007506:	e75c      	b.n	80073c2 <_dtoa_r+0x782>
 8007508:	2300      	movs	r3, #0
 800750a:	e788      	b.n	800741e <_dtoa_r+0x7de>
 800750c:	3fe00000 	.word	0x3fe00000
 8007510:	40240000 	.word	0x40240000
 8007514:	40140000 	.word	0x40140000
 8007518:	9b02      	ldr	r3, [sp, #8]
 800751a:	e780      	b.n	800741e <_dtoa_r+0x7de>
 800751c:	2300      	movs	r3, #0
 800751e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007520:	e782      	b.n	8007428 <_dtoa_r+0x7e8>
 8007522:	d099      	beq.n	8007458 <_dtoa_r+0x818>
 8007524:	9a08      	ldr	r2, [sp, #32]
 8007526:	331c      	adds	r3, #28
 8007528:	441a      	add	r2, r3
 800752a:	4498      	add	r8, r3
 800752c:	441e      	add	r6, r3
 800752e:	9208      	str	r2, [sp, #32]
 8007530:	e792      	b.n	8007458 <_dtoa_r+0x818>
 8007532:	4603      	mov	r3, r0
 8007534:	e7f6      	b.n	8007524 <_dtoa_r+0x8e4>
 8007536:	9b07      	ldr	r3, [sp, #28]
 8007538:	9704      	str	r7, [sp, #16]
 800753a:	2b00      	cmp	r3, #0
 800753c:	dc20      	bgt.n	8007580 <_dtoa_r+0x940>
 800753e:	9300      	str	r3, [sp, #0]
 8007540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007542:	2b02      	cmp	r3, #2
 8007544:	dd1e      	ble.n	8007584 <_dtoa_r+0x944>
 8007546:	9b00      	ldr	r3, [sp, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	f47f aec0 	bne.w	80072ce <_dtoa_r+0x68e>
 800754e:	4621      	mov	r1, r4
 8007550:	2205      	movs	r2, #5
 8007552:	4658      	mov	r0, fp
 8007554:	f000 fa9a 	bl	8007a8c <__multadd>
 8007558:	4601      	mov	r1, r0
 800755a:	4604      	mov	r4, r0
 800755c:	4648      	mov	r0, r9
 800755e:	f000 fcad 	bl	8007ebc <__mcmp>
 8007562:	2800      	cmp	r0, #0
 8007564:	f77f aeb3 	ble.w	80072ce <_dtoa_r+0x68e>
 8007568:	4656      	mov	r6, sl
 800756a:	2331      	movs	r3, #49	@ 0x31
 800756c:	f806 3b01 	strb.w	r3, [r6], #1
 8007570:	9b04      	ldr	r3, [sp, #16]
 8007572:	3301      	adds	r3, #1
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	e6ae      	b.n	80072d6 <_dtoa_r+0x696>
 8007578:	9c07      	ldr	r4, [sp, #28]
 800757a:	9704      	str	r7, [sp, #16]
 800757c:	4625      	mov	r5, r4
 800757e:	e7f3      	b.n	8007568 <_dtoa_r+0x928>
 8007580:	9b07      	ldr	r3, [sp, #28]
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 8104 	beq.w	8007794 <_dtoa_r+0xb54>
 800758c:	2e00      	cmp	r6, #0
 800758e:	dd05      	ble.n	800759c <_dtoa_r+0x95c>
 8007590:	4629      	mov	r1, r5
 8007592:	4632      	mov	r2, r6
 8007594:	4658      	mov	r0, fp
 8007596:	f000 fc25 	bl	8007de4 <__lshift>
 800759a:	4605      	mov	r5, r0
 800759c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d05a      	beq.n	8007658 <_dtoa_r+0xa18>
 80075a2:	6869      	ldr	r1, [r5, #4]
 80075a4:	4658      	mov	r0, fp
 80075a6:	f000 fa0f 	bl	80079c8 <_Balloc>
 80075aa:	4606      	mov	r6, r0
 80075ac:	b928      	cbnz	r0, 80075ba <_dtoa_r+0x97a>
 80075ae:	4b84      	ldr	r3, [pc, #528]	@ (80077c0 <_dtoa_r+0xb80>)
 80075b0:	4602      	mov	r2, r0
 80075b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80075b6:	f7ff bb5a 	b.w	8006c6e <_dtoa_r+0x2e>
 80075ba:	692a      	ldr	r2, [r5, #16]
 80075bc:	3202      	adds	r2, #2
 80075be:	0092      	lsls	r2, r2, #2
 80075c0:	f105 010c 	add.w	r1, r5, #12
 80075c4:	300c      	adds	r0, #12
 80075c6:	f7ff faa2 	bl	8006b0e <memcpy>
 80075ca:	2201      	movs	r2, #1
 80075cc:	4631      	mov	r1, r6
 80075ce:	4658      	mov	r0, fp
 80075d0:	f000 fc08 	bl	8007de4 <__lshift>
 80075d4:	f10a 0301 	add.w	r3, sl, #1
 80075d8:	9307      	str	r3, [sp, #28]
 80075da:	9b00      	ldr	r3, [sp, #0]
 80075dc:	4453      	add	r3, sl
 80075de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075e0:	9b02      	ldr	r3, [sp, #8]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	462f      	mov	r7, r5
 80075e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ea:	4605      	mov	r5, r0
 80075ec:	9b07      	ldr	r3, [sp, #28]
 80075ee:	4621      	mov	r1, r4
 80075f0:	3b01      	subs	r3, #1
 80075f2:	4648      	mov	r0, r9
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	f7ff fa98 	bl	8006b2a <quorem>
 80075fa:	4639      	mov	r1, r7
 80075fc:	9002      	str	r0, [sp, #8]
 80075fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007602:	4648      	mov	r0, r9
 8007604:	f000 fc5a 	bl	8007ebc <__mcmp>
 8007608:	462a      	mov	r2, r5
 800760a:	9008      	str	r0, [sp, #32]
 800760c:	4621      	mov	r1, r4
 800760e:	4658      	mov	r0, fp
 8007610:	f000 fc70 	bl	8007ef4 <__mdiff>
 8007614:	68c2      	ldr	r2, [r0, #12]
 8007616:	4606      	mov	r6, r0
 8007618:	bb02      	cbnz	r2, 800765c <_dtoa_r+0xa1c>
 800761a:	4601      	mov	r1, r0
 800761c:	4648      	mov	r0, r9
 800761e:	f000 fc4d 	bl	8007ebc <__mcmp>
 8007622:	4602      	mov	r2, r0
 8007624:	4631      	mov	r1, r6
 8007626:	4658      	mov	r0, fp
 8007628:	920e      	str	r2, [sp, #56]	@ 0x38
 800762a:	f000 fa0d 	bl	8007a48 <_Bfree>
 800762e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007630:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007632:	9e07      	ldr	r6, [sp, #28]
 8007634:	ea43 0102 	orr.w	r1, r3, r2
 8007638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800763a:	4319      	orrs	r1, r3
 800763c:	d110      	bne.n	8007660 <_dtoa_r+0xa20>
 800763e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007642:	d029      	beq.n	8007698 <_dtoa_r+0xa58>
 8007644:	9b08      	ldr	r3, [sp, #32]
 8007646:	2b00      	cmp	r3, #0
 8007648:	dd02      	ble.n	8007650 <_dtoa_r+0xa10>
 800764a:	9b02      	ldr	r3, [sp, #8]
 800764c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007650:	9b00      	ldr	r3, [sp, #0]
 8007652:	f883 8000 	strb.w	r8, [r3]
 8007656:	e63f      	b.n	80072d8 <_dtoa_r+0x698>
 8007658:	4628      	mov	r0, r5
 800765a:	e7bb      	b.n	80075d4 <_dtoa_r+0x994>
 800765c:	2201      	movs	r2, #1
 800765e:	e7e1      	b.n	8007624 <_dtoa_r+0x9e4>
 8007660:	9b08      	ldr	r3, [sp, #32]
 8007662:	2b00      	cmp	r3, #0
 8007664:	db04      	blt.n	8007670 <_dtoa_r+0xa30>
 8007666:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007668:	430b      	orrs	r3, r1
 800766a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800766c:	430b      	orrs	r3, r1
 800766e:	d120      	bne.n	80076b2 <_dtoa_r+0xa72>
 8007670:	2a00      	cmp	r2, #0
 8007672:	dded      	ble.n	8007650 <_dtoa_r+0xa10>
 8007674:	4649      	mov	r1, r9
 8007676:	2201      	movs	r2, #1
 8007678:	4658      	mov	r0, fp
 800767a:	f000 fbb3 	bl	8007de4 <__lshift>
 800767e:	4621      	mov	r1, r4
 8007680:	4681      	mov	r9, r0
 8007682:	f000 fc1b 	bl	8007ebc <__mcmp>
 8007686:	2800      	cmp	r0, #0
 8007688:	dc03      	bgt.n	8007692 <_dtoa_r+0xa52>
 800768a:	d1e1      	bne.n	8007650 <_dtoa_r+0xa10>
 800768c:	f018 0f01 	tst.w	r8, #1
 8007690:	d0de      	beq.n	8007650 <_dtoa_r+0xa10>
 8007692:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007696:	d1d8      	bne.n	800764a <_dtoa_r+0xa0a>
 8007698:	9a00      	ldr	r2, [sp, #0]
 800769a:	2339      	movs	r3, #57	@ 0x39
 800769c:	7013      	strb	r3, [r2, #0]
 800769e:	4633      	mov	r3, r6
 80076a0:	461e      	mov	r6, r3
 80076a2:	3b01      	subs	r3, #1
 80076a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80076a8:	2a39      	cmp	r2, #57	@ 0x39
 80076aa:	d052      	beq.n	8007752 <_dtoa_r+0xb12>
 80076ac:	3201      	adds	r2, #1
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	e612      	b.n	80072d8 <_dtoa_r+0x698>
 80076b2:	2a00      	cmp	r2, #0
 80076b4:	dd07      	ble.n	80076c6 <_dtoa_r+0xa86>
 80076b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80076ba:	d0ed      	beq.n	8007698 <_dtoa_r+0xa58>
 80076bc:	9a00      	ldr	r2, [sp, #0]
 80076be:	f108 0301 	add.w	r3, r8, #1
 80076c2:	7013      	strb	r3, [r2, #0]
 80076c4:	e608      	b.n	80072d8 <_dtoa_r+0x698>
 80076c6:	9b07      	ldr	r3, [sp, #28]
 80076c8:	9a07      	ldr	r2, [sp, #28]
 80076ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80076ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d028      	beq.n	8007726 <_dtoa_r+0xae6>
 80076d4:	4649      	mov	r1, r9
 80076d6:	2300      	movs	r3, #0
 80076d8:	220a      	movs	r2, #10
 80076da:	4658      	mov	r0, fp
 80076dc:	f000 f9d6 	bl	8007a8c <__multadd>
 80076e0:	42af      	cmp	r7, r5
 80076e2:	4681      	mov	r9, r0
 80076e4:	f04f 0300 	mov.w	r3, #0
 80076e8:	f04f 020a 	mov.w	r2, #10
 80076ec:	4639      	mov	r1, r7
 80076ee:	4658      	mov	r0, fp
 80076f0:	d107      	bne.n	8007702 <_dtoa_r+0xac2>
 80076f2:	f000 f9cb 	bl	8007a8c <__multadd>
 80076f6:	4607      	mov	r7, r0
 80076f8:	4605      	mov	r5, r0
 80076fa:	9b07      	ldr	r3, [sp, #28]
 80076fc:	3301      	adds	r3, #1
 80076fe:	9307      	str	r3, [sp, #28]
 8007700:	e774      	b.n	80075ec <_dtoa_r+0x9ac>
 8007702:	f000 f9c3 	bl	8007a8c <__multadd>
 8007706:	4629      	mov	r1, r5
 8007708:	4607      	mov	r7, r0
 800770a:	2300      	movs	r3, #0
 800770c:	220a      	movs	r2, #10
 800770e:	4658      	mov	r0, fp
 8007710:	f000 f9bc 	bl	8007a8c <__multadd>
 8007714:	4605      	mov	r5, r0
 8007716:	e7f0      	b.n	80076fa <_dtoa_r+0xaba>
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	2b00      	cmp	r3, #0
 800771c:	bfcc      	ite	gt
 800771e:	461e      	movgt	r6, r3
 8007720:	2601      	movle	r6, #1
 8007722:	4456      	add	r6, sl
 8007724:	2700      	movs	r7, #0
 8007726:	4649      	mov	r1, r9
 8007728:	2201      	movs	r2, #1
 800772a:	4658      	mov	r0, fp
 800772c:	f000 fb5a 	bl	8007de4 <__lshift>
 8007730:	4621      	mov	r1, r4
 8007732:	4681      	mov	r9, r0
 8007734:	f000 fbc2 	bl	8007ebc <__mcmp>
 8007738:	2800      	cmp	r0, #0
 800773a:	dcb0      	bgt.n	800769e <_dtoa_r+0xa5e>
 800773c:	d102      	bne.n	8007744 <_dtoa_r+0xb04>
 800773e:	f018 0f01 	tst.w	r8, #1
 8007742:	d1ac      	bne.n	800769e <_dtoa_r+0xa5e>
 8007744:	4633      	mov	r3, r6
 8007746:	461e      	mov	r6, r3
 8007748:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800774c:	2a30      	cmp	r2, #48	@ 0x30
 800774e:	d0fa      	beq.n	8007746 <_dtoa_r+0xb06>
 8007750:	e5c2      	b.n	80072d8 <_dtoa_r+0x698>
 8007752:	459a      	cmp	sl, r3
 8007754:	d1a4      	bne.n	80076a0 <_dtoa_r+0xa60>
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	3301      	adds	r3, #1
 800775a:	9304      	str	r3, [sp, #16]
 800775c:	2331      	movs	r3, #49	@ 0x31
 800775e:	f88a 3000 	strb.w	r3, [sl]
 8007762:	e5b9      	b.n	80072d8 <_dtoa_r+0x698>
 8007764:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007766:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80077c4 <_dtoa_r+0xb84>
 800776a:	b11b      	cbz	r3, 8007774 <_dtoa_r+0xb34>
 800776c:	f10a 0308 	add.w	r3, sl, #8
 8007770:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007772:	6013      	str	r3, [r2, #0]
 8007774:	4650      	mov	r0, sl
 8007776:	b019      	add	sp, #100	@ 0x64
 8007778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800777e:	2b01      	cmp	r3, #1
 8007780:	f77f ae37 	ble.w	80073f2 <_dtoa_r+0x7b2>
 8007784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007786:	930a      	str	r3, [sp, #40]	@ 0x28
 8007788:	2001      	movs	r0, #1
 800778a:	e655      	b.n	8007438 <_dtoa_r+0x7f8>
 800778c:	9b00      	ldr	r3, [sp, #0]
 800778e:	2b00      	cmp	r3, #0
 8007790:	f77f aed6 	ble.w	8007540 <_dtoa_r+0x900>
 8007794:	4656      	mov	r6, sl
 8007796:	4621      	mov	r1, r4
 8007798:	4648      	mov	r0, r9
 800779a:	f7ff f9c6 	bl	8006b2a <quorem>
 800779e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077a2:	f806 8b01 	strb.w	r8, [r6], #1
 80077a6:	9b00      	ldr	r3, [sp, #0]
 80077a8:	eba6 020a 	sub.w	r2, r6, sl
 80077ac:	4293      	cmp	r3, r2
 80077ae:	ddb3      	ble.n	8007718 <_dtoa_r+0xad8>
 80077b0:	4649      	mov	r1, r9
 80077b2:	2300      	movs	r3, #0
 80077b4:	220a      	movs	r2, #10
 80077b6:	4658      	mov	r0, fp
 80077b8:	f000 f968 	bl	8007a8c <__multadd>
 80077bc:	4681      	mov	r9, r0
 80077be:	e7ea      	b.n	8007796 <_dtoa_r+0xb56>
 80077c0:	0800a150 	.word	0x0800a150
 80077c4:	0800a0d4 	.word	0x0800a0d4

080077c8 <_free_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	4605      	mov	r5, r0
 80077cc:	2900      	cmp	r1, #0
 80077ce:	d041      	beq.n	8007854 <_free_r+0x8c>
 80077d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d4:	1f0c      	subs	r4, r1, #4
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	bfb8      	it	lt
 80077da:	18e4      	addlt	r4, r4, r3
 80077dc:	f000 f8e8 	bl	80079b0 <__malloc_lock>
 80077e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007858 <_free_r+0x90>)
 80077e2:	6813      	ldr	r3, [r2, #0]
 80077e4:	b933      	cbnz	r3, 80077f4 <_free_r+0x2c>
 80077e6:	6063      	str	r3, [r4, #4]
 80077e8:	6014      	str	r4, [r2, #0]
 80077ea:	4628      	mov	r0, r5
 80077ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077f0:	f000 b8e4 	b.w	80079bc <__malloc_unlock>
 80077f4:	42a3      	cmp	r3, r4
 80077f6:	d908      	bls.n	800780a <_free_r+0x42>
 80077f8:	6820      	ldr	r0, [r4, #0]
 80077fa:	1821      	adds	r1, r4, r0
 80077fc:	428b      	cmp	r3, r1
 80077fe:	bf01      	itttt	eq
 8007800:	6819      	ldreq	r1, [r3, #0]
 8007802:	685b      	ldreq	r3, [r3, #4]
 8007804:	1809      	addeq	r1, r1, r0
 8007806:	6021      	streq	r1, [r4, #0]
 8007808:	e7ed      	b.n	80077e6 <_free_r+0x1e>
 800780a:	461a      	mov	r2, r3
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	b10b      	cbz	r3, 8007814 <_free_r+0x4c>
 8007810:	42a3      	cmp	r3, r4
 8007812:	d9fa      	bls.n	800780a <_free_r+0x42>
 8007814:	6811      	ldr	r1, [r2, #0]
 8007816:	1850      	adds	r0, r2, r1
 8007818:	42a0      	cmp	r0, r4
 800781a:	d10b      	bne.n	8007834 <_free_r+0x6c>
 800781c:	6820      	ldr	r0, [r4, #0]
 800781e:	4401      	add	r1, r0
 8007820:	1850      	adds	r0, r2, r1
 8007822:	4283      	cmp	r3, r0
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	d1e0      	bne.n	80077ea <_free_r+0x22>
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	6053      	str	r3, [r2, #4]
 800782e:	4408      	add	r0, r1
 8007830:	6010      	str	r0, [r2, #0]
 8007832:	e7da      	b.n	80077ea <_free_r+0x22>
 8007834:	d902      	bls.n	800783c <_free_r+0x74>
 8007836:	230c      	movs	r3, #12
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	e7d6      	b.n	80077ea <_free_r+0x22>
 800783c:	6820      	ldr	r0, [r4, #0]
 800783e:	1821      	adds	r1, r4, r0
 8007840:	428b      	cmp	r3, r1
 8007842:	bf04      	itt	eq
 8007844:	6819      	ldreq	r1, [r3, #0]
 8007846:	685b      	ldreq	r3, [r3, #4]
 8007848:	6063      	str	r3, [r4, #4]
 800784a:	bf04      	itt	eq
 800784c:	1809      	addeq	r1, r1, r0
 800784e:	6021      	streq	r1, [r4, #0]
 8007850:	6054      	str	r4, [r2, #4]
 8007852:	e7ca      	b.n	80077ea <_free_r+0x22>
 8007854:	bd38      	pop	{r3, r4, r5, pc}
 8007856:	bf00      	nop
 8007858:	200004ec 	.word	0x200004ec

0800785c <malloc>:
 800785c:	4b02      	ldr	r3, [pc, #8]	@ (8007868 <malloc+0xc>)
 800785e:	4601      	mov	r1, r0
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	f000 b825 	b.w	80078b0 <_malloc_r>
 8007866:	bf00      	nop
 8007868:	20000080 	.word	0x20000080

0800786c <sbrk_aligned>:
 800786c:	b570      	push	{r4, r5, r6, lr}
 800786e:	4e0f      	ldr	r6, [pc, #60]	@ (80078ac <sbrk_aligned+0x40>)
 8007870:	460c      	mov	r4, r1
 8007872:	6831      	ldr	r1, [r6, #0]
 8007874:	4605      	mov	r5, r0
 8007876:	b911      	cbnz	r1, 800787e <sbrk_aligned+0x12>
 8007878:	f000 fe46 	bl	8008508 <_sbrk_r>
 800787c:	6030      	str	r0, [r6, #0]
 800787e:	4621      	mov	r1, r4
 8007880:	4628      	mov	r0, r5
 8007882:	f000 fe41 	bl	8008508 <_sbrk_r>
 8007886:	1c43      	adds	r3, r0, #1
 8007888:	d103      	bne.n	8007892 <sbrk_aligned+0x26>
 800788a:	f04f 34ff 	mov.w	r4, #4294967295
 800788e:	4620      	mov	r0, r4
 8007890:	bd70      	pop	{r4, r5, r6, pc}
 8007892:	1cc4      	adds	r4, r0, #3
 8007894:	f024 0403 	bic.w	r4, r4, #3
 8007898:	42a0      	cmp	r0, r4
 800789a:	d0f8      	beq.n	800788e <sbrk_aligned+0x22>
 800789c:	1a21      	subs	r1, r4, r0
 800789e:	4628      	mov	r0, r5
 80078a0:	f000 fe32 	bl	8008508 <_sbrk_r>
 80078a4:	3001      	adds	r0, #1
 80078a6:	d1f2      	bne.n	800788e <sbrk_aligned+0x22>
 80078a8:	e7ef      	b.n	800788a <sbrk_aligned+0x1e>
 80078aa:	bf00      	nop
 80078ac:	200004e8 	.word	0x200004e8

080078b0 <_malloc_r>:
 80078b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b4:	1ccd      	adds	r5, r1, #3
 80078b6:	f025 0503 	bic.w	r5, r5, #3
 80078ba:	3508      	adds	r5, #8
 80078bc:	2d0c      	cmp	r5, #12
 80078be:	bf38      	it	cc
 80078c0:	250c      	movcc	r5, #12
 80078c2:	2d00      	cmp	r5, #0
 80078c4:	4606      	mov	r6, r0
 80078c6:	db01      	blt.n	80078cc <_malloc_r+0x1c>
 80078c8:	42a9      	cmp	r1, r5
 80078ca:	d904      	bls.n	80078d6 <_malloc_r+0x26>
 80078cc:	230c      	movs	r3, #12
 80078ce:	6033      	str	r3, [r6, #0]
 80078d0:	2000      	movs	r0, #0
 80078d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079ac <_malloc_r+0xfc>
 80078da:	f000 f869 	bl	80079b0 <__malloc_lock>
 80078de:	f8d8 3000 	ldr.w	r3, [r8]
 80078e2:	461c      	mov	r4, r3
 80078e4:	bb44      	cbnz	r4, 8007938 <_malloc_r+0x88>
 80078e6:	4629      	mov	r1, r5
 80078e8:	4630      	mov	r0, r6
 80078ea:	f7ff ffbf 	bl	800786c <sbrk_aligned>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	4604      	mov	r4, r0
 80078f2:	d158      	bne.n	80079a6 <_malloc_r+0xf6>
 80078f4:	f8d8 4000 	ldr.w	r4, [r8]
 80078f8:	4627      	mov	r7, r4
 80078fa:	2f00      	cmp	r7, #0
 80078fc:	d143      	bne.n	8007986 <_malloc_r+0xd6>
 80078fe:	2c00      	cmp	r4, #0
 8007900:	d04b      	beq.n	800799a <_malloc_r+0xea>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	4639      	mov	r1, r7
 8007906:	4630      	mov	r0, r6
 8007908:	eb04 0903 	add.w	r9, r4, r3
 800790c:	f000 fdfc 	bl	8008508 <_sbrk_r>
 8007910:	4581      	cmp	r9, r0
 8007912:	d142      	bne.n	800799a <_malloc_r+0xea>
 8007914:	6821      	ldr	r1, [r4, #0]
 8007916:	1a6d      	subs	r5, r5, r1
 8007918:	4629      	mov	r1, r5
 800791a:	4630      	mov	r0, r6
 800791c:	f7ff ffa6 	bl	800786c <sbrk_aligned>
 8007920:	3001      	adds	r0, #1
 8007922:	d03a      	beq.n	800799a <_malloc_r+0xea>
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	442b      	add	r3, r5
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	f8d8 3000 	ldr.w	r3, [r8]
 800792e:	685a      	ldr	r2, [r3, #4]
 8007930:	bb62      	cbnz	r2, 800798c <_malloc_r+0xdc>
 8007932:	f8c8 7000 	str.w	r7, [r8]
 8007936:	e00f      	b.n	8007958 <_malloc_r+0xa8>
 8007938:	6822      	ldr	r2, [r4, #0]
 800793a:	1b52      	subs	r2, r2, r5
 800793c:	d420      	bmi.n	8007980 <_malloc_r+0xd0>
 800793e:	2a0b      	cmp	r2, #11
 8007940:	d917      	bls.n	8007972 <_malloc_r+0xc2>
 8007942:	1961      	adds	r1, r4, r5
 8007944:	42a3      	cmp	r3, r4
 8007946:	6025      	str	r5, [r4, #0]
 8007948:	bf18      	it	ne
 800794a:	6059      	strne	r1, [r3, #4]
 800794c:	6863      	ldr	r3, [r4, #4]
 800794e:	bf08      	it	eq
 8007950:	f8c8 1000 	streq.w	r1, [r8]
 8007954:	5162      	str	r2, [r4, r5]
 8007956:	604b      	str	r3, [r1, #4]
 8007958:	4630      	mov	r0, r6
 800795a:	f000 f82f 	bl	80079bc <__malloc_unlock>
 800795e:	f104 000b 	add.w	r0, r4, #11
 8007962:	1d23      	adds	r3, r4, #4
 8007964:	f020 0007 	bic.w	r0, r0, #7
 8007968:	1ac2      	subs	r2, r0, r3
 800796a:	bf1c      	itt	ne
 800796c:	1a1b      	subne	r3, r3, r0
 800796e:	50a3      	strne	r3, [r4, r2]
 8007970:	e7af      	b.n	80078d2 <_malloc_r+0x22>
 8007972:	6862      	ldr	r2, [r4, #4]
 8007974:	42a3      	cmp	r3, r4
 8007976:	bf0c      	ite	eq
 8007978:	f8c8 2000 	streq.w	r2, [r8]
 800797c:	605a      	strne	r2, [r3, #4]
 800797e:	e7eb      	b.n	8007958 <_malloc_r+0xa8>
 8007980:	4623      	mov	r3, r4
 8007982:	6864      	ldr	r4, [r4, #4]
 8007984:	e7ae      	b.n	80078e4 <_malloc_r+0x34>
 8007986:	463c      	mov	r4, r7
 8007988:	687f      	ldr	r7, [r7, #4]
 800798a:	e7b6      	b.n	80078fa <_malloc_r+0x4a>
 800798c:	461a      	mov	r2, r3
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	42a3      	cmp	r3, r4
 8007992:	d1fb      	bne.n	800798c <_malloc_r+0xdc>
 8007994:	2300      	movs	r3, #0
 8007996:	6053      	str	r3, [r2, #4]
 8007998:	e7de      	b.n	8007958 <_malloc_r+0xa8>
 800799a:	230c      	movs	r3, #12
 800799c:	6033      	str	r3, [r6, #0]
 800799e:	4630      	mov	r0, r6
 80079a0:	f000 f80c 	bl	80079bc <__malloc_unlock>
 80079a4:	e794      	b.n	80078d0 <_malloc_r+0x20>
 80079a6:	6005      	str	r5, [r0, #0]
 80079a8:	e7d6      	b.n	8007958 <_malloc_r+0xa8>
 80079aa:	bf00      	nop
 80079ac:	200004ec 	.word	0x200004ec

080079b0 <__malloc_lock>:
 80079b0:	4801      	ldr	r0, [pc, #4]	@ (80079b8 <__malloc_lock+0x8>)
 80079b2:	f7ff b8aa 	b.w	8006b0a <__retarget_lock_acquire_recursive>
 80079b6:	bf00      	nop
 80079b8:	200004e4 	.word	0x200004e4

080079bc <__malloc_unlock>:
 80079bc:	4801      	ldr	r0, [pc, #4]	@ (80079c4 <__malloc_unlock+0x8>)
 80079be:	f7ff b8a5 	b.w	8006b0c <__retarget_lock_release_recursive>
 80079c2:	bf00      	nop
 80079c4:	200004e4 	.word	0x200004e4

080079c8 <_Balloc>:
 80079c8:	b570      	push	{r4, r5, r6, lr}
 80079ca:	69c6      	ldr	r6, [r0, #28]
 80079cc:	4604      	mov	r4, r0
 80079ce:	460d      	mov	r5, r1
 80079d0:	b976      	cbnz	r6, 80079f0 <_Balloc+0x28>
 80079d2:	2010      	movs	r0, #16
 80079d4:	f7ff ff42 	bl	800785c <malloc>
 80079d8:	4602      	mov	r2, r0
 80079da:	61e0      	str	r0, [r4, #28]
 80079dc:	b920      	cbnz	r0, 80079e8 <_Balloc+0x20>
 80079de:	4b18      	ldr	r3, [pc, #96]	@ (8007a40 <_Balloc+0x78>)
 80079e0:	4818      	ldr	r0, [pc, #96]	@ (8007a44 <_Balloc+0x7c>)
 80079e2:	216b      	movs	r1, #107	@ 0x6b
 80079e4:	f000 fda0 	bl	8008528 <__assert_func>
 80079e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80079ec:	6006      	str	r6, [r0, #0]
 80079ee:	60c6      	str	r6, [r0, #12]
 80079f0:	69e6      	ldr	r6, [r4, #28]
 80079f2:	68f3      	ldr	r3, [r6, #12]
 80079f4:	b183      	cbz	r3, 8007a18 <_Balloc+0x50>
 80079f6:	69e3      	ldr	r3, [r4, #28]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80079fe:	b9b8      	cbnz	r0, 8007a30 <_Balloc+0x68>
 8007a00:	2101      	movs	r1, #1
 8007a02:	fa01 f605 	lsl.w	r6, r1, r5
 8007a06:	1d72      	adds	r2, r6, #5
 8007a08:	0092      	lsls	r2, r2, #2
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	f000 fdaa 	bl	8008564 <_calloc_r>
 8007a10:	b160      	cbz	r0, 8007a2c <_Balloc+0x64>
 8007a12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a16:	e00e      	b.n	8007a36 <_Balloc+0x6e>
 8007a18:	2221      	movs	r2, #33	@ 0x21
 8007a1a:	2104      	movs	r1, #4
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f000 fda1 	bl	8008564 <_calloc_r>
 8007a22:	69e3      	ldr	r3, [r4, #28]
 8007a24:	60f0      	str	r0, [r6, #12]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e4      	bne.n	80079f6 <_Balloc+0x2e>
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	6802      	ldr	r2, [r0, #0]
 8007a32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a36:	2300      	movs	r3, #0
 8007a38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007a3c:	e7f7      	b.n	8007a2e <_Balloc+0x66>
 8007a3e:	bf00      	nop
 8007a40:	0800a0e1 	.word	0x0800a0e1
 8007a44:	0800a161 	.word	0x0800a161

08007a48 <_Bfree>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	69c6      	ldr	r6, [r0, #28]
 8007a4c:	4605      	mov	r5, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	b976      	cbnz	r6, 8007a70 <_Bfree+0x28>
 8007a52:	2010      	movs	r0, #16
 8007a54:	f7ff ff02 	bl	800785c <malloc>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	61e8      	str	r0, [r5, #28]
 8007a5c:	b920      	cbnz	r0, 8007a68 <_Bfree+0x20>
 8007a5e:	4b09      	ldr	r3, [pc, #36]	@ (8007a84 <_Bfree+0x3c>)
 8007a60:	4809      	ldr	r0, [pc, #36]	@ (8007a88 <_Bfree+0x40>)
 8007a62:	218f      	movs	r1, #143	@ 0x8f
 8007a64:	f000 fd60 	bl	8008528 <__assert_func>
 8007a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a6c:	6006      	str	r6, [r0, #0]
 8007a6e:	60c6      	str	r6, [r0, #12]
 8007a70:	b13c      	cbz	r4, 8007a82 <_Bfree+0x3a>
 8007a72:	69eb      	ldr	r3, [r5, #28]
 8007a74:	6862      	ldr	r2, [r4, #4]
 8007a76:	68db      	ldr	r3, [r3, #12]
 8007a78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a7c:	6021      	str	r1, [r4, #0]
 8007a7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a82:	bd70      	pop	{r4, r5, r6, pc}
 8007a84:	0800a0e1 	.word	0x0800a0e1
 8007a88:	0800a161 	.word	0x0800a161

08007a8c <__multadd>:
 8007a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a90:	690d      	ldr	r5, [r1, #16]
 8007a92:	4607      	mov	r7, r0
 8007a94:	460c      	mov	r4, r1
 8007a96:	461e      	mov	r6, r3
 8007a98:	f101 0c14 	add.w	ip, r1, #20
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f8dc 3000 	ldr.w	r3, [ip]
 8007aa2:	b299      	uxth	r1, r3
 8007aa4:	fb02 6101 	mla	r1, r2, r1, r6
 8007aa8:	0c1e      	lsrs	r6, r3, #16
 8007aaa:	0c0b      	lsrs	r3, r1, #16
 8007aac:	fb02 3306 	mla	r3, r2, r6, r3
 8007ab0:	b289      	uxth	r1, r1
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007ab8:	4285      	cmp	r5, r0
 8007aba:	f84c 1b04 	str.w	r1, [ip], #4
 8007abe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007ac2:	dcec      	bgt.n	8007a9e <__multadd+0x12>
 8007ac4:	b30e      	cbz	r6, 8007b0a <__multadd+0x7e>
 8007ac6:	68a3      	ldr	r3, [r4, #8]
 8007ac8:	42ab      	cmp	r3, r5
 8007aca:	dc19      	bgt.n	8007b00 <__multadd+0x74>
 8007acc:	6861      	ldr	r1, [r4, #4]
 8007ace:	4638      	mov	r0, r7
 8007ad0:	3101      	adds	r1, #1
 8007ad2:	f7ff ff79 	bl	80079c8 <_Balloc>
 8007ad6:	4680      	mov	r8, r0
 8007ad8:	b928      	cbnz	r0, 8007ae6 <__multadd+0x5a>
 8007ada:	4602      	mov	r2, r0
 8007adc:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <__multadd+0x84>)
 8007ade:	480d      	ldr	r0, [pc, #52]	@ (8007b14 <__multadd+0x88>)
 8007ae0:	21ba      	movs	r1, #186	@ 0xba
 8007ae2:	f000 fd21 	bl	8008528 <__assert_func>
 8007ae6:	6922      	ldr	r2, [r4, #16]
 8007ae8:	3202      	adds	r2, #2
 8007aea:	f104 010c 	add.w	r1, r4, #12
 8007aee:	0092      	lsls	r2, r2, #2
 8007af0:	300c      	adds	r0, #12
 8007af2:	f7ff f80c 	bl	8006b0e <memcpy>
 8007af6:	4621      	mov	r1, r4
 8007af8:	4638      	mov	r0, r7
 8007afa:	f7ff ffa5 	bl	8007a48 <_Bfree>
 8007afe:	4644      	mov	r4, r8
 8007b00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b04:	3501      	adds	r5, #1
 8007b06:	615e      	str	r6, [r3, #20]
 8007b08:	6125      	str	r5, [r4, #16]
 8007b0a:	4620      	mov	r0, r4
 8007b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b10:	0800a150 	.word	0x0800a150
 8007b14:	0800a161 	.word	0x0800a161

08007b18 <__hi0bits>:
 8007b18:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	bf36      	itet	cc
 8007b20:	0403      	lslcc	r3, r0, #16
 8007b22:	2000      	movcs	r0, #0
 8007b24:	2010      	movcc	r0, #16
 8007b26:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007b2a:	bf3c      	itt	cc
 8007b2c:	021b      	lslcc	r3, r3, #8
 8007b2e:	3008      	addcc	r0, #8
 8007b30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007b34:	bf3c      	itt	cc
 8007b36:	011b      	lslcc	r3, r3, #4
 8007b38:	3004      	addcc	r0, #4
 8007b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b3e:	bf3c      	itt	cc
 8007b40:	009b      	lslcc	r3, r3, #2
 8007b42:	3002      	addcc	r0, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	db05      	blt.n	8007b54 <__hi0bits+0x3c>
 8007b48:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007b4c:	f100 0001 	add.w	r0, r0, #1
 8007b50:	bf08      	it	eq
 8007b52:	2020      	moveq	r0, #32
 8007b54:	4770      	bx	lr

08007b56 <__lo0bits>:
 8007b56:	6803      	ldr	r3, [r0, #0]
 8007b58:	4602      	mov	r2, r0
 8007b5a:	f013 0007 	ands.w	r0, r3, #7
 8007b5e:	d00b      	beq.n	8007b78 <__lo0bits+0x22>
 8007b60:	07d9      	lsls	r1, r3, #31
 8007b62:	d421      	bmi.n	8007ba8 <__lo0bits+0x52>
 8007b64:	0798      	lsls	r0, r3, #30
 8007b66:	bf49      	itett	mi
 8007b68:	085b      	lsrmi	r3, r3, #1
 8007b6a:	089b      	lsrpl	r3, r3, #2
 8007b6c:	2001      	movmi	r0, #1
 8007b6e:	6013      	strmi	r3, [r2, #0]
 8007b70:	bf5c      	itt	pl
 8007b72:	6013      	strpl	r3, [r2, #0]
 8007b74:	2002      	movpl	r0, #2
 8007b76:	4770      	bx	lr
 8007b78:	b299      	uxth	r1, r3
 8007b7a:	b909      	cbnz	r1, 8007b80 <__lo0bits+0x2a>
 8007b7c:	0c1b      	lsrs	r3, r3, #16
 8007b7e:	2010      	movs	r0, #16
 8007b80:	b2d9      	uxtb	r1, r3
 8007b82:	b909      	cbnz	r1, 8007b88 <__lo0bits+0x32>
 8007b84:	3008      	adds	r0, #8
 8007b86:	0a1b      	lsrs	r3, r3, #8
 8007b88:	0719      	lsls	r1, r3, #28
 8007b8a:	bf04      	itt	eq
 8007b8c:	091b      	lsreq	r3, r3, #4
 8007b8e:	3004      	addeq	r0, #4
 8007b90:	0799      	lsls	r1, r3, #30
 8007b92:	bf04      	itt	eq
 8007b94:	089b      	lsreq	r3, r3, #2
 8007b96:	3002      	addeq	r0, #2
 8007b98:	07d9      	lsls	r1, r3, #31
 8007b9a:	d403      	bmi.n	8007ba4 <__lo0bits+0x4e>
 8007b9c:	085b      	lsrs	r3, r3, #1
 8007b9e:	f100 0001 	add.w	r0, r0, #1
 8007ba2:	d003      	beq.n	8007bac <__lo0bits+0x56>
 8007ba4:	6013      	str	r3, [r2, #0]
 8007ba6:	4770      	bx	lr
 8007ba8:	2000      	movs	r0, #0
 8007baa:	4770      	bx	lr
 8007bac:	2020      	movs	r0, #32
 8007bae:	4770      	bx	lr

08007bb0 <__i2b>:
 8007bb0:	b510      	push	{r4, lr}
 8007bb2:	460c      	mov	r4, r1
 8007bb4:	2101      	movs	r1, #1
 8007bb6:	f7ff ff07 	bl	80079c8 <_Balloc>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	b928      	cbnz	r0, 8007bca <__i2b+0x1a>
 8007bbe:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <__i2b+0x24>)
 8007bc0:	4805      	ldr	r0, [pc, #20]	@ (8007bd8 <__i2b+0x28>)
 8007bc2:	f240 1145 	movw	r1, #325	@ 0x145
 8007bc6:	f000 fcaf 	bl	8008528 <__assert_func>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	6144      	str	r4, [r0, #20]
 8007bce:	6103      	str	r3, [r0, #16]
 8007bd0:	bd10      	pop	{r4, pc}
 8007bd2:	bf00      	nop
 8007bd4:	0800a150 	.word	0x0800a150
 8007bd8:	0800a161 	.word	0x0800a161

08007bdc <__multiply>:
 8007bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be0:	4614      	mov	r4, r2
 8007be2:	690a      	ldr	r2, [r1, #16]
 8007be4:	6923      	ldr	r3, [r4, #16]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	bfa8      	it	ge
 8007bea:	4623      	movge	r3, r4
 8007bec:	460f      	mov	r7, r1
 8007bee:	bfa4      	itt	ge
 8007bf0:	460c      	movge	r4, r1
 8007bf2:	461f      	movge	r7, r3
 8007bf4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007bf8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007bfc:	68a3      	ldr	r3, [r4, #8]
 8007bfe:	6861      	ldr	r1, [r4, #4]
 8007c00:	eb0a 0609 	add.w	r6, sl, r9
 8007c04:	42b3      	cmp	r3, r6
 8007c06:	b085      	sub	sp, #20
 8007c08:	bfb8      	it	lt
 8007c0a:	3101      	addlt	r1, #1
 8007c0c:	f7ff fedc 	bl	80079c8 <_Balloc>
 8007c10:	b930      	cbnz	r0, 8007c20 <__multiply+0x44>
 8007c12:	4602      	mov	r2, r0
 8007c14:	4b44      	ldr	r3, [pc, #272]	@ (8007d28 <__multiply+0x14c>)
 8007c16:	4845      	ldr	r0, [pc, #276]	@ (8007d2c <__multiply+0x150>)
 8007c18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007c1c:	f000 fc84 	bl	8008528 <__assert_func>
 8007c20:	f100 0514 	add.w	r5, r0, #20
 8007c24:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c28:	462b      	mov	r3, r5
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	4543      	cmp	r3, r8
 8007c2e:	d321      	bcc.n	8007c74 <__multiply+0x98>
 8007c30:	f107 0114 	add.w	r1, r7, #20
 8007c34:	f104 0214 	add.w	r2, r4, #20
 8007c38:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007c3c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007c40:	9302      	str	r3, [sp, #8]
 8007c42:	1b13      	subs	r3, r2, r4
 8007c44:	3b15      	subs	r3, #21
 8007c46:	f023 0303 	bic.w	r3, r3, #3
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	f104 0715 	add.w	r7, r4, #21
 8007c50:	42ba      	cmp	r2, r7
 8007c52:	bf38      	it	cc
 8007c54:	2304      	movcc	r3, #4
 8007c56:	9301      	str	r3, [sp, #4]
 8007c58:	9b02      	ldr	r3, [sp, #8]
 8007c5a:	9103      	str	r1, [sp, #12]
 8007c5c:	428b      	cmp	r3, r1
 8007c5e:	d80c      	bhi.n	8007c7a <__multiply+0x9e>
 8007c60:	2e00      	cmp	r6, #0
 8007c62:	dd03      	ble.n	8007c6c <__multiply+0x90>
 8007c64:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d05b      	beq.n	8007d24 <__multiply+0x148>
 8007c6c:	6106      	str	r6, [r0, #16]
 8007c6e:	b005      	add	sp, #20
 8007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c74:	f843 2b04 	str.w	r2, [r3], #4
 8007c78:	e7d8      	b.n	8007c2c <__multiply+0x50>
 8007c7a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007c7e:	f1ba 0f00 	cmp.w	sl, #0
 8007c82:	d024      	beq.n	8007cce <__multiply+0xf2>
 8007c84:	f104 0e14 	add.w	lr, r4, #20
 8007c88:	46a9      	mov	r9, r5
 8007c8a:	f04f 0c00 	mov.w	ip, #0
 8007c8e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c92:	f8d9 3000 	ldr.w	r3, [r9]
 8007c96:	fa1f fb87 	uxth.w	fp, r7
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ca0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007ca4:	f8d9 7000 	ldr.w	r7, [r9]
 8007ca8:	4463      	add	r3, ip
 8007caa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cae:	fb0a c70b 	mla	r7, sl, fp, ip
 8007cb2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cbc:	4572      	cmp	r2, lr
 8007cbe:	f849 3b04 	str.w	r3, [r9], #4
 8007cc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007cc6:	d8e2      	bhi.n	8007c8e <__multiply+0xb2>
 8007cc8:	9b01      	ldr	r3, [sp, #4]
 8007cca:	f845 c003 	str.w	ip, [r5, r3]
 8007cce:	9b03      	ldr	r3, [sp, #12]
 8007cd0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007cd4:	3104      	adds	r1, #4
 8007cd6:	f1b9 0f00 	cmp.w	r9, #0
 8007cda:	d021      	beq.n	8007d20 <__multiply+0x144>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	f104 0c14 	add.w	ip, r4, #20
 8007ce2:	46ae      	mov	lr, r5
 8007ce4:	f04f 0a00 	mov.w	sl, #0
 8007ce8:	f8bc b000 	ldrh.w	fp, [ip]
 8007cec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007cf0:	fb09 770b 	mla	r7, r9, fp, r7
 8007cf4:	4457      	add	r7, sl
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007cfc:	f84e 3b04 	str.w	r3, [lr], #4
 8007d00:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d04:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d08:	f8be 3000 	ldrh.w	r3, [lr]
 8007d0c:	fb09 330a 	mla	r3, r9, sl, r3
 8007d10:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007d14:	4562      	cmp	r2, ip
 8007d16:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d1a:	d8e5      	bhi.n	8007ce8 <__multiply+0x10c>
 8007d1c:	9f01      	ldr	r7, [sp, #4]
 8007d1e:	51eb      	str	r3, [r5, r7]
 8007d20:	3504      	adds	r5, #4
 8007d22:	e799      	b.n	8007c58 <__multiply+0x7c>
 8007d24:	3e01      	subs	r6, #1
 8007d26:	e79b      	b.n	8007c60 <__multiply+0x84>
 8007d28:	0800a150 	.word	0x0800a150
 8007d2c:	0800a161 	.word	0x0800a161

08007d30 <__pow5mult>:
 8007d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d34:	4615      	mov	r5, r2
 8007d36:	f012 0203 	ands.w	r2, r2, #3
 8007d3a:	4607      	mov	r7, r0
 8007d3c:	460e      	mov	r6, r1
 8007d3e:	d007      	beq.n	8007d50 <__pow5mult+0x20>
 8007d40:	4c25      	ldr	r4, [pc, #148]	@ (8007dd8 <__pow5mult+0xa8>)
 8007d42:	3a01      	subs	r2, #1
 8007d44:	2300      	movs	r3, #0
 8007d46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007d4a:	f7ff fe9f 	bl	8007a8c <__multadd>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	10ad      	asrs	r5, r5, #2
 8007d52:	d03d      	beq.n	8007dd0 <__pow5mult+0xa0>
 8007d54:	69fc      	ldr	r4, [r7, #28]
 8007d56:	b97c      	cbnz	r4, 8007d78 <__pow5mult+0x48>
 8007d58:	2010      	movs	r0, #16
 8007d5a:	f7ff fd7f 	bl	800785c <malloc>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	61f8      	str	r0, [r7, #28]
 8007d62:	b928      	cbnz	r0, 8007d70 <__pow5mult+0x40>
 8007d64:	4b1d      	ldr	r3, [pc, #116]	@ (8007ddc <__pow5mult+0xac>)
 8007d66:	481e      	ldr	r0, [pc, #120]	@ (8007de0 <__pow5mult+0xb0>)
 8007d68:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007d6c:	f000 fbdc 	bl	8008528 <__assert_func>
 8007d70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d74:	6004      	str	r4, [r0, #0]
 8007d76:	60c4      	str	r4, [r0, #12]
 8007d78:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007d7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d80:	b94c      	cbnz	r4, 8007d96 <__pow5mult+0x66>
 8007d82:	f240 2171 	movw	r1, #625	@ 0x271
 8007d86:	4638      	mov	r0, r7
 8007d88:	f7ff ff12 	bl	8007bb0 <__i2b>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d92:	4604      	mov	r4, r0
 8007d94:	6003      	str	r3, [r0, #0]
 8007d96:	f04f 0900 	mov.w	r9, #0
 8007d9a:	07eb      	lsls	r3, r5, #31
 8007d9c:	d50a      	bpl.n	8007db4 <__pow5mult+0x84>
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4622      	mov	r2, r4
 8007da2:	4638      	mov	r0, r7
 8007da4:	f7ff ff1a 	bl	8007bdc <__multiply>
 8007da8:	4631      	mov	r1, r6
 8007daa:	4680      	mov	r8, r0
 8007dac:	4638      	mov	r0, r7
 8007dae:	f7ff fe4b 	bl	8007a48 <_Bfree>
 8007db2:	4646      	mov	r6, r8
 8007db4:	106d      	asrs	r5, r5, #1
 8007db6:	d00b      	beq.n	8007dd0 <__pow5mult+0xa0>
 8007db8:	6820      	ldr	r0, [r4, #0]
 8007dba:	b938      	cbnz	r0, 8007dcc <__pow5mult+0x9c>
 8007dbc:	4622      	mov	r2, r4
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	4638      	mov	r0, r7
 8007dc2:	f7ff ff0b 	bl	8007bdc <__multiply>
 8007dc6:	6020      	str	r0, [r4, #0]
 8007dc8:	f8c0 9000 	str.w	r9, [r0]
 8007dcc:	4604      	mov	r4, r0
 8007dce:	e7e4      	b.n	8007d9a <__pow5mult+0x6a>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dd6:	bf00      	nop
 8007dd8:	0800a1bc 	.word	0x0800a1bc
 8007ddc:	0800a0e1 	.word	0x0800a0e1
 8007de0:	0800a161 	.word	0x0800a161

08007de4 <__lshift>:
 8007de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de8:	460c      	mov	r4, r1
 8007dea:	6849      	ldr	r1, [r1, #4]
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007df2:	68a3      	ldr	r3, [r4, #8]
 8007df4:	4607      	mov	r7, r0
 8007df6:	4691      	mov	r9, r2
 8007df8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007dfc:	f108 0601 	add.w	r6, r8, #1
 8007e00:	42b3      	cmp	r3, r6
 8007e02:	db0b      	blt.n	8007e1c <__lshift+0x38>
 8007e04:	4638      	mov	r0, r7
 8007e06:	f7ff fddf 	bl	80079c8 <_Balloc>
 8007e0a:	4605      	mov	r5, r0
 8007e0c:	b948      	cbnz	r0, 8007e22 <__lshift+0x3e>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	4b28      	ldr	r3, [pc, #160]	@ (8007eb4 <__lshift+0xd0>)
 8007e12:	4829      	ldr	r0, [pc, #164]	@ (8007eb8 <__lshift+0xd4>)
 8007e14:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007e18:	f000 fb86 	bl	8008528 <__assert_func>
 8007e1c:	3101      	adds	r1, #1
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	e7ee      	b.n	8007e00 <__lshift+0x1c>
 8007e22:	2300      	movs	r3, #0
 8007e24:	f100 0114 	add.w	r1, r0, #20
 8007e28:	f100 0210 	add.w	r2, r0, #16
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	4553      	cmp	r3, sl
 8007e30:	db33      	blt.n	8007e9a <__lshift+0xb6>
 8007e32:	6920      	ldr	r0, [r4, #16]
 8007e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e38:	f104 0314 	add.w	r3, r4, #20
 8007e3c:	f019 091f 	ands.w	r9, r9, #31
 8007e40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007e44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007e48:	d02b      	beq.n	8007ea2 <__lshift+0xbe>
 8007e4a:	f1c9 0e20 	rsb	lr, r9, #32
 8007e4e:	468a      	mov	sl, r1
 8007e50:	2200      	movs	r2, #0
 8007e52:	6818      	ldr	r0, [r3, #0]
 8007e54:	fa00 f009 	lsl.w	r0, r0, r9
 8007e58:	4310      	orrs	r0, r2
 8007e5a:	f84a 0b04 	str.w	r0, [sl], #4
 8007e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e62:	459c      	cmp	ip, r3
 8007e64:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e68:	d8f3      	bhi.n	8007e52 <__lshift+0x6e>
 8007e6a:	ebac 0304 	sub.w	r3, ip, r4
 8007e6e:	3b15      	subs	r3, #21
 8007e70:	f023 0303 	bic.w	r3, r3, #3
 8007e74:	3304      	adds	r3, #4
 8007e76:	f104 0015 	add.w	r0, r4, #21
 8007e7a:	4584      	cmp	ip, r0
 8007e7c:	bf38      	it	cc
 8007e7e:	2304      	movcc	r3, #4
 8007e80:	50ca      	str	r2, [r1, r3]
 8007e82:	b10a      	cbz	r2, 8007e88 <__lshift+0xa4>
 8007e84:	f108 0602 	add.w	r6, r8, #2
 8007e88:	3e01      	subs	r6, #1
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	612e      	str	r6, [r5, #16]
 8007e8e:	4621      	mov	r1, r4
 8007e90:	f7ff fdda 	bl	8007a48 <_Bfree>
 8007e94:	4628      	mov	r0, r5
 8007e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	e7c5      	b.n	8007e2e <__lshift+0x4a>
 8007ea2:	3904      	subs	r1, #4
 8007ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007eac:	459c      	cmp	ip, r3
 8007eae:	d8f9      	bhi.n	8007ea4 <__lshift+0xc0>
 8007eb0:	e7ea      	b.n	8007e88 <__lshift+0xa4>
 8007eb2:	bf00      	nop
 8007eb4:	0800a150 	.word	0x0800a150
 8007eb8:	0800a161 	.word	0x0800a161

08007ebc <__mcmp>:
 8007ebc:	690a      	ldr	r2, [r1, #16]
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	6900      	ldr	r0, [r0, #16]
 8007ec2:	1a80      	subs	r0, r0, r2
 8007ec4:	b530      	push	{r4, r5, lr}
 8007ec6:	d10e      	bne.n	8007ee6 <__mcmp+0x2a>
 8007ec8:	3314      	adds	r3, #20
 8007eca:	3114      	adds	r1, #20
 8007ecc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007ed0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007ed4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ed8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007edc:	4295      	cmp	r5, r2
 8007ede:	d003      	beq.n	8007ee8 <__mcmp+0x2c>
 8007ee0:	d205      	bcs.n	8007eee <__mcmp+0x32>
 8007ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ee6:	bd30      	pop	{r4, r5, pc}
 8007ee8:	42a3      	cmp	r3, r4
 8007eea:	d3f3      	bcc.n	8007ed4 <__mcmp+0x18>
 8007eec:	e7fb      	b.n	8007ee6 <__mcmp+0x2a>
 8007eee:	2001      	movs	r0, #1
 8007ef0:	e7f9      	b.n	8007ee6 <__mcmp+0x2a>
	...

08007ef4 <__mdiff>:
 8007ef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef8:	4689      	mov	r9, r1
 8007efa:	4606      	mov	r6, r0
 8007efc:	4611      	mov	r1, r2
 8007efe:	4648      	mov	r0, r9
 8007f00:	4614      	mov	r4, r2
 8007f02:	f7ff ffdb 	bl	8007ebc <__mcmp>
 8007f06:	1e05      	subs	r5, r0, #0
 8007f08:	d112      	bne.n	8007f30 <__mdiff+0x3c>
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4630      	mov	r0, r6
 8007f0e:	f7ff fd5b 	bl	80079c8 <_Balloc>
 8007f12:	4602      	mov	r2, r0
 8007f14:	b928      	cbnz	r0, 8007f22 <__mdiff+0x2e>
 8007f16:	4b3f      	ldr	r3, [pc, #252]	@ (8008014 <__mdiff+0x120>)
 8007f18:	f240 2137 	movw	r1, #567	@ 0x237
 8007f1c:	483e      	ldr	r0, [pc, #248]	@ (8008018 <__mdiff+0x124>)
 8007f1e:	f000 fb03 	bl	8008528 <__assert_func>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007f28:	4610      	mov	r0, r2
 8007f2a:	b003      	add	sp, #12
 8007f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f30:	bfbc      	itt	lt
 8007f32:	464b      	movlt	r3, r9
 8007f34:	46a1      	movlt	r9, r4
 8007f36:	4630      	mov	r0, r6
 8007f38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007f3c:	bfba      	itte	lt
 8007f3e:	461c      	movlt	r4, r3
 8007f40:	2501      	movlt	r5, #1
 8007f42:	2500      	movge	r5, #0
 8007f44:	f7ff fd40 	bl	80079c8 <_Balloc>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	b918      	cbnz	r0, 8007f54 <__mdiff+0x60>
 8007f4c:	4b31      	ldr	r3, [pc, #196]	@ (8008014 <__mdiff+0x120>)
 8007f4e:	f240 2145 	movw	r1, #581	@ 0x245
 8007f52:	e7e3      	b.n	8007f1c <__mdiff+0x28>
 8007f54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007f58:	6926      	ldr	r6, [r4, #16]
 8007f5a:	60c5      	str	r5, [r0, #12]
 8007f5c:	f109 0310 	add.w	r3, r9, #16
 8007f60:	f109 0514 	add.w	r5, r9, #20
 8007f64:	f104 0e14 	add.w	lr, r4, #20
 8007f68:	f100 0b14 	add.w	fp, r0, #20
 8007f6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007f70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	46d9      	mov	r9, fp
 8007f78:	f04f 0c00 	mov.w	ip, #0
 8007f7c:	9b01      	ldr	r3, [sp, #4]
 8007f7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007f82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	fa1f f38a 	uxth.w	r3, sl
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	b283      	uxth	r3, r0
 8007f90:	1acb      	subs	r3, r1, r3
 8007f92:	0c00      	lsrs	r0, r0, #16
 8007f94:	4463      	add	r3, ip
 8007f96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007f9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007fa4:	4576      	cmp	r6, lr
 8007fa6:	f849 3b04 	str.w	r3, [r9], #4
 8007faa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007fae:	d8e5      	bhi.n	8007f7c <__mdiff+0x88>
 8007fb0:	1b33      	subs	r3, r6, r4
 8007fb2:	3b15      	subs	r3, #21
 8007fb4:	f023 0303 	bic.w	r3, r3, #3
 8007fb8:	3415      	adds	r4, #21
 8007fba:	3304      	adds	r3, #4
 8007fbc:	42a6      	cmp	r6, r4
 8007fbe:	bf38      	it	cc
 8007fc0:	2304      	movcc	r3, #4
 8007fc2:	441d      	add	r5, r3
 8007fc4:	445b      	add	r3, fp
 8007fc6:	461e      	mov	r6, r3
 8007fc8:	462c      	mov	r4, r5
 8007fca:	4544      	cmp	r4, r8
 8007fcc:	d30e      	bcc.n	8007fec <__mdiff+0xf8>
 8007fce:	f108 0103 	add.w	r1, r8, #3
 8007fd2:	1b49      	subs	r1, r1, r5
 8007fd4:	f021 0103 	bic.w	r1, r1, #3
 8007fd8:	3d03      	subs	r5, #3
 8007fda:	45a8      	cmp	r8, r5
 8007fdc:	bf38      	it	cc
 8007fde:	2100      	movcc	r1, #0
 8007fe0:	440b      	add	r3, r1
 8007fe2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007fe6:	b191      	cbz	r1, 800800e <__mdiff+0x11a>
 8007fe8:	6117      	str	r7, [r2, #16]
 8007fea:	e79d      	b.n	8007f28 <__mdiff+0x34>
 8007fec:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ff0:	46e6      	mov	lr, ip
 8007ff2:	0c08      	lsrs	r0, r1, #16
 8007ff4:	fa1c fc81 	uxtah	ip, ip, r1
 8007ff8:	4471      	add	r1, lr
 8007ffa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007ffe:	b289      	uxth	r1, r1
 8008000:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008004:	f846 1b04 	str.w	r1, [r6], #4
 8008008:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800800c:	e7dd      	b.n	8007fca <__mdiff+0xd6>
 800800e:	3f01      	subs	r7, #1
 8008010:	e7e7      	b.n	8007fe2 <__mdiff+0xee>
 8008012:	bf00      	nop
 8008014:	0800a150 	.word	0x0800a150
 8008018:	0800a161 	.word	0x0800a161

0800801c <__d2b>:
 800801c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008020:	460f      	mov	r7, r1
 8008022:	2101      	movs	r1, #1
 8008024:	ec59 8b10 	vmov	r8, r9, d0
 8008028:	4616      	mov	r6, r2
 800802a:	f7ff fccd 	bl	80079c8 <_Balloc>
 800802e:	4604      	mov	r4, r0
 8008030:	b930      	cbnz	r0, 8008040 <__d2b+0x24>
 8008032:	4602      	mov	r2, r0
 8008034:	4b23      	ldr	r3, [pc, #140]	@ (80080c4 <__d2b+0xa8>)
 8008036:	4824      	ldr	r0, [pc, #144]	@ (80080c8 <__d2b+0xac>)
 8008038:	f240 310f 	movw	r1, #783	@ 0x30f
 800803c:	f000 fa74 	bl	8008528 <__assert_func>
 8008040:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008044:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008048:	b10d      	cbz	r5, 800804e <__d2b+0x32>
 800804a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800804e:	9301      	str	r3, [sp, #4]
 8008050:	f1b8 0300 	subs.w	r3, r8, #0
 8008054:	d023      	beq.n	800809e <__d2b+0x82>
 8008056:	4668      	mov	r0, sp
 8008058:	9300      	str	r3, [sp, #0]
 800805a:	f7ff fd7c 	bl	8007b56 <__lo0bits>
 800805e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008062:	b1d0      	cbz	r0, 800809a <__d2b+0x7e>
 8008064:	f1c0 0320 	rsb	r3, r0, #32
 8008068:	fa02 f303 	lsl.w	r3, r2, r3
 800806c:	430b      	orrs	r3, r1
 800806e:	40c2      	lsrs	r2, r0
 8008070:	6163      	str	r3, [r4, #20]
 8008072:	9201      	str	r2, [sp, #4]
 8008074:	9b01      	ldr	r3, [sp, #4]
 8008076:	61a3      	str	r3, [r4, #24]
 8008078:	2b00      	cmp	r3, #0
 800807a:	bf0c      	ite	eq
 800807c:	2201      	moveq	r2, #1
 800807e:	2202      	movne	r2, #2
 8008080:	6122      	str	r2, [r4, #16]
 8008082:	b1a5      	cbz	r5, 80080ae <__d2b+0x92>
 8008084:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008088:	4405      	add	r5, r0
 800808a:	603d      	str	r5, [r7, #0]
 800808c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008090:	6030      	str	r0, [r6, #0]
 8008092:	4620      	mov	r0, r4
 8008094:	b003      	add	sp, #12
 8008096:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800809a:	6161      	str	r1, [r4, #20]
 800809c:	e7ea      	b.n	8008074 <__d2b+0x58>
 800809e:	a801      	add	r0, sp, #4
 80080a0:	f7ff fd59 	bl	8007b56 <__lo0bits>
 80080a4:	9b01      	ldr	r3, [sp, #4]
 80080a6:	6163      	str	r3, [r4, #20]
 80080a8:	3020      	adds	r0, #32
 80080aa:	2201      	movs	r2, #1
 80080ac:	e7e8      	b.n	8008080 <__d2b+0x64>
 80080ae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80080b2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80080b6:	6038      	str	r0, [r7, #0]
 80080b8:	6918      	ldr	r0, [r3, #16]
 80080ba:	f7ff fd2d 	bl	8007b18 <__hi0bits>
 80080be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80080c2:	e7e5      	b.n	8008090 <__d2b+0x74>
 80080c4:	0800a150 	.word	0x0800a150
 80080c8:	0800a161 	.word	0x0800a161

080080cc <__ssputs_r>:
 80080cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080d0:	688e      	ldr	r6, [r1, #8]
 80080d2:	461f      	mov	r7, r3
 80080d4:	42be      	cmp	r6, r7
 80080d6:	680b      	ldr	r3, [r1, #0]
 80080d8:	4682      	mov	sl, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	4690      	mov	r8, r2
 80080de:	d82d      	bhi.n	800813c <__ssputs_r+0x70>
 80080e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080e8:	d026      	beq.n	8008138 <__ssputs_r+0x6c>
 80080ea:	6965      	ldr	r5, [r4, #20]
 80080ec:	6909      	ldr	r1, [r1, #16]
 80080ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080f2:	eba3 0901 	sub.w	r9, r3, r1
 80080f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080fa:	1c7b      	adds	r3, r7, #1
 80080fc:	444b      	add	r3, r9
 80080fe:	106d      	asrs	r5, r5, #1
 8008100:	429d      	cmp	r5, r3
 8008102:	bf38      	it	cc
 8008104:	461d      	movcc	r5, r3
 8008106:	0553      	lsls	r3, r2, #21
 8008108:	d527      	bpl.n	800815a <__ssputs_r+0x8e>
 800810a:	4629      	mov	r1, r5
 800810c:	f7ff fbd0 	bl	80078b0 <_malloc_r>
 8008110:	4606      	mov	r6, r0
 8008112:	b360      	cbz	r0, 800816e <__ssputs_r+0xa2>
 8008114:	6921      	ldr	r1, [r4, #16]
 8008116:	464a      	mov	r2, r9
 8008118:	f7fe fcf9 	bl	8006b0e <memcpy>
 800811c:	89a3      	ldrh	r3, [r4, #12]
 800811e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008126:	81a3      	strh	r3, [r4, #12]
 8008128:	6126      	str	r6, [r4, #16]
 800812a:	6165      	str	r5, [r4, #20]
 800812c:	444e      	add	r6, r9
 800812e:	eba5 0509 	sub.w	r5, r5, r9
 8008132:	6026      	str	r6, [r4, #0]
 8008134:	60a5      	str	r5, [r4, #8]
 8008136:	463e      	mov	r6, r7
 8008138:	42be      	cmp	r6, r7
 800813a:	d900      	bls.n	800813e <__ssputs_r+0x72>
 800813c:	463e      	mov	r6, r7
 800813e:	6820      	ldr	r0, [r4, #0]
 8008140:	4632      	mov	r2, r6
 8008142:	4641      	mov	r1, r8
 8008144:	f000 f9c6 	bl	80084d4 <memmove>
 8008148:	68a3      	ldr	r3, [r4, #8]
 800814a:	1b9b      	subs	r3, r3, r6
 800814c:	60a3      	str	r3, [r4, #8]
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	4433      	add	r3, r6
 8008152:	6023      	str	r3, [r4, #0]
 8008154:	2000      	movs	r0, #0
 8008156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800815a:	462a      	mov	r2, r5
 800815c:	f000 fa28 	bl	80085b0 <_realloc_r>
 8008160:	4606      	mov	r6, r0
 8008162:	2800      	cmp	r0, #0
 8008164:	d1e0      	bne.n	8008128 <__ssputs_r+0x5c>
 8008166:	6921      	ldr	r1, [r4, #16]
 8008168:	4650      	mov	r0, sl
 800816a:	f7ff fb2d 	bl	80077c8 <_free_r>
 800816e:	230c      	movs	r3, #12
 8008170:	f8ca 3000 	str.w	r3, [sl]
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	f04f 30ff 	mov.w	r0, #4294967295
 8008180:	e7e9      	b.n	8008156 <__ssputs_r+0x8a>
	...

08008184 <_svfiprintf_r>:
 8008184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	4698      	mov	r8, r3
 800818a:	898b      	ldrh	r3, [r1, #12]
 800818c:	061b      	lsls	r3, r3, #24
 800818e:	b09d      	sub	sp, #116	@ 0x74
 8008190:	4607      	mov	r7, r0
 8008192:	460d      	mov	r5, r1
 8008194:	4614      	mov	r4, r2
 8008196:	d510      	bpl.n	80081ba <_svfiprintf_r+0x36>
 8008198:	690b      	ldr	r3, [r1, #16]
 800819a:	b973      	cbnz	r3, 80081ba <_svfiprintf_r+0x36>
 800819c:	2140      	movs	r1, #64	@ 0x40
 800819e:	f7ff fb87 	bl	80078b0 <_malloc_r>
 80081a2:	6028      	str	r0, [r5, #0]
 80081a4:	6128      	str	r0, [r5, #16]
 80081a6:	b930      	cbnz	r0, 80081b6 <_svfiprintf_r+0x32>
 80081a8:	230c      	movs	r3, #12
 80081aa:	603b      	str	r3, [r7, #0]
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295
 80081b0:	b01d      	add	sp, #116	@ 0x74
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	2340      	movs	r3, #64	@ 0x40
 80081b8:	616b      	str	r3, [r5, #20]
 80081ba:	2300      	movs	r3, #0
 80081bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081be:	2320      	movs	r3, #32
 80081c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081c8:	2330      	movs	r3, #48	@ 0x30
 80081ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008368 <_svfiprintf_r+0x1e4>
 80081ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081d2:	f04f 0901 	mov.w	r9, #1
 80081d6:	4623      	mov	r3, r4
 80081d8:	469a      	mov	sl, r3
 80081da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081de:	b10a      	cbz	r2, 80081e4 <_svfiprintf_r+0x60>
 80081e0:	2a25      	cmp	r2, #37	@ 0x25
 80081e2:	d1f9      	bne.n	80081d8 <_svfiprintf_r+0x54>
 80081e4:	ebba 0b04 	subs.w	fp, sl, r4
 80081e8:	d00b      	beq.n	8008202 <_svfiprintf_r+0x7e>
 80081ea:	465b      	mov	r3, fp
 80081ec:	4622      	mov	r2, r4
 80081ee:	4629      	mov	r1, r5
 80081f0:	4638      	mov	r0, r7
 80081f2:	f7ff ff6b 	bl	80080cc <__ssputs_r>
 80081f6:	3001      	adds	r0, #1
 80081f8:	f000 80a7 	beq.w	800834a <_svfiprintf_r+0x1c6>
 80081fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081fe:	445a      	add	r2, fp
 8008200:	9209      	str	r2, [sp, #36]	@ 0x24
 8008202:	f89a 3000 	ldrb.w	r3, [sl]
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 809f 	beq.w	800834a <_svfiprintf_r+0x1c6>
 800820c:	2300      	movs	r3, #0
 800820e:	f04f 32ff 	mov.w	r2, #4294967295
 8008212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008216:	f10a 0a01 	add.w	sl, sl, #1
 800821a:	9304      	str	r3, [sp, #16]
 800821c:	9307      	str	r3, [sp, #28]
 800821e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008222:	931a      	str	r3, [sp, #104]	@ 0x68
 8008224:	4654      	mov	r4, sl
 8008226:	2205      	movs	r2, #5
 8008228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822c:	484e      	ldr	r0, [pc, #312]	@ (8008368 <_svfiprintf_r+0x1e4>)
 800822e:	f7f7 ffe7 	bl	8000200 <memchr>
 8008232:	9a04      	ldr	r2, [sp, #16]
 8008234:	b9d8      	cbnz	r0, 800826e <_svfiprintf_r+0xea>
 8008236:	06d0      	lsls	r0, r2, #27
 8008238:	bf44      	itt	mi
 800823a:	2320      	movmi	r3, #32
 800823c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008240:	0711      	lsls	r1, r2, #28
 8008242:	bf44      	itt	mi
 8008244:	232b      	movmi	r3, #43	@ 0x2b
 8008246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800824a:	f89a 3000 	ldrb.w	r3, [sl]
 800824e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008250:	d015      	beq.n	800827e <_svfiprintf_r+0xfa>
 8008252:	9a07      	ldr	r2, [sp, #28]
 8008254:	4654      	mov	r4, sl
 8008256:	2000      	movs	r0, #0
 8008258:	f04f 0c0a 	mov.w	ip, #10
 800825c:	4621      	mov	r1, r4
 800825e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008262:	3b30      	subs	r3, #48	@ 0x30
 8008264:	2b09      	cmp	r3, #9
 8008266:	d94b      	bls.n	8008300 <_svfiprintf_r+0x17c>
 8008268:	b1b0      	cbz	r0, 8008298 <_svfiprintf_r+0x114>
 800826a:	9207      	str	r2, [sp, #28]
 800826c:	e014      	b.n	8008298 <_svfiprintf_r+0x114>
 800826e:	eba0 0308 	sub.w	r3, r0, r8
 8008272:	fa09 f303 	lsl.w	r3, r9, r3
 8008276:	4313      	orrs	r3, r2
 8008278:	9304      	str	r3, [sp, #16]
 800827a:	46a2      	mov	sl, r4
 800827c:	e7d2      	b.n	8008224 <_svfiprintf_r+0xa0>
 800827e:	9b03      	ldr	r3, [sp, #12]
 8008280:	1d19      	adds	r1, r3, #4
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	9103      	str	r1, [sp, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	bfbb      	ittet	lt
 800828a:	425b      	neglt	r3, r3
 800828c:	f042 0202 	orrlt.w	r2, r2, #2
 8008290:	9307      	strge	r3, [sp, #28]
 8008292:	9307      	strlt	r3, [sp, #28]
 8008294:	bfb8      	it	lt
 8008296:	9204      	strlt	r2, [sp, #16]
 8008298:	7823      	ldrb	r3, [r4, #0]
 800829a:	2b2e      	cmp	r3, #46	@ 0x2e
 800829c:	d10a      	bne.n	80082b4 <_svfiprintf_r+0x130>
 800829e:	7863      	ldrb	r3, [r4, #1]
 80082a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082a2:	d132      	bne.n	800830a <_svfiprintf_r+0x186>
 80082a4:	9b03      	ldr	r3, [sp, #12]
 80082a6:	1d1a      	adds	r2, r3, #4
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	9203      	str	r2, [sp, #12]
 80082ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082b0:	3402      	adds	r4, #2
 80082b2:	9305      	str	r3, [sp, #20]
 80082b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008378 <_svfiprintf_r+0x1f4>
 80082b8:	7821      	ldrb	r1, [r4, #0]
 80082ba:	2203      	movs	r2, #3
 80082bc:	4650      	mov	r0, sl
 80082be:	f7f7 ff9f 	bl	8000200 <memchr>
 80082c2:	b138      	cbz	r0, 80082d4 <_svfiprintf_r+0x150>
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	eba0 000a 	sub.w	r0, r0, sl
 80082ca:	2240      	movs	r2, #64	@ 0x40
 80082cc:	4082      	lsls	r2, r0
 80082ce:	4313      	orrs	r3, r2
 80082d0:	3401      	adds	r4, #1
 80082d2:	9304      	str	r3, [sp, #16]
 80082d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d8:	4824      	ldr	r0, [pc, #144]	@ (800836c <_svfiprintf_r+0x1e8>)
 80082da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082de:	2206      	movs	r2, #6
 80082e0:	f7f7 ff8e 	bl	8000200 <memchr>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d036      	beq.n	8008356 <_svfiprintf_r+0x1d2>
 80082e8:	4b21      	ldr	r3, [pc, #132]	@ (8008370 <_svfiprintf_r+0x1ec>)
 80082ea:	bb1b      	cbnz	r3, 8008334 <_svfiprintf_r+0x1b0>
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	3307      	adds	r3, #7
 80082f0:	f023 0307 	bic.w	r3, r3, #7
 80082f4:	3308      	adds	r3, #8
 80082f6:	9303      	str	r3, [sp, #12]
 80082f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082fa:	4433      	add	r3, r6
 80082fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082fe:	e76a      	b.n	80081d6 <_svfiprintf_r+0x52>
 8008300:	fb0c 3202 	mla	r2, ip, r2, r3
 8008304:	460c      	mov	r4, r1
 8008306:	2001      	movs	r0, #1
 8008308:	e7a8      	b.n	800825c <_svfiprintf_r+0xd8>
 800830a:	2300      	movs	r3, #0
 800830c:	3401      	adds	r4, #1
 800830e:	9305      	str	r3, [sp, #20]
 8008310:	4619      	mov	r1, r3
 8008312:	f04f 0c0a 	mov.w	ip, #10
 8008316:	4620      	mov	r0, r4
 8008318:	f810 2b01 	ldrb.w	r2, [r0], #1
 800831c:	3a30      	subs	r2, #48	@ 0x30
 800831e:	2a09      	cmp	r2, #9
 8008320:	d903      	bls.n	800832a <_svfiprintf_r+0x1a6>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0c6      	beq.n	80082b4 <_svfiprintf_r+0x130>
 8008326:	9105      	str	r1, [sp, #20]
 8008328:	e7c4      	b.n	80082b4 <_svfiprintf_r+0x130>
 800832a:	fb0c 2101 	mla	r1, ip, r1, r2
 800832e:	4604      	mov	r4, r0
 8008330:	2301      	movs	r3, #1
 8008332:	e7f0      	b.n	8008316 <_svfiprintf_r+0x192>
 8008334:	ab03      	add	r3, sp, #12
 8008336:	9300      	str	r3, [sp, #0]
 8008338:	462a      	mov	r2, r5
 800833a:	4b0e      	ldr	r3, [pc, #56]	@ (8008374 <_svfiprintf_r+0x1f0>)
 800833c:	a904      	add	r1, sp, #16
 800833e:	4638      	mov	r0, r7
 8008340:	f7fd fe88 	bl	8006054 <_printf_float>
 8008344:	1c42      	adds	r2, r0, #1
 8008346:	4606      	mov	r6, r0
 8008348:	d1d6      	bne.n	80082f8 <_svfiprintf_r+0x174>
 800834a:	89ab      	ldrh	r3, [r5, #12]
 800834c:	065b      	lsls	r3, r3, #25
 800834e:	f53f af2d 	bmi.w	80081ac <_svfiprintf_r+0x28>
 8008352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008354:	e72c      	b.n	80081b0 <_svfiprintf_r+0x2c>
 8008356:	ab03      	add	r3, sp, #12
 8008358:	9300      	str	r3, [sp, #0]
 800835a:	462a      	mov	r2, r5
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <_svfiprintf_r+0x1f0>)
 800835e:	a904      	add	r1, sp, #16
 8008360:	4638      	mov	r0, r7
 8008362:	f7fe f90f 	bl	8006584 <_printf_i>
 8008366:	e7ed      	b.n	8008344 <_svfiprintf_r+0x1c0>
 8008368:	0800a2b8 	.word	0x0800a2b8
 800836c:	0800a2c2 	.word	0x0800a2c2
 8008370:	08006055 	.word	0x08006055
 8008374:	080080cd 	.word	0x080080cd
 8008378:	0800a2be 	.word	0x0800a2be

0800837c <__sflush_r>:
 800837c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	0716      	lsls	r6, r2, #28
 8008386:	4605      	mov	r5, r0
 8008388:	460c      	mov	r4, r1
 800838a:	d454      	bmi.n	8008436 <__sflush_r+0xba>
 800838c:	684b      	ldr	r3, [r1, #4]
 800838e:	2b00      	cmp	r3, #0
 8008390:	dc02      	bgt.n	8008398 <__sflush_r+0x1c>
 8008392:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008394:	2b00      	cmp	r3, #0
 8008396:	dd48      	ble.n	800842a <__sflush_r+0xae>
 8008398:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800839a:	2e00      	cmp	r6, #0
 800839c:	d045      	beq.n	800842a <__sflush_r+0xae>
 800839e:	2300      	movs	r3, #0
 80083a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083a4:	682f      	ldr	r7, [r5, #0]
 80083a6:	6a21      	ldr	r1, [r4, #32]
 80083a8:	602b      	str	r3, [r5, #0]
 80083aa:	d030      	beq.n	800840e <__sflush_r+0x92>
 80083ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	0759      	lsls	r1, r3, #29
 80083b2:	d505      	bpl.n	80083c0 <__sflush_r+0x44>
 80083b4:	6863      	ldr	r3, [r4, #4]
 80083b6:	1ad2      	subs	r2, r2, r3
 80083b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083ba:	b10b      	cbz	r3, 80083c0 <__sflush_r+0x44>
 80083bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	2300      	movs	r3, #0
 80083c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083c4:	6a21      	ldr	r1, [r4, #32]
 80083c6:	4628      	mov	r0, r5
 80083c8:	47b0      	blx	r6
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	d106      	bne.n	80083de <__sflush_r+0x62>
 80083d0:	6829      	ldr	r1, [r5, #0]
 80083d2:	291d      	cmp	r1, #29
 80083d4:	d82b      	bhi.n	800842e <__sflush_r+0xb2>
 80083d6:	4a2a      	ldr	r2, [pc, #168]	@ (8008480 <__sflush_r+0x104>)
 80083d8:	410a      	asrs	r2, r1
 80083da:	07d6      	lsls	r6, r2, #31
 80083dc:	d427      	bmi.n	800842e <__sflush_r+0xb2>
 80083de:	2200      	movs	r2, #0
 80083e0:	6062      	str	r2, [r4, #4]
 80083e2:	04d9      	lsls	r1, r3, #19
 80083e4:	6922      	ldr	r2, [r4, #16]
 80083e6:	6022      	str	r2, [r4, #0]
 80083e8:	d504      	bpl.n	80083f4 <__sflush_r+0x78>
 80083ea:	1c42      	adds	r2, r0, #1
 80083ec:	d101      	bne.n	80083f2 <__sflush_r+0x76>
 80083ee:	682b      	ldr	r3, [r5, #0]
 80083f0:	b903      	cbnz	r3, 80083f4 <__sflush_r+0x78>
 80083f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80083f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083f6:	602f      	str	r7, [r5, #0]
 80083f8:	b1b9      	cbz	r1, 800842a <__sflush_r+0xae>
 80083fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083fe:	4299      	cmp	r1, r3
 8008400:	d002      	beq.n	8008408 <__sflush_r+0x8c>
 8008402:	4628      	mov	r0, r5
 8008404:	f7ff f9e0 	bl	80077c8 <_free_r>
 8008408:	2300      	movs	r3, #0
 800840a:	6363      	str	r3, [r4, #52]	@ 0x34
 800840c:	e00d      	b.n	800842a <__sflush_r+0xae>
 800840e:	2301      	movs	r3, #1
 8008410:	4628      	mov	r0, r5
 8008412:	47b0      	blx	r6
 8008414:	4602      	mov	r2, r0
 8008416:	1c50      	adds	r0, r2, #1
 8008418:	d1c9      	bne.n	80083ae <__sflush_r+0x32>
 800841a:	682b      	ldr	r3, [r5, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0c6      	beq.n	80083ae <__sflush_r+0x32>
 8008420:	2b1d      	cmp	r3, #29
 8008422:	d001      	beq.n	8008428 <__sflush_r+0xac>
 8008424:	2b16      	cmp	r3, #22
 8008426:	d11e      	bne.n	8008466 <__sflush_r+0xea>
 8008428:	602f      	str	r7, [r5, #0]
 800842a:	2000      	movs	r0, #0
 800842c:	e022      	b.n	8008474 <__sflush_r+0xf8>
 800842e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008432:	b21b      	sxth	r3, r3
 8008434:	e01b      	b.n	800846e <__sflush_r+0xf2>
 8008436:	690f      	ldr	r7, [r1, #16]
 8008438:	2f00      	cmp	r7, #0
 800843a:	d0f6      	beq.n	800842a <__sflush_r+0xae>
 800843c:	0793      	lsls	r3, r2, #30
 800843e:	680e      	ldr	r6, [r1, #0]
 8008440:	bf08      	it	eq
 8008442:	694b      	ldreq	r3, [r1, #20]
 8008444:	600f      	str	r7, [r1, #0]
 8008446:	bf18      	it	ne
 8008448:	2300      	movne	r3, #0
 800844a:	eba6 0807 	sub.w	r8, r6, r7
 800844e:	608b      	str	r3, [r1, #8]
 8008450:	f1b8 0f00 	cmp.w	r8, #0
 8008454:	dde9      	ble.n	800842a <__sflush_r+0xae>
 8008456:	6a21      	ldr	r1, [r4, #32]
 8008458:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800845a:	4643      	mov	r3, r8
 800845c:	463a      	mov	r2, r7
 800845e:	4628      	mov	r0, r5
 8008460:	47b0      	blx	r6
 8008462:	2800      	cmp	r0, #0
 8008464:	dc08      	bgt.n	8008478 <__sflush_r+0xfc>
 8008466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800846a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800846e:	81a3      	strh	r3, [r4, #12]
 8008470:	f04f 30ff 	mov.w	r0, #4294967295
 8008474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008478:	4407      	add	r7, r0
 800847a:	eba8 0800 	sub.w	r8, r8, r0
 800847e:	e7e7      	b.n	8008450 <__sflush_r+0xd4>
 8008480:	dfbffffe 	.word	0xdfbffffe

08008484 <_fflush_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	690b      	ldr	r3, [r1, #16]
 8008488:	4605      	mov	r5, r0
 800848a:	460c      	mov	r4, r1
 800848c:	b913      	cbnz	r3, 8008494 <_fflush_r+0x10>
 800848e:	2500      	movs	r5, #0
 8008490:	4628      	mov	r0, r5
 8008492:	bd38      	pop	{r3, r4, r5, pc}
 8008494:	b118      	cbz	r0, 800849e <_fflush_r+0x1a>
 8008496:	6a03      	ldr	r3, [r0, #32]
 8008498:	b90b      	cbnz	r3, 800849e <_fflush_r+0x1a>
 800849a:	f7fe fa1f 	bl	80068dc <__sinit>
 800849e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0f3      	beq.n	800848e <_fflush_r+0xa>
 80084a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084a8:	07d0      	lsls	r0, r2, #31
 80084aa:	d404      	bmi.n	80084b6 <_fflush_r+0x32>
 80084ac:	0599      	lsls	r1, r3, #22
 80084ae:	d402      	bmi.n	80084b6 <_fflush_r+0x32>
 80084b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084b2:	f7fe fb2a 	bl	8006b0a <__retarget_lock_acquire_recursive>
 80084b6:	4628      	mov	r0, r5
 80084b8:	4621      	mov	r1, r4
 80084ba:	f7ff ff5f 	bl	800837c <__sflush_r>
 80084be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084c0:	07da      	lsls	r2, r3, #31
 80084c2:	4605      	mov	r5, r0
 80084c4:	d4e4      	bmi.n	8008490 <_fflush_r+0xc>
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	059b      	lsls	r3, r3, #22
 80084ca:	d4e1      	bmi.n	8008490 <_fflush_r+0xc>
 80084cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ce:	f7fe fb1d 	bl	8006b0c <__retarget_lock_release_recursive>
 80084d2:	e7dd      	b.n	8008490 <_fflush_r+0xc>

080084d4 <memmove>:
 80084d4:	4288      	cmp	r0, r1
 80084d6:	b510      	push	{r4, lr}
 80084d8:	eb01 0402 	add.w	r4, r1, r2
 80084dc:	d902      	bls.n	80084e4 <memmove+0x10>
 80084de:	4284      	cmp	r4, r0
 80084e0:	4623      	mov	r3, r4
 80084e2:	d807      	bhi.n	80084f4 <memmove+0x20>
 80084e4:	1e43      	subs	r3, r0, #1
 80084e6:	42a1      	cmp	r1, r4
 80084e8:	d008      	beq.n	80084fc <memmove+0x28>
 80084ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80084ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80084f2:	e7f8      	b.n	80084e6 <memmove+0x12>
 80084f4:	4402      	add	r2, r0
 80084f6:	4601      	mov	r1, r0
 80084f8:	428a      	cmp	r2, r1
 80084fa:	d100      	bne.n	80084fe <memmove+0x2a>
 80084fc:	bd10      	pop	{r4, pc}
 80084fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008502:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008506:	e7f7      	b.n	80084f8 <memmove+0x24>

08008508 <_sbrk_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d06      	ldr	r5, [pc, #24]	@ (8008524 <_sbrk_r+0x1c>)
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	602b      	str	r3, [r5, #0]
 8008514:	f7f9 fc14 	bl	8001d40 <_sbrk>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_sbrk_r+0x1a>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_sbrk_r+0x1a>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	200004e0 	.word	0x200004e0

08008528 <__assert_func>:
 8008528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800852a:	4614      	mov	r4, r2
 800852c:	461a      	mov	r2, r3
 800852e:	4b09      	ldr	r3, [pc, #36]	@ (8008554 <__assert_func+0x2c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4605      	mov	r5, r0
 8008534:	68d8      	ldr	r0, [r3, #12]
 8008536:	b954      	cbnz	r4, 800854e <__assert_func+0x26>
 8008538:	4b07      	ldr	r3, [pc, #28]	@ (8008558 <__assert_func+0x30>)
 800853a:	461c      	mov	r4, r3
 800853c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008540:	9100      	str	r1, [sp, #0]
 8008542:	462b      	mov	r3, r5
 8008544:	4905      	ldr	r1, [pc, #20]	@ (800855c <__assert_func+0x34>)
 8008546:	f000 f86f 	bl	8008628 <fiprintf>
 800854a:	f000 f87f 	bl	800864c <abort>
 800854e:	4b04      	ldr	r3, [pc, #16]	@ (8008560 <__assert_func+0x38>)
 8008550:	e7f4      	b.n	800853c <__assert_func+0x14>
 8008552:	bf00      	nop
 8008554:	20000080 	.word	0x20000080
 8008558:	0800a30e 	.word	0x0800a30e
 800855c:	0800a2e0 	.word	0x0800a2e0
 8008560:	0800a2d3 	.word	0x0800a2d3

08008564 <_calloc_r>:
 8008564:	b570      	push	{r4, r5, r6, lr}
 8008566:	fba1 5402 	umull	r5, r4, r1, r2
 800856a:	b93c      	cbnz	r4, 800857c <_calloc_r+0x18>
 800856c:	4629      	mov	r1, r5
 800856e:	f7ff f99f 	bl	80078b0 <_malloc_r>
 8008572:	4606      	mov	r6, r0
 8008574:	b928      	cbnz	r0, 8008582 <_calloc_r+0x1e>
 8008576:	2600      	movs	r6, #0
 8008578:	4630      	mov	r0, r6
 800857a:	bd70      	pop	{r4, r5, r6, pc}
 800857c:	220c      	movs	r2, #12
 800857e:	6002      	str	r2, [r0, #0]
 8008580:	e7f9      	b.n	8008576 <_calloc_r+0x12>
 8008582:	462a      	mov	r2, r5
 8008584:	4621      	mov	r1, r4
 8008586:	f7fe fa42 	bl	8006a0e <memset>
 800858a:	e7f5      	b.n	8008578 <_calloc_r+0x14>

0800858c <__ascii_mbtowc>:
 800858c:	b082      	sub	sp, #8
 800858e:	b901      	cbnz	r1, 8008592 <__ascii_mbtowc+0x6>
 8008590:	a901      	add	r1, sp, #4
 8008592:	b142      	cbz	r2, 80085a6 <__ascii_mbtowc+0x1a>
 8008594:	b14b      	cbz	r3, 80085aa <__ascii_mbtowc+0x1e>
 8008596:	7813      	ldrb	r3, [r2, #0]
 8008598:	600b      	str	r3, [r1, #0]
 800859a:	7812      	ldrb	r2, [r2, #0]
 800859c:	1e10      	subs	r0, r2, #0
 800859e:	bf18      	it	ne
 80085a0:	2001      	movne	r0, #1
 80085a2:	b002      	add	sp, #8
 80085a4:	4770      	bx	lr
 80085a6:	4610      	mov	r0, r2
 80085a8:	e7fb      	b.n	80085a2 <__ascii_mbtowc+0x16>
 80085aa:	f06f 0001 	mvn.w	r0, #1
 80085ae:	e7f8      	b.n	80085a2 <__ascii_mbtowc+0x16>

080085b0 <_realloc_r>:
 80085b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085b4:	4680      	mov	r8, r0
 80085b6:	4615      	mov	r5, r2
 80085b8:	460c      	mov	r4, r1
 80085ba:	b921      	cbnz	r1, 80085c6 <_realloc_r+0x16>
 80085bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085c0:	4611      	mov	r1, r2
 80085c2:	f7ff b975 	b.w	80078b0 <_malloc_r>
 80085c6:	b92a      	cbnz	r2, 80085d4 <_realloc_r+0x24>
 80085c8:	f7ff f8fe 	bl	80077c8 <_free_r>
 80085cc:	2400      	movs	r4, #0
 80085ce:	4620      	mov	r0, r4
 80085d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085d4:	f000 f841 	bl	800865a <_malloc_usable_size_r>
 80085d8:	4285      	cmp	r5, r0
 80085da:	4606      	mov	r6, r0
 80085dc:	d802      	bhi.n	80085e4 <_realloc_r+0x34>
 80085de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80085e2:	d8f4      	bhi.n	80085ce <_realloc_r+0x1e>
 80085e4:	4629      	mov	r1, r5
 80085e6:	4640      	mov	r0, r8
 80085e8:	f7ff f962 	bl	80078b0 <_malloc_r>
 80085ec:	4607      	mov	r7, r0
 80085ee:	2800      	cmp	r0, #0
 80085f0:	d0ec      	beq.n	80085cc <_realloc_r+0x1c>
 80085f2:	42b5      	cmp	r5, r6
 80085f4:	462a      	mov	r2, r5
 80085f6:	4621      	mov	r1, r4
 80085f8:	bf28      	it	cs
 80085fa:	4632      	movcs	r2, r6
 80085fc:	f7fe fa87 	bl	8006b0e <memcpy>
 8008600:	4621      	mov	r1, r4
 8008602:	4640      	mov	r0, r8
 8008604:	f7ff f8e0 	bl	80077c8 <_free_r>
 8008608:	463c      	mov	r4, r7
 800860a:	e7e0      	b.n	80085ce <_realloc_r+0x1e>

0800860c <__ascii_wctomb>:
 800860c:	4603      	mov	r3, r0
 800860e:	4608      	mov	r0, r1
 8008610:	b141      	cbz	r1, 8008624 <__ascii_wctomb+0x18>
 8008612:	2aff      	cmp	r2, #255	@ 0xff
 8008614:	d904      	bls.n	8008620 <__ascii_wctomb+0x14>
 8008616:	228a      	movs	r2, #138	@ 0x8a
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	f04f 30ff 	mov.w	r0, #4294967295
 800861e:	4770      	bx	lr
 8008620:	700a      	strb	r2, [r1, #0]
 8008622:	2001      	movs	r0, #1
 8008624:	4770      	bx	lr
	...

08008628 <fiprintf>:
 8008628:	b40e      	push	{r1, r2, r3}
 800862a:	b503      	push	{r0, r1, lr}
 800862c:	4601      	mov	r1, r0
 800862e:	ab03      	add	r3, sp, #12
 8008630:	4805      	ldr	r0, [pc, #20]	@ (8008648 <fiprintf+0x20>)
 8008632:	f853 2b04 	ldr.w	r2, [r3], #4
 8008636:	6800      	ldr	r0, [r0, #0]
 8008638:	9301      	str	r3, [sp, #4]
 800863a:	f000 f83f 	bl	80086bc <_vfiprintf_r>
 800863e:	b002      	add	sp, #8
 8008640:	f85d eb04 	ldr.w	lr, [sp], #4
 8008644:	b003      	add	sp, #12
 8008646:	4770      	bx	lr
 8008648:	20000080 	.word	0x20000080

0800864c <abort>:
 800864c:	b508      	push	{r3, lr}
 800864e:	2006      	movs	r0, #6
 8008650:	f000 fa08 	bl	8008a64 <raise>
 8008654:	2001      	movs	r0, #1
 8008656:	f7f9 fafa 	bl	8001c4e <_exit>

0800865a <_malloc_usable_size_r>:
 800865a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865e:	1f18      	subs	r0, r3, #4
 8008660:	2b00      	cmp	r3, #0
 8008662:	bfbc      	itt	lt
 8008664:	580b      	ldrlt	r3, [r1, r0]
 8008666:	18c0      	addlt	r0, r0, r3
 8008668:	4770      	bx	lr

0800866a <__sfputc_r>:
 800866a:	6893      	ldr	r3, [r2, #8]
 800866c:	3b01      	subs	r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	b410      	push	{r4}
 8008672:	6093      	str	r3, [r2, #8]
 8008674:	da08      	bge.n	8008688 <__sfputc_r+0x1e>
 8008676:	6994      	ldr	r4, [r2, #24]
 8008678:	42a3      	cmp	r3, r4
 800867a:	db01      	blt.n	8008680 <__sfputc_r+0x16>
 800867c:	290a      	cmp	r1, #10
 800867e:	d103      	bne.n	8008688 <__sfputc_r+0x1e>
 8008680:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008684:	f000 b932 	b.w	80088ec <__swbuf_r>
 8008688:	6813      	ldr	r3, [r2, #0]
 800868a:	1c58      	adds	r0, r3, #1
 800868c:	6010      	str	r0, [r2, #0]
 800868e:	7019      	strb	r1, [r3, #0]
 8008690:	4608      	mov	r0, r1
 8008692:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008696:	4770      	bx	lr

08008698 <__sfputs_r>:
 8008698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869a:	4606      	mov	r6, r0
 800869c:	460f      	mov	r7, r1
 800869e:	4614      	mov	r4, r2
 80086a0:	18d5      	adds	r5, r2, r3
 80086a2:	42ac      	cmp	r4, r5
 80086a4:	d101      	bne.n	80086aa <__sfputs_r+0x12>
 80086a6:	2000      	movs	r0, #0
 80086a8:	e007      	b.n	80086ba <__sfputs_r+0x22>
 80086aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ae:	463a      	mov	r2, r7
 80086b0:	4630      	mov	r0, r6
 80086b2:	f7ff ffda 	bl	800866a <__sfputc_r>
 80086b6:	1c43      	adds	r3, r0, #1
 80086b8:	d1f3      	bne.n	80086a2 <__sfputs_r+0xa>
 80086ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080086bc <_vfiprintf_r>:
 80086bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c0:	460d      	mov	r5, r1
 80086c2:	b09d      	sub	sp, #116	@ 0x74
 80086c4:	4614      	mov	r4, r2
 80086c6:	4698      	mov	r8, r3
 80086c8:	4606      	mov	r6, r0
 80086ca:	b118      	cbz	r0, 80086d4 <_vfiprintf_r+0x18>
 80086cc:	6a03      	ldr	r3, [r0, #32]
 80086ce:	b90b      	cbnz	r3, 80086d4 <_vfiprintf_r+0x18>
 80086d0:	f7fe f904 	bl	80068dc <__sinit>
 80086d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086d6:	07d9      	lsls	r1, r3, #31
 80086d8:	d405      	bmi.n	80086e6 <_vfiprintf_r+0x2a>
 80086da:	89ab      	ldrh	r3, [r5, #12]
 80086dc:	059a      	lsls	r2, r3, #22
 80086de:	d402      	bmi.n	80086e6 <_vfiprintf_r+0x2a>
 80086e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086e2:	f7fe fa12 	bl	8006b0a <__retarget_lock_acquire_recursive>
 80086e6:	89ab      	ldrh	r3, [r5, #12]
 80086e8:	071b      	lsls	r3, r3, #28
 80086ea:	d501      	bpl.n	80086f0 <_vfiprintf_r+0x34>
 80086ec:	692b      	ldr	r3, [r5, #16]
 80086ee:	b99b      	cbnz	r3, 8008718 <_vfiprintf_r+0x5c>
 80086f0:	4629      	mov	r1, r5
 80086f2:	4630      	mov	r0, r6
 80086f4:	f000 f938 	bl	8008968 <__swsetup_r>
 80086f8:	b170      	cbz	r0, 8008718 <_vfiprintf_r+0x5c>
 80086fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086fc:	07dc      	lsls	r4, r3, #31
 80086fe:	d504      	bpl.n	800870a <_vfiprintf_r+0x4e>
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	b01d      	add	sp, #116	@ 0x74
 8008706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870a:	89ab      	ldrh	r3, [r5, #12]
 800870c:	0598      	lsls	r0, r3, #22
 800870e:	d4f7      	bmi.n	8008700 <_vfiprintf_r+0x44>
 8008710:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008712:	f7fe f9fb 	bl	8006b0c <__retarget_lock_release_recursive>
 8008716:	e7f3      	b.n	8008700 <_vfiprintf_r+0x44>
 8008718:	2300      	movs	r3, #0
 800871a:	9309      	str	r3, [sp, #36]	@ 0x24
 800871c:	2320      	movs	r3, #32
 800871e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008722:	f8cd 800c 	str.w	r8, [sp, #12]
 8008726:	2330      	movs	r3, #48	@ 0x30
 8008728:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80088d8 <_vfiprintf_r+0x21c>
 800872c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008730:	f04f 0901 	mov.w	r9, #1
 8008734:	4623      	mov	r3, r4
 8008736:	469a      	mov	sl, r3
 8008738:	f813 2b01 	ldrb.w	r2, [r3], #1
 800873c:	b10a      	cbz	r2, 8008742 <_vfiprintf_r+0x86>
 800873e:	2a25      	cmp	r2, #37	@ 0x25
 8008740:	d1f9      	bne.n	8008736 <_vfiprintf_r+0x7a>
 8008742:	ebba 0b04 	subs.w	fp, sl, r4
 8008746:	d00b      	beq.n	8008760 <_vfiprintf_r+0xa4>
 8008748:	465b      	mov	r3, fp
 800874a:	4622      	mov	r2, r4
 800874c:	4629      	mov	r1, r5
 800874e:	4630      	mov	r0, r6
 8008750:	f7ff ffa2 	bl	8008698 <__sfputs_r>
 8008754:	3001      	adds	r0, #1
 8008756:	f000 80a7 	beq.w	80088a8 <_vfiprintf_r+0x1ec>
 800875a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800875c:	445a      	add	r2, fp
 800875e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008760:	f89a 3000 	ldrb.w	r3, [sl]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 809f 	beq.w	80088a8 <_vfiprintf_r+0x1ec>
 800876a:	2300      	movs	r3, #0
 800876c:	f04f 32ff 	mov.w	r2, #4294967295
 8008770:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008774:	f10a 0a01 	add.w	sl, sl, #1
 8008778:	9304      	str	r3, [sp, #16]
 800877a:	9307      	str	r3, [sp, #28]
 800877c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008780:	931a      	str	r3, [sp, #104]	@ 0x68
 8008782:	4654      	mov	r4, sl
 8008784:	2205      	movs	r2, #5
 8008786:	f814 1b01 	ldrb.w	r1, [r4], #1
 800878a:	4853      	ldr	r0, [pc, #332]	@ (80088d8 <_vfiprintf_r+0x21c>)
 800878c:	f7f7 fd38 	bl	8000200 <memchr>
 8008790:	9a04      	ldr	r2, [sp, #16]
 8008792:	b9d8      	cbnz	r0, 80087cc <_vfiprintf_r+0x110>
 8008794:	06d1      	lsls	r1, r2, #27
 8008796:	bf44      	itt	mi
 8008798:	2320      	movmi	r3, #32
 800879a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800879e:	0713      	lsls	r3, r2, #28
 80087a0:	bf44      	itt	mi
 80087a2:	232b      	movmi	r3, #43	@ 0x2b
 80087a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087a8:	f89a 3000 	ldrb.w	r3, [sl]
 80087ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ae:	d015      	beq.n	80087dc <_vfiprintf_r+0x120>
 80087b0:	9a07      	ldr	r2, [sp, #28]
 80087b2:	4654      	mov	r4, sl
 80087b4:	2000      	movs	r0, #0
 80087b6:	f04f 0c0a 	mov.w	ip, #10
 80087ba:	4621      	mov	r1, r4
 80087bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087c0:	3b30      	subs	r3, #48	@ 0x30
 80087c2:	2b09      	cmp	r3, #9
 80087c4:	d94b      	bls.n	800885e <_vfiprintf_r+0x1a2>
 80087c6:	b1b0      	cbz	r0, 80087f6 <_vfiprintf_r+0x13a>
 80087c8:	9207      	str	r2, [sp, #28]
 80087ca:	e014      	b.n	80087f6 <_vfiprintf_r+0x13a>
 80087cc:	eba0 0308 	sub.w	r3, r0, r8
 80087d0:	fa09 f303 	lsl.w	r3, r9, r3
 80087d4:	4313      	orrs	r3, r2
 80087d6:	9304      	str	r3, [sp, #16]
 80087d8:	46a2      	mov	sl, r4
 80087da:	e7d2      	b.n	8008782 <_vfiprintf_r+0xc6>
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	1d19      	adds	r1, r3, #4
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	9103      	str	r1, [sp, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	bfbb      	ittet	lt
 80087e8:	425b      	neglt	r3, r3
 80087ea:	f042 0202 	orrlt.w	r2, r2, #2
 80087ee:	9307      	strge	r3, [sp, #28]
 80087f0:	9307      	strlt	r3, [sp, #28]
 80087f2:	bfb8      	it	lt
 80087f4:	9204      	strlt	r2, [sp, #16]
 80087f6:	7823      	ldrb	r3, [r4, #0]
 80087f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80087fa:	d10a      	bne.n	8008812 <_vfiprintf_r+0x156>
 80087fc:	7863      	ldrb	r3, [r4, #1]
 80087fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008800:	d132      	bne.n	8008868 <_vfiprintf_r+0x1ac>
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	9203      	str	r2, [sp, #12]
 800880a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800880e:	3402      	adds	r4, #2
 8008810:	9305      	str	r3, [sp, #20]
 8008812:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80088e8 <_vfiprintf_r+0x22c>
 8008816:	7821      	ldrb	r1, [r4, #0]
 8008818:	2203      	movs	r2, #3
 800881a:	4650      	mov	r0, sl
 800881c:	f7f7 fcf0 	bl	8000200 <memchr>
 8008820:	b138      	cbz	r0, 8008832 <_vfiprintf_r+0x176>
 8008822:	9b04      	ldr	r3, [sp, #16]
 8008824:	eba0 000a 	sub.w	r0, r0, sl
 8008828:	2240      	movs	r2, #64	@ 0x40
 800882a:	4082      	lsls	r2, r0
 800882c:	4313      	orrs	r3, r2
 800882e:	3401      	adds	r4, #1
 8008830:	9304      	str	r3, [sp, #16]
 8008832:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008836:	4829      	ldr	r0, [pc, #164]	@ (80088dc <_vfiprintf_r+0x220>)
 8008838:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800883c:	2206      	movs	r2, #6
 800883e:	f7f7 fcdf 	bl	8000200 <memchr>
 8008842:	2800      	cmp	r0, #0
 8008844:	d03f      	beq.n	80088c6 <_vfiprintf_r+0x20a>
 8008846:	4b26      	ldr	r3, [pc, #152]	@ (80088e0 <_vfiprintf_r+0x224>)
 8008848:	bb1b      	cbnz	r3, 8008892 <_vfiprintf_r+0x1d6>
 800884a:	9b03      	ldr	r3, [sp, #12]
 800884c:	3307      	adds	r3, #7
 800884e:	f023 0307 	bic.w	r3, r3, #7
 8008852:	3308      	adds	r3, #8
 8008854:	9303      	str	r3, [sp, #12]
 8008856:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008858:	443b      	add	r3, r7
 800885a:	9309      	str	r3, [sp, #36]	@ 0x24
 800885c:	e76a      	b.n	8008734 <_vfiprintf_r+0x78>
 800885e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008862:	460c      	mov	r4, r1
 8008864:	2001      	movs	r0, #1
 8008866:	e7a8      	b.n	80087ba <_vfiprintf_r+0xfe>
 8008868:	2300      	movs	r3, #0
 800886a:	3401      	adds	r4, #1
 800886c:	9305      	str	r3, [sp, #20]
 800886e:	4619      	mov	r1, r3
 8008870:	f04f 0c0a 	mov.w	ip, #10
 8008874:	4620      	mov	r0, r4
 8008876:	f810 2b01 	ldrb.w	r2, [r0], #1
 800887a:	3a30      	subs	r2, #48	@ 0x30
 800887c:	2a09      	cmp	r2, #9
 800887e:	d903      	bls.n	8008888 <_vfiprintf_r+0x1cc>
 8008880:	2b00      	cmp	r3, #0
 8008882:	d0c6      	beq.n	8008812 <_vfiprintf_r+0x156>
 8008884:	9105      	str	r1, [sp, #20]
 8008886:	e7c4      	b.n	8008812 <_vfiprintf_r+0x156>
 8008888:	fb0c 2101 	mla	r1, ip, r1, r2
 800888c:	4604      	mov	r4, r0
 800888e:	2301      	movs	r3, #1
 8008890:	e7f0      	b.n	8008874 <_vfiprintf_r+0x1b8>
 8008892:	ab03      	add	r3, sp, #12
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	462a      	mov	r2, r5
 8008898:	4b12      	ldr	r3, [pc, #72]	@ (80088e4 <_vfiprintf_r+0x228>)
 800889a:	a904      	add	r1, sp, #16
 800889c:	4630      	mov	r0, r6
 800889e:	f7fd fbd9 	bl	8006054 <_printf_float>
 80088a2:	4607      	mov	r7, r0
 80088a4:	1c78      	adds	r0, r7, #1
 80088a6:	d1d6      	bne.n	8008856 <_vfiprintf_r+0x19a>
 80088a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088aa:	07d9      	lsls	r1, r3, #31
 80088ac:	d405      	bmi.n	80088ba <_vfiprintf_r+0x1fe>
 80088ae:	89ab      	ldrh	r3, [r5, #12]
 80088b0:	059a      	lsls	r2, r3, #22
 80088b2:	d402      	bmi.n	80088ba <_vfiprintf_r+0x1fe>
 80088b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088b6:	f7fe f929 	bl	8006b0c <__retarget_lock_release_recursive>
 80088ba:	89ab      	ldrh	r3, [r5, #12]
 80088bc:	065b      	lsls	r3, r3, #25
 80088be:	f53f af1f 	bmi.w	8008700 <_vfiprintf_r+0x44>
 80088c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088c4:	e71e      	b.n	8008704 <_vfiprintf_r+0x48>
 80088c6:	ab03      	add	r3, sp, #12
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	462a      	mov	r2, r5
 80088cc:	4b05      	ldr	r3, [pc, #20]	@ (80088e4 <_vfiprintf_r+0x228>)
 80088ce:	a904      	add	r1, sp, #16
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7fd fe57 	bl	8006584 <_printf_i>
 80088d6:	e7e4      	b.n	80088a2 <_vfiprintf_r+0x1e6>
 80088d8:	0800a2b8 	.word	0x0800a2b8
 80088dc:	0800a2c2 	.word	0x0800a2c2
 80088e0:	08006055 	.word	0x08006055
 80088e4:	08008699 	.word	0x08008699
 80088e8:	0800a2be 	.word	0x0800a2be

080088ec <__swbuf_r>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	460e      	mov	r6, r1
 80088f0:	4614      	mov	r4, r2
 80088f2:	4605      	mov	r5, r0
 80088f4:	b118      	cbz	r0, 80088fe <__swbuf_r+0x12>
 80088f6:	6a03      	ldr	r3, [r0, #32]
 80088f8:	b90b      	cbnz	r3, 80088fe <__swbuf_r+0x12>
 80088fa:	f7fd ffef 	bl	80068dc <__sinit>
 80088fe:	69a3      	ldr	r3, [r4, #24]
 8008900:	60a3      	str	r3, [r4, #8]
 8008902:	89a3      	ldrh	r3, [r4, #12]
 8008904:	071a      	lsls	r2, r3, #28
 8008906:	d501      	bpl.n	800890c <__swbuf_r+0x20>
 8008908:	6923      	ldr	r3, [r4, #16]
 800890a:	b943      	cbnz	r3, 800891e <__swbuf_r+0x32>
 800890c:	4621      	mov	r1, r4
 800890e:	4628      	mov	r0, r5
 8008910:	f000 f82a 	bl	8008968 <__swsetup_r>
 8008914:	b118      	cbz	r0, 800891e <__swbuf_r+0x32>
 8008916:	f04f 37ff 	mov.w	r7, #4294967295
 800891a:	4638      	mov	r0, r7
 800891c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800891e:	6823      	ldr	r3, [r4, #0]
 8008920:	6922      	ldr	r2, [r4, #16]
 8008922:	1a98      	subs	r0, r3, r2
 8008924:	6963      	ldr	r3, [r4, #20]
 8008926:	b2f6      	uxtb	r6, r6
 8008928:	4283      	cmp	r3, r0
 800892a:	4637      	mov	r7, r6
 800892c:	dc05      	bgt.n	800893a <__swbuf_r+0x4e>
 800892e:	4621      	mov	r1, r4
 8008930:	4628      	mov	r0, r5
 8008932:	f7ff fda7 	bl	8008484 <_fflush_r>
 8008936:	2800      	cmp	r0, #0
 8008938:	d1ed      	bne.n	8008916 <__swbuf_r+0x2a>
 800893a:	68a3      	ldr	r3, [r4, #8]
 800893c:	3b01      	subs	r3, #1
 800893e:	60a3      	str	r3, [r4, #8]
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	1c5a      	adds	r2, r3, #1
 8008944:	6022      	str	r2, [r4, #0]
 8008946:	701e      	strb	r6, [r3, #0]
 8008948:	6962      	ldr	r2, [r4, #20]
 800894a:	1c43      	adds	r3, r0, #1
 800894c:	429a      	cmp	r2, r3
 800894e:	d004      	beq.n	800895a <__swbuf_r+0x6e>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	07db      	lsls	r3, r3, #31
 8008954:	d5e1      	bpl.n	800891a <__swbuf_r+0x2e>
 8008956:	2e0a      	cmp	r6, #10
 8008958:	d1df      	bne.n	800891a <__swbuf_r+0x2e>
 800895a:	4621      	mov	r1, r4
 800895c:	4628      	mov	r0, r5
 800895e:	f7ff fd91 	bl	8008484 <_fflush_r>
 8008962:	2800      	cmp	r0, #0
 8008964:	d0d9      	beq.n	800891a <__swbuf_r+0x2e>
 8008966:	e7d6      	b.n	8008916 <__swbuf_r+0x2a>

08008968 <__swsetup_r>:
 8008968:	b538      	push	{r3, r4, r5, lr}
 800896a:	4b29      	ldr	r3, [pc, #164]	@ (8008a10 <__swsetup_r+0xa8>)
 800896c:	4605      	mov	r5, r0
 800896e:	6818      	ldr	r0, [r3, #0]
 8008970:	460c      	mov	r4, r1
 8008972:	b118      	cbz	r0, 800897c <__swsetup_r+0x14>
 8008974:	6a03      	ldr	r3, [r0, #32]
 8008976:	b90b      	cbnz	r3, 800897c <__swsetup_r+0x14>
 8008978:	f7fd ffb0 	bl	80068dc <__sinit>
 800897c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008980:	0719      	lsls	r1, r3, #28
 8008982:	d422      	bmi.n	80089ca <__swsetup_r+0x62>
 8008984:	06da      	lsls	r2, r3, #27
 8008986:	d407      	bmi.n	8008998 <__swsetup_r+0x30>
 8008988:	2209      	movs	r2, #9
 800898a:	602a      	str	r2, [r5, #0]
 800898c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008990:	81a3      	strh	r3, [r4, #12]
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	e033      	b.n	8008a00 <__swsetup_r+0x98>
 8008998:	0758      	lsls	r0, r3, #29
 800899a:	d512      	bpl.n	80089c2 <__swsetup_r+0x5a>
 800899c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800899e:	b141      	cbz	r1, 80089b2 <__swsetup_r+0x4a>
 80089a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089a4:	4299      	cmp	r1, r3
 80089a6:	d002      	beq.n	80089ae <__swsetup_r+0x46>
 80089a8:	4628      	mov	r0, r5
 80089aa:	f7fe ff0d 	bl	80077c8 <_free_r>
 80089ae:	2300      	movs	r3, #0
 80089b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	2300      	movs	r3, #0
 80089bc:	6063      	str	r3, [r4, #4]
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	6023      	str	r3, [r4, #0]
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	f043 0308 	orr.w	r3, r3, #8
 80089c8:	81a3      	strh	r3, [r4, #12]
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	b94b      	cbnz	r3, 80089e2 <__swsetup_r+0x7a>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089d8:	d003      	beq.n	80089e2 <__swsetup_r+0x7a>
 80089da:	4621      	mov	r1, r4
 80089dc:	4628      	mov	r0, r5
 80089de:	f000 f883 	bl	8008ae8 <__smakebuf_r>
 80089e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e6:	f013 0201 	ands.w	r2, r3, #1
 80089ea:	d00a      	beq.n	8008a02 <__swsetup_r+0x9a>
 80089ec:	2200      	movs	r2, #0
 80089ee:	60a2      	str	r2, [r4, #8]
 80089f0:	6962      	ldr	r2, [r4, #20]
 80089f2:	4252      	negs	r2, r2
 80089f4:	61a2      	str	r2, [r4, #24]
 80089f6:	6922      	ldr	r2, [r4, #16]
 80089f8:	b942      	cbnz	r2, 8008a0c <__swsetup_r+0xa4>
 80089fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089fe:	d1c5      	bne.n	800898c <__swsetup_r+0x24>
 8008a00:	bd38      	pop	{r3, r4, r5, pc}
 8008a02:	0799      	lsls	r1, r3, #30
 8008a04:	bf58      	it	pl
 8008a06:	6962      	ldrpl	r2, [r4, #20]
 8008a08:	60a2      	str	r2, [r4, #8]
 8008a0a:	e7f4      	b.n	80089f6 <__swsetup_r+0x8e>
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	e7f7      	b.n	8008a00 <__swsetup_r+0x98>
 8008a10:	20000080 	.word	0x20000080

08008a14 <_raise_r>:
 8008a14:	291f      	cmp	r1, #31
 8008a16:	b538      	push	{r3, r4, r5, lr}
 8008a18:	4605      	mov	r5, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	d904      	bls.n	8008a28 <_raise_r+0x14>
 8008a1e:	2316      	movs	r3, #22
 8008a20:	6003      	str	r3, [r0, #0]
 8008a22:	f04f 30ff 	mov.w	r0, #4294967295
 8008a26:	bd38      	pop	{r3, r4, r5, pc}
 8008a28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008a2a:	b112      	cbz	r2, 8008a32 <_raise_r+0x1e>
 8008a2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a30:	b94b      	cbnz	r3, 8008a46 <_raise_r+0x32>
 8008a32:	4628      	mov	r0, r5
 8008a34:	f000 f830 	bl	8008a98 <_getpid_r>
 8008a38:	4622      	mov	r2, r4
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a42:	f000 b817 	b.w	8008a74 <_kill_r>
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d00a      	beq.n	8008a60 <_raise_r+0x4c>
 8008a4a:	1c59      	adds	r1, r3, #1
 8008a4c:	d103      	bne.n	8008a56 <_raise_r+0x42>
 8008a4e:	2316      	movs	r3, #22
 8008a50:	6003      	str	r3, [r0, #0]
 8008a52:	2001      	movs	r0, #1
 8008a54:	e7e7      	b.n	8008a26 <_raise_r+0x12>
 8008a56:	2100      	movs	r1, #0
 8008a58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	4798      	blx	r3
 8008a60:	2000      	movs	r0, #0
 8008a62:	e7e0      	b.n	8008a26 <_raise_r+0x12>

08008a64 <raise>:
 8008a64:	4b02      	ldr	r3, [pc, #8]	@ (8008a70 <raise+0xc>)
 8008a66:	4601      	mov	r1, r0
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	f7ff bfd3 	b.w	8008a14 <_raise_r>
 8008a6e:	bf00      	nop
 8008a70:	20000080 	.word	0x20000080

08008a74 <_kill_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4d07      	ldr	r5, [pc, #28]	@ (8008a94 <_kill_r+0x20>)
 8008a78:	2300      	movs	r3, #0
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	4608      	mov	r0, r1
 8008a7e:	4611      	mov	r1, r2
 8008a80:	602b      	str	r3, [r5, #0]
 8008a82:	f7f9 f8d4 	bl	8001c2e <_kill>
 8008a86:	1c43      	adds	r3, r0, #1
 8008a88:	d102      	bne.n	8008a90 <_kill_r+0x1c>
 8008a8a:	682b      	ldr	r3, [r5, #0]
 8008a8c:	b103      	cbz	r3, 8008a90 <_kill_r+0x1c>
 8008a8e:	6023      	str	r3, [r4, #0]
 8008a90:	bd38      	pop	{r3, r4, r5, pc}
 8008a92:	bf00      	nop
 8008a94:	200004e0 	.word	0x200004e0

08008a98 <_getpid_r>:
 8008a98:	f7f9 b8c1 	b.w	8001c1e <_getpid>

08008a9c <__swhatbuf_r>:
 8008a9c:	b570      	push	{r4, r5, r6, lr}
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aa4:	2900      	cmp	r1, #0
 8008aa6:	b096      	sub	sp, #88	@ 0x58
 8008aa8:	4615      	mov	r5, r2
 8008aaa:	461e      	mov	r6, r3
 8008aac:	da0d      	bge.n	8008aca <__swhatbuf_r+0x2e>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008ab4:	f04f 0100 	mov.w	r1, #0
 8008ab8:	bf14      	ite	ne
 8008aba:	2340      	movne	r3, #64	@ 0x40
 8008abc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	6031      	str	r1, [r6, #0]
 8008ac4:	602b      	str	r3, [r5, #0]
 8008ac6:	b016      	add	sp, #88	@ 0x58
 8008ac8:	bd70      	pop	{r4, r5, r6, pc}
 8008aca:	466a      	mov	r2, sp
 8008acc:	f000 f848 	bl	8008b60 <_fstat_r>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	dbec      	blt.n	8008aae <__swhatbuf_r+0x12>
 8008ad4:	9901      	ldr	r1, [sp, #4]
 8008ad6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008ada:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008ade:	4259      	negs	r1, r3
 8008ae0:	4159      	adcs	r1, r3
 8008ae2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008ae6:	e7eb      	b.n	8008ac0 <__swhatbuf_r+0x24>

08008ae8 <__smakebuf_r>:
 8008ae8:	898b      	ldrh	r3, [r1, #12]
 8008aea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008aec:	079d      	lsls	r5, r3, #30
 8008aee:	4606      	mov	r6, r0
 8008af0:	460c      	mov	r4, r1
 8008af2:	d507      	bpl.n	8008b04 <__smakebuf_r+0x1c>
 8008af4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008af8:	6023      	str	r3, [r4, #0]
 8008afa:	6123      	str	r3, [r4, #16]
 8008afc:	2301      	movs	r3, #1
 8008afe:	6163      	str	r3, [r4, #20]
 8008b00:	b003      	add	sp, #12
 8008b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b04:	ab01      	add	r3, sp, #4
 8008b06:	466a      	mov	r2, sp
 8008b08:	f7ff ffc8 	bl	8008a9c <__swhatbuf_r>
 8008b0c:	9f00      	ldr	r7, [sp, #0]
 8008b0e:	4605      	mov	r5, r0
 8008b10:	4639      	mov	r1, r7
 8008b12:	4630      	mov	r0, r6
 8008b14:	f7fe fecc 	bl	80078b0 <_malloc_r>
 8008b18:	b948      	cbnz	r0, 8008b2e <__smakebuf_r+0x46>
 8008b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b1e:	059a      	lsls	r2, r3, #22
 8008b20:	d4ee      	bmi.n	8008b00 <__smakebuf_r+0x18>
 8008b22:	f023 0303 	bic.w	r3, r3, #3
 8008b26:	f043 0302 	orr.w	r3, r3, #2
 8008b2a:	81a3      	strh	r3, [r4, #12]
 8008b2c:	e7e2      	b.n	8008af4 <__smakebuf_r+0xc>
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	6020      	str	r0, [r4, #0]
 8008b32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b36:	81a3      	strh	r3, [r4, #12]
 8008b38:	9b01      	ldr	r3, [sp, #4]
 8008b3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008b3e:	b15b      	cbz	r3, 8008b58 <__smakebuf_r+0x70>
 8008b40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b44:	4630      	mov	r0, r6
 8008b46:	f000 f81d 	bl	8008b84 <_isatty_r>
 8008b4a:	b128      	cbz	r0, 8008b58 <__smakebuf_r+0x70>
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	f023 0303 	bic.w	r3, r3, #3
 8008b52:	f043 0301 	orr.w	r3, r3, #1
 8008b56:	81a3      	strh	r3, [r4, #12]
 8008b58:	89a3      	ldrh	r3, [r4, #12]
 8008b5a:	431d      	orrs	r5, r3
 8008b5c:	81a5      	strh	r5, [r4, #12]
 8008b5e:	e7cf      	b.n	8008b00 <__smakebuf_r+0x18>

08008b60 <_fstat_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d07      	ldr	r5, [pc, #28]	@ (8008b80 <_fstat_r+0x20>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	602b      	str	r3, [r5, #0]
 8008b6e:	f7f9 f8be 	bl	8001cee <_fstat>
 8008b72:	1c43      	adds	r3, r0, #1
 8008b74:	d102      	bne.n	8008b7c <_fstat_r+0x1c>
 8008b76:	682b      	ldr	r3, [r5, #0]
 8008b78:	b103      	cbz	r3, 8008b7c <_fstat_r+0x1c>
 8008b7a:	6023      	str	r3, [r4, #0]
 8008b7c:	bd38      	pop	{r3, r4, r5, pc}
 8008b7e:	bf00      	nop
 8008b80:	200004e0 	.word	0x200004e0

08008b84 <_isatty_r>:
 8008b84:	b538      	push	{r3, r4, r5, lr}
 8008b86:	4d06      	ldr	r5, [pc, #24]	@ (8008ba0 <_isatty_r+0x1c>)
 8008b88:	2300      	movs	r3, #0
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	f7f9 f8bd 	bl	8001d0e <_isatty>
 8008b94:	1c43      	adds	r3, r0, #1
 8008b96:	d102      	bne.n	8008b9e <_isatty_r+0x1a>
 8008b98:	682b      	ldr	r3, [r5, #0]
 8008b9a:	b103      	cbz	r3, 8008b9e <_isatty_r+0x1a>
 8008b9c:	6023      	str	r3, [r4, #0]
 8008b9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ba0:	200004e0 	.word	0x200004e0
 8008ba4:	00000000 	.word	0x00000000

08008ba8 <cos>:
 8008ba8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008baa:	ec53 2b10 	vmov	r2, r3, d0
 8008bae:	4826      	ldr	r0, [pc, #152]	@ (8008c48 <cos+0xa0>)
 8008bb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008bb4:	4281      	cmp	r1, r0
 8008bb6:	d806      	bhi.n	8008bc6 <cos+0x1e>
 8008bb8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008c40 <cos+0x98>
 8008bbc:	b005      	add	sp, #20
 8008bbe:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bc2:	f000 b8bd 	b.w	8008d40 <__kernel_cos>
 8008bc6:	4821      	ldr	r0, [pc, #132]	@ (8008c4c <cos+0xa4>)
 8008bc8:	4281      	cmp	r1, r0
 8008bca:	d908      	bls.n	8008bde <cos+0x36>
 8008bcc:	4610      	mov	r0, r2
 8008bce:	4619      	mov	r1, r3
 8008bd0:	f7f7 fb72 	bl	80002b8 <__aeabi_dsub>
 8008bd4:	ec41 0b10 	vmov	d0, r0, r1
 8008bd8:	b005      	add	sp, #20
 8008bda:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bde:	4668      	mov	r0, sp
 8008be0:	f000 fa32 	bl	8009048 <__ieee754_rem_pio2>
 8008be4:	f000 0003 	and.w	r0, r0, #3
 8008be8:	2801      	cmp	r0, #1
 8008bea:	d00b      	beq.n	8008c04 <cos+0x5c>
 8008bec:	2802      	cmp	r0, #2
 8008bee:	d015      	beq.n	8008c1c <cos+0x74>
 8008bf0:	b9d8      	cbnz	r0, 8008c2a <cos+0x82>
 8008bf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008bf6:	ed9d 0b00 	vldr	d0, [sp]
 8008bfa:	f000 f8a1 	bl	8008d40 <__kernel_cos>
 8008bfe:	ec51 0b10 	vmov	r0, r1, d0
 8008c02:	e7e7      	b.n	8008bd4 <cos+0x2c>
 8008c04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c08:	ed9d 0b00 	vldr	d0, [sp]
 8008c0c:	f000 f960 	bl	8008ed0 <__kernel_sin>
 8008c10:	ec53 2b10 	vmov	r2, r3, d0
 8008c14:	4610      	mov	r0, r2
 8008c16:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008c1a:	e7db      	b.n	8008bd4 <cos+0x2c>
 8008c1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c20:	ed9d 0b00 	vldr	d0, [sp]
 8008c24:	f000 f88c 	bl	8008d40 <__kernel_cos>
 8008c28:	e7f2      	b.n	8008c10 <cos+0x68>
 8008c2a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c2e:	ed9d 0b00 	vldr	d0, [sp]
 8008c32:	2001      	movs	r0, #1
 8008c34:	f000 f94c 	bl	8008ed0 <__kernel_sin>
 8008c38:	e7e1      	b.n	8008bfe <cos+0x56>
 8008c3a:	bf00      	nop
 8008c3c:	f3af 8000 	nop.w
	...
 8008c48:	3fe921fb 	.word	0x3fe921fb
 8008c4c:	7fefffff 	.word	0x7fefffff

08008c50 <sin>:
 8008c50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c52:	ec53 2b10 	vmov	r2, r3, d0
 8008c56:	4826      	ldr	r0, [pc, #152]	@ (8008cf0 <sin+0xa0>)
 8008c58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008c5c:	4281      	cmp	r1, r0
 8008c5e:	d807      	bhi.n	8008c70 <sin+0x20>
 8008c60:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8008ce8 <sin+0x98>
 8008c64:	2000      	movs	r0, #0
 8008c66:	b005      	add	sp, #20
 8008c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c6c:	f000 b930 	b.w	8008ed0 <__kernel_sin>
 8008c70:	4820      	ldr	r0, [pc, #128]	@ (8008cf4 <sin+0xa4>)
 8008c72:	4281      	cmp	r1, r0
 8008c74:	d908      	bls.n	8008c88 <sin+0x38>
 8008c76:	4610      	mov	r0, r2
 8008c78:	4619      	mov	r1, r3
 8008c7a:	f7f7 fb1d 	bl	80002b8 <__aeabi_dsub>
 8008c7e:	ec41 0b10 	vmov	d0, r0, r1
 8008c82:	b005      	add	sp, #20
 8008c84:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c88:	4668      	mov	r0, sp
 8008c8a:	f000 f9dd 	bl	8009048 <__ieee754_rem_pio2>
 8008c8e:	f000 0003 	and.w	r0, r0, #3
 8008c92:	2801      	cmp	r0, #1
 8008c94:	d00c      	beq.n	8008cb0 <sin+0x60>
 8008c96:	2802      	cmp	r0, #2
 8008c98:	d011      	beq.n	8008cbe <sin+0x6e>
 8008c9a:	b9e8      	cbnz	r0, 8008cd8 <sin+0x88>
 8008c9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008ca0:	ed9d 0b00 	vldr	d0, [sp]
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f000 f913 	bl	8008ed0 <__kernel_sin>
 8008caa:	ec51 0b10 	vmov	r0, r1, d0
 8008cae:	e7e6      	b.n	8008c7e <sin+0x2e>
 8008cb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008cb4:	ed9d 0b00 	vldr	d0, [sp]
 8008cb8:	f000 f842 	bl	8008d40 <__kernel_cos>
 8008cbc:	e7f5      	b.n	8008caa <sin+0x5a>
 8008cbe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008cc2:	ed9d 0b00 	vldr	d0, [sp]
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	f000 f902 	bl	8008ed0 <__kernel_sin>
 8008ccc:	ec53 2b10 	vmov	r2, r3, d0
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008cd6:	e7d2      	b.n	8008c7e <sin+0x2e>
 8008cd8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008cdc:	ed9d 0b00 	vldr	d0, [sp]
 8008ce0:	f000 f82e 	bl	8008d40 <__kernel_cos>
 8008ce4:	e7f2      	b.n	8008ccc <sin+0x7c>
 8008ce6:	bf00      	nop
	...
 8008cf0:	3fe921fb 	.word	0x3fe921fb
 8008cf4:	7fefffff 	.word	0x7fefffff

08008cf8 <atan2f>:
 8008cf8:	f000 bbaa 	b.w	8009450 <__ieee754_atan2f>

08008cfc <sqrtf>:
 8008cfc:	b508      	push	{r3, lr}
 8008cfe:	ed2d 8b02 	vpush	{d8}
 8008d02:	eeb0 8a40 	vmov.f32	s16, s0
 8008d06:	f000 f817 	bl	8008d38 <__ieee754_sqrtf>
 8008d0a:	eeb4 8a48 	vcmp.f32	s16, s16
 8008d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d12:	d60c      	bvs.n	8008d2e <sqrtf+0x32>
 8008d14:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008d34 <sqrtf+0x38>
 8008d18:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d20:	d505      	bpl.n	8008d2e <sqrtf+0x32>
 8008d22:	f7fd fec7 	bl	8006ab4 <__errno>
 8008d26:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008d2a:	2321      	movs	r3, #33	@ 0x21
 8008d2c:	6003      	str	r3, [r0, #0]
 8008d2e:	ecbd 8b02 	vpop	{d8}
 8008d32:	bd08      	pop	{r3, pc}
 8008d34:	00000000 	.word	0x00000000

08008d38 <__ieee754_sqrtf>:
 8008d38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008d3c:	4770      	bx	lr
	...

08008d40 <__kernel_cos>:
 8008d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	ec57 6b10 	vmov	r6, r7, d0
 8008d48:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008d4c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8008d50:	ed8d 1b00 	vstr	d1, [sp]
 8008d54:	d206      	bcs.n	8008d64 <__kernel_cos+0x24>
 8008d56:	4630      	mov	r0, r6
 8008d58:	4639      	mov	r1, r7
 8008d5a:	f7f7 ff15 	bl	8000b88 <__aeabi_d2iz>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f000 8088 	beq.w	8008e74 <__kernel_cos+0x134>
 8008d64:	4632      	mov	r2, r6
 8008d66:	463b      	mov	r3, r7
 8008d68:	4630      	mov	r0, r6
 8008d6a:	4639      	mov	r1, r7
 8008d6c:	f7f7 fc5c 	bl	8000628 <__aeabi_dmul>
 8008d70:	4b51      	ldr	r3, [pc, #324]	@ (8008eb8 <__kernel_cos+0x178>)
 8008d72:	2200      	movs	r2, #0
 8008d74:	4604      	mov	r4, r0
 8008d76:	460d      	mov	r5, r1
 8008d78:	f7f7 fc56 	bl	8000628 <__aeabi_dmul>
 8008d7c:	a340      	add	r3, pc, #256	@ (adr r3, 8008e80 <__kernel_cos+0x140>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	4682      	mov	sl, r0
 8008d84:	468b      	mov	fp, r1
 8008d86:	4620      	mov	r0, r4
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fc4d 	bl	8000628 <__aeabi_dmul>
 8008d8e:	a33e      	add	r3, pc, #248	@ (adr r3, 8008e88 <__kernel_cos+0x148>)
 8008d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d94:	f7f7 fa92 	bl	80002bc <__adddf3>
 8008d98:	4622      	mov	r2, r4
 8008d9a:	462b      	mov	r3, r5
 8008d9c:	f7f7 fc44 	bl	8000628 <__aeabi_dmul>
 8008da0:	a33b      	add	r3, pc, #236	@ (adr r3, 8008e90 <__kernel_cos+0x150>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f7f7 fa87 	bl	80002b8 <__aeabi_dsub>
 8008daa:	4622      	mov	r2, r4
 8008dac:	462b      	mov	r3, r5
 8008dae:	f7f7 fc3b 	bl	8000628 <__aeabi_dmul>
 8008db2:	a339      	add	r3, pc, #228	@ (adr r3, 8008e98 <__kernel_cos+0x158>)
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f7f7 fa80 	bl	80002bc <__adddf3>
 8008dbc:	4622      	mov	r2, r4
 8008dbe:	462b      	mov	r3, r5
 8008dc0:	f7f7 fc32 	bl	8000628 <__aeabi_dmul>
 8008dc4:	a336      	add	r3, pc, #216	@ (adr r3, 8008ea0 <__kernel_cos+0x160>)
 8008dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dca:	f7f7 fa75 	bl	80002b8 <__aeabi_dsub>
 8008dce:	4622      	mov	r2, r4
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	f7f7 fc29 	bl	8000628 <__aeabi_dmul>
 8008dd6:	a334      	add	r3, pc, #208	@ (adr r3, 8008ea8 <__kernel_cos+0x168>)
 8008dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ddc:	f7f7 fa6e 	bl	80002bc <__adddf3>
 8008de0:	4622      	mov	r2, r4
 8008de2:	462b      	mov	r3, r5
 8008de4:	f7f7 fc20 	bl	8000628 <__aeabi_dmul>
 8008de8:	4622      	mov	r2, r4
 8008dea:	462b      	mov	r3, r5
 8008dec:	f7f7 fc1c 	bl	8000628 <__aeabi_dmul>
 8008df0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008df4:	4604      	mov	r4, r0
 8008df6:	460d      	mov	r5, r1
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 fc14 	bl	8000628 <__aeabi_dmul>
 8008e00:	460b      	mov	r3, r1
 8008e02:	4602      	mov	r2, r0
 8008e04:	4629      	mov	r1, r5
 8008e06:	4620      	mov	r0, r4
 8008e08:	f7f7 fa56 	bl	80002b8 <__aeabi_dsub>
 8008e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8008ebc <__kernel_cos+0x17c>)
 8008e0e:	4598      	cmp	r8, r3
 8008e10:	4606      	mov	r6, r0
 8008e12:	460f      	mov	r7, r1
 8008e14:	d810      	bhi.n	8008e38 <__kernel_cos+0xf8>
 8008e16:	4602      	mov	r2, r0
 8008e18:	460b      	mov	r3, r1
 8008e1a:	4650      	mov	r0, sl
 8008e1c:	4659      	mov	r1, fp
 8008e1e:	f7f7 fa4b 	bl	80002b8 <__aeabi_dsub>
 8008e22:	460b      	mov	r3, r1
 8008e24:	4926      	ldr	r1, [pc, #152]	@ (8008ec0 <__kernel_cos+0x180>)
 8008e26:	4602      	mov	r2, r0
 8008e28:	2000      	movs	r0, #0
 8008e2a:	f7f7 fa45 	bl	80002b8 <__aeabi_dsub>
 8008e2e:	ec41 0b10 	vmov	d0, r0, r1
 8008e32:	b003      	add	sp, #12
 8008e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e38:	4b22      	ldr	r3, [pc, #136]	@ (8008ec4 <__kernel_cos+0x184>)
 8008e3a:	4921      	ldr	r1, [pc, #132]	@ (8008ec0 <__kernel_cos+0x180>)
 8008e3c:	4598      	cmp	r8, r3
 8008e3e:	bf8c      	ite	hi
 8008e40:	4d21      	ldrhi	r5, [pc, #132]	@ (8008ec8 <__kernel_cos+0x188>)
 8008e42:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8008e46:	2400      	movs	r4, #0
 8008e48:	4622      	mov	r2, r4
 8008e4a:	462b      	mov	r3, r5
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	f7f7 fa33 	bl	80002b8 <__aeabi_dsub>
 8008e52:	4622      	mov	r2, r4
 8008e54:	4680      	mov	r8, r0
 8008e56:	4689      	mov	r9, r1
 8008e58:	462b      	mov	r3, r5
 8008e5a:	4650      	mov	r0, sl
 8008e5c:	4659      	mov	r1, fp
 8008e5e:	f7f7 fa2b 	bl	80002b8 <__aeabi_dsub>
 8008e62:	4632      	mov	r2, r6
 8008e64:	463b      	mov	r3, r7
 8008e66:	f7f7 fa27 	bl	80002b8 <__aeabi_dsub>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4640      	mov	r0, r8
 8008e70:	4649      	mov	r1, r9
 8008e72:	e7da      	b.n	8008e2a <__kernel_cos+0xea>
 8008e74:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8008eb0 <__kernel_cos+0x170>
 8008e78:	e7db      	b.n	8008e32 <__kernel_cos+0xf2>
 8008e7a:	bf00      	nop
 8008e7c:	f3af 8000 	nop.w
 8008e80:	be8838d4 	.word	0xbe8838d4
 8008e84:	bda8fae9 	.word	0xbda8fae9
 8008e88:	bdb4b1c4 	.word	0xbdb4b1c4
 8008e8c:	3e21ee9e 	.word	0x3e21ee9e
 8008e90:	809c52ad 	.word	0x809c52ad
 8008e94:	3e927e4f 	.word	0x3e927e4f
 8008e98:	19cb1590 	.word	0x19cb1590
 8008e9c:	3efa01a0 	.word	0x3efa01a0
 8008ea0:	16c15177 	.word	0x16c15177
 8008ea4:	3f56c16c 	.word	0x3f56c16c
 8008ea8:	5555554c 	.word	0x5555554c
 8008eac:	3fa55555 	.word	0x3fa55555
 8008eb0:	00000000 	.word	0x00000000
 8008eb4:	3ff00000 	.word	0x3ff00000
 8008eb8:	3fe00000 	.word	0x3fe00000
 8008ebc:	3fd33332 	.word	0x3fd33332
 8008ec0:	3ff00000 	.word	0x3ff00000
 8008ec4:	3fe90000 	.word	0x3fe90000
 8008ec8:	3fd20000 	.word	0x3fd20000
 8008ecc:	00000000 	.word	0x00000000

08008ed0 <__kernel_sin>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	ec55 4b10 	vmov	r4, r5, d0
 8008ed8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008edc:	b085      	sub	sp, #20
 8008ede:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008ee2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008ee6:	4680      	mov	r8, r0
 8008ee8:	d205      	bcs.n	8008ef6 <__kernel_sin+0x26>
 8008eea:	4620      	mov	r0, r4
 8008eec:	4629      	mov	r1, r5
 8008eee:	f7f7 fe4b 	bl	8000b88 <__aeabi_d2iz>
 8008ef2:	2800      	cmp	r0, #0
 8008ef4:	d052      	beq.n	8008f9c <__kernel_sin+0xcc>
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	462b      	mov	r3, r5
 8008efa:	4620      	mov	r0, r4
 8008efc:	4629      	mov	r1, r5
 8008efe:	f7f7 fb93 	bl	8000628 <__aeabi_dmul>
 8008f02:	4682      	mov	sl, r0
 8008f04:	468b      	mov	fp, r1
 8008f06:	4602      	mov	r2, r0
 8008f08:	460b      	mov	r3, r1
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f7f7 fb8b 	bl	8000628 <__aeabi_dmul>
 8008f12:	a342      	add	r3, pc, #264	@ (adr r3, 800901c <__kernel_sin+0x14c>)
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	e9cd 0100 	strd	r0, r1, [sp]
 8008f1c:	4650      	mov	r0, sl
 8008f1e:	4659      	mov	r1, fp
 8008f20:	f7f7 fb82 	bl	8000628 <__aeabi_dmul>
 8008f24:	a33f      	add	r3, pc, #252	@ (adr r3, 8009024 <__kernel_sin+0x154>)
 8008f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2a:	f7f7 f9c5 	bl	80002b8 <__aeabi_dsub>
 8008f2e:	4652      	mov	r2, sl
 8008f30:	465b      	mov	r3, fp
 8008f32:	f7f7 fb79 	bl	8000628 <__aeabi_dmul>
 8008f36:	a33d      	add	r3, pc, #244	@ (adr r3, 800902c <__kernel_sin+0x15c>)
 8008f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3c:	f7f7 f9be 	bl	80002bc <__adddf3>
 8008f40:	4652      	mov	r2, sl
 8008f42:	465b      	mov	r3, fp
 8008f44:	f7f7 fb70 	bl	8000628 <__aeabi_dmul>
 8008f48:	a33a      	add	r3, pc, #232	@ (adr r3, 8009034 <__kernel_sin+0x164>)
 8008f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4e:	f7f7 f9b3 	bl	80002b8 <__aeabi_dsub>
 8008f52:	4652      	mov	r2, sl
 8008f54:	465b      	mov	r3, fp
 8008f56:	f7f7 fb67 	bl	8000628 <__aeabi_dmul>
 8008f5a:	a338      	add	r3, pc, #224	@ (adr r3, 800903c <__kernel_sin+0x16c>)
 8008f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f60:	f7f7 f9ac 	bl	80002bc <__adddf3>
 8008f64:	4606      	mov	r6, r0
 8008f66:	460f      	mov	r7, r1
 8008f68:	f1b8 0f00 	cmp.w	r8, #0
 8008f6c:	d11b      	bne.n	8008fa6 <__kernel_sin+0xd6>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	460b      	mov	r3, r1
 8008f72:	4650      	mov	r0, sl
 8008f74:	4659      	mov	r1, fp
 8008f76:	f7f7 fb57 	bl	8000628 <__aeabi_dmul>
 8008f7a:	a325      	add	r3, pc, #148	@ (adr r3, 8009010 <__kernel_sin+0x140>)
 8008f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f80:	f7f7 f99a 	bl	80002b8 <__aeabi_dsub>
 8008f84:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f88:	f7f7 fb4e 	bl	8000628 <__aeabi_dmul>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	460b      	mov	r3, r1
 8008f90:	4620      	mov	r0, r4
 8008f92:	4629      	mov	r1, r5
 8008f94:	f7f7 f992 	bl	80002bc <__adddf3>
 8008f98:	4604      	mov	r4, r0
 8008f9a:	460d      	mov	r5, r1
 8008f9c:	ec45 4b10 	vmov	d0, r4, r5
 8008fa0:	b005      	add	sp, #20
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008faa:	4b1b      	ldr	r3, [pc, #108]	@ (8009018 <__kernel_sin+0x148>)
 8008fac:	2200      	movs	r2, #0
 8008fae:	f7f7 fb3b 	bl	8000628 <__aeabi_dmul>
 8008fb2:	4632      	mov	r2, r6
 8008fb4:	4680      	mov	r8, r0
 8008fb6:	4689      	mov	r9, r1
 8008fb8:	463b      	mov	r3, r7
 8008fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fbe:	f7f7 fb33 	bl	8000628 <__aeabi_dmul>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4640      	mov	r0, r8
 8008fc8:	4649      	mov	r1, r9
 8008fca:	f7f7 f975 	bl	80002b8 <__aeabi_dsub>
 8008fce:	4652      	mov	r2, sl
 8008fd0:	465b      	mov	r3, fp
 8008fd2:	f7f7 fb29 	bl	8000628 <__aeabi_dmul>
 8008fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fda:	f7f7 f96d 	bl	80002b8 <__aeabi_dsub>
 8008fde:	a30c      	add	r3, pc, #48	@ (adr r3, 8009010 <__kernel_sin+0x140>)
 8008fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe4:	4606      	mov	r6, r0
 8008fe6:	460f      	mov	r7, r1
 8008fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fec:	f7f7 fb1c 	bl	8000628 <__aeabi_dmul>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	4639      	mov	r1, r7
 8008ff8:	f7f7 f960 	bl	80002bc <__adddf3>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	4620      	mov	r0, r4
 8009002:	4629      	mov	r1, r5
 8009004:	f7f7 f958 	bl	80002b8 <__aeabi_dsub>
 8009008:	e7c6      	b.n	8008f98 <__kernel_sin+0xc8>
 800900a:	bf00      	nop
 800900c:	f3af 8000 	nop.w
 8009010:	55555549 	.word	0x55555549
 8009014:	3fc55555 	.word	0x3fc55555
 8009018:	3fe00000 	.word	0x3fe00000
 800901c:	5acfd57c 	.word	0x5acfd57c
 8009020:	3de5d93a 	.word	0x3de5d93a
 8009024:	8a2b9ceb 	.word	0x8a2b9ceb
 8009028:	3e5ae5e6 	.word	0x3e5ae5e6
 800902c:	57b1fe7d 	.word	0x57b1fe7d
 8009030:	3ec71de3 	.word	0x3ec71de3
 8009034:	19c161d5 	.word	0x19c161d5
 8009038:	3f2a01a0 	.word	0x3f2a01a0
 800903c:	1110f8a6 	.word	0x1110f8a6
 8009040:	3f811111 	.word	0x3f811111
 8009044:	00000000 	.word	0x00000000

08009048 <__ieee754_rem_pio2>:
 8009048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800904c:	ec57 6b10 	vmov	r6, r7, d0
 8009050:	4bc5      	ldr	r3, [pc, #788]	@ (8009368 <__ieee754_rem_pio2+0x320>)
 8009052:	b08d      	sub	sp, #52	@ 0x34
 8009054:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8009058:	4598      	cmp	r8, r3
 800905a:	4604      	mov	r4, r0
 800905c:	9704      	str	r7, [sp, #16]
 800905e:	d807      	bhi.n	8009070 <__ieee754_rem_pio2+0x28>
 8009060:	2200      	movs	r2, #0
 8009062:	2300      	movs	r3, #0
 8009064:	ed80 0b00 	vstr	d0, [r0]
 8009068:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800906c:	2500      	movs	r5, #0
 800906e:	e028      	b.n	80090c2 <__ieee754_rem_pio2+0x7a>
 8009070:	4bbe      	ldr	r3, [pc, #760]	@ (800936c <__ieee754_rem_pio2+0x324>)
 8009072:	4598      	cmp	r8, r3
 8009074:	d878      	bhi.n	8009168 <__ieee754_rem_pio2+0x120>
 8009076:	9b04      	ldr	r3, [sp, #16]
 8009078:	4dbd      	ldr	r5, [pc, #756]	@ (8009370 <__ieee754_rem_pio2+0x328>)
 800907a:	2b00      	cmp	r3, #0
 800907c:	4630      	mov	r0, r6
 800907e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8009330 <__ieee754_rem_pio2+0x2e8>)
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	4639      	mov	r1, r7
 8009086:	dd38      	ble.n	80090fa <__ieee754_rem_pio2+0xb2>
 8009088:	f7f7 f916 	bl	80002b8 <__aeabi_dsub>
 800908c:	45a8      	cmp	r8, r5
 800908e:	4606      	mov	r6, r0
 8009090:	460f      	mov	r7, r1
 8009092:	d01a      	beq.n	80090ca <__ieee754_rem_pio2+0x82>
 8009094:	a3a8      	add	r3, pc, #672	@ (adr r3, 8009338 <__ieee754_rem_pio2+0x2f0>)
 8009096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909a:	f7f7 f90d 	bl	80002b8 <__aeabi_dsub>
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	4680      	mov	r8, r0
 80090a4:	4689      	mov	r9, r1
 80090a6:	4630      	mov	r0, r6
 80090a8:	4639      	mov	r1, r7
 80090aa:	f7f7 f905 	bl	80002b8 <__aeabi_dsub>
 80090ae:	a3a2      	add	r3, pc, #648	@ (adr r3, 8009338 <__ieee754_rem_pio2+0x2f0>)
 80090b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b4:	f7f7 f900 	bl	80002b8 <__aeabi_dsub>
 80090b8:	e9c4 8900 	strd	r8, r9, [r4]
 80090bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80090c0:	2501      	movs	r5, #1
 80090c2:	4628      	mov	r0, r5
 80090c4:	b00d      	add	sp, #52	@ 0x34
 80090c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ca:	a39d      	add	r3, pc, #628	@ (adr r3, 8009340 <__ieee754_rem_pio2+0x2f8>)
 80090cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d0:	f7f7 f8f2 	bl	80002b8 <__aeabi_dsub>
 80090d4:	a39c      	add	r3, pc, #624	@ (adr r3, 8009348 <__ieee754_rem_pio2+0x300>)
 80090d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090da:	4606      	mov	r6, r0
 80090dc:	460f      	mov	r7, r1
 80090de:	f7f7 f8eb 	bl	80002b8 <__aeabi_dsub>
 80090e2:	4602      	mov	r2, r0
 80090e4:	460b      	mov	r3, r1
 80090e6:	4680      	mov	r8, r0
 80090e8:	4689      	mov	r9, r1
 80090ea:	4630      	mov	r0, r6
 80090ec:	4639      	mov	r1, r7
 80090ee:	f7f7 f8e3 	bl	80002b8 <__aeabi_dsub>
 80090f2:	a395      	add	r3, pc, #596	@ (adr r3, 8009348 <__ieee754_rem_pio2+0x300>)
 80090f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f8:	e7dc      	b.n	80090b4 <__ieee754_rem_pio2+0x6c>
 80090fa:	f7f7 f8df 	bl	80002bc <__adddf3>
 80090fe:	45a8      	cmp	r8, r5
 8009100:	4606      	mov	r6, r0
 8009102:	460f      	mov	r7, r1
 8009104:	d018      	beq.n	8009138 <__ieee754_rem_pio2+0xf0>
 8009106:	a38c      	add	r3, pc, #560	@ (adr r3, 8009338 <__ieee754_rem_pio2+0x2f0>)
 8009108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800910c:	f7f7 f8d6 	bl	80002bc <__adddf3>
 8009110:	4602      	mov	r2, r0
 8009112:	460b      	mov	r3, r1
 8009114:	4680      	mov	r8, r0
 8009116:	4689      	mov	r9, r1
 8009118:	4630      	mov	r0, r6
 800911a:	4639      	mov	r1, r7
 800911c:	f7f7 f8cc 	bl	80002b8 <__aeabi_dsub>
 8009120:	a385      	add	r3, pc, #532	@ (adr r3, 8009338 <__ieee754_rem_pio2+0x2f0>)
 8009122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009126:	f7f7 f8c9 	bl	80002bc <__adddf3>
 800912a:	f04f 35ff 	mov.w	r5, #4294967295
 800912e:	e9c4 8900 	strd	r8, r9, [r4]
 8009132:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009136:	e7c4      	b.n	80090c2 <__ieee754_rem_pio2+0x7a>
 8009138:	a381      	add	r3, pc, #516	@ (adr r3, 8009340 <__ieee754_rem_pio2+0x2f8>)
 800913a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913e:	f7f7 f8bd 	bl	80002bc <__adddf3>
 8009142:	a381      	add	r3, pc, #516	@ (adr r3, 8009348 <__ieee754_rem_pio2+0x300>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	4606      	mov	r6, r0
 800914a:	460f      	mov	r7, r1
 800914c:	f7f7 f8b6 	bl	80002bc <__adddf3>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4680      	mov	r8, r0
 8009156:	4689      	mov	r9, r1
 8009158:	4630      	mov	r0, r6
 800915a:	4639      	mov	r1, r7
 800915c:	f7f7 f8ac 	bl	80002b8 <__aeabi_dsub>
 8009160:	a379      	add	r3, pc, #484	@ (adr r3, 8009348 <__ieee754_rem_pio2+0x300>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	e7de      	b.n	8009126 <__ieee754_rem_pio2+0xde>
 8009168:	4b82      	ldr	r3, [pc, #520]	@ (8009374 <__ieee754_rem_pio2+0x32c>)
 800916a:	4598      	cmp	r8, r3
 800916c:	f200 80d1 	bhi.w	8009312 <__ieee754_rem_pio2+0x2ca>
 8009170:	f000 f966 	bl	8009440 <fabs>
 8009174:	ec57 6b10 	vmov	r6, r7, d0
 8009178:	a375      	add	r3, pc, #468	@ (adr r3, 8009350 <__ieee754_rem_pio2+0x308>)
 800917a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917e:	4630      	mov	r0, r6
 8009180:	4639      	mov	r1, r7
 8009182:	f7f7 fa51 	bl	8000628 <__aeabi_dmul>
 8009186:	4b7c      	ldr	r3, [pc, #496]	@ (8009378 <__ieee754_rem_pio2+0x330>)
 8009188:	2200      	movs	r2, #0
 800918a:	f7f7 f897 	bl	80002bc <__adddf3>
 800918e:	f7f7 fcfb 	bl	8000b88 <__aeabi_d2iz>
 8009192:	4605      	mov	r5, r0
 8009194:	f7f7 f9de 	bl	8000554 <__aeabi_i2d>
 8009198:	4602      	mov	r2, r0
 800919a:	460b      	mov	r3, r1
 800919c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091a0:	a363      	add	r3, pc, #396	@ (adr r3, 8009330 <__ieee754_rem_pio2+0x2e8>)
 80091a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a6:	f7f7 fa3f 	bl	8000628 <__aeabi_dmul>
 80091aa:	4602      	mov	r2, r0
 80091ac:	460b      	mov	r3, r1
 80091ae:	4630      	mov	r0, r6
 80091b0:	4639      	mov	r1, r7
 80091b2:	f7f7 f881 	bl	80002b8 <__aeabi_dsub>
 80091b6:	a360      	add	r3, pc, #384	@ (adr r3, 8009338 <__ieee754_rem_pio2+0x2f0>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	4682      	mov	sl, r0
 80091be:	468b      	mov	fp, r1
 80091c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091c4:	f7f7 fa30 	bl	8000628 <__aeabi_dmul>
 80091c8:	2d1f      	cmp	r5, #31
 80091ca:	4606      	mov	r6, r0
 80091cc:	460f      	mov	r7, r1
 80091ce:	dc0c      	bgt.n	80091ea <__ieee754_rem_pio2+0x1a2>
 80091d0:	4b6a      	ldr	r3, [pc, #424]	@ (800937c <__ieee754_rem_pio2+0x334>)
 80091d2:	1e6a      	subs	r2, r5, #1
 80091d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d8:	4543      	cmp	r3, r8
 80091da:	d006      	beq.n	80091ea <__ieee754_rem_pio2+0x1a2>
 80091dc:	4632      	mov	r2, r6
 80091de:	463b      	mov	r3, r7
 80091e0:	4650      	mov	r0, sl
 80091e2:	4659      	mov	r1, fp
 80091e4:	f7f7 f868 	bl	80002b8 <__aeabi_dsub>
 80091e8:	e00e      	b.n	8009208 <__ieee754_rem_pio2+0x1c0>
 80091ea:	463b      	mov	r3, r7
 80091ec:	4632      	mov	r2, r6
 80091ee:	4650      	mov	r0, sl
 80091f0:	4659      	mov	r1, fp
 80091f2:	f7f7 f861 	bl	80002b8 <__aeabi_dsub>
 80091f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80091fa:	9305      	str	r3, [sp, #20]
 80091fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009200:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8009204:	2b10      	cmp	r3, #16
 8009206:	dc02      	bgt.n	800920e <__ieee754_rem_pio2+0x1c6>
 8009208:	e9c4 0100 	strd	r0, r1, [r4]
 800920c:	e039      	b.n	8009282 <__ieee754_rem_pio2+0x23a>
 800920e:	a34c      	add	r3, pc, #304	@ (adr r3, 8009340 <__ieee754_rem_pio2+0x2f8>)
 8009210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009214:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009218:	f7f7 fa06 	bl	8000628 <__aeabi_dmul>
 800921c:	4606      	mov	r6, r0
 800921e:	460f      	mov	r7, r1
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	4650      	mov	r0, sl
 8009226:	4659      	mov	r1, fp
 8009228:	f7f7 f846 	bl	80002b8 <__aeabi_dsub>
 800922c:	4602      	mov	r2, r0
 800922e:	460b      	mov	r3, r1
 8009230:	4680      	mov	r8, r0
 8009232:	4689      	mov	r9, r1
 8009234:	4650      	mov	r0, sl
 8009236:	4659      	mov	r1, fp
 8009238:	f7f7 f83e 	bl	80002b8 <__aeabi_dsub>
 800923c:	4632      	mov	r2, r6
 800923e:	463b      	mov	r3, r7
 8009240:	f7f7 f83a 	bl	80002b8 <__aeabi_dsub>
 8009244:	a340      	add	r3, pc, #256	@ (adr r3, 8009348 <__ieee754_rem_pio2+0x300>)
 8009246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924a:	4606      	mov	r6, r0
 800924c:	460f      	mov	r7, r1
 800924e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009252:	f7f7 f9e9 	bl	8000628 <__aeabi_dmul>
 8009256:	4632      	mov	r2, r6
 8009258:	463b      	mov	r3, r7
 800925a:	f7f7 f82d 	bl	80002b8 <__aeabi_dsub>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4606      	mov	r6, r0
 8009264:	460f      	mov	r7, r1
 8009266:	4640      	mov	r0, r8
 8009268:	4649      	mov	r1, r9
 800926a:	f7f7 f825 	bl	80002b8 <__aeabi_dsub>
 800926e:	9a05      	ldr	r2, [sp, #20]
 8009270:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b31      	cmp	r3, #49	@ 0x31
 8009278:	dc20      	bgt.n	80092bc <__ieee754_rem_pio2+0x274>
 800927a:	e9c4 0100 	strd	r0, r1, [r4]
 800927e:	46c2      	mov	sl, r8
 8009280:	46cb      	mov	fp, r9
 8009282:	e9d4 8900 	ldrd	r8, r9, [r4]
 8009286:	4650      	mov	r0, sl
 8009288:	4642      	mov	r2, r8
 800928a:	464b      	mov	r3, r9
 800928c:	4659      	mov	r1, fp
 800928e:	f7f7 f813 	bl	80002b8 <__aeabi_dsub>
 8009292:	463b      	mov	r3, r7
 8009294:	4632      	mov	r2, r6
 8009296:	f7f7 f80f 	bl	80002b8 <__aeabi_dsub>
 800929a:	9b04      	ldr	r3, [sp, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80092a2:	f6bf af0e 	bge.w	80090c2 <__ieee754_rem_pio2+0x7a>
 80092a6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80092aa:	6063      	str	r3, [r4, #4]
 80092ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80092b0:	f8c4 8000 	str.w	r8, [r4]
 80092b4:	60a0      	str	r0, [r4, #8]
 80092b6:	60e3      	str	r3, [r4, #12]
 80092b8:	426d      	negs	r5, r5
 80092ba:	e702      	b.n	80090c2 <__ieee754_rem_pio2+0x7a>
 80092bc:	a326      	add	r3, pc, #152	@ (adr r3, 8009358 <__ieee754_rem_pio2+0x310>)
 80092be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092c6:	f7f7 f9af 	bl	8000628 <__aeabi_dmul>
 80092ca:	4606      	mov	r6, r0
 80092cc:	460f      	mov	r7, r1
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	4640      	mov	r0, r8
 80092d4:	4649      	mov	r1, r9
 80092d6:	f7f6 ffef 	bl	80002b8 <__aeabi_dsub>
 80092da:	4602      	mov	r2, r0
 80092dc:	460b      	mov	r3, r1
 80092de:	4682      	mov	sl, r0
 80092e0:	468b      	mov	fp, r1
 80092e2:	4640      	mov	r0, r8
 80092e4:	4649      	mov	r1, r9
 80092e6:	f7f6 ffe7 	bl	80002b8 <__aeabi_dsub>
 80092ea:	4632      	mov	r2, r6
 80092ec:	463b      	mov	r3, r7
 80092ee:	f7f6 ffe3 	bl	80002b8 <__aeabi_dsub>
 80092f2:	a31b      	add	r3, pc, #108	@ (adr r3, 8009360 <__ieee754_rem_pio2+0x318>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009300:	f7f7 f992 	bl	8000628 <__aeabi_dmul>
 8009304:	4632      	mov	r2, r6
 8009306:	463b      	mov	r3, r7
 8009308:	f7f6 ffd6 	bl	80002b8 <__aeabi_dsub>
 800930c:	4606      	mov	r6, r0
 800930e:	460f      	mov	r7, r1
 8009310:	e764      	b.n	80091dc <__ieee754_rem_pio2+0x194>
 8009312:	4b1b      	ldr	r3, [pc, #108]	@ (8009380 <__ieee754_rem_pio2+0x338>)
 8009314:	4598      	cmp	r8, r3
 8009316:	d935      	bls.n	8009384 <__ieee754_rem_pio2+0x33c>
 8009318:	4632      	mov	r2, r6
 800931a:	463b      	mov	r3, r7
 800931c:	4630      	mov	r0, r6
 800931e:	4639      	mov	r1, r7
 8009320:	f7f6 ffca 	bl	80002b8 <__aeabi_dsub>
 8009324:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009328:	e9c4 0100 	strd	r0, r1, [r4]
 800932c:	e69e      	b.n	800906c <__ieee754_rem_pio2+0x24>
 800932e:	bf00      	nop
 8009330:	54400000 	.word	0x54400000
 8009334:	3ff921fb 	.word	0x3ff921fb
 8009338:	1a626331 	.word	0x1a626331
 800933c:	3dd0b461 	.word	0x3dd0b461
 8009340:	1a600000 	.word	0x1a600000
 8009344:	3dd0b461 	.word	0x3dd0b461
 8009348:	2e037073 	.word	0x2e037073
 800934c:	3ba3198a 	.word	0x3ba3198a
 8009350:	6dc9c883 	.word	0x6dc9c883
 8009354:	3fe45f30 	.word	0x3fe45f30
 8009358:	2e000000 	.word	0x2e000000
 800935c:	3ba3198a 	.word	0x3ba3198a
 8009360:	252049c1 	.word	0x252049c1
 8009364:	397b839a 	.word	0x397b839a
 8009368:	3fe921fb 	.word	0x3fe921fb
 800936c:	4002d97b 	.word	0x4002d97b
 8009370:	3ff921fb 	.word	0x3ff921fb
 8009374:	413921fb 	.word	0x413921fb
 8009378:	3fe00000 	.word	0x3fe00000
 800937c:	0800a410 	.word	0x0800a410
 8009380:	7fefffff 	.word	0x7fefffff
 8009384:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009388:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800938c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009390:	4630      	mov	r0, r6
 8009392:	460f      	mov	r7, r1
 8009394:	f7f7 fbf8 	bl	8000b88 <__aeabi_d2iz>
 8009398:	f7f7 f8dc 	bl	8000554 <__aeabi_i2d>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4630      	mov	r0, r6
 80093a2:	4639      	mov	r1, r7
 80093a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80093a8:	f7f6 ff86 	bl	80002b8 <__aeabi_dsub>
 80093ac:	4b22      	ldr	r3, [pc, #136]	@ (8009438 <__ieee754_rem_pio2+0x3f0>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	f7f7 f93a 	bl	8000628 <__aeabi_dmul>
 80093b4:	460f      	mov	r7, r1
 80093b6:	4606      	mov	r6, r0
 80093b8:	f7f7 fbe6 	bl	8000b88 <__aeabi_d2iz>
 80093bc:	f7f7 f8ca 	bl	8000554 <__aeabi_i2d>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4630      	mov	r0, r6
 80093c6:	4639      	mov	r1, r7
 80093c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80093cc:	f7f6 ff74 	bl	80002b8 <__aeabi_dsub>
 80093d0:	4b19      	ldr	r3, [pc, #100]	@ (8009438 <__ieee754_rem_pio2+0x3f0>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	f7f7 f928 	bl	8000628 <__aeabi_dmul>
 80093d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80093dc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80093e0:	f04f 0803 	mov.w	r8, #3
 80093e4:	2600      	movs	r6, #0
 80093e6:	2700      	movs	r7, #0
 80093e8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80093ec:	4632      	mov	r2, r6
 80093ee:	463b      	mov	r3, r7
 80093f0:	46c2      	mov	sl, r8
 80093f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80093f6:	f7f7 fb7f 	bl	8000af8 <__aeabi_dcmpeq>
 80093fa:	2800      	cmp	r0, #0
 80093fc:	d1f4      	bne.n	80093e8 <__ieee754_rem_pio2+0x3a0>
 80093fe:	4b0f      	ldr	r3, [pc, #60]	@ (800943c <__ieee754_rem_pio2+0x3f4>)
 8009400:	9301      	str	r3, [sp, #4]
 8009402:	2302      	movs	r3, #2
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	462a      	mov	r2, r5
 8009408:	4653      	mov	r3, sl
 800940a:	4621      	mov	r1, r4
 800940c:	a806      	add	r0, sp, #24
 800940e:	f000 f99b 	bl	8009748 <__kernel_rem_pio2>
 8009412:	9b04      	ldr	r3, [sp, #16]
 8009414:	2b00      	cmp	r3, #0
 8009416:	4605      	mov	r5, r0
 8009418:	f6bf ae53 	bge.w	80090c2 <__ieee754_rem_pio2+0x7a>
 800941c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009420:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009424:	e9c4 2300 	strd	r2, r3, [r4]
 8009428:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800942c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009430:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8009434:	e740      	b.n	80092b8 <__ieee754_rem_pio2+0x270>
 8009436:	bf00      	nop
 8009438:	41700000 	.word	0x41700000
 800943c:	0800a490 	.word	0x0800a490

08009440 <fabs>:
 8009440:	ec51 0b10 	vmov	r0, r1, d0
 8009444:	4602      	mov	r2, r0
 8009446:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800944a:	ec43 2b10 	vmov	d0, r2, r3
 800944e:	4770      	bx	lr

08009450 <__ieee754_atan2f>:
 8009450:	ee10 2a90 	vmov	r2, s1
 8009454:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8009458:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800945c:	b510      	push	{r4, lr}
 800945e:	eef0 7a40 	vmov.f32	s15, s0
 8009462:	d806      	bhi.n	8009472 <__ieee754_atan2f+0x22>
 8009464:	ee10 0a10 	vmov	r0, s0
 8009468:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800946c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8009470:	d904      	bls.n	800947c <__ieee754_atan2f+0x2c>
 8009472:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8009476:	eeb0 0a67 	vmov.f32	s0, s15
 800947a:	bd10      	pop	{r4, pc}
 800947c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8009480:	d103      	bne.n	800948a <__ieee754_atan2f+0x3a>
 8009482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009486:	f000 b883 	b.w	8009590 <atanf>
 800948a:	1794      	asrs	r4, r2, #30
 800948c:	f004 0402 	and.w	r4, r4, #2
 8009490:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8009494:	b943      	cbnz	r3, 80094a8 <__ieee754_atan2f+0x58>
 8009496:	2c02      	cmp	r4, #2
 8009498:	d05e      	beq.n	8009558 <__ieee754_atan2f+0x108>
 800949a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800956c <__ieee754_atan2f+0x11c>
 800949e:	2c03      	cmp	r4, #3
 80094a0:	bf08      	it	eq
 80094a2:	eef0 7a47 	vmoveq.f32	s15, s14
 80094a6:	e7e6      	b.n	8009476 <__ieee754_atan2f+0x26>
 80094a8:	b941      	cbnz	r1, 80094bc <__ieee754_atan2f+0x6c>
 80094aa:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8009570 <__ieee754_atan2f+0x120>
 80094ae:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009574 <__ieee754_atan2f+0x124>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	bfb8      	it	lt
 80094b6:	eef0 7a47 	vmovlt.f32	s15, s14
 80094ba:	e7dc      	b.n	8009476 <__ieee754_atan2f+0x26>
 80094bc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80094c0:	d110      	bne.n	80094e4 <__ieee754_atan2f+0x94>
 80094c2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80094c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80094ca:	d107      	bne.n	80094dc <__ieee754_atan2f+0x8c>
 80094cc:	2c02      	cmp	r4, #2
 80094ce:	d846      	bhi.n	800955e <__ieee754_atan2f+0x10e>
 80094d0:	4b29      	ldr	r3, [pc, #164]	@ (8009578 <__ieee754_atan2f+0x128>)
 80094d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80094d6:	edd3 7a00 	vldr	s15, [r3]
 80094da:	e7cc      	b.n	8009476 <__ieee754_atan2f+0x26>
 80094dc:	2c02      	cmp	r4, #2
 80094de:	d841      	bhi.n	8009564 <__ieee754_atan2f+0x114>
 80094e0:	4b26      	ldr	r3, [pc, #152]	@ (800957c <__ieee754_atan2f+0x12c>)
 80094e2:	e7f6      	b.n	80094d2 <__ieee754_atan2f+0x82>
 80094e4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80094e8:	d0df      	beq.n	80094aa <__ieee754_atan2f+0x5a>
 80094ea:	1a5b      	subs	r3, r3, r1
 80094ec:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80094f0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80094f4:	da1a      	bge.n	800952c <__ieee754_atan2f+0xdc>
 80094f6:	2a00      	cmp	r2, #0
 80094f8:	da01      	bge.n	80094fe <__ieee754_atan2f+0xae>
 80094fa:	313c      	adds	r1, #60	@ 0x3c
 80094fc:	db19      	blt.n	8009532 <__ieee754_atan2f+0xe2>
 80094fe:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8009502:	f000 f919 	bl	8009738 <fabsf>
 8009506:	f000 f843 	bl	8009590 <atanf>
 800950a:	eef0 7a40 	vmov.f32	s15, s0
 800950e:	2c01      	cmp	r4, #1
 8009510:	d012      	beq.n	8009538 <__ieee754_atan2f+0xe8>
 8009512:	2c02      	cmp	r4, #2
 8009514:	d017      	beq.n	8009546 <__ieee754_atan2f+0xf6>
 8009516:	2c00      	cmp	r4, #0
 8009518:	d0ad      	beq.n	8009476 <__ieee754_atan2f+0x26>
 800951a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8009580 <__ieee754_atan2f+0x130>
 800951e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009522:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009584 <__ieee754_atan2f+0x134>
 8009526:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800952a:	e7a4      	b.n	8009476 <__ieee754_atan2f+0x26>
 800952c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8009570 <__ieee754_atan2f+0x120>
 8009530:	e7ed      	b.n	800950e <__ieee754_atan2f+0xbe>
 8009532:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009588 <__ieee754_atan2f+0x138>
 8009536:	e7ea      	b.n	800950e <__ieee754_atan2f+0xbe>
 8009538:	ee17 3a90 	vmov	r3, s15
 800953c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8009540:	ee07 3a90 	vmov	s15, r3
 8009544:	e797      	b.n	8009476 <__ieee754_atan2f+0x26>
 8009546:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009580 <__ieee754_atan2f+0x130>
 800954a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800954e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8009584 <__ieee754_atan2f+0x134>
 8009552:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009556:	e78e      	b.n	8009476 <__ieee754_atan2f+0x26>
 8009558:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8009584 <__ieee754_atan2f+0x134>
 800955c:	e78b      	b.n	8009476 <__ieee754_atan2f+0x26>
 800955e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800958c <__ieee754_atan2f+0x13c>
 8009562:	e788      	b.n	8009476 <__ieee754_atan2f+0x26>
 8009564:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009588 <__ieee754_atan2f+0x138>
 8009568:	e785      	b.n	8009476 <__ieee754_atan2f+0x26>
 800956a:	bf00      	nop
 800956c:	c0490fdb 	.word	0xc0490fdb
 8009570:	3fc90fdb 	.word	0x3fc90fdb
 8009574:	bfc90fdb 	.word	0xbfc90fdb
 8009578:	0800a5a4 	.word	0x0800a5a4
 800957c:	0800a598 	.word	0x0800a598
 8009580:	33bbbd2e 	.word	0x33bbbd2e
 8009584:	40490fdb 	.word	0x40490fdb
 8009588:	00000000 	.word	0x00000000
 800958c:	3f490fdb 	.word	0x3f490fdb

08009590 <atanf>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	ee10 5a10 	vmov	r5, s0
 8009596:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800959a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800959e:	eef0 7a40 	vmov.f32	s15, s0
 80095a2:	d310      	bcc.n	80095c6 <atanf+0x36>
 80095a4:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80095a8:	d904      	bls.n	80095b4 <atanf+0x24>
 80095aa:	ee70 7a00 	vadd.f32	s15, s0, s0
 80095ae:	eeb0 0a67 	vmov.f32	s0, s15
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80096ec <atanf+0x15c>
 80095b8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80096f0 <atanf+0x160>
 80095bc:	2d00      	cmp	r5, #0
 80095be:	bfc8      	it	gt
 80095c0:	eef0 7a47 	vmovgt.f32	s15, s14
 80095c4:	e7f3      	b.n	80095ae <atanf+0x1e>
 80095c6:	4b4b      	ldr	r3, [pc, #300]	@ (80096f4 <atanf+0x164>)
 80095c8:	429c      	cmp	r4, r3
 80095ca:	d810      	bhi.n	80095ee <atanf+0x5e>
 80095cc:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80095d0:	d20a      	bcs.n	80095e8 <atanf+0x58>
 80095d2:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80096f8 <atanf+0x168>
 80095d6:	ee30 7a07 	vadd.f32	s14, s0, s14
 80095da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095de:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80095e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e6:	dce2      	bgt.n	80095ae <atanf+0x1e>
 80095e8:	f04f 33ff 	mov.w	r3, #4294967295
 80095ec:	e013      	b.n	8009616 <atanf+0x86>
 80095ee:	f000 f8a3 	bl	8009738 <fabsf>
 80095f2:	4b42      	ldr	r3, [pc, #264]	@ (80096fc <atanf+0x16c>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	d84f      	bhi.n	8009698 <atanf+0x108>
 80095f8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80095fc:	429c      	cmp	r4, r3
 80095fe:	d841      	bhi.n	8009684 <atanf+0xf4>
 8009600:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8009604:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009608:	eea0 7a27 	vfma.f32	s14, s0, s15
 800960c:	2300      	movs	r3, #0
 800960e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009612:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009616:	1c5a      	adds	r2, r3, #1
 8009618:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800961c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8009700 <atanf+0x170>
 8009620:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8009704 <atanf+0x174>
 8009624:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8009708 <atanf+0x178>
 8009628:	ee66 6a06 	vmul.f32	s13, s12, s12
 800962c:	eee6 5a87 	vfma.f32	s11, s13, s14
 8009630:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800970c <atanf+0x17c>
 8009634:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009638:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8009710 <atanf+0x180>
 800963c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009640:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009714 <atanf+0x184>
 8009644:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009648:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8009718 <atanf+0x188>
 800964c:	eee7 5a26 	vfma.f32	s11, s14, s13
 8009650:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800971c <atanf+0x18c>
 8009654:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009658:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009720 <atanf+0x190>
 800965c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009660:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8009724 <atanf+0x194>
 8009664:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009668:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8009728 <atanf+0x198>
 800966c:	eea5 7a26 	vfma.f32	s14, s10, s13
 8009670:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009674:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009678:	ee27 7a87 	vmul.f32	s14, s15, s14
 800967c:	d121      	bne.n	80096c2 <atanf+0x132>
 800967e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009682:	e794      	b.n	80095ae <atanf+0x1e>
 8009684:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009688:	ee30 7a67 	vsub.f32	s14, s0, s15
 800968c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009690:	2301      	movs	r3, #1
 8009692:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009696:	e7be      	b.n	8009616 <atanf+0x86>
 8009698:	4b24      	ldr	r3, [pc, #144]	@ (800972c <atanf+0x19c>)
 800969a:	429c      	cmp	r4, r3
 800969c:	d80b      	bhi.n	80096b6 <atanf+0x126>
 800969e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80096a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80096a6:	eea0 7a27 	vfma.f32	s14, s0, s15
 80096aa:	2302      	movs	r3, #2
 80096ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 80096b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b4:	e7af      	b.n	8009616 <atanf+0x86>
 80096b6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80096ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80096be:	2303      	movs	r3, #3
 80096c0:	e7a9      	b.n	8009616 <atanf+0x86>
 80096c2:	4a1b      	ldr	r2, [pc, #108]	@ (8009730 <atanf+0x1a0>)
 80096c4:	491b      	ldr	r1, [pc, #108]	@ (8009734 <atanf+0x1a4>)
 80096c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80096ca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80096ce:	edd3 6a00 	vldr	s13, [r3]
 80096d2:	ee37 7a66 	vsub.f32	s14, s14, s13
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80096dc:	edd2 7a00 	vldr	s15, [r2]
 80096e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096e4:	bfb8      	it	lt
 80096e6:	eef1 7a67 	vneglt.f32	s15, s15
 80096ea:	e760      	b.n	80095ae <atanf+0x1e>
 80096ec:	bfc90fdb 	.word	0xbfc90fdb
 80096f0:	3fc90fdb 	.word	0x3fc90fdb
 80096f4:	3edfffff 	.word	0x3edfffff
 80096f8:	7149f2ca 	.word	0x7149f2ca
 80096fc:	3f97ffff 	.word	0x3f97ffff
 8009700:	3c8569d7 	.word	0x3c8569d7
 8009704:	3d4bda59 	.word	0x3d4bda59
 8009708:	bd6ef16b 	.word	0xbd6ef16b
 800970c:	3d886b35 	.word	0x3d886b35
 8009710:	3dba2e6e 	.word	0x3dba2e6e
 8009714:	3e124925 	.word	0x3e124925
 8009718:	3eaaaaab 	.word	0x3eaaaaab
 800971c:	bd15a221 	.word	0xbd15a221
 8009720:	bd9d8795 	.word	0xbd9d8795
 8009724:	bde38e38 	.word	0xbde38e38
 8009728:	be4ccccd 	.word	0xbe4ccccd
 800972c:	401bffff 	.word	0x401bffff
 8009730:	0800a5c0 	.word	0x0800a5c0
 8009734:	0800a5b0 	.word	0x0800a5b0

08009738 <fabsf>:
 8009738:	ee10 3a10 	vmov	r3, s0
 800973c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009740:	ee00 3a10 	vmov	s0, r3
 8009744:	4770      	bx	lr
	...

08009748 <__kernel_rem_pio2>:
 8009748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800974c:	ed2d 8b02 	vpush	{d8}
 8009750:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009754:	f112 0f14 	cmn.w	r2, #20
 8009758:	9306      	str	r3, [sp, #24]
 800975a:	9104      	str	r1, [sp, #16]
 800975c:	4bbe      	ldr	r3, [pc, #760]	@ (8009a58 <__kernel_rem_pio2+0x310>)
 800975e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8009760:	9008      	str	r0, [sp, #32]
 8009762:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	9b06      	ldr	r3, [sp, #24]
 800976a:	f103 33ff 	add.w	r3, r3, #4294967295
 800976e:	bfa8      	it	ge
 8009770:	1ed4      	subge	r4, r2, #3
 8009772:	9305      	str	r3, [sp, #20]
 8009774:	bfb2      	itee	lt
 8009776:	2400      	movlt	r4, #0
 8009778:	2318      	movge	r3, #24
 800977a:	fb94 f4f3 	sdivge	r4, r4, r3
 800977e:	f06f 0317 	mvn.w	r3, #23
 8009782:	fb04 3303 	mla	r3, r4, r3, r3
 8009786:	eb03 0b02 	add.w	fp, r3, r2
 800978a:	9b00      	ldr	r3, [sp, #0]
 800978c:	9a05      	ldr	r2, [sp, #20]
 800978e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8009a48 <__kernel_rem_pio2+0x300>
 8009792:	eb03 0802 	add.w	r8, r3, r2
 8009796:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009798:	1aa7      	subs	r7, r4, r2
 800979a:	ae20      	add	r6, sp, #128	@ 0x80
 800979c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80097a0:	2500      	movs	r5, #0
 80097a2:	4545      	cmp	r5, r8
 80097a4:	dd13      	ble.n	80097ce <__kernel_rem_pio2+0x86>
 80097a6:	9b06      	ldr	r3, [sp, #24]
 80097a8:	aa20      	add	r2, sp, #128	@ 0x80
 80097aa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80097ae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80097b2:	f04f 0800 	mov.w	r8, #0
 80097b6:	9b00      	ldr	r3, [sp, #0]
 80097b8:	4598      	cmp	r8, r3
 80097ba:	dc31      	bgt.n	8009820 <__kernel_rem_pio2+0xd8>
 80097bc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8009a48 <__kernel_rem_pio2+0x300>
 80097c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80097c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80097c8:	462f      	mov	r7, r5
 80097ca:	2600      	movs	r6, #0
 80097cc:	e01b      	b.n	8009806 <__kernel_rem_pio2+0xbe>
 80097ce:	42ef      	cmn	r7, r5
 80097d0:	d407      	bmi.n	80097e2 <__kernel_rem_pio2+0x9a>
 80097d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80097d6:	f7f6 febd 	bl	8000554 <__aeabi_i2d>
 80097da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80097de:	3501      	adds	r5, #1
 80097e0:	e7df      	b.n	80097a2 <__kernel_rem_pio2+0x5a>
 80097e2:	ec51 0b18 	vmov	r0, r1, d8
 80097e6:	e7f8      	b.n	80097da <__kernel_rem_pio2+0x92>
 80097e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80097f0:	f7f6 ff1a 	bl	8000628 <__aeabi_dmul>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097fc:	f7f6 fd5e 	bl	80002bc <__adddf3>
 8009800:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009804:	3601      	adds	r6, #1
 8009806:	9b05      	ldr	r3, [sp, #20]
 8009808:	429e      	cmp	r6, r3
 800980a:	f1a7 0708 	sub.w	r7, r7, #8
 800980e:	ddeb      	ble.n	80097e8 <__kernel_rem_pio2+0xa0>
 8009810:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009814:	f108 0801 	add.w	r8, r8, #1
 8009818:	ecaa 7b02 	vstmia	sl!, {d7}
 800981c:	3508      	adds	r5, #8
 800981e:	e7ca      	b.n	80097b6 <__kernel_rem_pio2+0x6e>
 8009820:	9b00      	ldr	r3, [sp, #0]
 8009822:	f8dd 8000 	ldr.w	r8, [sp]
 8009826:	aa0c      	add	r2, sp, #48	@ 0x30
 8009828:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800982c:	930a      	str	r3, [sp, #40]	@ 0x28
 800982e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8009830:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009834:	9309      	str	r3, [sp, #36]	@ 0x24
 8009836:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800983a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800983c:	ab98      	add	r3, sp, #608	@ 0x260
 800983e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009842:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8009846:	ed8d 7b02 	vstr	d7, [sp, #8]
 800984a:	ac0c      	add	r4, sp, #48	@ 0x30
 800984c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800984e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8009852:	46a1      	mov	r9, r4
 8009854:	46c2      	mov	sl, r8
 8009856:	f1ba 0f00 	cmp.w	sl, #0
 800985a:	f1a5 0508 	sub.w	r5, r5, #8
 800985e:	dc77      	bgt.n	8009950 <__kernel_rem_pio2+0x208>
 8009860:	4658      	mov	r0, fp
 8009862:	ed9d 0b02 	vldr	d0, [sp, #8]
 8009866:	f000 fac7 	bl	8009df8 <scalbn>
 800986a:	ec57 6b10 	vmov	r6, r7, d0
 800986e:	2200      	movs	r2, #0
 8009870:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009874:	4630      	mov	r0, r6
 8009876:	4639      	mov	r1, r7
 8009878:	f7f6 fed6 	bl	8000628 <__aeabi_dmul>
 800987c:	ec41 0b10 	vmov	d0, r0, r1
 8009880:	f000 fb3a 	bl	8009ef8 <floor>
 8009884:	4b75      	ldr	r3, [pc, #468]	@ (8009a5c <__kernel_rem_pio2+0x314>)
 8009886:	ec51 0b10 	vmov	r0, r1, d0
 800988a:	2200      	movs	r2, #0
 800988c:	f7f6 fecc 	bl	8000628 <__aeabi_dmul>
 8009890:	4602      	mov	r2, r0
 8009892:	460b      	mov	r3, r1
 8009894:	4630      	mov	r0, r6
 8009896:	4639      	mov	r1, r7
 8009898:	f7f6 fd0e 	bl	80002b8 <__aeabi_dsub>
 800989c:	460f      	mov	r7, r1
 800989e:	4606      	mov	r6, r0
 80098a0:	f7f7 f972 	bl	8000b88 <__aeabi_d2iz>
 80098a4:	9002      	str	r0, [sp, #8]
 80098a6:	f7f6 fe55 	bl	8000554 <__aeabi_i2d>
 80098aa:	4602      	mov	r2, r0
 80098ac:	460b      	mov	r3, r1
 80098ae:	4630      	mov	r0, r6
 80098b0:	4639      	mov	r1, r7
 80098b2:	f7f6 fd01 	bl	80002b8 <__aeabi_dsub>
 80098b6:	f1bb 0f00 	cmp.w	fp, #0
 80098ba:	4606      	mov	r6, r0
 80098bc:	460f      	mov	r7, r1
 80098be:	dd6c      	ble.n	800999a <__kernel_rem_pio2+0x252>
 80098c0:	f108 31ff 	add.w	r1, r8, #4294967295
 80098c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80098c6:	9d02      	ldr	r5, [sp, #8]
 80098c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80098cc:	f1cb 0018 	rsb	r0, fp, #24
 80098d0:	fa43 f200 	asr.w	r2, r3, r0
 80098d4:	4415      	add	r5, r2
 80098d6:	4082      	lsls	r2, r0
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	aa0c      	add	r2, sp, #48	@ 0x30
 80098dc:	9502      	str	r5, [sp, #8]
 80098de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80098e2:	f1cb 0217 	rsb	r2, fp, #23
 80098e6:	fa43 f902 	asr.w	r9, r3, r2
 80098ea:	f1b9 0f00 	cmp.w	r9, #0
 80098ee:	dd64      	ble.n	80099ba <__kernel_rem_pio2+0x272>
 80098f0:	9b02      	ldr	r3, [sp, #8]
 80098f2:	2200      	movs	r2, #0
 80098f4:	3301      	adds	r3, #1
 80098f6:	9302      	str	r3, [sp, #8]
 80098f8:	4615      	mov	r5, r2
 80098fa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80098fe:	4590      	cmp	r8, r2
 8009900:	f300 80b8 	bgt.w	8009a74 <__kernel_rem_pio2+0x32c>
 8009904:	f1bb 0f00 	cmp.w	fp, #0
 8009908:	dd07      	ble.n	800991a <__kernel_rem_pio2+0x1d2>
 800990a:	f1bb 0f01 	cmp.w	fp, #1
 800990e:	f000 80bf 	beq.w	8009a90 <__kernel_rem_pio2+0x348>
 8009912:	f1bb 0f02 	cmp.w	fp, #2
 8009916:	f000 80c6 	beq.w	8009aa6 <__kernel_rem_pio2+0x35e>
 800991a:	f1b9 0f02 	cmp.w	r9, #2
 800991e:	d14c      	bne.n	80099ba <__kernel_rem_pio2+0x272>
 8009920:	4632      	mov	r2, r6
 8009922:	463b      	mov	r3, r7
 8009924:	494e      	ldr	r1, [pc, #312]	@ (8009a60 <__kernel_rem_pio2+0x318>)
 8009926:	2000      	movs	r0, #0
 8009928:	f7f6 fcc6 	bl	80002b8 <__aeabi_dsub>
 800992c:	4606      	mov	r6, r0
 800992e:	460f      	mov	r7, r1
 8009930:	2d00      	cmp	r5, #0
 8009932:	d042      	beq.n	80099ba <__kernel_rem_pio2+0x272>
 8009934:	4658      	mov	r0, fp
 8009936:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8009a50 <__kernel_rem_pio2+0x308>
 800993a:	f000 fa5d 	bl	8009df8 <scalbn>
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	ec53 2b10 	vmov	r2, r3, d0
 8009946:	f7f6 fcb7 	bl	80002b8 <__aeabi_dsub>
 800994a:	4606      	mov	r6, r0
 800994c:	460f      	mov	r7, r1
 800994e:	e034      	b.n	80099ba <__kernel_rem_pio2+0x272>
 8009950:	4b44      	ldr	r3, [pc, #272]	@ (8009a64 <__kernel_rem_pio2+0x31c>)
 8009952:	2200      	movs	r2, #0
 8009954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009958:	f7f6 fe66 	bl	8000628 <__aeabi_dmul>
 800995c:	f7f7 f914 	bl	8000b88 <__aeabi_d2iz>
 8009960:	f7f6 fdf8 	bl	8000554 <__aeabi_i2d>
 8009964:	4b40      	ldr	r3, [pc, #256]	@ (8009a68 <__kernel_rem_pio2+0x320>)
 8009966:	2200      	movs	r2, #0
 8009968:	4606      	mov	r6, r0
 800996a:	460f      	mov	r7, r1
 800996c:	f7f6 fe5c 	bl	8000628 <__aeabi_dmul>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009978:	f7f6 fc9e 	bl	80002b8 <__aeabi_dsub>
 800997c:	f7f7 f904 	bl	8000b88 <__aeabi_d2iz>
 8009980:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009984:	f849 0b04 	str.w	r0, [r9], #4
 8009988:	4639      	mov	r1, r7
 800998a:	4630      	mov	r0, r6
 800998c:	f7f6 fc96 	bl	80002bc <__adddf3>
 8009990:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009998:	e75d      	b.n	8009856 <__kernel_rem_pio2+0x10e>
 800999a:	d107      	bne.n	80099ac <__kernel_rem_pio2+0x264>
 800999c:	f108 33ff 	add.w	r3, r8, #4294967295
 80099a0:	aa0c      	add	r2, sp, #48	@ 0x30
 80099a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099a6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80099aa:	e79e      	b.n	80098ea <__kernel_rem_pio2+0x1a2>
 80099ac:	4b2f      	ldr	r3, [pc, #188]	@ (8009a6c <__kernel_rem_pio2+0x324>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	f7f7 f8c0 	bl	8000b34 <__aeabi_dcmpge>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d143      	bne.n	8009a40 <__kernel_rem_pio2+0x2f8>
 80099b8:	4681      	mov	r9, r0
 80099ba:	2200      	movs	r2, #0
 80099bc:	2300      	movs	r3, #0
 80099be:	4630      	mov	r0, r6
 80099c0:	4639      	mov	r1, r7
 80099c2:	f7f7 f899 	bl	8000af8 <__aeabi_dcmpeq>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	f000 80bf 	beq.w	8009b4a <__kernel_rem_pio2+0x402>
 80099cc:	f108 33ff 	add.w	r3, r8, #4294967295
 80099d0:	2200      	movs	r2, #0
 80099d2:	9900      	ldr	r1, [sp, #0]
 80099d4:	428b      	cmp	r3, r1
 80099d6:	da6e      	bge.n	8009ab6 <__kernel_rem_pio2+0x36e>
 80099d8:	2a00      	cmp	r2, #0
 80099da:	f000 8089 	beq.w	8009af0 <__kernel_rem_pio2+0x3a8>
 80099de:	f108 38ff 	add.w	r8, r8, #4294967295
 80099e2:	ab0c      	add	r3, sp, #48	@ 0x30
 80099e4:	f1ab 0b18 	sub.w	fp, fp, #24
 80099e8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d0f6      	beq.n	80099de <__kernel_rem_pio2+0x296>
 80099f0:	4658      	mov	r0, fp
 80099f2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8009a50 <__kernel_rem_pio2+0x308>
 80099f6:	f000 f9ff 	bl	8009df8 <scalbn>
 80099fa:	f108 0301 	add.w	r3, r8, #1
 80099fe:	00da      	lsls	r2, r3, #3
 8009a00:	9205      	str	r2, [sp, #20]
 8009a02:	ec55 4b10 	vmov	r4, r5, d0
 8009a06:	aa70      	add	r2, sp, #448	@ 0x1c0
 8009a08:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8009a64 <__kernel_rem_pio2+0x31c>
 8009a0c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8009a10:	4646      	mov	r6, r8
 8009a12:	f04f 0a00 	mov.w	sl, #0
 8009a16:	2e00      	cmp	r6, #0
 8009a18:	f280 80cf 	bge.w	8009bba <__kernel_rem_pio2+0x472>
 8009a1c:	4644      	mov	r4, r8
 8009a1e:	2c00      	cmp	r4, #0
 8009a20:	f2c0 80fd 	blt.w	8009c1e <__kernel_rem_pio2+0x4d6>
 8009a24:	4b12      	ldr	r3, [pc, #72]	@ (8009a70 <__kernel_rem_pio2+0x328>)
 8009a26:	461f      	mov	r7, r3
 8009a28:	ab70      	add	r3, sp, #448	@ 0x1c0
 8009a2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a2e:	9306      	str	r3, [sp, #24]
 8009a30:	f04f 0a00 	mov.w	sl, #0
 8009a34:	f04f 0b00 	mov.w	fp, #0
 8009a38:	2600      	movs	r6, #0
 8009a3a:	eba8 0504 	sub.w	r5, r8, r4
 8009a3e:	e0e2      	b.n	8009c06 <__kernel_rem_pio2+0x4be>
 8009a40:	f04f 0902 	mov.w	r9, #2
 8009a44:	e754      	b.n	80098f0 <__kernel_rem_pio2+0x1a8>
 8009a46:	bf00      	nop
	...
 8009a54:	3ff00000 	.word	0x3ff00000
 8009a58:	0800a610 	.word	0x0800a610
 8009a5c:	40200000 	.word	0x40200000
 8009a60:	3ff00000 	.word	0x3ff00000
 8009a64:	3e700000 	.word	0x3e700000
 8009a68:	41700000 	.word	0x41700000
 8009a6c:	3fe00000 	.word	0x3fe00000
 8009a70:	0800a5d0 	.word	0x0800a5d0
 8009a74:	f854 3b04 	ldr.w	r3, [r4], #4
 8009a78:	b945      	cbnz	r5, 8009a8c <__kernel_rem_pio2+0x344>
 8009a7a:	b123      	cbz	r3, 8009a86 <__kernel_rem_pio2+0x33e>
 8009a7c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8009a80:	f844 3c04 	str.w	r3, [r4, #-4]
 8009a84:	2301      	movs	r3, #1
 8009a86:	3201      	adds	r2, #1
 8009a88:	461d      	mov	r5, r3
 8009a8a:	e738      	b.n	80098fe <__kernel_rem_pio2+0x1b6>
 8009a8c:	1acb      	subs	r3, r1, r3
 8009a8e:	e7f7      	b.n	8009a80 <__kernel_rem_pio2+0x338>
 8009a90:	f108 32ff 	add.w	r2, r8, #4294967295
 8009a94:	ab0c      	add	r3, sp, #48	@ 0x30
 8009a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009a9e:	a90c      	add	r1, sp, #48	@ 0x30
 8009aa0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009aa4:	e739      	b.n	800991a <__kernel_rem_pio2+0x1d2>
 8009aa6:	f108 32ff 	add.w	r2, r8, #4294967295
 8009aaa:	ab0c      	add	r3, sp, #48	@ 0x30
 8009aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009ab4:	e7f3      	b.n	8009a9e <__kernel_rem_pio2+0x356>
 8009ab6:	a90c      	add	r1, sp, #48	@ 0x30
 8009ab8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009abc:	3b01      	subs	r3, #1
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	e787      	b.n	80099d2 <__kernel_rem_pio2+0x28a>
 8009ac2:	3401      	adds	r4, #1
 8009ac4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009ac8:	2a00      	cmp	r2, #0
 8009aca:	d0fa      	beq.n	8009ac2 <__kernel_rem_pio2+0x37a>
 8009acc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ace:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009ad2:	eb0d 0503 	add.w	r5, sp, r3
 8009ad6:	9b06      	ldr	r3, [sp, #24]
 8009ad8:	aa20      	add	r2, sp, #128	@ 0x80
 8009ada:	4443      	add	r3, r8
 8009adc:	f108 0701 	add.w	r7, r8, #1
 8009ae0:	3d98      	subs	r5, #152	@ 0x98
 8009ae2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8009ae6:	4444      	add	r4, r8
 8009ae8:	42bc      	cmp	r4, r7
 8009aea:	da04      	bge.n	8009af6 <__kernel_rem_pio2+0x3ae>
 8009aec:	46a0      	mov	r8, r4
 8009aee:	e6a2      	b.n	8009836 <__kernel_rem_pio2+0xee>
 8009af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009af2:	2401      	movs	r4, #1
 8009af4:	e7e6      	b.n	8009ac4 <__kernel_rem_pio2+0x37c>
 8009af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009afc:	f7f6 fd2a 	bl	8000554 <__aeabi_i2d>
 8009b00:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8009dc8 <__kernel_rem_pio2+0x680>
 8009b04:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009b08:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009b0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b10:	46b2      	mov	sl, r6
 8009b12:	f04f 0800 	mov.w	r8, #0
 8009b16:	9b05      	ldr	r3, [sp, #20]
 8009b18:	4598      	cmp	r8, r3
 8009b1a:	dd05      	ble.n	8009b28 <__kernel_rem_pio2+0x3e0>
 8009b1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b20:	3701      	adds	r7, #1
 8009b22:	eca5 7b02 	vstmia	r5!, {d7}
 8009b26:	e7df      	b.n	8009ae8 <__kernel_rem_pio2+0x3a0>
 8009b28:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8009b2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8009b30:	f7f6 fd7a 	bl	8000628 <__aeabi_dmul>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b3c:	f7f6 fbbe 	bl	80002bc <__adddf3>
 8009b40:	f108 0801 	add.w	r8, r8, #1
 8009b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b48:	e7e5      	b.n	8009b16 <__kernel_rem_pio2+0x3ce>
 8009b4a:	f1cb 0000 	rsb	r0, fp, #0
 8009b4e:	ec47 6b10 	vmov	d0, r6, r7
 8009b52:	f000 f951 	bl	8009df8 <scalbn>
 8009b56:	ec55 4b10 	vmov	r4, r5, d0
 8009b5a:	4b9d      	ldr	r3, [pc, #628]	@ (8009dd0 <__kernel_rem_pio2+0x688>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4620      	mov	r0, r4
 8009b60:	4629      	mov	r1, r5
 8009b62:	f7f6 ffe7 	bl	8000b34 <__aeabi_dcmpge>
 8009b66:	b300      	cbz	r0, 8009baa <__kernel_rem_pio2+0x462>
 8009b68:	4b9a      	ldr	r3, [pc, #616]	@ (8009dd4 <__kernel_rem_pio2+0x68c>)
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	4629      	mov	r1, r5
 8009b70:	f7f6 fd5a 	bl	8000628 <__aeabi_dmul>
 8009b74:	f7f7 f808 	bl	8000b88 <__aeabi_d2iz>
 8009b78:	4606      	mov	r6, r0
 8009b7a:	f7f6 fceb 	bl	8000554 <__aeabi_i2d>
 8009b7e:	4b94      	ldr	r3, [pc, #592]	@ (8009dd0 <__kernel_rem_pio2+0x688>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	f7f6 fd51 	bl	8000628 <__aeabi_dmul>
 8009b86:	460b      	mov	r3, r1
 8009b88:	4602      	mov	r2, r0
 8009b8a:	4629      	mov	r1, r5
 8009b8c:	4620      	mov	r0, r4
 8009b8e:	f7f6 fb93 	bl	80002b8 <__aeabi_dsub>
 8009b92:	f7f6 fff9 	bl	8000b88 <__aeabi_d2iz>
 8009b96:	ab0c      	add	r3, sp, #48	@ 0x30
 8009b98:	f10b 0b18 	add.w	fp, fp, #24
 8009b9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009ba0:	f108 0801 	add.w	r8, r8, #1
 8009ba4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8009ba8:	e722      	b.n	80099f0 <__kernel_rem_pio2+0x2a8>
 8009baa:	4620      	mov	r0, r4
 8009bac:	4629      	mov	r1, r5
 8009bae:	f7f6 ffeb 	bl	8000b88 <__aeabi_d2iz>
 8009bb2:	ab0c      	add	r3, sp, #48	@ 0x30
 8009bb4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8009bb8:	e71a      	b.n	80099f0 <__kernel_rem_pio2+0x2a8>
 8009bba:	ab0c      	add	r3, sp, #48	@ 0x30
 8009bbc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009bc0:	f7f6 fcc8 	bl	8000554 <__aeabi_i2d>
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	462b      	mov	r3, r5
 8009bc8:	f7f6 fd2e 	bl	8000628 <__aeabi_dmul>
 8009bcc:	4652      	mov	r2, sl
 8009bce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8009bd2:	465b      	mov	r3, fp
 8009bd4:	4620      	mov	r0, r4
 8009bd6:	4629      	mov	r1, r5
 8009bd8:	f7f6 fd26 	bl	8000628 <__aeabi_dmul>
 8009bdc:	3e01      	subs	r6, #1
 8009bde:	4604      	mov	r4, r0
 8009be0:	460d      	mov	r5, r1
 8009be2:	e718      	b.n	8009a16 <__kernel_rem_pio2+0x2ce>
 8009be4:	9906      	ldr	r1, [sp, #24]
 8009be6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8009bea:	9106      	str	r1, [sp, #24]
 8009bec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8009bf0:	f7f6 fd1a 	bl	8000628 <__aeabi_dmul>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4650      	mov	r0, sl
 8009bfa:	4659      	mov	r1, fp
 8009bfc:	f7f6 fb5e 	bl	80002bc <__adddf3>
 8009c00:	3601      	adds	r6, #1
 8009c02:	4682      	mov	sl, r0
 8009c04:	468b      	mov	fp, r1
 8009c06:	9b00      	ldr	r3, [sp, #0]
 8009c08:	429e      	cmp	r6, r3
 8009c0a:	dc01      	bgt.n	8009c10 <__kernel_rem_pio2+0x4c8>
 8009c0c:	42b5      	cmp	r5, r6
 8009c0e:	dae9      	bge.n	8009be4 <__kernel_rem_pio2+0x49c>
 8009c10:	ab48      	add	r3, sp, #288	@ 0x120
 8009c12:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009c16:	e9c5 ab00 	strd	sl, fp, [r5]
 8009c1a:	3c01      	subs	r4, #1
 8009c1c:	e6ff      	b.n	8009a1e <__kernel_rem_pio2+0x2d6>
 8009c1e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	dc0b      	bgt.n	8009c3c <__kernel_rem_pio2+0x4f4>
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	dc39      	bgt.n	8009c9c <__kernel_rem_pio2+0x554>
 8009c28:	d05d      	beq.n	8009ce6 <__kernel_rem_pio2+0x59e>
 8009c2a:	9b02      	ldr	r3, [sp, #8]
 8009c2c:	f003 0007 	and.w	r0, r3, #7
 8009c30:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8009c34:	ecbd 8b02 	vpop	{d8}
 8009c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c3c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8009c3e:	2b03      	cmp	r3, #3
 8009c40:	d1f3      	bne.n	8009c2a <__kernel_rem_pio2+0x4e2>
 8009c42:	9b05      	ldr	r3, [sp, #20]
 8009c44:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009c48:	eb0d 0403 	add.w	r4, sp, r3
 8009c4c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8009c50:	4625      	mov	r5, r4
 8009c52:	46c2      	mov	sl, r8
 8009c54:	f1ba 0f00 	cmp.w	sl, #0
 8009c58:	f1a5 0508 	sub.w	r5, r5, #8
 8009c5c:	dc6b      	bgt.n	8009d36 <__kernel_rem_pio2+0x5ee>
 8009c5e:	4645      	mov	r5, r8
 8009c60:	2d01      	cmp	r5, #1
 8009c62:	f1a4 0408 	sub.w	r4, r4, #8
 8009c66:	f300 8087 	bgt.w	8009d78 <__kernel_rem_pio2+0x630>
 8009c6a:	9c05      	ldr	r4, [sp, #20]
 8009c6c:	ab48      	add	r3, sp, #288	@ 0x120
 8009c6e:	441c      	add	r4, r3
 8009c70:	2000      	movs	r0, #0
 8009c72:	2100      	movs	r1, #0
 8009c74:	f1b8 0f01 	cmp.w	r8, #1
 8009c78:	f300 809c 	bgt.w	8009db4 <__kernel_rem_pio2+0x66c>
 8009c7c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8009c80:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009c84:	f1b9 0f00 	cmp.w	r9, #0
 8009c88:	f040 80a6 	bne.w	8009dd8 <__kernel_rem_pio2+0x690>
 8009c8c:	9b04      	ldr	r3, [sp, #16]
 8009c8e:	e9c3 7800 	strd	r7, r8, [r3]
 8009c92:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009c96:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009c9a:	e7c6      	b.n	8009c2a <__kernel_rem_pio2+0x4e2>
 8009c9c:	9d05      	ldr	r5, [sp, #20]
 8009c9e:	ab48      	add	r3, sp, #288	@ 0x120
 8009ca0:	441d      	add	r5, r3
 8009ca2:	4644      	mov	r4, r8
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	2c00      	cmp	r4, #0
 8009caa:	da35      	bge.n	8009d18 <__kernel_rem_pio2+0x5d0>
 8009cac:	f1b9 0f00 	cmp.w	r9, #0
 8009cb0:	d038      	beq.n	8009d24 <__kernel_rem_pio2+0x5dc>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cb8:	9c04      	ldr	r4, [sp, #16]
 8009cba:	e9c4 2300 	strd	r2, r3, [r4]
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009cc6:	f7f6 faf7 	bl	80002b8 <__aeabi_dsub>
 8009cca:	ad4a      	add	r5, sp, #296	@ 0x128
 8009ccc:	2401      	movs	r4, #1
 8009cce:	45a0      	cmp	r8, r4
 8009cd0:	da2b      	bge.n	8009d2a <__kernel_rem_pio2+0x5e2>
 8009cd2:	f1b9 0f00 	cmp.w	r9, #0
 8009cd6:	d002      	beq.n	8009cde <__kernel_rem_pio2+0x596>
 8009cd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cdc:	4619      	mov	r1, r3
 8009cde:	9b04      	ldr	r3, [sp, #16]
 8009ce0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009ce4:	e7a1      	b.n	8009c2a <__kernel_rem_pio2+0x4e2>
 8009ce6:	9c05      	ldr	r4, [sp, #20]
 8009ce8:	ab48      	add	r3, sp, #288	@ 0x120
 8009cea:	441c      	add	r4, r3
 8009cec:	2000      	movs	r0, #0
 8009cee:	2100      	movs	r1, #0
 8009cf0:	f1b8 0f00 	cmp.w	r8, #0
 8009cf4:	da09      	bge.n	8009d0a <__kernel_rem_pio2+0x5c2>
 8009cf6:	f1b9 0f00 	cmp.w	r9, #0
 8009cfa:	d002      	beq.n	8009d02 <__kernel_rem_pio2+0x5ba>
 8009cfc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d00:	4619      	mov	r1, r3
 8009d02:	9b04      	ldr	r3, [sp, #16]
 8009d04:	e9c3 0100 	strd	r0, r1, [r3]
 8009d08:	e78f      	b.n	8009c2a <__kernel_rem_pio2+0x4e2>
 8009d0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d0e:	f7f6 fad5 	bl	80002bc <__adddf3>
 8009d12:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d16:	e7eb      	b.n	8009cf0 <__kernel_rem_pio2+0x5a8>
 8009d18:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8009d1c:	f7f6 face 	bl	80002bc <__adddf3>
 8009d20:	3c01      	subs	r4, #1
 8009d22:	e7c1      	b.n	8009ca8 <__kernel_rem_pio2+0x560>
 8009d24:	4602      	mov	r2, r0
 8009d26:	460b      	mov	r3, r1
 8009d28:	e7c6      	b.n	8009cb8 <__kernel_rem_pio2+0x570>
 8009d2a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8009d2e:	f7f6 fac5 	bl	80002bc <__adddf3>
 8009d32:	3401      	adds	r4, #1
 8009d34:	e7cb      	b.n	8009cce <__kernel_rem_pio2+0x586>
 8009d36:	ed95 7b00 	vldr	d7, [r5]
 8009d3a:	ed8d 7b00 	vstr	d7, [sp]
 8009d3e:	ed95 7b02 	vldr	d7, [r5, #8]
 8009d42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d46:	ec53 2b17 	vmov	r2, r3, d7
 8009d4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d4e:	f7f6 fab5 	bl	80002bc <__adddf3>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4606      	mov	r6, r0
 8009d58:	460f      	mov	r7, r1
 8009d5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d5e:	f7f6 faab 	bl	80002b8 <__aeabi_dsub>
 8009d62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d66:	f7f6 faa9 	bl	80002bc <__adddf3>
 8009d6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d6e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8009d72:	e9c5 6700 	strd	r6, r7, [r5]
 8009d76:	e76d      	b.n	8009c54 <__kernel_rem_pio2+0x50c>
 8009d78:	ed94 7b00 	vldr	d7, [r4]
 8009d7c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8009d80:	ec51 0b17 	vmov	r0, r1, d7
 8009d84:	4652      	mov	r2, sl
 8009d86:	465b      	mov	r3, fp
 8009d88:	ed8d 7b00 	vstr	d7, [sp]
 8009d8c:	f7f6 fa96 	bl	80002bc <__adddf3>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4606      	mov	r6, r0
 8009d96:	460f      	mov	r7, r1
 8009d98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d9c:	f7f6 fa8c 	bl	80002b8 <__aeabi_dsub>
 8009da0:	4652      	mov	r2, sl
 8009da2:	465b      	mov	r3, fp
 8009da4:	f7f6 fa8a 	bl	80002bc <__adddf3>
 8009da8:	3d01      	subs	r5, #1
 8009daa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009dae:	e9c4 6700 	strd	r6, r7, [r4]
 8009db2:	e755      	b.n	8009c60 <__kernel_rem_pio2+0x518>
 8009db4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009db8:	f7f6 fa80 	bl	80002bc <__adddf3>
 8009dbc:	f108 38ff 	add.w	r8, r8, #4294967295
 8009dc0:	e758      	b.n	8009c74 <__kernel_rem_pio2+0x52c>
 8009dc2:	bf00      	nop
 8009dc4:	f3af 8000 	nop.w
	...
 8009dd0:	41700000 	.word	0x41700000
 8009dd4:	3e700000 	.word	0x3e700000
 8009dd8:	9b04      	ldr	r3, [sp, #16]
 8009dda:	9a04      	ldr	r2, [sp, #16]
 8009ddc:	601f      	str	r7, [r3, #0]
 8009dde:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8009de2:	605c      	str	r4, [r3, #4]
 8009de4:	609d      	str	r5, [r3, #8]
 8009de6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009dea:	60d3      	str	r3, [r2, #12]
 8009dec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009df0:	6110      	str	r0, [r2, #16]
 8009df2:	6153      	str	r3, [r2, #20]
 8009df4:	e719      	b.n	8009c2a <__kernel_rem_pio2+0x4e2>
 8009df6:	bf00      	nop

08009df8 <scalbn>:
 8009df8:	b570      	push	{r4, r5, r6, lr}
 8009dfa:	ec55 4b10 	vmov	r4, r5, d0
 8009dfe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009e02:	4606      	mov	r6, r0
 8009e04:	462b      	mov	r3, r5
 8009e06:	b991      	cbnz	r1, 8009e2e <scalbn+0x36>
 8009e08:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8009e0c:	4323      	orrs	r3, r4
 8009e0e:	d03d      	beq.n	8009e8c <scalbn+0x94>
 8009e10:	4b35      	ldr	r3, [pc, #212]	@ (8009ee8 <scalbn+0xf0>)
 8009e12:	4620      	mov	r0, r4
 8009e14:	4629      	mov	r1, r5
 8009e16:	2200      	movs	r2, #0
 8009e18:	f7f6 fc06 	bl	8000628 <__aeabi_dmul>
 8009e1c:	4b33      	ldr	r3, [pc, #204]	@ (8009eec <scalbn+0xf4>)
 8009e1e:	429e      	cmp	r6, r3
 8009e20:	4604      	mov	r4, r0
 8009e22:	460d      	mov	r5, r1
 8009e24:	da0f      	bge.n	8009e46 <scalbn+0x4e>
 8009e26:	a328      	add	r3, pc, #160	@ (adr r3, 8009ec8 <scalbn+0xd0>)
 8009e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2c:	e01e      	b.n	8009e6c <scalbn+0x74>
 8009e2e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009e32:	4291      	cmp	r1, r2
 8009e34:	d10b      	bne.n	8009e4e <scalbn+0x56>
 8009e36:	4622      	mov	r2, r4
 8009e38:	4620      	mov	r0, r4
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	f7f6 fa3e 	bl	80002bc <__adddf3>
 8009e40:	4604      	mov	r4, r0
 8009e42:	460d      	mov	r5, r1
 8009e44:	e022      	b.n	8009e8c <scalbn+0x94>
 8009e46:	460b      	mov	r3, r1
 8009e48:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009e4c:	3936      	subs	r1, #54	@ 0x36
 8009e4e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009e52:	4296      	cmp	r6, r2
 8009e54:	dd0d      	ble.n	8009e72 <scalbn+0x7a>
 8009e56:	2d00      	cmp	r5, #0
 8009e58:	a11d      	add	r1, pc, #116	@ (adr r1, 8009ed0 <scalbn+0xd8>)
 8009e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e5e:	da02      	bge.n	8009e66 <scalbn+0x6e>
 8009e60:	a11d      	add	r1, pc, #116	@ (adr r1, 8009ed8 <scalbn+0xe0>)
 8009e62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e66:	a31a      	add	r3, pc, #104	@ (adr r3, 8009ed0 <scalbn+0xd8>)
 8009e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6c:	f7f6 fbdc 	bl	8000628 <__aeabi_dmul>
 8009e70:	e7e6      	b.n	8009e40 <scalbn+0x48>
 8009e72:	1872      	adds	r2, r6, r1
 8009e74:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009e78:	428a      	cmp	r2, r1
 8009e7a:	dcec      	bgt.n	8009e56 <scalbn+0x5e>
 8009e7c:	2a00      	cmp	r2, #0
 8009e7e:	dd08      	ble.n	8009e92 <scalbn+0x9a>
 8009e80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009e84:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009e88:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009e8c:	ec45 4b10 	vmov	d0, r4, r5
 8009e90:	bd70      	pop	{r4, r5, r6, pc}
 8009e92:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009e96:	da08      	bge.n	8009eaa <scalbn+0xb2>
 8009e98:	2d00      	cmp	r5, #0
 8009e9a:	a10b      	add	r1, pc, #44	@ (adr r1, 8009ec8 <scalbn+0xd0>)
 8009e9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea0:	dac1      	bge.n	8009e26 <scalbn+0x2e>
 8009ea2:	a10f      	add	r1, pc, #60	@ (adr r1, 8009ee0 <scalbn+0xe8>)
 8009ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ea8:	e7bd      	b.n	8009e26 <scalbn+0x2e>
 8009eaa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009eae:	3236      	adds	r2, #54	@ 0x36
 8009eb0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009eb4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009eb8:	4620      	mov	r0, r4
 8009eba:	4b0d      	ldr	r3, [pc, #52]	@ (8009ef0 <scalbn+0xf8>)
 8009ebc:	4629      	mov	r1, r5
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	e7d4      	b.n	8009e6c <scalbn+0x74>
 8009ec2:	bf00      	nop
 8009ec4:	f3af 8000 	nop.w
 8009ec8:	c2f8f359 	.word	0xc2f8f359
 8009ecc:	01a56e1f 	.word	0x01a56e1f
 8009ed0:	8800759c 	.word	0x8800759c
 8009ed4:	7e37e43c 	.word	0x7e37e43c
 8009ed8:	8800759c 	.word	0x8800759c
 8009edc:	fe37e43c 	.word	0xfe37e43c
 8009ee0:	c2f8f359 	.word	0xc2f8f359
 8009ee4:	81a56e1f 	.word	0x81a56e1f
 8009ee8:	43500000 	.word	0x43500000
 8009eec:	ffff3cb0 	.word	0xffff3cb0
 8009ef0:	3c900000 	.word	0x3c900000
 8009ef4:	00000000 	.word	0x00000000

08009ef8 <floor>:
 8009ef8:	ec51 0b10 	vmov	r0, r1, d0
 8009efc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8009f08:	2e13      	cmp	r6, #19
 8009f0a:	460c      	mov	r4, r1
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	4680      	mov	r8, r0
 8009f10:	dc34      	bgt.n	8009f7c <floor+0x84>
 8009f12:	2e00      	cmp	r6, #0
 8009f14:	da17      	bge.n	8009f46 <floor+0x4e>
 8009f16:	a332      	add	r3, pc, #200	@ (adr r3, 8009fe0 <floor+0xe8>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 f9ce 	bl	80002bc <__adddf3>
 8009f20:	2200      	movs	r2, #0
 8009f22:	2300      	movs	r3, #0
 8009f24:	f7f6 fe10 	bl	8000b48 <__aeabi_dcmpgt>
 8009f28:	b150      	cbz	r0, 8009f40 <floor+0x48>
 8009f2a:	2c00      	cmp	r4, #0
 8009f2c:	da55      	bge.n	8009fda <floor+0xe2>
 8009f2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8009f32:	432c      	orrs	r4, r5
 8009f34:	2500      	movs	r5, #0
 8009f36:	42ac      	cmp	r4, r5
 8009f38:	4c2b      	ldr	r4, [pc, #172]	@ (8009fe8 <floor+0xf0>)
 8009f3a:	bf08      	it	eq
 8009f3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8009f40:	4621      	mov	r1, r4
 8009f42:	4628      	mov	r0, r5
 8009f44:	e023      	b.n	8009f8e <floor+0x96>
 8009f46:	4f29      	ldr	r7, [pc, #164]	@ (8009fec <floor+0xf4>)
 8009f48:	4137      	asrs	r7, r6
 8009f4a:	ea01 0307 	and.w	r3, r1, r7
 8009f4e:	4303      	orrs	r3, r0
 8009f50:	d01d      	beq.n	8009f8e <floor+0x96>
 8009f52:	a323      	add	r3, pc, #140	@ (adr r3, 8009fe0 <floor+0xe8>)
 8009f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f58:	f7f6 f9b0 	bl	80002bc <__adddf3>
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f7f6 fdf2 	bl	8000b48 <__aeabi_dcmpgt>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d0eb      	beq.n	8009f40 <floor+0x48>
 8009f68:	2c00      	cmp	r4, #0
 8009f6a:	bfbe      	ittt	lt
 8009f6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009f70:	4133      	asrlt	r3, r6
 8009f72:	18e4      	addlt	r4, r4, r3
 8009f74:	ea24 0407 	bic.w	r4, r4, r7
 8009f78:	2500      	movs	r5, #0
 8009f7a:	e7e1      	b.n	8009f40 <floor+0x48>
 8009f7c:	2e33      	cmp	r6, #51	@ 0x33
 8009f7e:	dd0a      	ble.n	8009f96 <floor+0x9e>
 8009f80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009f84:	d103      	bne.n	8009f8e <floor+0x96>
 8009f86:	4602      	mov	r2, r0
 8009f88:	460b      	mov	r3, r1
 8009f8a:	f7f6 f997 	bl	80002bc <__adddf3>
 8009f8e:	ec41 0b10 	vmov	d0, r0, r1
 8009f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8009f9a:	f04f 37ff 	mov.w	r7, #4294967295
 8009f9e:	40df      	lsrs	r7, r3
 8009fa0:	4207      	tst	r7, r0
 8009fa2:	d0f4      	beq.n	8009f8e <floor+0x96>
 8009fa4:	a30e      	add	r3, pc, #56	@ (adr r3, 8009fe0 <floor+0xe8>)
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f7f6 f987 	bl	80002bc <__adddf3>
 8009fae:	2200      	movs	r2, #0
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	f7f6 fdc9 	bl	8000b48 <__aeabi_dcmpgt>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0c2      	beq.n	8009f40 <floor+0x48>
 8009fba:	2c00      	cmp	r4, #0
 8009fbc:	da0a      	bge.n	8009fd4 <floor+0xdc>
 8009fbe:	2e14      	cmp	r6, #20
 8009fc0:	d101      	bne.n	8009fc6 <floor+0xce>
 8009fc2:	3401      	adds	r4, #1
 8009fc4:	e006      	b.n	8009fd4 <floor+0xdc>
 8009fc6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009fca:	2301      	movs	r3, #1
 8009fcc:	40b3      	lsls	r3, r6
 8009fce:	441d      	add	r5, r3
 8009fd0:	4545      	cmp	r5, r8
 8009fd2:	d3f6      	bcc.n	8009fc2 <floor+0xca>
 8009fd4:	ea25 0507 	bic.w	r5, r5, r7
 8009fd8:	e7b2      	b.n	8009f40 <floor+0x48>
 8009fda:	2500      	movs	r5, #0
 8009fdc:	462c      	mov	r4, r5
 8009fde:	e7af      	b.n	8009f40 <floor+0x48>
 8009fe0:	8800759c 	.word	0x8800759c
 8009fe4:	7e37e43c 	.word	0x7e37e43c
 8009fe8:	bff00000 	.word	0xbff00000
 8009fec:	000fffff 	.word	0x000fffff

08009ff0 <_init>:
 8009ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff2:	bf00      	nop
 8009ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff6:	bc08      	pop	{r3}
 8009ff8:	469e      	mov	lr, r3
 8009ffa:	4770      	bx	lr

08009ffc <_fini>:
 8009ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ffe:	bf00      	nop
 800a000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a002:	bc08      	pop	{r3}
 800a004:	469e      	mov	lr, r3
 800a006:	4770      	bx	lr
