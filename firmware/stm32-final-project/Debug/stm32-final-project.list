
stm32-final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000906c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08009230  08009230  0000a230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009698  08009698  0000b270  2**0
                  CONTENTS
  4 .ARM          00000008  08009698  08009698  0000a698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096a0  080096a0  0000b270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096a0  080096a0  0000a6a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096a4  080096a4  0000a6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000270  20000000  080096a8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  20000270  08009918  0000b270  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  08009918  0000b528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001397b  00000000  00000000  0000b2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d51  00000000  00000000  0001ec1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00021970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c67  00000000  00000000  000229a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c6fd  00000000  00000000  0002360f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158bb  00000000  00000000  0004fd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00108dc3  00000000  00000000  000655c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016e38a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000539c  00000000  00000000  0016e3d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0017376c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000270 	.word	0x20000270
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009214 	.word	0x08009214

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000274 	.word	0x20000274
 80001fc:	08009214 	.word	0x08009214

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <calibrate>:
#include "stm32l4xx_hal.h"

void calibrate(float* gyro_offset){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	@ 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
	float xSum = 0, ySum = 0, zSum = 0;
 8000f70:	f04f 0300 	mov.w	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
 8000f7c:	f04f 0300 	mov.w	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
	int sampleNum = 500;
 8000f82:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000f86:	617b      	str	r3, [r7, #20]
	float gyroVal[3];

	for (int i = 0; i < sampleNum; i++){
 8000f88:	2300      	movs	r3, #0
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	e022      	b.n	8000fd4 <calibrate+0x6c>
		BSP_GYRO_GetXYZ(gyroVal);
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fd32 	bl	80019fc <BSP_GYRO_GetXYZ>

		xSum += gyroVal[0];
 8000f98:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f9c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8000fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		ySum += gyroVal[1];
 8000fa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fac:	ed97 7a08 	vldr	s14, [r7, #32]
 8000fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fb4:	edc7 7a08 	vstr	s15, [r7, #32]
		zSum += gyroVal[2];
 8000fb8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fbc:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc4:	edc7 7a07 	vstr	s15, [r7, #28]

		HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f001 fb43 	bl	8002654 <HAL_Delay>
	for (int i = 0; i < sampleNum; i++){
 8000fce:	69bb      	ldr	r3, [r7, #24]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	61bb      	str	r3, [r7, #24]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbd8      	blt.n	8000f8e <calibrate+0x26>
	}

	gyro_offset[0] = xSum / sampleNum;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fe6:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8000fea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset[1] = ySum / sampleNum;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3304      	adds	r3, #4
 8001002:	edd7 6a08 	vldr	s13, [r7, #32]
 8001006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800100a:	edc3 7a00 	vstr	s15, [r3]
	gyro_offset[2] = zSum / sampleNum;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3308      	adds	r3, #8
 800101c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001024:	edc3 7a00 	vstr	s15, [r3]
}
 8001028:	bf00      	nop
 800102a:	3728      	adds	r7, #40	@ 0x28
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001034:	f5ad 6d92 	sub.w	sp, sp, #1168	@ 0x490
 8001038:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f001 fa97 	bl	800256c <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_ACCELERO_Init();
 800103e:	f000 fc45 	bl	80018cc <BSP_ACCELERO_Init>
  BSP_MAGNETO_Init();
 8001042:	f000 fcf3 	bl	8001a2c <BSP_MAGNETO_Init>
  BSP_GYRO_Init();
 8001046:	f000 fc97 	bl	8001978 <BSP_GYRO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f9b3 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 fa8f 	bl	8001570 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001052:	f000 fa01 	bl	8001458 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001056:	f000 fa3f 	bl	80014d8 <MX_USART1_UART_Init>
  int16_t magnetoVal[3];
  float gyroVal[3];

  float pitch, roll, yaw;

  float gpitch = 0, groll = 0, gyaw = 0;
 800105a:	f04f 0300 	mov.w	r3, #0
 800105e:	f207 4264 	addw	r2, r7, #1124	@ 0x464
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	f207 425c 	addw	r2, r7, #1116	@ 0x45c
 8001076:	6013      	str	r3, [r2, #0]

  char output[1000];

  float dt;
  uint32_t lastTime = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
  uint32_t currentTime;

  int G_So = 70;
 800107e:	2346      	movs	r3, #70	@ 0x46
 8001080:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
  float gyro_offset[3];

  calibrate(gyro_offset);
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff6d 	bl	8000f68 <calibrate>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_ACCELERO_AccGetXYZ(acceleroVal);
 800108e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001092:	4618      	mov	r0, r3
 8001094:	f000 fc58 	bl	8001948 <BSP_ACCELERO_AccGetXYZ>
	  BSP_MAGNETO_GetXYZ(magnetoVal);
 8001098:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf1 	bl	8001a84 <BSP_MAGNETO_GetXYZ>
	  BSP_GYRO_GetXYZ(gyroVal);
 80010a2:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fca8 	bl	80019fc <BSP_GYRO_GetXYZ>

	  currentTime = HAL_GetTick();
 80010ac:	f001 fac6 	bl	800263c <HAL_GetTick>
 80010b0:	f8c7 0450 	str.w	r0, [r7, #1104]	@ 0x450
	  dt = (float)(currentTime - lastTime) / 1000.0f;
 80010b4:	f8d7 2450 	ldr.w	r2, [r7, #1104]	@ 0x450
 80010b8:	f8d7 3458 	ldr.w	r3, [r7, #1112]	@ 0x458
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	ee07 3a90 	vmov	s15, r3
 80010c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010c6:	eddf 6ab8 	vldr	s13, [pc, #736]	@ 80013a8 <main+0x378>
 80010ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ce:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	  lastTime = currentTime;
 80010d6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	@ 0x450
 80010da:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458

	  float ax = (float)acceleroVal[0];
 80010de:	f9b7 3418 	ldrsh.w	r3, [r7, #1048]	@ 0x418
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ea:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80010ee:	edc3 7a00 	vstr	s15, [r3]
	  float ay = (float)acceleroVal[1];
 80010f2:	f9b7 341a 	ldrsh.w	r3, [r7, #1050]	@ 0x41a
 80010f6:	ee07 3a90 	vmov	s15, r3
 80010fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010fe:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8001102:	edc3 7a00 	vstr	s15, [r3]
	  float az = (float)acceleroVal[2];
 8001106:	f9b7 341c 	ldrsh.w	r3, [r7, #1052]	@ 0x41c
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001112:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8001116:	edc3 7a00 	vstr	s15, [r3]

	  float gx = ((float)gyroVal[0] - gyro_offset[0]) / G_So;
 800111a:	f207 4304 	addw	r3, r7, #1028	@ 0x404
 800111e:	ed93 7a00 	vldr	s14, [r3]
 8001122:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001126:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001132:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800113e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001142:	f207 433c 	addw	r3, r7, #1084	@ 0x43c
 8001146:	edc3 7a00 	vstr	s15, [r3]
	  float gy = ((float)gyroVal[1] - gyro_offset[1]) / G_So;
 800114a:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 800114e:	ed93 7a00 	vldr	s14, [r3]
 8001152:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001156:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 800115a:	edd3 7a01 	vldr	s15, [r3, #4]
 800115e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001162:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001166:	ee07 3a90 	vmov	s15, r3
 800116a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800116e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001172:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001176:	edc3 7a00 	vstr	s15, [r3]
	  float gz = ((float)gyroVal[2] - gyro_offset[2]) / G_So;
 800117a:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 800117e:	ed93 7a00 	vldr	s14, [r3]
 8001182:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8001186:	f5a3 638b 	sub.w	r3, r3, #1112	@ 0x458
 800118a:	edd3 7a02 	vldr	s15, [r3, #8]
 800118e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001192:	f8d7 3454 	ldr.w	r3, [r7, #1108]	@ 0x454
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800119e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a2:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 80011a6:	edc3 7a00 	vstr	s15, [r3]

	  float pitch_denom = sqrtf(ay * ay + az * az);
 80011aa:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80011b6:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80011ba:	edd3 7a00 	vldr	s15, [r3]
 80011be:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ca:	f007 fe85 	bl	8008ed8 <sqrtf>
 80011ce:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80011d2:	ed83 0a00 	vstr	s0, [r3]
	  float roll_denom = sqrtf(ax * ax + az * az);
 80011d6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80011e2:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 80011e6:	edd3 7a00 	vldr	s15, [r3]
 80011ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011f2:	eeb0 0a67 	vmov.f32	s0, s15
 80011f6:	f007 fe6f 	bl	8008ed8 <sqrtf>
 80011fa:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 80011fe:	ed83 0a00 	vstr	s0, [r3]

	  pitch = atan2f(-ax, pitch_denom) * (180.0f / M_PI);
 8001202:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	eef1 7a67 	vneg.f32	s15, s15
 800120e:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8001212:	edd3 0a00 	vldr	s1, [r3]
 8001216:	eeb0 0a67 	vmov.f32	s0, s15
 800121a:	f007 fe5b 	bl	8008ed4 <atan2f>
 800121e:	ee10 3a10 	vmov	r3, s0
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff f9a8 	bl	8000578 <__aeabi_f2d>
 8001228:	a35d      	add	r3, pc, #372	@ (adr r3, 80013a0 <main+0x370>)
 800122a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122e:	f7ff f9fb 	bl	8000628 <__aeabi_dmul>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fccd 	bl	8000bd8 <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	f507 6285 	add.w	r2, r7, #1064	@ 0x428
 8001244:	6013      	str	r3, [r2, #0]
	  roll = atan2f(ay, roll_denom) * (180.0f / M_PI);
 8001246:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 800124a:	edd3 0a00 	vldr	s1, [r3]
 800124e:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8001252:	ed93 0a00 	vldr	s0, [r3]
 8001256:	f007 fe3d 	bl	8008ed4 <atan2f>
 800125a:	ee10 3a10 	vmov	r3, s0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f98a 	bl	8000578 <__aeabi_f2d>
 8001264:	a34e      	add	r3, pc, #312	@ (adr r3, 80013a0 <main+0x370>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9dd 	bl	8000628 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fcaf 	bl	8000bd8 <__aeabi_d2f>
 800127a:	4603      	mov	r3, r0
 800127c:	f207 4224 	addw	r2, r7, #1060	@ 0x424
 8001280:	6013      	str	r3, [r2, #0]

	  gpitch += gy * dt;
 8001282:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 800128e:	edd3 7a00 	vldr	s15, [r3]
 8001292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001296:	f207 4364 	addw	r3, r7, #1124	@ 0x464
 800129a:	ed93 7a00 	vldr	s14, [r3]
 800129e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012a2:	f207 4364 	addw	r3, r7, #1124	@ 0x464
 80012a6:	edc3 7a00 	vstr	s15, [r3]
	  groll  += gx * dt;
 80012aa:	f207 433c 	addw	r3, r7, #1084	@ 0x43c
 80012ae:	ed93 7a00 	vldr	s14, [r3]
 80012b2:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 80012b6:	edd3 7a00 	vldr	s15, [r3]
 80012ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012be:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80012c2:	ed93 7a00 	vldr	s14, [r3]
 80012c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ca:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80012ce:	edc3 7a00 	vstr	s15, [r3]
	  gyaw   += gz * dt;
 80012d2:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 80012d6:	ed93 7a00 	vldr	s14, [r3]
 80012da:	f207 434c 	addw	r3, r7, #1100	@ 0x44c
 80012de:	edd3 7a00 	vldr	s15, [r3]
 80012e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e6:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 80012ea:	ed93 7a00 	vldr	s14, [r3]
 80012ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f2:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 80012f6:	edc3 7a00 	vstr	s15, [r3]

	  sprintf(output, "APitch: %.2f, ARoll: %.2f, AYaw: %.2f\r\nGPitch: %.2f, GRoll: %.2f, GYaw: %.2f\r\n",
 80012fa:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	f7ff f93a 	bl	8000578 <__aeabi_f2d>
 8001304:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001308:	f207 4324 	addw	r3, r7, #1060	@ 0x424
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	f7ff f933 	bl	8000578 <__aeabi_f2d>
 8001312:	4604      	mov	r4, r0
 8001314:	460d      	mov	r5, r1
 8001316:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800131a:	6818      	ldr	r0, [r3, #0]
 800131c:	f7ff f92c 	bl	8000578 <__aeabi_f2d>
 8001320:	4680      	mov	r8, r0
 8001322:	4689      	mov	r9, r1
 8001324:	f207 4364 	addw	r3, r7, #1124	@ 0x464
 8001328:	6818      	ldr	r0, [r3, #0]
 800132a:	f7ff f925 	bl	8000578 <__aeabi_f2d>
 800132e:	4682      	mov	sl, r0
 8001330:	468b      	mov	fp, r1
 8001332:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 8001336:	6818      	ldr	r0, [r3, #0]
 8001338:	f7ff f91e 	bl	8000578 <__aeabi_f2d>
 800133c:	e9c7 0100 	strd	r0, r1, [r7]
 8001340:	f207 435c 	addw	r3, r7, #1116	@ 0x45c
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	f7ff f917 	bl	8000578 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	f107 001c 	add.w	r0, r7, #28
 8001352:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001356:	ed97 7b00 	vldr	d7, [r7]
 800135a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800135e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001362:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001366:	e9cd 4500 	strd	r4, r5, [sp]
 800136a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800136e:	490f      	ldr	r1, [pc, #60]	@ (80013ac <main+0x37c>)
 8001370:	f005 fc82 	bl	8006c78 <siprintf>
			  pitch, roll, yaw, gpitch, groll, gyaw);

	  int16_t len = strlen(output);
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	4618      	mov	r0, r3
 800137a:	f7fe ff91 	bl	80002a0 <strlen>
 800137e:	4603      	mov	r3, r0
 8001380:	f8a7 341e 	strh.w	r3, [r7, #1054]	@ 0x41e
	  HAL_UART_Transmit(&huart1, (uint8_t*)output, len, 10000);
 8001384:	f8b7 241e 	ldrh.w	r2, [r7, #1054]	@ 0x41e
 8001388:	f107 011c 	add.w	r1, r7, #28
 800138c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001390:	4807      	ldr	r0, [pc, #28]	@ (80013b0 <main+0x380>)
 8001392:	f004 f8ab 	bl	80054ec <HAL_UART_Transmit>

	  HAL_Delay(100);
 8001396:	2064      	movs	r0, #100	@ 0x64
 8001398:	f001 f95c 	bl	8002654 <HAL_Delay>
  {
 800139c:	bf00      	nop
 800139e:	e676      	b.n	800108e <main+0x5e>
 80013a0:	1a63c1f8 	.word	0x1a63c1f8
 80013a4:	404ca5dc 	.word	0x404ca5dc
 80013a8:	447a0000 	.word	0x447a0000
 80013ac:	08009230 	.word	0x08009230
 80013b0:	200002e0 	.word	0x200002e0

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b096      	sub	sp, #88	@ 0x58
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2244      	movs	r2, #68	@ 0x44
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f005 fcbb 	bl	8006d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80013d6:	2000      	movs	r0, #0
 80013d8:	f002 fba4 	bl	8003b24 <HAL_PWREx_ControlVoltageScaling>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80013e2:	f000 f91d 	bl	8001620 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013e6:	2310      	movs	r3, #16
 80013e8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013f2:	2360      	movs	r3, #96	@ 0x60
 80013f4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f6:	2302      	movs	r3, #2
 80013f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013fa:	2301      	movs	r3, #1
 80013fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001402:	233c      	movs	r3, #60	@ 0x3c
 8001404:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001406:	2302      	movs	r3, #2
 8001408:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800140a:	2302      	movs	r3, #2
 800140c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fc28 	bl	8003c6c <HAL_RCC_OscConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001422:	f000 f8fd 	bl	8001620 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	230f      	movs	r3, #15
 8001428:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	2303      	movs	r3, #3
 800142c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	2105      	movs	r1, #5
 800143e:	4618      	mov	r0, r3
 8001440:	f003 f82e 	bl	80044a0 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800144a:	f000 f8e9 	bl	8001620 <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3758      	adds	r7, #88	@ 0x58
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800145c:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_I2C2_Init+0x74>)
 800145e:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <MX_I2C2_Init+0x78>)
 8001460:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001464:	4a1b      	ldr	r2, [pc, #108]	@ (80014d4 <MX_I2C2_Init+0x7c>)
 8001466:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001468:	4b18      	ldr	r3, [pc, #96]	@ (80014cc <MX_I2C2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800146e:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001470:	2201      	movs	r2, #1
 8001472:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001474:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001476:	2200      	movs	r2, #0
 8001478:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_I2C2_Init+0x74>)
 800147c:	2200      	movs	r2, #0
 800147e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001486:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001488:	2200      	movs	r2, #0
 800148a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <MX_I2C2_Init+0x74>)
 800148e:	2200      	movs	r2, #0
 8001490:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001492:	480e      	ldr	r0, [pc, #56]	@ (80014cc <MX_I2C2_Init+0x74>)
 8001494:	f001 fcd3 	bl	8002e3e <HAL_I2C_Init>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800149e:	f000 f8bf 	bl	8001620 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a2:	2100      	movs	r1, #0
 80014a4:	4809      	ldr	r0, [pc, #36]	@ (80014cc <MX_I2C2_Init+0x74>)
 80014a6:	f002 fa85 	bl	80039b4 <HAL_I2CEx_ConfigAnalogFilter>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80014b0:	f000 f8b6 	bl	8001620 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014b4:	2100      	movs	r1, #0
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_I2C2_Init+0x74>)
 80014b8:	f002 fac7 	bl	8003a4a <HAL_I2CEx_ConfigDigitalFilter>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014c2:	f000 f8ad 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	2000028c 	.word	0x2000028c
 80014d0:	40005800 	.word	0x40005800
 80014d4:	30a175ab 	.word	0x30a175ab

080014d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014de:	4a23      	ldr	r2, [pc, #140]	@ (800156c <MX_USART1_UART_Init+0x94>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150e:	4b16      	ldr	r3, [pc, #88]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151a:	4b13      	ldr	r3, [pc, #76]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 800151c:	2200      	movs	r2, #0
 800151e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001520:	4811      	ldr	r0, [pc, #68]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001522:	f003 ff93 	bl	800544c <HAL_UART_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800152c:	f000 f878 	bl	8001620 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	480d      	ldr	r0, [pc, #52]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001534:	f004 fdbc 	bl	80060b0 <HAL_UARTEx_SetTxFifoThreshold>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800153e:	f000 f86f 	bl	8001620 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001542:	2100      	movs	r1, #0
 8001544:	4808      	ldr	r0, [pc, #32]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001546:	f004 fdf1 	bl	800612c <HAL_UARTEx_SetRxFifoThreshold>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001550:	f000 f866 	bl	8001620 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001554:	4804      	ldr	r0, [pc, #16]	@ (8001568 <MX_USART1_UART_Init+0x90>)
 8001556:	f004 fd72 	bl	800603e <HAL_UARTEx_DisableFifoMode>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001560:	f000 f85e 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	200002e0 	.word	0x200002e0
 800156c:	40013800 	.word	0x40013800

08001570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	4b23      	ldr	r3, [pc, #140]	@ (8001614 <MX_GPIO_Init+0xa4>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	4a22      	ldr	r2, [pc, #136]	@ (8001614 <MX_GPIO_Init+0xa4>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001592:	4b20      	ldr	r3, [pc, #128]	@ (8001614 <MX_GPIO_Init+0xa4>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800159e:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <MX_GPIO_Init+0xa4>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001614 <MX_GPIO_Init+0xa4>)
 80015a4:	f043 0302 	orr.w	r3, r3, #2
 80015a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <MX_GPIO_Init+0xa4>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015bc:	4816      	ldr	r0, [pc, #88]	@ (8001618 <MX_GPIO_Init+0xa8>)
 80015be:	f001 fc03 	bl	8002dc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	4810      	ldr	r0, [pc, #64]	@ (800161c <MX_GPIO_Init+0xac>)
 80015da:	f001 f971 	bl	80028c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80015de:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f0:	f107 030c 	add.w	r3, r7, #12
 80015f4:	4619      	mov	r1, r3
 80015f6:	4808      	ldr	r0, [pc, #32]	@ (8001618 <MX_GPIO_Init+0xa8>)
 80015f8:	f001 f962 	bl	80028c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2028      	movs	r0, #40	@ 0x28
 8001602:	f001 f926 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001606:	2028      	movs	r0, #40	@ 0x28
 8001608:	f001 f93f 	bl	800288a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800160c:	bf00      	nop
 800160e:	3720      	adds	r7, #32
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40021000 	.word	0x40021000
 8001618:	48000400 	.word	0x48000400
 800161c:	48000800 	.word	0x48000800

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001624:	b672      	cpsid	i
}
 8001626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <Error_Handler+0x8>

0800162c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	@ 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001634:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 8001636:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001638:	4a26      	ldr	r2, [pc, #152]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 800163a:	f043 0302 	orr.w	r3, r3, #2
 800163e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001640:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 8001642:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800164c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001650:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001652:	2312      	movs	r3, #18
 8001654:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001656:	2301      	movs	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800165e:	2304      	movs	r3, #4
 8001660:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	481b      	ldr	r0, [pc, #108]	@ (80016d8 <I2Cx_MspInit+0xac>)
 800166a:	f001 f929 	bl	80028c0 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800166e:	f107 0314 	add.w	r3, r7, #20
 8001672:	4619      	mov	r1, r3
 8001674:	4818      	ldr	r0, [pc, #96]	@ (80016d8 <I2Cx_MspInit+0xac>)
 8001676:	f001 f923 	bl	80028c0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167e:	4a15      	ldr	r2, [pc, #84]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 8001680:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001684:	6593      	str	r3, [r2, #88]	@ 0x58
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800168a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 8001694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001696:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 8001698:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800169c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 80016a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a2:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <I2Cx_MspInit+0xa8>)
 80016a4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80016a8:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	210f      	movs	r1, #15
 80016ae:	2021      	movs	r0, #33	@ 0x21
 80016b0:	f001 f8cf 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80016b4:	2021      	movs	r0, #33	@ 0x21
 80016b6:	f001 f8e8 	bl	800288a <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	210f      	movs	r1, #15
 80016be:	2022      	movs	r0, #34	@ 0x22
 80016c0:	f001 f8c7 	bl	8002852 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80016c4:	2022      	movs	r0, #34	@ 0x22
 80016c6:	f001 f8e0 	bl	800288a <HAL_NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	@ 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40021000 	.word	0x40021000
 80016d8:	48000400 	.word	0x48000400

080016dc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4a12      	ldr	r2, [pc, #72]	@ (8001730 <I2Cx_Init+0x54>)
 80016e8:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a11      	ldr	r2, [pc, #68]	@ (8001734 <I2Cx_Init+0x58>)
 80016ee:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ff89 	bl	800162c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f001 fb8f 	bl	8002e3e <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001720:	2100      	movs	r1, #0
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f002 f946 	bl	80039b4 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40005800 	.word	0x40005800
 8001734:	00702681 	.word	0x00702681

08001738 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	@ 0x28
 800173c:	af04      	add	r7, sp, #16
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4603      	mov	r3, r0
 8001748:	72fb      	strb	r3, [r7, #11]
 800174a:	460b      	mov	r3, r1
 800174c:	813b      	strh	r3, [r7, #8]
 800174e:	4613      	mov	r3, r2
 8001750:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001756:	7afb      	ldrb	r3, [r7, #11]
 8001758:	b299      	uxth	r1, r3
 800175a:	88f8      	ldrh	r0, [r7, #6]
 800175c:	893a      	ldrh	r2, [r7, #8]
 800175e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001766:	9301      	str	r3, [sp, #4]
 8001768:	6a3b      	ldr	r3, [r7, #32]
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	4603      	mov	r3, r0
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f001 fd44 	bl	80031fc <HAL_I2C_Mem_Read>
 8001774:	4603      	mov	r3, r0
 8001776:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d004      	beq.n	8001788 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800177e:	7afb      	ldrb	r3, [r7, #11]
 8001780:	4619      	mov	r1, r3
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f832 	bl	80017ec <I2Cx_Error>
  }
  return status;
 8001788:	7dfb      	ldrb	r3, [r7, #23]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b08a      	sub	sp, #40	@ 0x28
 8001796:	af04      	add	r7, sp, #16
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	4608      	mov	r0, r1
 800179c:	4611      	mov	r1, r2
 800179e:	461a      	mov	r2, r3
 80017a0:	4603      	mov	r3, r0
 80017a2:	72fb      	strb	r3, [r7, #11]
 80017a4:	460b      	mov	r3, r1
 80017a6:	813b      	strh	r3, [r7, #8]
 80017a8:	4613      	mov	r3, r2
 80017aa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80017b0:	7afb      	ldrb	r3, [r7, #11]
 80017b2:	b299      	uxth	r1, r3
 80017b4:	88f8      	ldrh	r0, [r7, #6]
 80017b6:	893a      	ldrh	r2, [r7, #8]
 80017b8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017bc:	9302      	str	r3, [sp, #8]
 80017be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80017c0:	9301      	str	r3, [sp, #4]
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	4603      	mov	r3, r0
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f001 fc03 	bl	8002fd4 <HAL_I2C_Mem_Write>
 80017ce:	4603      	mov	r3, r0
 80017d0:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80017d2:	7dfb      	ldrb	r3, [r7, #23]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80017d8:	7afb      	ldrb	r3, [r7, #11]
 80017da:	4619      	mov	r1, r3
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f000 f805 	bl	80017ec <I2Cx_Error>
  }
  return status;
 80017e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f001 fbbb 	bl	8002f74 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff ff6c 	bl	80016dc <I2Cx_Init>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001810:	4802      	ldr	r0, [pc, #8]	@ (800181c <SENSOR_IO_Init+0x10>)
 8001812:	f7ff ff63 	bl	80016dc <I2Cx_Init>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000374 	.word	0x20000374

08001820 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af02      	add	r7, sp, #8
 8001826:	4603      	mov	r3, r0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	460b      	mov	r3, r1
 800182c:	71bb      	strb	r3, [r7, #6]
 800182e:	4613      	mov	r3, r2
 8001830:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001832:	79bb      	ldrb	r3, [r7, #6]
 8001834:	b29a      	uxth	r2, r3
 8001836:	79f9      	ldrb	r1, [r7, #7]
 8001838:	2301      	movs	r3, #1
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	1d7b      	adds	r3, r7, #5
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2301      	movs	r3, #1
 8001842:	4803      	ldr	r0, [pc, #12]	@ (8001850 <SENSOR_IO_Write+0x30>)
 8001844:	f7ff ffa5 	bl	8001792 <I2Cx_WriteMultiple>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000374 	.word	0x20000374

08001854 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af02      	add	r7, sp, #8
 800185a:	4603      	mov	r3, r0
 800185c:	460a      	mov	r2, r1
 800185e:	71fb      	strb	r3, [r7, #7]
 8001860:	4613      	mov	r3, r2
 8001862:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	b29a      	uxth	r2, r3
 800186c:	79f9      	ldrb	r1, [r7, #7]
 800186e:	2301      	movs	r3, #1
 8001870:	9301      	str	r3, [sp, #4]
 8001872:	f107 030f 	add.w	r3, r7, #15
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	2301      	movs	r3, #1
 800187a:	4804      	ldr	r0, [pc, #16]	@ (800188c <SENSOR_IO_Read+0x38>)
 800187c:	f7ff ff5c 	bl	8001738 <I2Cx_ReadMultiple>

  return read_value;
 8001880:	7bfb      	ldrb	r3, [r7, #15]
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000374 	.word	0x20000374

08001890 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af02      	add	r7, sp, #8
 8001896:	603a      	str	r2, [r7, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
 800189e:	460b      	mov	r3, r1
 80018a0:	71bb      	strb	r3, [r7, #6]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	79f9      	ldrb	r1, [r7, #7]
 80018ac:	88bb      	ldrh	r3, [r7, #4]
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2301      	movs	r3, #1
 80018b6:	4804      	ldr	r0, [pc, #16]	@ (80018c8 <SENSOR_IO_ReadMultiple+0x38>)
 80018b8:	f7ff ff3e 	bl	8001738 <I2Cx_ReadMultiple>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000374 	.word	0x20000374

080018cc <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80018d6:	2300      	movs	r3, #0
 80018d8:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80018da:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <BSP_ACCELERO_Init+0x74>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4798      	blx	r3
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b6a      	cmp	r3, #106	@ 0x6a
 80018e4:	d002      	beq.n	80018ec <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
 80018ea:	e024      	b.n	8001936 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80018ec:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <BSP_ACCELERO_Init+0x78>)
 80018ee:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <BSP_ACCELERO_Init+0x74>)
 80018f0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80018f2:	2330      	movs	r3, #48	@ 0x30
 80018f4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80018fa:	2300      	movs	r3, #0
 80018fc:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80018fe:	2340      	movs	r3, #64	@ 0x40
 8001900:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800190a:	797a      	ldrb	r2, [r7, #5]
 800190c:	7abb      	ldrb	r3, [r7, #10]
 800190e:	4313      	orrs	r3, r2
 8001910:	b2db      	uxtb	r3, r3
 8001912:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001914:	7a3b      	ldrb	r3, [r7, #8]
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	b2db      	uxtb	r3, r3
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b21a      	sxth	r2, r3
 8001920:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	b21b      	sxth	r3, r3
 8001928:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <BSP_ACCELERO_Init+0x78>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	89ba      	ldrh	r2, [r7, #12]
 8001932:	4610      	mov	r0, r2
 8001934:	4798      	blx	r3
  }  

  return ret;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000038 	.word	0x20000038
 8001944:	200003c8 	.word	0x200003c8

08001948 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
    }
  }
}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	200003c8 	.word	0x200003c8

08001978 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001982:	2300      	movs	r3, #0
 8001984:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001986:	4b1b      	ldr	r3, [pc, #108]	@ (80019f4 <BSP_GYRO_Init+0x7c>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4798      	blx	r3
 800198c:	4603      	mov	r3, r0
 800198e:	2b6a      	cmp	r3, #106	@ 0x6a
 8001990:	d002      	beq.n	8001998 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	73fb      	strb	r3, [r7, #15]
 8001996:	e028      	b.n	80019ea <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001998:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <BSP_GYRO_Init+0x80>)
 800199a:	4a16      	ldr	r2, [pc, #88]	@ (80019f4 <BSP_GYRO_Init+0x7c>)
 800199c:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 800199e:	2300      	movs	r3, #0
 80019a0:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80019a2:	2330      	movs	r3, #48	@ 0x30
 80019a4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80019aa:	2300      	movs	r3, #0
 80019ac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80019ae:	2340      	movs	r3, #64	@ 0x40
 80019b0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80019b6:	230c      	movs	r3, #12
 80019b8:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80019ba:	7aba      	ldrb	r2, [r7, #10]
 80019bc:	797b      	ldrb	r3, [r7, #5]
 80019be:	4313      	orrs	r3, r2
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80019c4:	7a3b      	ldrb	r3, [r7, #8]
 80019c6:	f043 0304 	orr.w	r3, r3, #4
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	021b      	lsls	r3, r3, #8
 80019ce:	b21a      	sxth	r2, r3
 80019d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	b21b      	sxth	r3, r3
 80019d8:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <BSP_GYRO_Init+0x80>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	89ba      	ldrh	r2, [r7, #12]
 80019e2:	4610      	mov	r0, r2
 80019e4:	4798      	blx	r3
    
    ret = GYRO_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	2000006c 	.word	0x2000006c
 80019f8:	200003cc 	.word	0x200003cc

080019fc <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8001a04:	4b08      	ldr	r3, [pc, #32]	@ (8001a28 <BSP_GYRO_GetXYZ+0x2c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d009      	beq.n	8001a20 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8001a0c:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <BSP_GYRO_GetXYZ+0x2c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d004      	beq.n	8001a20 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8001a16:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <BSP_GYRO_GetXYZ+0x2c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
    }
  }
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	200003cc 	.word	0x200003cc

08001a2c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001a36:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <BSP_MAGNETO_Init+0x50>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4798      	blx	r3
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b3d      	cmp	r3, #61	@ 0x3d
 8001a40:	d002      	beq.n	8001a48 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	71fb      	strb	r3, [r7, #7]
 8001a46:	e013      	b.n	8001a70 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8001a48:	4b0d      	ldr	r3, [pc, #52]	@ (8001a80 <BSP_MAGNETO_Init+0x54>)
 8001a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001a7c <BSP_MAGNETO_Init+0x50>)
 8001a4c:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001a4e:	2358      	movs	r3, #88	@ 0x58
 8001a50:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001a5a:	2308      	movs	r3, #8
 8001a5c:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8001a5e:	2340      	movs	r3, #64	@ 0x40
 8001a60:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001a62:	4b07      	ldr	r3, [pc, #28]	@ (8001a80 <BSP_MAGNETO_Init+0x54>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	463a      	mov	r2, r7
 8001a6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a6e:	4798      	blx	r3
  } 

  return ret;  
 8001a70:	79fb      	ldrb	r3, [r7, #7]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000004 	.word	0x20000004
 8001a80:	200003d0 	.word	0x200003d0

08001a84 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8001a8c:	4b08      	ldr	r3, [pc, #32]	@ (8001ab0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8001a94:	4b06      	ldr	r3, [pc, #24]	@ (8001ab0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d004      	beq.n	8001aa8 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <BSP_MAGNETO_GetXYZ+0x2c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
    }
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	200003d0 	.word	0x200003d0

08001ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aba:	4b0f      	ldr	r3, [pc, #60]	@ (8001af8 <HAL_MspInit+0x44>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abe:	4a0e      	ldr	r2, [pc, #56]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ac8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	607b      	str	r3, [r7, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad2:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad6:	4a08      	ldr	r2, [pc, #32]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001adc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_MspInit+0x44>)
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	603b      	str	r3, [r7, #0]
 8001ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000

08001afc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b0ae      	sub	sp, #184	@ 0xb8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	2294      	movs	r2, #148	@ 0x94
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f005 f90e 	bl	8006d3e <memset>
  if(hi2c->Instance==I2C2)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a21      	ldr	r2, [pc, #132]	@ (8001bac <HAL_I2C_MspInit+0xb0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d13b      	bne.n	8001ba4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b2c:	2380      	movs	r3, #128	@ 0x80
 8001b2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b30:	2300      	movs	r3, #0
 8001b32:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f002 ff6f 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b44:	f7ff fd6c 	bl	8001620 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	4b19      	ldr	r3, [pc, #100]	@ (8001bb0 <HAL_I2C_MspInit+0xb4>)
 8001b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4c:	4a18      	ldr	r2, [pc, #96]	@ (8001bb0 <HAL_I2C_MspInit+0xb4>)
 8001b4e:	f043 0302 	orr.w	r3, r3, #2
 8001b52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b54:	4b16      	ldr	r3, [pc, #88]	@ (8001bb0 <HAL_I2C_MspInit+0xb4>)
 8001b56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b60:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001b64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b68:	2312      	movs	r3, #18
 8001b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b74:	2303      	movs	r3, #3
 8001b76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b80:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001b84:	4619      	mov	r1, r3
 8001b86:	480b      	ldr	r0, [pc, #44]	@ (8001bb4 <HAL_I2C_MspInit+0xb8>)
 8001b88:	f000 fe9a 	bl	80028c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b8c:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <HAL_I2C_MspInit+0xb4>)
 8001b8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b90:	4a07      	ldr	r2, [pc, #28]	@ (8001bb0 <HAL_I2C_MspInit+0xb4>)
 8001b92:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b98:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_I2C_MspInit+0xb4>)
 8001b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001ba4:	bf00      	nop
 8001ba6:	37b8      	adds	r7, #184	@ 0xb8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40005800 	.word	0x40005800
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	48000400 	.word	0x48000400

08001bb8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf4 <HAL_I2C_MspDeInit+0x3c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10f      	bne.n	8001bea <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001bca:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <HAL_I2C_MspDeInit+0x40>)
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_I2C_MspDeInit+0x40>)
 8001bd0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001bd4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001bd6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001bda:	4808      	ldr	r0, [pc, #32]	@ (8001bfc <HAL_I2C_MspDeInit+0x44>)
 8001bdc:	f001 f802 	bl	8002be4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001be0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <HAL_I2C_MspDeInit+0x44>)
 8001be6:	f000 fffd 	bl	8002be4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40005800 	.word	0x40005800
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	48000400 	.word	0x48000400

08001c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b0ae      	sub	sp, #184	@ 0xb8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	2294      	movs	r2, #148	@ 0x94
 8001c1e:	2100      	movs	r1, #0
 8001c20:	4618      	mov	r0, r3
 8001c22:	f005 f88c 	bl	8006d3e <memset>
  if(huart->Instance==USART1)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a21      	ldr	r2, [pc, #132]	@ (8001cb0 <HAL_UART_MspInit+0xb0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d13a      	bne.n	8001ca6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c30:	2301      	movs	r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c34:	2300      	movs	r3, #0
 8001c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c38:	f107 0310 	add.w	r3, r7, #16
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f002 feed 	bl	8004a1c <HAL_RCCEx_PeriphCLKConfig>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c48:	f7ff fcea 	bl	8001620 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4c:	4b19      	ldr	r3, [pc, #100]	@ (8001cb4 <HAL_UART_MspInit+0xb4>)
 8001c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c50:	4a18      	ldr	r2, [pc, #96]	@ (8001cb4 <HAL_UART_MspInit+0xb4>)
 8001c52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c56:	6613      	str	r3, [r2, #96]	@ 0x60
 8001c58:	4b16      	ldr	r3, [pc, #88]	@ (8001cb4 <HAL_UART_MspInit+0xb4>)
 8001c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <HAL_UART_MspInit+0xb4>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c68:	4a12      	ldr	r2, [pc, #72]	@ (8001cb4 <HAL_UART_MspInit+0xb4>)
 8001c6a:	f043 0302 	orr.w	r3, r3, #2
 8001c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c70:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <HAL_UART_MspInit+0xb4>)
 8001c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c7c:	23c0      	movs	r3, #192	@ 0xc0
 8001c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c94:	2307      	movs	r3, #7
 8001c96:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4805      	ldr	r0, [pc, #20]	@ (8001cb8 <HAL_UART_MspInit+0xb8>)
 8001ca2:	f000 fe0d 	bl	80028c0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ca6:	bf00      	nop
 8001ca8:	37b8      	adds	r7, #184	@ 0xb8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40013800 	.word	0x40013800
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48000400 	.word	0x48000400

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cc0:	bf00      	nop
 8001cc2:	e7fd      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc8:	bf00      	nop
 8001cca:	e7fd      	b.n	8001cc8 <HardFault_Handler+0x4>

08001ccc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd0:	bf00      	nop
 8001cd2:	e7fd      	b.n	8001cd0 <MemManage_Handler+0x4>

08001cd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd8:	bf00      	nop
 8001cda:	e7fd      	b.n	8001cd8 <BusFault_Handler+0x4>

08001cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce0:	bf00      	nop
 8001ce2:	e7fd      	b.n	8001ce0 <UsageFault_Handler+0x4>

08001ce4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d12:	f000 fc7f 	bl	8002614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d1e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001d22:	f001 f869 	bl	8002df8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	af00      	add	r7, sp, #0
  return 1;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_kill>:

int _kill(int pid, int sig)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d44:	f005 f84e 	bl	8006de4 <__errno>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2216      	movs	r2, #22
 8001d4c:	601a      	str	r2, [r3, #0]
  return -1;
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_exit>:

void _exit (int status)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d62:	f04f 31ff 	mov.w	r1, #4294967295
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff ffe7 	bl	8001d3a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <_exit+0x12>

08001d70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e00a      	b.n	8001d98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d82:	f3af 8000 	nop.w
 8001d86:	4601      	mov	r1, r0
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	60ba      	str	r2, [r7, #8]
 8001d8e:	b2ca      	uxtb	r2, r1
 8001d90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697a      	ldr	r2, [r7, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dbf0      	blt.n	8001d82 <_read+0x12>
  }

  return len;
 8001da0:	687b      	ldr	r3, [r7, #4]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b086      	sub	sp, #24
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	e009      	b.n	8001dd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	60ba      	str	r2, [r7, #8]
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	dbf1      	blt.n	8001dbc <_write+0x12>
  }
  return len;
 8001dd8:	687b      	ldr	r3, [r7, #4]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <_close>:

int _close(int file)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <_isatty>:

int _isatty(int file)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e22:	2301      	movs	r3, #1
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e54:	4a14      	ldr	r2, [pc, #80]	@ (8001ea8 <_sbrk+0x5c>)
 8001e56:	4b15      	ldr	r3, [pc, #84]	@ (8001eac <_sbrk+0x60>)
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e60:	4b13      	ldr	r3, [pc, #76]	@ (8001eb0 <_sbrk+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d102      	bne.n	8001e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e68:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <_sbrk+0x64>)
 8001e6a:	4a12      	ldr	r2, [pc, #72]	@ (8001eb4 <_sbrk+0x68>)
 8001e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e6e:	4b10      	ldr	r3, [pc, #64]	@ (8001eb0 <_sbrk+0x64>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d207      	bcs.n	8001e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e7c:	f004 ffb2 	bl	8006de4 <__errno>
 8001e80:	4603      	mov	r3, r0
 8001e82:	220c      	movs	r2, #12
 8001e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8a:	e009      	b.n	8001ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	@ (8001eb0 <_sbrk+0x64>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e92:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <_sbrk+0x64>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <_sbrk+0x64>)
 8001e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3718      	adds	r7, #24
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	200a0000 	.word	0x200a0000
 8001eac:	00000400 	.word	0x00000400
 8001eb0:	200003d4 	.word	0x200003d4
 8001eb4:	20000528 	.word	0x20000528

08001eb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <SystemInit+0x20>)
 8001ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ec2:	4a05      	ldr	r2, [pc, #20]	@ (8001ed8 <SystemInit+0x20>)
 8001ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ee0:	f7ff ffea 	bl	8001eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee4:	480c      	ldr	r0, [pc, #48]	@ (8001f18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ee6:	490d      	ldr	r1, [pc, #52]	@ (8001f1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <LoopForever+0xe>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001efc:	4c0a      	ldr	r4, [pc, #40]	@ (8001f28 <LoopForever+0x16>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f004 ff71 	bl	8006df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f0e:	f7ff f88f 	bl	8001030 <main>

08001f12 <LoopForever>:

LoopForever:
    b LoopForever
 8001f12:	e7fe      	b.n	8001f12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f14:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f1c:	20000270 	.word	0x20000270
  ldr r2, =_sidata
 8001f20:	080096a8 	.word	0x080096a8
  ldr r2, =_sbss
 8001f24:	20000270 	.word	0x20000270
  ldr r4, =_ebss
 8001f28:	20000528 	.word	0x20000528

08001f2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC1_IRQHandler>

08001f2e <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	463b      	mov	r3, r7
 8001f36:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001f3a:	783b      	ldrb	r3, [r7, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	2120      	movs	r1, #32
 8001f40:	203c      	movs	r0, #60	@ 0x3c
 8001f42:	f7ff fc6d 	bl	8001820 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001f46:	787b      	ldrb	r3, [r7, #1]
 8001f48:	461a      	mov	r2, r3
 8001f4a:	2121      	movs	r1, #33	@ 0x21
 8001f4c:	203c      	movs	r0, #60	@ 0x3c
 8001f4e:	f7ff fc67 	bl	8001820 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	461a      	mov	r2, r3
 8001f56:	2122      	movs	r1, #34	@ 0x22
 8001f58:	203c      	movs	r0, #60	@ 0x3c
 8001f5a:	f7ff fc61 	bl	8001820 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	461a      	mov	r2, r3
 8001f62:	2123      	movs	r1, #35	@ 0x23
 8001f64:	203c      	movs	r0, #60	@ 0x3c
 8001f66:	f7ff fc5b 	bl	8001820 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001f6a:	793b      	ldrb	r3, [r7, #4]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	2124      	movs	r1, #36	@ 0x24
 8001f70:	203c      	movs	r0, #60	@ 0x3c
 8001f72:	f7ff fc55 	bl	8001820 <SENSOR_IO_Write>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001f84:	2300      	movs	r3, #0
 8001f86:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001f88:	2122      	movs	r1, #34	@ 0x22
 8001f8a:	203c      	movs	r0, #60	@ 0x3c
 8001f8c:	f7ff fc62 	bl	8001854 <SENSOR_IO_Read>
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001f94:	79fb      	ldrb	r3, [r7, #7]
 8001f96:	f023 0303 	bic.w	r3, r3, #3
 8001f9a:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f043 0303 	orr.w	r3, r3, #3
 8001fa2:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001fa4:	79fb      	ldrb	r3, [r7, #7]
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	2122      	movs	r1, #34	@ 0x22
 8001faa:	203c      	movs	r0, #60	@ 0x3c
 8001fac:	f7ff fc38 	bl	8001820 <SENSOR_IO_Write>
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8001fbc:	f7ff fc26 	bl	800180c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001fc0:	210f      	movs	r1, #15
 8001fc2:	203c      	movs	r0, #60	@ 0x3c
 8001fc4:	f7ff fc46 	bl	8001854 <SENSOR_IO_Read>
 8001fc8:	4603      	mov	r3, r0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001fdc:	2122      	movs	r1, #34	@ 0x22
 8001fde:	203c      	movs	r0, #60	@ 0x3c
 8001fe0:	f7ff fc38 	bl	8001854 <SENSOR_IO_Read>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	f023 0320 	bic.w	r3, r3, #32
 8001fee:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001ff0:	88fb      	ldrh	r3, [r7, #6]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	f043 0320 	orr.w	r3, r3, #32
 8001ffc:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	461a      	mov	r2, r3
 8002002:	2122      	movs	r1, #34	@ 0x22
 8002004:	203c      	movs	r0, #60	@ 0x3c
 8002006:	f7ff fc0b 	bl	8001820 <SENSOR_IO_Write>
}
 800200a:	bf00      	nop
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 800201c:	2300      	movs	r3, #0
 800201e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800202a:	2121      	movs	r1, #33	@ 0x21
 800202c:	203c      	movs	r0, #60	@ 0x3c
 800202e:	f7ff fc11 	bl	8001854 <SENSOR_IO_Read>
 8002032:	4603      	mov	r3, r0
 8002034:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002036:	f107 0208 	add.w	r2, r7, #8
 800203a:	2306      	movs	r3, #6
 800203c:	21a8      	movs	r1, #168	@ 0xa8
 800203e:	203c      	movs	r0, #60	@ 0x3c
 8002040:	f7ff fc26 	bl	8001890 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002044:	2300      	movs	r3, #0
 8002046:	77fb      	strb	r3, [r7, #31]
 8002048:	e01a      	b.n	8002080 <LIS3MDL_MagReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800204a:	7ffb      	ldrb	r3, [r7, #31]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	3301      	adds	r3, #1
 8002050:	3320      	adds	r3, #32
 8002052:	443b      	add	r3, r7
 8002054:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002058:	021b      	lsls	r3, r3, #8
 800205a:	b29b      	uxth	r3, r3
 800205c:	7ffa      	ldrb	r2, [r7, #31]
 800205e:	0052      	lsls	r2, r2, #1
 8002060:	3220      	adds	r2, #32
 8002062:	443a      	add	r2, r7
 8002064:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002068:	4413      	add	r3, r2
 800206a:	b29a      	uxth	r2, r3
 800206c:	7ffb      	ldrb	r3, [r7, #31]
 800206e:	b212      	sxth	r2, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	3320      	adds	r3, #32
 8002074:	443b      	add	r3, r7
 8002076:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800207a:	7ffb      	ldrb	r3, [r7, #31]
 800207c:	3301      	adds	r3, #1
 800207e:	77fb      	strb	r3, [r7, #31]
 8002080:	7ffb      	ldrb	r3, [r7, #31]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d9e1      	bls.n	800204a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002086:	7dfb      	ldrb	r3, [r7, #23]
 8002088:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800208c:	2b60      	cmp	r3, #96	@ 0x60
 800208e:	d013      	beq.n	80020b8 <LIS3MDL_MagReadXYZ+0xa4>
 8002090:	2b60      	cmp	r3, #96	@ 0x60
 8002092:	dc14      	bgt.n	80020be <LIS3MDL_MagReadXYZ+0xaa>
 8002094:	2b40      	cmp	r3, #64	@ 0x40
 8002096:	d00c      	beq.n	80020b2 <LIS3MDL_MagReadXYZ+0x9e>
 8002098:	2b40      	cmp	r3, #64	@ 0x40
 800209a:	dc10      	bgt.n	80020be <LIS3MDL_MagReadXYZ+0xaa>
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <LIS3MDL_MagReadXYZ+0x92>
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d003      	beq.n	80020ac <LIS3MDL_MagReadXYZ+0x98>
 80020a4:	e00b      	b.n	80020be <LIS3MDL_MagReadXYZ+0xaa>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 80020a6:	4b19      	ldr	r3, [pc, #100]	@ (800210c <LIS3MDL_MagReadXYZ+0xf8>)
 80020a8:	61bb      	str	r3, [r7, #24]
    break;
 80020aa:	e008      	b.n	80020be <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 80020ac:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <LIS3MDL_MagReadXYZ+0xfc>)
 80020ae:	61bb      	str	r3, [r7, #24]
    break;
 80020b0:	e005      	b.n	80020be <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 80020b2:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <LIS3MDL_MagReadXYZ+0x100>)
 80020b4:	61bb      	str	r3, [r7, #24]
    break;
 80020b6:	e002      	b.n	80020be <LIS3MDL_MagReadXYZ+0xaa>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <LIS3MDL_MagReadXYZ+0x104>)
 80020ba:	61bb      	str	r3, [r7, #24]
    break;    
 80020bc:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 80020be:	2300      	movs	r3, #0
 80020c0:	77fb      	strb	r3, [r7, #31]
 80020c2:	e01a      	b.n	80020fa <LIS3MDL_MagReadXYZ+0xe6>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80020c4:	7ffb      	ldrb	r3, [r7, #31]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3320      	adds	r3, #32
 80020ca:	443b      	add	r3, r7
 80020cc:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80020dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e0:	7ffb      	ldrb	r3, [r7, #31]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020ec:	ee17 2a90 	vmov	r2, s15
 80020f0:	b212      	sxth	r2, r2
 80020f2:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80020f4:	7ffb      	ldrb	r3, [r7, #31]
 80020f6:	3301      	adds	r3, #1
 80020f8:	77fb      	strb	r3, [r7, #31]
 80020fa:	7ffb      	ldrb	r3, [r7, #31]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d9e1      	bls.n	80020c4 <LIS3MDL_MagReadXYZ+0xb0>
  }
}
 8002100:	bf00      	nop
 8002102:	bf00      	nop
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	3e0f5c29 	.word	0x3e0f5c29
 8002110:	3e947ae1 	.word	0x3e947ae1
 8002114:	3edc28f6 	.word	0x3edc28f6
 8002118:	3f147ae1 	.word	0x3f147ae1

0800211c <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800212a:	2110      	movs	r1, #16
 800212c:	20d4      	movs	r0, #212	@ 0xd4
 800212e:	f7ff fb91 	bl	8001854 <SENSOR_IO_Read>
 8002132:	4603      	mov	r3, r0
 8002134:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800213a:	7bbb      	ldrb	r3, [r7, #14]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002142:	7bba      	ldrb	r2, [r7, #14]
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	4313      	orrs	r3, r2
 8002148:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800214a:	7bbb      	ldrb	r3, [r7, #14]
 800214c:	461a      	mov	r2, r3
 800214e:	2110      	movs	r1, #16
 8002150:	20d4      	movs	r0, #212	@ 0xd4
 8002152:	f7ff fb65 	bl	8001820 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002156:	2112      	movs	r1, #18
 8002158:	20d4      	movs	r0, #212	@ 0xd4
 800215a:	f7ff fb7b 	bl	8001854 <SENSOR_IO_Read>
 800215e:	4603      	mov	r3, r0
 8002160:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	b29b      	uxth	r3, r3
 8002168:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800216a:	7bbb      	ldrb	r3, [r7, #14]
 800216c:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8002170:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002172:	7bba      	ldrb	r2, [r7, #14]
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	4313      	orrs	r3, r2
 8002178:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800217a:	7bbb      	ldrb	r3, [r7, #14]
 800217c:	461a      	mov	r2, r3
 800217e:	2112      	movs	r1, #18
 8002180:	20d4      	movs	r0, #212	@ 0xd4
 8002182:	f7ff fb4d 	bl	8001820 <SENSOR_IO_Write>
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002194:	2300      	movs	r3, #0
 8002196:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002198:	2110      	movs	r1, #16
 800219a:	20d4      	movs	r0, #212	@ 0xd4
 800219c:	f7ff fb5a 	bl	8001854 <SENSOR_IO_Read>
 80021a0:	4603      	mov	r3, r0
 80021a2:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80021a4:	79fb      	ldrb	r3, [r7, #7]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 80021ac:	79fb      	ldrb	r3, [r7, #7]
 80021ae:	461a      	mov	r2, r3
 80021b0:	2110      	movs	r1, #16
 80021b2:	20d4      	movs	r0, #212	@ 0xd4
 80021b4:	f7ff fb34 	bl	8001820 <SENSOR_IO_Write>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80021c4:	f7ff fb22 	bl	800180c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80021c8:	210f      	movs	r1, #15
 80021ca:	20d4      	movs	r0, #212	@ 0xd4
 80021cc:	f7ff fb42 	bl	8001854 <SENSOR_IO_Read>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80021e4:	2115      	movs	r1, #21
 80021e6:	20d4      	movs	r0, #212	@ 0xd4
 80021e8:	f7ff fb34 	bl	8001854 <SENSOR_IO_Read>
 80021ec:	4603      	mov	r3, r0
 80021ee:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	f023 0310 	bic.w	r3, r3, #16
 80021f6:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	f043 0310 	orr.w	r3, r3, #16
 8002204:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	461a      	mov	r2, r3
 800220a:	2115      	movs	r1, #21
 800220c:	20d4      	movs	r0, #212	@ 0xd4
 800220e:	f7ff fb07 	bl	8001820 <SENSOR_IO_Write>
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
	...

0800221c <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002224:	2300      	movs	r3, #0
 8002226:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002232:	2110      	movs	r1, #16
 8002234:	20d4      	movs	r0, #212	@ 0xd4
 8002236:	f7ff fb0d 	bl	8001854 <SENSOR_IO_Read>
 800223a:	4603      	mov	r3, r0
 800223c:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800223e:	f107 0208 	add.w	r2, r7, #8
 8002242:	2306      	movs	r3, #6
 8002244:	2128      	movs	r1, #40	@ 0x28
 8002246:	20d4      	movs	r0, #212	@ 0xd4
 8002248:	f7ff fb22 	bl	8001890 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800224c:	2300      	movs	r3, #0
 800224e:	77fb      	strb	r3, [r7, #31]
 8002250:	e01a      	b.n	8002288 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002252:	7ffb      	ldrb	r3, [r7, #31]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	3301      	adds	r3, #1
 8002258:	3320      	adds	r3, #32
 800225a:	443b      	add	r3, r7
 800225c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b29b      	uxth	r3, r3
 8002264:	7ffa      	ldrb	r2, [r7, #31]
 8002266:	0052      	lsls	r2, r2, #1
 8002268:	3220      	adds	r2, #32
 800226a:	443a      	add	r2, r7
 800226c:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8002270:	4413      	add	r3, r2
 8002272:	b29a      	uxth	r2, r3
 8002274:	7ffb      	ldrb	r3, [r7, #31]
 8002276:	b212      	sxth	r2, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	3320      	adds	r3, #32
 800227c:	443b      	add	r3, r7
 800227e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002282:	7ffb      	ldrb	r3, [r7, #31]
 8002284:	3301      	adds	r3, #1
 8002286:	77fb      	strb	r3, [r7, #31]
 8002288:	7ffb      	ldrb	r3, [r7, #31]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d9e1      	bls.n	8002252 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	f003 030c 	and.w	r3, r3, #12
 8002294:	2b0c      	cmp	r3, #12
 8002296:	d829      	bhi.n	80022ec <LSM6DSL_AccReadXYZ+0xd0>
 8002298:	a201      	add	r2, pc, #4	@ (adr r2, 80022a0 <LSM6DSL_AccReadXYZ+0x84>)
 800229a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800229e:	bf00      	nop
 80022a0:	080022d5 	.word	0x080022d5
 80022a4:	080022ed 	.word	0x080022ed
 80022a8:	080022ed 	.word	0x080022ed
 80022ac:	080022ed 	.word	0x080022ed
 80022b0:	080022e7 	.word	0x080022e7
 80022b4:	080022ed 	.word	0x080022ed
 80022b8:	080022ed 	.word	0x080022ed
 80022bc:	080022ed 	.word	0x080022ed
 80022c0:	080022db 	.word	0x080022db
 80022c4:	080022ed 	.word	0x080022ed
 80022c8:	080022ed 	.word	0x080022ed
 80022cc:	080022ed 	.word	0x080022ed
 80022d0:	080022e1 	.word	0x080022e1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80022d4:	4b18      	ldr	r3, [pc, #96]	@ (8002338 <LSM6DSL_AccReadXYZ+0x11c>)
 80022d6:	61bb      	str	r3, [r7, #24]
    break;
 80022d8:	e008      	b.n	80022ec <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <LSM6DSL_AccReadXYZ+0x120>)
 80022dc:	61bb      	str	r3, [r7, #24]
    break;
 80022de:	e005      	b.n	80022ec <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80022e0:	4b17      	ldr	r3, [pc, #92]	@ (8002340 <LSM6DSL_AccReadXYZ+0x124>)
 80022e2:	61bb      	str	r3, [r7, #24]
    break;
 80022e4:	e002      	b.n	80022ec <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80022e6:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <LSM6DSL_AccReadXYZ+0x128>)
 80022e8:	61bb      	str	r3, [r7, #24]
    break;    
 80022ea:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	77fb      	strb	r3, [r7, #31]
 80022f0:	e01a      	b.n	8002328 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80022f2:	7ffb      	ldrb	r3, [r7, #31]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	3320      	adds	r3, #32
 80022f8:	443b      	add	r3, r7
 80022fa:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002306:	edd7 7a06 	vldr	s15, [r7, #24]
 800230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230e:	7ffb      	ldrb	r3, [r7, #31]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800231a:	ee17 2a90 	vmov	r2, s15
 800231e:	b212      	sxth	r2, r2
 8002320:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002322:	7ffb      	ldrb	r3, [r7, #31]
 8002324:	3301      	adds	r3, #1
 8002326:	77fb      	strb	r3, [r7, #31]
 8002328:	7ffb      	ldrb	r3, [r7, #31]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d9e1      	bls.n	80022f2 <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 800232e:	bf00      	nop
 8002330:	bf00      	nop
 8002332:	3720      	adds	r7, #32
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	3d79db23 	.word	0x3d79db23
 800233c:	3df9db23 	.word	0x3df9db23
 8002340:	3e79db23 	.word	0x3e79db23
 8002344:	3ef9db23 	.word	0x3ef9db23

08002348 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002356:	2111      	movs	r1, #17
 8002358:	20d4      	movs	r0, #212	@ 0xd4
 800235a:	f7ff fa7b 	bl	8001854 <SENSOR_IO_Read>
 800235e:	4603      	mov	r3, r0
 8002360:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8002366:	7bbb      	ldrb	r3, [r7, #14]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800236e:	7bba      	ldrb	r2, [r7, #14]
 8002370:	7bfb      	ldrb	r3, [r7, #15]
 8002372:	4313      	orrs	r3, r2
 8002374:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8002376:	7bbb      	ldrb	r3, [r7, #14]
 8002378:	461a      	mov	r2, r3
 800237a:	2111      	movs	r1, #17
 800237c:	20d4      	movs	r0, #212	@ 0xd4
 800237e:	f7ff fa4f 	bl	8001820 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002382:	2112      	movs	r1, #18
 8002384:	20d4      	movs	r0, #212	@ 0xd4
 8002386:	f7ff fa65 	bl	8001854 <SENSOR_IO_Read>
 800238a:	4603      	mov	r3, r0
 800238c:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	b29b      	uxth	r3, r3
 8002394:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002396:	7bbb      	ldrb	r3, [r7, #14]
 8002398:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 800239c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800239e:	7bba      	ldrb	r2, [r7, #14]
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80023a6:	7bbb      	ldrb	r3, [r7, #14]
 80023a8:	461a      	mov	r2, r3
 80023aa:	2112      	movs	r1, #18
 80023ac:	20d4      	movs	r0, #212	@ 0xd4
 80023ae:	f7ff fa37 	bl	8001820 <SENSOR_IO_Write>
}
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80023c0:	2300      	movs	r3, #0
 80023c2:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80023c4:	2111      	movs	r1, #17
 80023c6:	20d4      	movs	r0, #212	@ 0xd4
 80023c8:	f7ff fa44 	bl	8001854 <SENSOR_IO_Read>
 80023cc:	4603      	mov	r3, r0
 80023ce:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	461a      	mov	r2, r3
 80023dc:	2111      	movs	r1, #17
 80023de:	20d4      	movs	r0, #212	@ 0xd4
 80023e0:	f7ff fa1e 	bl	8001820 <SENSOR_IO_Write>
}
 80023e4:	bf00      	nop
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80023f0:	f7ff fa0c 	bl	800180c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80023f4:	210f      	movs	r1, #15
 80023f6:	20d4      	movs	r0, #212	@ 0xd4
 80023f8:	f7ff fa2c 	bl	8001854 <SENSOR_IO_Read>
 80023fc:	4603      	mov	r3, r0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	bd80      	pop	{r7, pc}

08002402 <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800240c:	2300      	movs	r3, #0
 800240e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002410:	2116      	movs	r1, #22
 8002412:	20d4      	movs	r0, #212	@ 0xd4
 8002414:	f7ff fa1e 	bl	8001854 <SENSOR_IO_Read>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002422:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002424:	88fb      	ldrh	r3, [r7, #6]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800242a:	7bfb      	ldrb	r3, [r7, #15]
 800242c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002430:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	461a      	mov	r2, r3
 8002436:	2116      	movs	r1, #22
 8002438:	20d4      	movs	r0, #212	@ 0xd4
 800243a:	f7ff f9f1 	bl	8001820 <SENSOR_IO_Write>
}
 800243e:	bf00      	nop
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b088      	sub	sp, #32
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8002450:	2300      	movs	r3, #0
 8002452:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002458:	f04f 0300 	mov.w	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800245e:	2111      	movs	r1, #17
 8002460:	20d4      	movs	r0, #212	@ 0xd4
 8002462:	f7ff f9f7 	bl	8001854 <SENSOR_IO_Read>
 8002466:	4603      	mov	r3, r0
 8002468:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800246a:	f107 0208 	add.w	r2, r7, #8
 800246e:	2306      	movs	r3, #6
 8002470:	2122      	movs	r1, #34	@ 0x22
 8002472:	20d4      	movs	r0, #212	@ 0xd4
 8002474:	f7ff fa0c 	bl	8001890 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002478:	2300      	movs	r3, #0
 800247a:	77fb      	strb	r3, [r7, #31]
 800247c:	e01a      	b.n	80024b4 <LSM6DSL_GyroReadXYZAngRate+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800247e:	7ffb      	ldrb	r3, [r7, #31]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	3301      	adds	r3, #1
 8002484:	3320      	adds	r3, #32
 8002486:	443b      	add	r3, r7
 8002488:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	b29b      	uxth	r3, r3
 8002490:	7ffa      	ldrb	r2, [r7, #31]
 8002492:	0052      	lsls	r2, r2, #1
 8002494:	3220      	adds	r2, #32
 8002496:	443a      	add	r2, r7
 8002498:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800249c:	4413      	add	r3, r2
 800249e:	b29a      	uxth	r2, r3
 80024a0:	7ffb      	ldrb	r3, [r7, #31]
 80024a2:	b212      	sxth	r2, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	3320      	adds	r3, #32
 80024a8:	443b      	add	r3, r7
 80024aa:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80024ae:	7ffb      	ldrb	r3, [r7, #31]
 80024b0:	3301      	adds	r3, #1
 80024b2:	77fb      	strb	r3, [r7, #31]
 80024b4:	7ffb      	ldrb	r3, [r7, #31]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d9e1      	bls.n	800247e <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 80024ba:	7dfb      	ldrb	r3, [r7, #23]
 80024bc:	f003 030c 	and.w	r3, r3, #12
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d829      	bhi.n	8002518 <LSM6DSL_GyroReadXYZAngRate+0xd0>
 80024c4:	a201      	add	r2, pc, #4	@ (adr r2, 80024cc <LSM6DSL_GyroReadXYZAngRate+0x84>)
 80024c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ca:	bf00      	nop
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002519 	.word	0x08002519
 80024d4:	08002519 	.word	0x08002519
 80024d8:	08002519 	.word	0x08002519
 80024dc:	08002507 	.word	0x08002507
 80024e0:	08002519 	.word	0x08002519
 80024e4:	08002519 	.word	0x08002519
 80024e8:	08002519 	.word	0x08002519
 80024ec:	0800250d 	.word	0x0800250d
 80024f0:	08002519 	.word	0x08002519
 80024f4:	08002519 	.word	0x08002519
 80024f8:	08002519 	.word	0x08002519
 80024fc:	08002513 	.word	0x08002513
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8002500:	4b16      	ldr	r3, [pc, #88]	@ (800255c <LSM6DSL_GyroReadXYZAngRate+0x114>)
 8002502:	61bb      	str	r3, [r7, #24]
    break;
 8002504:	e008      	b.n	8002518 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 8002508:	61bb      	str	r3, [r7, #24]
    break;
 800250a:	e005      	b.n	8002518 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800250c:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 800250e:	61bb      	str	r3, [r7, #24]
    break;
 8002510:	e002      	b.n	8002518 <LSM6DSL_GyroReadXYZAngRate+0xd0>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8002512:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8002514:	61bb      	str	r3, [r7, #24]
    break;    
 8002516:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002518:	2300      	movs	r3, #0
 800251a:	77fb      	strb	r3, [r7, #31]
 800251c:	e016      	b.n	800254c <LSM6DSL_GyroReadXYZAngRate+0x104>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800251e:	7ffb      	ldrb	r3, [r7, #31]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	3320      	adds	r3, #32
 8002524:	443b      	add	r3, r7
 8002526:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800252a:	ee07 3a90 	vmov	s15, r3
 800252e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002532:	7ffb      	ldrb	r3, [r7, #31]
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4413      	add	r3, r2
 800253a:	edd7 7a06 	vldr	s15, [r7, #24]
 800253e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002542:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8002546:	7ffb      	ldrb	r3, [r7, #31]
 8002548:	3301      	adds	r3, #1
 800254a:	77fb      	strb	r3, [r7, #31]
 800254c:	7ffb      	ldrb	r3, [r7, #31]
 800254e:	2b02      	cmp	r3, #2
 8002550:	d9e5      	bls.n	800251e <LSM6DSL_GyroReadXYZAngRate+0xd6>
  }
}
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	3720      	adds	r7, #32
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	410c0000 	.word	0x410c0000
 8002560:	418c0000 	.word	0x418c0000
 8002564:	420c0000 	.word	0x420c0000
 8002568:	428c0000 	.word	0x428c0000

0800256c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002576:	2003      	movs	r0, #3
 8002578:	f000 f960 	bl	800283c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800257c:	2000      	movs	r0, #0
 800257e:	f000 f80d 	bl	800259c <HAL_InitTick>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	71fb      	strb	r3, [r7, #7]
 800258c:	e001      	b.n	8002592 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800258e:	f7ff fa91 	bl	8001ab4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002592:	79fb      	ldrb	r3, [r7, #7]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80025a8:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <HAL_InitTick+0x6c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d023      	beq.n	80025f8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80025b0:	4b16      	ldr	r3, [pc, #88]	@ (800260c <HAL_InitTick+0x70>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_InitTick+0x6c>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4619      	mov	r1, r3
 80025ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025be:	fbb3 f3f1 	udiv	r3, r3, r1
 80025c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f96d 	bl	80028a6 <HAL_SYSTICK_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10f      	bne.n	80025f2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2b0f      	cmp	r3, #15
 80025d6:	d809      	bhi.n	80025ec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025d8:	2200      	movs	r2, #0
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f000 f937 	bl	8002852 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <HAL_InitTick+0x74>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e007      	b.n	80025fc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	73fb      	strb	r3, [r7, #15]
 80025f0:	e004      	b.n	80025fc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	e001      	b.n	80025fc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200000a4 	.word	0x200000a4
 800260c:	20000000 	.word	0x20000000
 8002610:	200000a0 	.word	0x200000a0

08002614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_IncTick+0x20>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	461a      	mov	r2, r3
 800261e:	4b06      	ldr	r3, [pc, #24]	@ (8002638 <HAL_IncTick+0x24>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4413      	add	r3, r2
 8002624:	4a04      	ldr	r2, [pc, #16]	@ (8002638 <HAL_IncTick+0x24>)
 8002626:	6013      	str	r3, [r2, #0]
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	200000a4 	.word	0x200000a4
 8002638:	200003d8 	.word	0x200003d8

0800263c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return uwTick;
 8002640:	4b03      	ldr	r3, [pc, #12]	@ (8002650 <HAL_GetTick+0x14>)
 8002642:	681b      	ldr	r3, [r3, #0]
}
 8002644:	4618      	mov	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	200003d8 	.word	0x200003d8

08002654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff ffee 	bl	800263c <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d005      	beq.n	800267a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800266e:	4b0a      	ldr	r3, [pc, #40]	@ (8002698 <HAL_Delay+0x44>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4413      	add	r3, r2
 8002678:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800267a:	bf00      	nop
 800267c:	f7ff ffde 	bl	800263c <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	429a      	cmp	r2, r3
 800268a:	d8f7      	bhi.n	800267c <HAL_Delay+0x28>
  {
  }
}
 800268c:	bf00      	nop
 800268e:	bf00      	nop
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	200000a4 	.word	0x200000a4

0800269c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b480      	push	{r7}
 800269e:	b085      	sub	sp, #20
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ac:	4b0c      	ldr	r3, [pc, #48]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026b8:	4013      	ands	r3, r2
 80026ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ce:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <__NVIC_SetPriorityGrouping+0x44>)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	60d3      	str	r3, [r2, #12]
}
 80026d4:	bf00      	nop
 80026d6:	3714      	adds	r7, #20
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <__NVIC_GetPriorityGrouping+0x18>)
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	f003 0307 	and.w	r3, r3, #7
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800270a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270e:	2b00      	cmp	r3, #0
 8002710:	db0b      	blt.n	800272a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	f003 021f 	and.w	r2, r3, #31
 8002718:	4907      	ldr	r1, [pc, #28]	@ (8002738 <__NVIC_EnableIRQ+0x38>)
 800271a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2001      	movs	r0, #1
 8002722:	fa00 f202 	lsl.w	r2, r0, r2
 8002726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	e000e100 	.word	0xe000e100

0800273c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	4603      	mov	r3, r0
 8002744:	6039      	str	r1, [r7, #0]
 8002746:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274c:	2b00      	cmp	r3, #0
 800274e:	db0a      	blt.n	8002766 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	b2da      	uxtb	r2, r3
 8002754:	490c      	ldr	r1, [pc, #48]	@ (8002788 <__NVIC_SetPriority+0x4c>)
 8002756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275a:	0112      	lsls	r2, r2, #4
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	440b      	add	r3, r1
 8002760:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002764:	e00a      	b.n	800277c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4908      	ldr	r1, [pc, #32]	@ (800278c <__NVIC_SetPriority+0x50>)
 800276c:	79fb      	ldrb	r3, [r7, #7]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	3b04      	subs	r3, #4
 8002774:	0112      	lsls	r2, r2, #4
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	440b      	add	r3, r1
 800277a:	761a      	strb	r2, [r3, #24]
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000e100 	.word	0xe000e100
 800278c:	e000ed00 	.word	0xe000ed00

08002790 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	@ 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f1c3 0307 	rsb	r3, r3, #7
 80027aa:	2b04      	cmp	r3, #4
 80027ac:	bf28      	it	cs
 80027ae:	2304      	movcs	r3, #4
 80027b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	3304      	adds	r3, #4
 80027b6:	2b06      	cmp	r3, #6
 80027b8:	d902      	bls.n	80027c0 <NVIC_EncodePriority+0x30>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b03      	subs	r3, #3
 80027be:	e000      	b.n	80027c2 <NVIC_EncodePriority+0x32>
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	f04f 32ff 	mov.w	r2, #4294967295
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43da      	mvns	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	401a      	ands	r2, r3
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027d8:	f04f 31ff 	mov.w	r1, #4294967295
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	43d9      	mvns	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	4313      	orrs	r3, r2
         );
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3724      	adds	r7, #36	@ 0x24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3b01      	subs	r3, #1
 8002804:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002808:	d301      	bcc.n	800280e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280a:	2301      	movs	r3, #1
 800280c:	e00f      	b.n	800282e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800280e:	4a0a      	ldr	r2, [pc, #40]	@ (8002838 <SysTick_Config+0x40>)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3b01      	subs	r3, #1
 8002814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002816:	210f      	movs	r1, #15
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	f7ff ff8e 	bl	800273c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <SysTick_Config+0x40>)
 8002822:	2200      	movs	r2, #0
 8002824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002826:	4b04      	ldr	r3, [pc, #16]	@ (8002838 <SysTick_Config+0x40>)
 8002828:	2207      	movs	r2, #7
 800282a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	e000e010 	.word	0xe000e010

0800283c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff29 	bl	800269c <__NVIC_SetPriorityGrouping>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002852:	b580      	push	{r7, lr}
 8002854:	b086      	sub	sp, #24
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
 800285e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002860:	2300      	movs	r3, #0
 8002862:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002864:	f7ff ff3e 	bl	80026e4 <__NVIC_GetPriorityGrouping>
 8002868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f7ff ff8e 	bl	8002790 <NVIC_EncodePriority>
 8002874:	4602      	mov	r2, r0
 8002876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff ff5d 	bl	800273c <__NVIC_SetPriority>
}
 8002882:	bf00      	nop
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b082      	sub	sp, #8
 800288e:	af00      	add	r7, sp, #0
 8002890:	4603      	mov	r3, r0
 8002892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff31 	bl	8002700 <__NVIC_EnableIRQ>
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7ff ffa2 	bl	80027f8 <SysTick_Config>
 80028b4:	4603      	mov	r3, r0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028ce:	e166      	b.n	8002b9e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	2101      	movs	r1, #1
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	fa01 f303 	lsl.w	r3, r1, r3
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	f000 8158 	beq.w	8002b98 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d005      	beq.n	8002900 <HAL_GPIO_Init+0x40>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d130      	bne.n	8002962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	2203      	movs	r2, #3
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4013      	ands	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fa02 f303 	lsl.w	r3, r2, r3
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	693a      	ldr	r2, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002936:	2201      	movs	r2, #1
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43db      	mvns	r3, r3
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	4013      	ands	r3, r2
 8002944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	091b      	lsrs	r3, r3, #4
 800294c:	f003 0201 	and.w	r2, r3, #1
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	2b03      	cmp	r3, #3
 800296c:	d017      	beq.n	800299e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	2203      	movs	r2, #3
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	693a      	ldr	r2, [r7, #16]
 8002982:	4013      	ands	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d123      	bne.n	80029f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f003 0307 	and.w	r3, r3, #7
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	220f      	movs	r2, #15
 80029c2:	fa02 f303 	lsl.w	r3, r2, r3
 80029c6:	43db      	mvns	r3, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	fa02 f303 	lsl.w	r3, r2, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	08da      	lsrs	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3208      	adds	r2, #8
 80029ec:	6939      	ldr	r1, [r7, #16]
 80029ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0203 	and.w	r2, r3, #3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 80b2 	beq.w	8002b98 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a34:	4b61      	ldr	r3, [pc, #388]	@ (8002bbc <HAL_GPIO_Init+0x2fc>)
 8002a36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a38:	4a60      	ldr	r2, [pc, #384]	@ (8002bbc <HAL_GPIO_Init+0x2fc>)
 8002a3a:	f043 0301 	orr.w	r3, r3, #1
 8002a3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a40:	4b5e      	ldr	r3, [pc, #376]	@ (8002bbc <HAL_GPIO_Init+0x2fc>)
 8002a42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a4c:	4a5c      	ldr	r2, [pc, #368]	@ (8002bc0 <HAL_GPIO_Init+0x300>)
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	220f      	movs	r2, #15
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43db      	mvns	r3, r3
 8002a6a:	693a      	ldr	r2, [r7, #16]
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002a76:	d02b      	beq.n	8002ad0 <HAL_GPIO_Init+0x210>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a52      	ldr	r2, [pc, #328]	@ (8002bc4 <HAL_GPIO_Init+0x304>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d025      	beq.n	8002acc <HAL_GPIO_Init+0x20c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a51      	ldr	r2, [pc, #324]	@ (8002bc8 <HAL_GPIO_Init+0x308>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01f      	beq.n	8002ac8 <HAL_GPIO_Init+0x208>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a50      	ldr	r2, [pc, #320]	@ (8002bcc <HAL_GPIO_Init+0x30c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d019      	beq.n	8002ac4 <HAL_GPIO_Init+0x204>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a4f      	ldr	r2, [pc, #316]	@ (8002bd0 <HAL_GPIO_Init+0x310>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d013      	beq.n	8002ac0 <HAL_GPIO_Init+0x200>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a4e      	ldr	r2, [pc, #312]	@ (8002bd4 <HAL_GPIO_Init+0x314>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00d      	beq.n	8002abc <HAL_GPIO_Init+0x1fc>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd8 <HAL_GPIO_Init+0x318>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d007      	beq.n	8002ab8 <HAL_GPIO_Init+0x1f8>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a4c      	ldr	r2, [pc, #304]	@ (8002bdc <HAL_GPIO_Init+0x31c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d101      	bne.n	8002ab4 <HAL_GPIO_Init+0x1f4>
 8002ab0:	2307      	movs	r3, #7
 8002ab2:	e00e      	b.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002ab4:	2308      	movs	r3, #8
 8002ab6:	e00c      	b.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002ab8:	2306      	movs	r3, #6
 8002aba:	e00a      	b.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002abc:	2305      	movs	r3, #5
 8002abe:	e008      	b.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	e006      	b.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e004      	b.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e002      	b.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_GPIO_Init+0x212>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	f002 0203 	and.w	r2, r2, #3
 8002ad8:	0092      	lsls	r2, r2, #2
 8002ada:	4093      	lsls	r3, r2
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ae2:	4937      	ldr	r1, [pc, #220]	@ (8002bc0 <HAL_GPIO_Init+0x300>)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002af0:	4b3b      	ldr	r3, [pc, #236]	@ (8002be0 <HAL_GPIO_Init+0x320>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b14:	4a32      	ldr	r2, [pc, #200]	@ (8002be0 <HAL_GPIO_Init+0x320>)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b1a:	4b31      	ldr	r3, [pc, #196]	@ (8002be0 <HAL_GPIO_Init+0x320>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b3e:	4a28      	ldr	r2, [pc, #160]	@ (8002be0 <HAL_GPIO_Init+0x320>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b44:	4b26      	ldr	r3, [pc, #152]	@ (8002be0 <HAL_GPIO_Init+0x320>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b68:	4a1d      	ldr	r2, [pc, #116]	@ (8002be0 <HAL_GPIO_Init+0x320>)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002be0 <HAL_GPIO_Init+0x320>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b92:	4a13      	ldr	r2, [pc, #76]	@ (8002be0 <HAL_GPIO_Init+0x320>)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f47f ae91 	bne.w	80028d0 <HAL_GPIO_Init+0x10>
  }
}
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	48000400 	.word	0x48000400
 8002bc8:	48000800 	.word	0x48000800
 8002bcc:	48000c00 	.word	0x48000c00
 8002bd0:	48001000 	.word	0x48001000
 8002bd4:	48001400 	.word	0x48001400
 8002bd8:	48001800 	.word	0x48001800
 8002bdc:	48001c00 	.word	0x48001c00
 8002be0:	40010400 	.word	0x40010400

08002be4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002bf2:	e0c9      	b.n	8002d88 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80bc 	beq.w	8002d82 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002c0a:	4a66      	ldr	r2, [pc, #408]	@ (8002da4 <HAL_GPIO_DeInit+0x1c0>)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	089b      	lsrs	r3, r3, #2
 8002c10:	3302      	adds	r3, #2
 8002c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c16:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	220f      	movs	r2, #15
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c32:	d02b      	beq.n	8002c8c <HAL_GPIO_DeInit+0xa8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a5c      	ldr	r2, [pc, #368]	@ (8002da8 <HAL_GPIO_DeInit+0x1c4>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d025      	beq.n	8002c88 <HAL_GPIO_DeInit+0xa4>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dac <HAL_GPIO_DeInit+0x1c8>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d01f      	beq.n	8002c84 <HAL_GPIO_DeInit+0xa0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a5a      	ldr	r2, [pc, #360]	@ (8002db0 <HAL_GPIO_DeInit+0x1cc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d019      	beq.n	8002c80 <HAL_GPIO_DeInit+0x9c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a59      	ldr	r2, [pc, #356]	@ (8002db4 <HAL_GPIO_DeInit+0x1d0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d013      	beq.n	8002c7c <HAL_GPIO_DeInit+0x98>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a58      	ldr	r2, [pc, #352]	@ (8002db8 <HAL_GPIO_DeInit+0x1d4>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00d      	beq.n	8002c78 <HAL_GPIO_DeInit+0x94>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a57      	ldr	r2, [pc, #348]	@ (8002dbc <HAL_GPIO_DeInit+0x1d8>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d007      	beq.n	8002c74 <HAL_GPIO_DeInit+0x90>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a56      	ldr	r2, [pc, #344]	@ (8002dc0 <HAL_GPIO_DeInit+0x1dc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d101      	bne.n	8002c70 <HAL_GPIO_DeInit+0x8c>
 8002c6c:	2307      	movs	r3, #7
 8002c6e:	e00e      	b.n	8002c8e <HAL_GPIO_DeInit+0xaa>
 8002c70:	2308      	movs	r3, #8
 8002c72:	e00c      	b.n	8002c8e <HAL_GPIO_DeInit+0xaa>
 8002c74:	2306      	movs	r3, #6
 8002c76:	e00a      	b.n	8002c8e <HAL_GPIO_DeInit+0xaa>
 8002c78:	2305      	movs	r3, #5
 8002c7a:	e008      	b.n	8002c8e <HAL_GPIO_DeInit+0xaa>
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	e006      	b.n	8002c8e <HAL_GPIO_DeInit+0xaa>
 8002c80:	2303      	movs	r3, #3
 8002c82:	e004      	b.n	8002c8e <HAL_GPIO_DeInit+0xaa>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e002      	b.n	8002c8e <HAL_GPIO_DeInit+0xaa>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <HAL_GPIO_DeInit+0xaa>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	f002 0203 	and.w	r2, r2, #3
 8002c94:	0092      	lsls	r2, r2, #2
 8002c96:	4093      	lsls	r3, r2
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d132      	bne.n	8002d04 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002c9e:	4b49      	ldr	r3, [pc, #292]	@ (8002dc4 <HAL_GPIO_DeInit+0x1e0>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	4947      	ldr	r1, [pc, #284]	@ (8002dc4 <HAL_GPIO_DeInit+0x1e0>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002cac:	4b45      	ldr	r3, [pc, #276]	@ (8002dc4 <HAL_GPIO_DeInit+0x1e0>)
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	43db      	mvns	r3, r3
 8002cb4:	4943      	ldr	r1, [pc, #268]	@ (8002dc4 <HAL_GPIO_DeInit+0x1e0>)
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002cba:	4b42      	ldr	r3, [pc, #264]	@ (8002dc4 <HAL_GPIO_DeInit+0x1e0>)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	4940      	ldr	r1, [pc, #256]	@ (8002dc4 <HAL_GPIO_DeInit+0x1e0>)
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8002dc4 <HAL_GPIO_DeInit+0x1e0>)
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	493c      	ldr	r1, [pc, #240]	@ (8002dc4 <HAL_GPIO_DeInit+0x1e0>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0303 	and.w	r3, r3, #3
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	220f      	movs	r2, #15
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002ce6:	4a2f      	ldr	r2, [pc, #188]	@ (8002da4 <HAL_GPIO_DeInit+0x1c0>)
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	089b      	lsrs	r3, r3, #2
 8002cec:	3302      	adds	r3, #2
 8002cee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	482b      	ldr	r0, [pc, #172]	@ (8002da4 <HAL_GPIO_DeInit+0x1c0>)
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	089b      	lsrs	r3, r3, #2
 8002cfc:	400a      	ands	r2, r1
 8002cfe:	3302      	adds	r3, #2
 8002d00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2103      	movs	r1, #3
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	08da      	lsrs	r2, r3, #3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3208      	adds	r2, #8
 8002d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	43db      	mvns	r3, r3
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	08d2      	lsrs	r2, r2, #3
 8002d38:	4019      	ands	r1, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3208      	adds	r2, #8
 8002d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	2103      	movs	r1, #3
 8002d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d50:	43db      	mvns	r3, r3
 8002d52:	401a      	ands	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	401a      	ands	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2103      	movs	r1, #3
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	401a      	ands	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	3301      	adds	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f47f af2f 	bne.w	8002bf4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002d96:	bf00      	nop
 8002d98:	bf00      	nop
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	40010000 	.word	0x40010000
 8002da8:	48000400 	.word	0x48000400
 8002dac:	48000800 	.word	0x48000800
 8002db0:	48000c00 	.word	0x48000c00
 8002db4:	48001000 	.word	0x48001000
 8002db8:	48001400 	.word	0x48001400
 8002dbc:	48001800 	.word	0x48001800
 8002dc0:	48001c00 	.word	0x48001c00
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	807b      	strh	r3, [r7, #2]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dd8:	787b      	ldrb	r3, [r7, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d003      	beq.n	8002de6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dde:	887a      	ldrh	r2, [r7, #2]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e02:	4b08      	ldr	r3, [pc, #32]	@ (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e04:	695a      	ldr	r2, [r3, #20]
 8002e06:	88fb      	ldrh	r3, [r7, #6]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d006      	beq.n	8002e1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e0e:	4a05      	ldr	r2, [pc, #20]	@ (8002e24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 f806 	bl	8002e28 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	4603      	mov	r3, r0
 8002e30:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e08d      	b.n	8002f6c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fe fe49 	bl	8001afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2224      	movs	r2, #36	@ 0x24
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f022 0201 	bic.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d107      	bne.n	8002eb8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	e006      	b.n	8002ec6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002ec4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d108      	bne.n	8002ee0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	e007      	b.n	8002ef0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	6812      	ldr	r2, [r2, #0]
 8002efa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002efe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f02:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69d9      	ldr	r1, [r3, #28]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f042 0201 	orr.w	r2, r2, #1
 8002f4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2220      	movs	r2, #32
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e021      	b.n	8002fca <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2224      	movs	r2, #36	@ 0x24
 8002f8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe fe0a 	bl	8001bb8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	817b      	strh	r3, [r7, #10]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	813b      	strh	r3, [r7, #8]
 8002fea:	4613      	mov	r3, r2
 8002fec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f040 80f9 	bne.w	80031ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_I2C_Mem_Write+0x34>
 8003002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d105      	bne.n	8003014 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800300e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0ed      	b.n	80031f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_I2C_Mem_Write+0x4e>
 800301e:	2302      	movs	r3, #2
 8003020:	e0e6      	b.n	80031f0 <HAL_I2C_Mem_Write+0x21c>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800302a:	f7ff fb07 	bl	800263c <HAL_GetTick>
 800302e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	2319      	movs	r3, #25
 8003036:	2201      	movs	r2, #1
 8003038:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fac3 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0d1      	b.n	80031f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2221      	movs	r2, #33	@ 0x21
 8003050:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2240      	movs	r2, #64	@ 0x40
 8003058:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a3a      	ldr	r2, [r7, #32]
 8003066:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800306c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003074:	88f8      	ldrh	r0, [r7, #6]
 8003076:	893a      	ldrh	r2, [r7, #8]
 8003078:	8979      	ldrh	r1, [r7, #10]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	4603      	mov	r3, r0
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f9d3 	bl	8003430 <I2C_RequestMemoryWrite>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e0a9      	b.n	80031f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2bff      	cmp	r3, #255	@ 0xff
 80030a4:	d90e      	bls.n	80030c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	22ff      	movs	r2, #255	@ 0xff
 80030aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	8979      	ldrh	r1, [r7, #10]
 80030b4:	2300      	movs	r3, #0
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f000 fc47 	bl	8003950 <I2C_TransferConfig>
 80030c2:	e00f      	b.n	80030e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	8979      	ldrh	r1, [r7, #10]
 80030d6:	2300      	movs	r3, #0
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fc36 	bl	8003950 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fac6 	bl	800367a <I2C_WaitOnTXISFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e07b      	b.n	80031f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fc:	781a      	ldrb	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	1c5a      	adds	r2, r3, #1
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003112:	b29b      	uxth	r3, r3
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d034      	beq.n	800319c <HAL_I2C_Mem_Write+0x1c8>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	2b00      	cmp	r3, #0
 8003138:	d130      	bne.n	800319c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003140:	2200      	movs	r2, #0
 8003142:	2180      	movs	r1, #128	@ 0x80
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fa3f 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e04d      	b.n	80031f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2bff      	cmp	r3, #255	@ 0xff
 800315c:	d90e      	bls.n	800317c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	22ff      	movs	r2, #255	@ 0xff
 8003162:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003168:	b2da      	uxtb	r2, r3
 800316a:	8979      	ldrh	r1, [r7, #10]
 800316c:	2300      	movs	r3, #0
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 fbeb 	bl	8003950 <I2C_TransferConfig>
 800317a:	e00f      	b.n	800319c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318a:	b2da      	uxtb	r2, r3
 800318c:	8979      	ldrh	r1, [r7, #10]
 800318e:	2300      	movs	r3, #0
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fbda 	bl	8003950 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d19e      	bne.n	80030e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 faac 	bl	8003708 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e01a      	b.n	80031f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2220      	movs	r2, #32
 80031c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6859      	ldr	r1, [r3, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <HAL_I2C_Mem_Write+0x224>)
 80031ce:	400b      	ands	r3, r1
 80031d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031ea:	2300      	movs	r3, #0
 80031ec:	e000      	b.n	80031f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031ee:	2302      	movs	r3, #2
  }
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	fe00e800 	.word	0xfe00e800

080031fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	4608      	mov	r0, r1
 8003206:	4611      	mov	r1, r2
 8003208:	461a      	mov	r2, r3
 800320a:	4603      	mov	r3, r0
 800320c:	817b      	strh	r3, [r7, #10]
 800320e:	460b      	mov	r3, r1
 8003210:	813b      	strh	r3, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b20      	cmp	r3, #32
 8003220:	f040 80fd 	bne.w	800341e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_I2C_Mem_Read+0x34>
 800322a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800322c:	2b00      	cmp	r3, #0
 800322e:	d105      	bne.n	800323c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003236:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0f1      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003242:	2b01      	cmp	r3, #1
 8003244:	d101      	bne.n	800324a <HAL_I2C_Mem_Read+0x4e>
 8003246:	2302      	movs	r3, #2
 8003248:	e0ea      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2201      	movs	r2, #1
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003252:	f7ff f9f3 	bl	800263c <HAL_GetTick>
 8003256:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2319      	movs	r3, #25
 800325e:	2201      	movs	r2, #1
 8003260:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 f9af 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0d5      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2222      	movs	r2, #34	@ 0x22
 8003278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2240      	movs	r2, #64	@ 0x40
 8003280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003294:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800329c:	88f8      	ldrh	r0, [r7, #6]
 800329e:	893a      	ldrh	r2, [r7, #8]
 80032a0:	8979      	ldrh	r1, [r7, #10]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	4603      	mov	r3, r0
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 f913 	bl	80034d8 <I2C_RequestMemoryRead>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0ad      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2bff      	cmp	r3, #255	@ 0xff
 80032cc:	d90e      	bls.n	80032ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	4b52      	ldr	r3, [pc, #328]	@ (8003428 <HAL_I2C_Mem_Read+0x22c>)
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fb33 	bl	8003950 <I2C_TransferConfig>
 80032ea:	e00f      	b.n	800330c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	8979      	ldrh	r1, [r7, #10]
 80032fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003428 <HAL_I2C_Mem_Read+0x22c>)
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fb22 	bl	8003950 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	9300      	str	r3, [sp, #0]
 8003310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003312:	2200      	movs	r2, #0
 8003314:	2104      	movs	r1, #4
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f956 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e07c      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003338:	1c5a      	adds	r2, r3, #1
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	3b01      	subs	r3, #1
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d034      	beq.n	80033cc <HAL_I2C_Mem_Read+0x1d0>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003366:	2b00      	cmp	r3, #0
 8003368:	d130      	bne.n	80033cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	2200      	movs	r2, #0
 8003372:	2180      	movs	r1, #128	@ 0x80
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f927 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e04d      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003388:	b29b      	uxth	r3, r3
 800338a:	2bff      	cmp	r3, #255	@ 0xff
 800338c:	d90e      	bls.n	80033ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003398:	b2da      	uxtb	r2, r3
 800339a:	8979      	ldrh	r1, [r7, #10]
 800339c:	2300      	movs	r3, #0
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fad3 	bl	8003950 <I2C_TransferConfig>
 80033aa:	e00f      	b.n	80033cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ba:	b2da      	uxtb	r2, r3
 80033bc:	8979      	ldrh	r1, [r7, #10]
 80033be:	2300      	movs	r3, #0
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fac2 	bl	8003950 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d19a      	bne.n	800330c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f994 	bl	8003708 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e01a      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2220      	movs	r2, #32
 80033f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <HAL_I2C_Mem_Read+0x230>)
 80033fe:	400b      	ands	r3, r1
 8003400:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2220      	movs	r2, #32
 8003406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	80002400 	.word	0x80002400
 800342c:	fe00e800 	.word	0xfe00e800

08003430 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af02      	add	r7, sp, #8
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	4608      	mov	r0, r1
 800343a:	4611      	mov	r1, r2
 800343c:	461a      	mov	r2, r3
 800343e:	4603      	mov	r3, r0
 8003440:	817b      	strh	r3, [r7, #10]
 8003442:	460b      	mov	r3, r1
 8003444:	813b      	strh	r3, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	8979      	ldrh	r1, [r7, #10]
 8003450:	4b20      	ldr	r3, [pc, #128]	@ (80034d4 <I2C_RequestMemoryWrite+0xa4>)
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 fa79 	bl	8003950 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	69b9      	ldr	r1, [r7, #24]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 f909 	bl	800367a <I2C_WaitOnTXISFlagUntilTimeout>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e02c      	b.n	80034cc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003472:	88fb      	ldrh	r3, [r7, #6]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d105      	bne.n	8003484 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	629a      	str	r2, [r3, #40]	@ 0x28
 8003482:	e015      	b.n	80034b0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003484:	893b      	ldrh	r3, [r7, #8]
 8003486:	0a1b      	lsrs	r3, r3, #8
 8003488:	b29b      	uxth	r3, r3
 800348a:	b2da      	uxtb	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003492:	69fa      	ldr	r2, [r7, #28]
 8003494:	69b9      	ldr	r1, [r7, #24]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8ef 	bl	800367a <I2C_WaitOnTXISFlagUntilTimeout>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e012      	b.n	80034cc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034a6:	893b      	ldrh	r3, [r7, #8]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2200      	movs	r2, #0
 80034b8:	2180      	movs	r1, #128	@ 0x80
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f884 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	80002000 	.word	0x80002000

080034d8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af02      	add	r7, sp, #8
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	4608      	mov	r0, r1
 80034e2:	4611      	mov	r1, r2
 80034e4:	461a      	mov	r2, r3
 80034e6:	4603      	mov	r3, r0
 80034e8:	817b      	strh	r3, [r7, #10]
 80034ea:	460b      	mov	r3, r1
 80034ec:	813b      	strh	r3, [r7, #8]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034f2:	88fb      	ldrh	r3, [r7, #6]
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	8979      	ldrh	r1, [r7, #10]
 80034f8:	4b20      	ldr	r3, [pc, #128]	@ (800357c <I2C_RequestMemoryRead+0xa4>)
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	2300      	movs	r3, #0
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fa26 	bl	8003950 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	69b9      	ldr	r1, [r7, #24]
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f000 f8b6 	bl	800367a <I2C_WaitOnTXISFlagUntilTimeout>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e02c      	b.n	8003572 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003518:	88fb      	ldrh	r3, [r7, #6]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d105      	bne.n	800352a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800351e:	893b      	ldrh	r3, [r7, #8]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	629a      	str	r2, [r3, #40]	@ 0x28
 8003528:	e015      	b.n	8003556 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800352a:	893b      	ldrh	r3, [r7, #8]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	b29b      	uxth	r3, r3
 8003530:	b2da      	uxtb	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	69b9      	ldr	r1, [r7, #24]
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f89c 	bl	800367a <I2C_WaitOnTXISFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e012      	b.n	8003572 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800354c:	893b      	ldrh	r3, [r7, #8]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2200      	movs	r2, #0
 800355e:	2140      	movs	r1, #64	@ 0x40
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f831 	bl	80035c8 <I2C_WaitOnFlagUntilTimeout>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	80002000 	.word	0x80002000

08003580 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b02      	cmp	r3, #2
 8003594:	d103      	bne.n	800359e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2200      	movs	r2, #0
 800359c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	f003 0301 	and.w	r3, r3, #1
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d007      	beq.n	80035bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	699a      	ldr	r2, [r3, #24]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	619a      	str	r2, [r3, #24]
  }
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d8:	e03b      	b.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	6839      	ldr	r1, [r7, #0]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f8d6 	bl	8003790 <I2C_IsErrorOccurred>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e041      	b.n	8003672 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d02d      	beq.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7ff f821 	bl	800263c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d122      	bne.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	429a      	cmp	r2, r3
 800361a:	bf0c      	ite	eq
 800361c:	2301      	moveq	r3, #1
 800361e:	2300      	movne	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	461a      	mov	r2, r3
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	429a      	cmp	r2, r3
 8003628:	d113      	bne.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e00f      	b.n	8003672 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4013      	ands	r3, r2
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	bf0c      	ite	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	2300      	movne	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	429a      	cmp	r2, r3
 800366e:	d0b4      	beq.n	80035da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	60f8      	str	r0, [r7, #12]
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003686:	e033      	b.n	80036f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 f87f 	bl	8003790 <I2C_IsErrorOccurred>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d001      	beq.n	800369c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e031      	b.n	8003700 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a2:	d025      	beq.n	80036f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	f7fe ffca 	bl	800263c <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	68ba      	ldr	r2, [r7, #8]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d302      	bcc.n	80036ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d11a      	bne.n	80036f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d013      	beq.n	80036f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e007      	b.n	8003700 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d1c4      	bne.n	8003688 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003714:	e02f      	b.n	8003776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f838 	bl	8003790 <I2C_IsErrorOccurred>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e02d      	b.n	8003786 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fe ff87 	bl	800263c <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d11a      	bne.n	8003776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	f003 0320 	and.w	r3, r3, #32
 800374a:	2b20      	cmp	r3, #32
 800374c:	d013      	beq.n	8003776 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e007      	b.n	8003786 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b20      	cmp	r3, #32
 8003782:	d1c8      	bne.n	8003716 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800379c:	2300      	movs	r3, #0
 800379e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d068      	beq.n	800388e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2210      	movs	r2, #16
 80037c2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037c4:	e049      	b.n	800385a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d045      	beq.n	800385a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fe ff35 	bl	800263c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	68ba      	ldr	r2, [r7, #8]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <I2C_IsErrorOccurred+0x54>
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d13a      	bne.n	800385a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037ee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037f6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003806:	d121      	bne.n	800384c <I2C_IsErrorOccurred+0xbc>
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800380e:	d01d      	beq.n	800384c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003810:	7cfb      	ldrb	r3, [r7, #19]
 8003812:	2b20      	cmp	r3, #32
 8003814:	d01a      	beq.n	800384c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003824:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003826:	f7fe ff09 	bl	800263c <HAL_GetTick>
 800382a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800382c:	e00e      	b.n	800384c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800382e:	f7fe ff05 	bl	800263c <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b19      	cmp	r3, #25
 800383a:	d907      	bls.n	800384c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	f043 0320 	orr.w	r3, r3, #32
 8003842:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800384a:	e006      	b.n	800385a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b20      	cmp	r3, #32
 8003858:	d1e9      	bne.n	800382e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b20      	cmp	r3, #32
 8003866:	d003      	beq.n	8003870 <I2C_IsErrorOccurred+0xe0>
 8003868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0aa      	beq.n	80037c6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003870:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003874:	2b00      	cmp	r3, #0
 8003876:	d103      	bne.n	8003880 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2220      	movs	r2, #32
 800387e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	f043 0304 	orr.w	r3, r3, #4
 8003886:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00b      	beq.n	80038b8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80038a0:	6a3b      	ldr	r3, [r7, #32]
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f043 0308 	orr.w	r3, r3, #8
 80038c8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f043 0302 	orr.w	r3, r3, #2
 80038ea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80038fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003900:	2b00      	cmp	r3, #0
 8003902:	d01c      	beq.n	800393e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f7ff fe3b 	bl	8003580 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b0d      	ldr	r3, [pc, #52]	@ (800394c <I2C_IsErrorOccurred+0x1bc>)
 8003916:	400b      	ands	r3, r1
 8003918:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	431a      	orrs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800393e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003942:	4618      	mov	r0, r3
 8003944:	3728      	adds	r7, #40	@ 0x28
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	fe00e800 	.word	0xfe00e800

08003950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	460b      	mov	r3, r1
 800395c:	817b      	strh	r3, [r7, #10]
 800395e:	4613      	mov	r3, r2
 8003960:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003962:	897b      	ldrh	r3, [r7, #10]
 8003964:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003968:	7a7b      	ldrb	r3, [r7, #9]
 800396a:	041b      	lsls	r3, r3, #16
 800396c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003970:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	4313      	orrs	r3, r2
 800397a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800397e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	6a3b      	ldr	r3, [r7, #32]
 8003988:	0d5b      	lsrs	r3, r3, #21
 800398a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800398e:	4b08      	ldr	r3, [pc, #32]	@ (80039b0 <I2C_TransferConfig+0x60>)
 8003990:	430b      	orrs	r3, r1
 8003992:	43db      	mvns	r3, r3
 8003994:	ea02 0103 	and.w	r1, r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	430a      	orrs	r2, r1
 80039a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80039a2:	bf00      	nop
 80039a4:	371c      	adds	r7, #28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	03ff63ff 	.word	0x03ff63ff

080039b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d138      	bne.n	8003a3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e032      	b.n	8003a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2224      	movs	r2, #36	@ 0x24
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6819      	ldr	r1, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e000      	b.n	8003a3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a3c:	2302      	movs	r3, #2
  }
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d139      	bne.n	8003ad4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e033      	b.n	8003ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2224      	movs	r2, #36	@ 0x24
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0201 	bic.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	021b      	lsls	r3, r3, #8
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ae8:	4b0d      	ldr	r3, [pc, #52]	@ (8003b20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af4:	d102      	bne.n	8003afc <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003af6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003afa:	e00b      	b.n	8003b14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003afc:	4b08      	ldr	r3, [pc, #32]	@ (8003b20 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b0a:	d102      	bne.n	8003b12 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003b0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b10:	e000      	b.n	8003b14 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003b12:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40007000 	.word	0x40007000

08003b24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d141      	bne.n	8003bb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b32:	4b4b      	ldr	r3, [pc, #300]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b3e:	d131      	bne.n	8003ba4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b40:	4b47      	ldr	r3, [pc, #284]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b46:	4a46      	ldr	r2, [pc, #280]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b50:	4b43      	ldr	r3, [pc, #268]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b58:	4a41      	ldr	r2, [pc, #260]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b60:	4b40      	ldr	r3, [pc, #256]	@ (8003c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2232      	movs	r2, #50	@ 0x32
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b70:	0c9b      	lsrs	r3, r3, #18
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b76:	e002      	b.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b7e:	4b38      	ldr	r3, [pc, #224]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b8a:	d102      	bne.n	8003b92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d1f2      	bne.n	8003b78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b92:	4b33      	ldr	r3, [pc, #204]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b9e:	d158      	bne.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e057      	b.n	8003c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003baa:	4a2d      	ldr	r2, [pc, #180]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bb4:	e04d      	b.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bbc:	d141      	bne.n	8003c42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bbe:	4b28      	ldr	r3, [pc, #160]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bca:	d131      	bne.n	8003c30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bcc:	4b24      	ldr	r3, [pc, #144]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bd2:	4a23      	ldr	r2, [pc, #140]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bdc:	4b20      	ldr	r3, [pc, #128]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003be4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003bec:	4b1d      	ldr	r3, [pc, #116]	@ (8003c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2232      	movs	r2, #50	@ 0x32
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfc:	0c9b      	lsrs	r3, r3, #18
 8003bfe:	3301      	adds	r3, #1
 8003c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c02:	e002      	b.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c0a:	4b15      	ldr	r3, [pc, #84]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c16:	d102      	bne.n	8003c1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1f2      	bne.n	8003c04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c1e:	4b10      	ldr	r3, [pc, #64]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c2a:	d112      	bne.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e011      	b.n	8003c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c30:	4b0b      	ldr	r3, [pc, #44]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c36:	4a0a      	ldr	r2, [pc, #40]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c40:	e007      	b.n	8003c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c42:	4b07      	ldr	r3, [pc, #28]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c4a:	4a05      	ldr	r2, [pc, #20]	@ (8003c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c50:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	40007000 	.word	0x40007000
 8003c64:	20000000 	.word	0x20000000
 8003c68:	431bde83 	.word	0x431bde83

08003c6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	f000 bc08 	b.w	8004490 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c80:	4b96      	ldr	r3, [pc, #600]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 030c 	and.w	r3, r3, #12
 8003c88:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c8a:	4b94      	ldr	r3, [pc, #592]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0310 	and.w	r3, r3, #16
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	f000 80e4 	beq.w	8003e6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d007      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x4c>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b0c      	cmp	r3, #12
 8003cac:	f040 808b 	bne.w	8003dc6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	f040 8087 	bne.w	8003dc6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cb8:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x64>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e3df      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	4b81      	ldr	r3, [pc, #516]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d004      	beq.n	8003cea <HAL_RCC_OscConfig+0x7e>
 8003ce0:	4b7e      	ldr	r3, [pc, #504]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ce8:	e005      	b.n	8003cf6 <HAL_RCC_OscConfig+0x8a>
 8003cea:	4b7c      	ldr	r3, [pc, #496]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf0:	091b      	lsrs	r3, r3, #4
 8003cf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d223      	bcs.n	8003d42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fdcc 	bl	800489c <RCC_SetFlashLatencyFromMSIRange>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e3c0      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d0e:	4b73      	ldr	r3, [pc, #460]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a72      	ldr	r2, [pc, #456]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d14:	f043 0308 	orr.w	r3, r3, #8
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b70      	ldr	r3, [pc, #448]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	496d      	ldr	r1, [pc, #436]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69db      	ldr	r3, [r3, #28]
 8003d38:	021b      	lsls	r3, r3, #8
 8003d3a:	4968      	ldr	r1, [pc, #416]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
 8003d40:	e025      	b.n	8003d8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d42:	4b66      	ldr	r3, [pc, #408]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a65      	ldr	r2, [pc, #404]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d48:	f043 0308 	orr.w	r3, r3, #8
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b63      	ldr	r3, [pc, #396]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	4960      	ldr	r1, [pc, #384]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d60:	4b5e      	ldr	r3, [pc, #376]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	021b      	lsls	r3, r3, #8
 8003d6e:	495b      	ldr	r1, [pc, #364]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 fd8c 	bl	800489c <RCC_SetFlashLatencyFromMSIRange>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e380      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d8e:	f000 fcc1 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b51      	ldr	r3, [pc, #324]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	091b      	lsrs	r3, r3, #4
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	4950      	ldr	r1, [pc, #320]	@ (8003ee0 <HAL_RCC_OscConfig+0x274>)
 8003da0:	5ccb      	ldrb	r3, [r1, r3]
 8003da2:	f003 031f 	and.w	r3, r3, #31
 8003da6:	fa22 f303 	lsr.w	r3, r2, r3
 8003daa:	4a4e      	ldr	r2, [pc, #312]	@ (8003ee4 <HAL_RCC_OscConfig+0x278>)
 8003dac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dae:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee8 <HAL_RCC_OscConfig+0x27c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fbf2 	bl	800259c <HAL_InitTick>
 8003db8:	4603      	mov	r3, r0
 8003dba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dbc:	7bfb      	ldrb	r3, [r7, #15]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d052      	beq.n	8003e68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003dc2:	7bfb      	ldrb	r3, [r7, #15]
 8003dc4:	e364      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d032      	beq.n	8003e34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003dce:	4b43      	ldr	r3, [pc, #268]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a42      	ldr	r2, [pc, #264]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dda:	f7fe fc2f 	bl	800263c <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003de2:	f7fe fc2b 	bl	800263c <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e34d      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003df4:	4b39      	ldr	r3, [pc, #228]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d0f0      	beq.n	8003de2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e00:	4b36      	ldr	r3, [pc, #216]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a35      	ldr	r2, [pc, #212]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e06:	f043 0308 	orr.w	r3, r3, #8
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b33      	ldr	r3, [pc, #204]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4930      	ldr	r1, [pc, #192]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	492b      	ldr	r1, [pc, #172]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
 8003e32:	e01a      	b.n	8003e6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e34:	4b29      	ldr	r3, [pc, #164]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a28      	ldr	r2, [pc, #160]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e3a:	f023 0301 	bic.w	r3, r3, #1
 8003e3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e40:	f7fe fbfc 	bl	800263c <HAL_GetTick>
 8003e44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e48:	f7fe fbf8 	bl	800263c <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e31a      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e5a:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1f0      	bne.n	8003e48 <HAL_RCC_OscConfig+0x1dc>
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d073      	beq.n	8003f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	2b08      	cmp	r3, #8
 8003e7a:	d005      	beq.n	8003e88 <HAL_RCC_OscConfig+0x21c>
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d10e      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b03      	cmp	r3, #3
 8003e86:	d10b      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e88:	4b14      	ldr	r3, [pc, #80]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d063      	beq.n	8003f5c <HAL_RCC_OscConfig+0x2f0>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d15f      	bne.n	8003f5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e2f7      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x24c>
 8003eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a0b      	ldr	r2, [pc, #44]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e025      	b.n	8003f04 <HAL_RCC_OscConfig+0x298>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ec0:	d114      	bne.n	8003eec <HAL_RCC_OscConfig+0x280>
 8003ec2:	4b06      	ldr	r3, [pc, #24]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a05      	ldr	r2, [pc, #20]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ecc:	6013      	str	r3, [r2, #0]
 8003ece:	4b03      	ldr	r3, [pc, #12]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a02      	ldr	r2, [pc, #8]	@ (8003edc <HAL_RCC_OscConfig+0x270>)
 8003ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	e013      	b.n	8003f04 <HAL_RCC_OscConfig+0x298>
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08009280 	.word	0x08009280
 8003ee4:	20000000 	.word	0x20000000
 8003ee8:	200000a0 	.word	0x200000a0
 8003eec:	4ba0      	ldr	r3, [pc, #640]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a9f      	ldr	r2, [pc, #636]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	4b9d      	ldr	r3, [pc, #628]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a9c      	ldr	r2, [pc, #624]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d013      	beq.n	8003f34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fb96 	bl	800263c <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe fb92 	bl	800263c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	@ 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e2b4      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f26:	4b92      	ldr	r3, [pc, #584]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d0f0      	beq.n	8003f14 <HAL_RCC_OscConfig+0x2a8>
 8003f32:	e014      	b.n	8003f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f34:	f7fe fb82 	bl	800263c <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f3c:	f7fe fb7e 	bl	800263c <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b64      	cmp	r3, #100	@ 0x64
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e2a0      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4e:	4b88      	ldr	r3, [pc, #544]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1f0      	bne.n	8003f3c <HAL_RCC_OscConfig+0x2d0>
 8003f5a:	e000      	b.n	8003f5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d060      	beq.n	800402c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_OscConfig+0x310>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d119      	bne.n	8003faa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d116      	bne.n	8003faa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RCC_OscConfig+0x328>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e27d      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f94:	4b76      	ldr	r3, [pc, #472]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	061b      	lsls	r3, r3, #24
 8003fa2:	4973      	ldr	r1, [pc, #460]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fa8:	e040      	b.n	800402c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d023      	beq.n	8003ffa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbe:	f7fe fb3d 	bl	800263c <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc6:	f7fe fb39 	bl	800263c <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e25b      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd8:	4b65      	ldr	r3, [pc, #404]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe4:	4b62      	ldr	r3, [pc, #392]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	061b      	lsls	r3, r3, #24
 8003ff2:	495f      	ldr	r1, [pc, #380]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
 8003ff8:	e018      	b.n	800402c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a5c      	ldr	r2, [pc, #368]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8004000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004006:	f7fe fb19 	bl	800263c <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800400e:	f7fe fb15 	bl	800263c <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e237      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004020:	4b53      	ldr	r3, [pc, #332]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1f0      	bne.n	800400e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d03c      	beq.n	80040b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01c      	beq.n	800407a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004040:	4b4b      	ldr	r3, [pc, #300]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004046:	4a4a      	ldr	r2, [pc, #296]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7fe faf4 	bl	800263c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004058:	f7fe faf0 	bl	800263c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e212      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800406a:	4b41      	ldr	r3, [pc, #260]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 800406c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d0ef      	beq.n	8004058 <HAL_RCC_OscConfig+0x3ec>
 8004078:	e01b      	b.n	80040b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800407a:	4b3d      	ldr	r3, [pc, #244]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 800407c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004080:	4a3b      	ldr	r2, [pc, #236]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8004082:	f023 0301 	bic.w	r3, r3, #1
 8004086:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fe fad7 	bl	800263c <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004092:	f7fe fad3 	bl	800263c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e1f5      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040a4:	4b32      	ldr	r3, [pc, #200]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 80040a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1ef      	bne.n	8004092 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0304 	and.w	r3, r3, #4
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	f000 80a6 	beq.w	800420c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040c0:	2300      	movs	r3, #0
 80040c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 80040c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10d      	bne.n	80040ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040d0:	4b27      	ldr	r3, [pc, #156]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 80040d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d4:	4a26      	ldr	r2, [pc, #152]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 80040d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040da:	6593      	str	r3, [r2, #88]	@ 0x58
 80040dc:	4b24      	ldr	r3, [pc, #144]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 80040de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e8:	2301      	movs	r3, #1
 80040ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ec:	4b21      	ldr	r3, [pc, #132]	@ (8004174 <HAL_RCC_OscConfig+0x508>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d118      	bne.n	800412a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004174 <HAL_RCC_OscConfig+0x508>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004174 <HAL_RCC_OscConfig+0x508>)
 80040fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004104:	f7fe fa9a 	bl	800263c <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410c:	f7fe fa96 	bl	800263c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e1b8      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411e:	4b15      	ldr	r3, [pc, #84]	@ (8004174 <HAL_RCC_OscConfig+0x508>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d108      	bne.n	8004144 <HAL_RCC_OscConfig+0x4d8>
 8004132:	4b0f      	ldr	r3, [pc, #60]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	4a0d      	ldr	r2, [pc, #52]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004142:	e029      	b.n	8004198 <HAL_RCC_OscConfig+0x52c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b05      	cmp	r3, #5
 800414a:	d115      	bne.n	8004178 <HAL_RCC_OscConfig+0x50c>
 800414c:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	4a07      	ldr	r2, [pc, #28]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800415c:	4b04      	ldr	r3, [pc, #16]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004162:	4a03      	ldr	r2, [pc, #12]	@ (8004170 <HAL_RCC_OscConfig+0x504>)
 8004164:	f043 0301 	orr.w	r3, r3, #1
 8004168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800416c:	e014      	b.n	8004198 <HAL_RCC_OscConfig+0x52c>
 800416e:	bf00      	nop
 8004170:	40021000 	.word	0x40021000
 8004174:	40007000 	.word	0x40007000
 8004178:	4b9d      	ldr	r3, [pc, #628]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800417e:	4a9c      	ldr	r2, [pc, #624]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004188:	4b99      	ldr	r3, [pc, #612]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800418e:	4a98      	ldr	r2, [pc, #608]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004190:	f023 0304 	bic.w	r3, r3, #4
 8004194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d016      	beq.n	80041ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fe fa4c 	bl	800263c <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041a6:	e00a      	b.n	80041be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a8:	f7fe fa48 	bl	800263c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e168      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041be:	4b8c      	ldr	r3, [pc, #560]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 80041c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ed      	beq.n	80041a8 <HAL_RCC_OscConfig+0x53c>
 80041cc:	e015      	b.n	80041fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ce:	f7fe fa35 	bl	800263c <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041d4:	e00a      	b.n	80041ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041d6:	f7fe fa31 	bl	800263c <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e151      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041ec:	4b80      	ldr	r3, [pc, #512]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1ed      	bne.n	80041d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041fa:	7ffb      	ldrb	r3, [r7, #31]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004200:	4b7b      	ldr	r3, [pc, #492]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	4a7a      	ldr	r2, [pc, #488]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0320 	and.w	r3, r3, #32
 8004214:	2b00      	cmp	r3, #0
 8004216:	d03c      	beq.n	8004292 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01c      	beq.n	800425a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004220:	4b73      	ldr	r3, [pc, #460]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004222:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004226:	4a72      	ldr	r2, [pc, #456]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004228:	f043 0301 	orr.w	r3, r3, #1
 800422c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004230:	f7fe fa04 	bl	800263c <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004238:	f7fe fa00 	bl	800263c <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e122      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800424a:	4b69      	ldr	r3, [pc, #420]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 800424c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0ef      	beq.n	8004238 <HAL_RCC_OscConfig+0x5cc>
 8004258:	e01b      	b.n	8004292 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800425a:	4b65      	ldr	r3, [pc, #404]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 800425c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004260:	4a63      	ldr	r2, [pc, #396]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004262:	f023 0301 	bic.w	r3, r3, #1
 8004266:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426a:	f7fe f9e7 	bl	800263c <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004272:	f7fe f9e3 	bl	800263c <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e105      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004284:	4b5a      	ldr	r3, [pc, #360]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004286:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1ef      	bne.n	8004272 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	2b00      	cmp	r3, #0
 8004298:	f000 80f9 	beq.w	800448e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	f040 80cf 	bne.w	8004444 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042a6:	4b52      	ldr	r3, [pc, #328]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 0203 	and.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d12c      	bne.n	8004314 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	3b01      	subs	r3, #1
 80042c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d123      	bne.n	8004314 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042d8:	429a      	cmp	r2, r3
 80042da:	d11b      	bne.n	8004314 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d113      	bne.n	8004314 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	3b01      	subs	r3, #1
 80042fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d109      	bne.n	8004314 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	3b01      	subs	r3, #1
 800430e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d071      	beq.n	80043f8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b0c      	cmp	r3, #12
 8004318:	d068      	beq.n	80043ec <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800431a:	4b35      	ldr	r3, [pc, #212]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d105      	bne.n	8004332 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004326:	4b32      	ldr	r3, [pc, #200]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e0ac      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004336:	4b2e      	ldr	r3, [pc, #184]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a2d      	ldr	r2, [pc, #180]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 800433c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004340:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004342:	f7fe f97b 	bl	800263c <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434a:	f7fe f977 	bl	800263c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e099      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800435c:	4b24      	ldr	r3, [pc, #144]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1f0      	bne.n	800434a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004368:	4b21      	ldr	r3, [pc, #132]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	4b21      	ldr	r3, [pc, #132]	@ (80043f4 <HAL_RCC_OscConfig+0x788>)
 800436e:	4013      	ands	r3, r2
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004378:	3a01      	subs	r2, #1
 800437a:	0112      	lsls	r2, r2, #4
 800437c:	4311      	orrs	r1, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004382:	0212      	lsls	r2, r2, #8
 8004384:	4311      	orrs	r1, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800438a:	0852      	lsrs	r2, r2, #1
 800438c:	3a01      	subs	r2, #1
 800438e:	0552      	lsls	r2, r2, #21
 8004390:	4311      	orrs	r1, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004396:	0852      	lsrs	r2, r2, #1
 8004398:	3a01      	subs	r2, #1
 800439a:	0652      	lsls	r2, r2, #25
 800439c:	4311      	orrs	r1, r2
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043a2:	06d2      	lsls	r2, r2, #27
 80043a4:	430a      	orrs	r2, r1
 80043a6:	4912      	ldr	r1, [pc, #72]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043ac:	4b10      	ldr	r3, [pc, #64]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0f      	ldr	r2, [pc, #60]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 80043b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043b8:	4b0d      	ldr	r3, [pc, #52]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a0c      	ldr	r2, [pc, #48]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 80043be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043c4:	f7fe f93a 	bl	800263c <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043cc:	f7fe f936 	bl	800263c <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e058      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043de:	4b04      	ldr	r3, [pc, #16]	@ (80043f0 <HAL_RCC_OscConfig+0x784>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043ea:	e050      	b.n	800448e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e04f      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
 80043f0:	40021000 	.word	0x40021000
 80043f4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f8:	4b27      	ldr	r3, [pc, #156]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d144      	bne.n	800448e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004404:	4b24      	ldr	r3, [pc, #144]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a23      	ldr	r2, [pc, #140]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 800440a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800440e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004410:	4b21      	ldr	r3, [pc, #132]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a20      	ldr	r2, [pc, #128]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 8004416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800441c:	f7fe f90e 	bl	800263c <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004424:	f7fe f90a 	bl	800263c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e02c      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	4b18      	ldr	r3, [pc, #96]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x7b8>
 8004442:	e024      	b.n	800448e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b0c      	cmp	r3, #12
 8004448:	d01f      	beq.n	800448a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b13      	ldr	r3, [pc, #76]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a12      	ldr	r2, [pc, #72]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 8004450:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fe f8f1 	bl	800263c <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445e:	f7fe f8ed 	bl	800263c <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e00f      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004470:	4b09      	ldr	r3, [pc, #36]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800447c:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	4905      	ldr	r1, [pc, #20]	@ (8004498 <HAL_RCC_OscConfig+0x82c>)
 8004482:	4b06      	ldr	r3, [pc, #24]	@ (800449c <HAL_RCC_OscConfig+0x830>)
 8004484:	4013      	ands	r3, r2
 8004486:	60cb      	str	r3, [r1, #12]
 8004488:	e001      	b.n	800448e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	3720      	adds	r7, #32
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	feeefffc 	.word	0xfeeefffc

080044a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e11d      	b.n	80046f4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044b8:	4b90      	ldr	r3, [pc, #576]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d910      	bls.n	80044e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b8d      	ldr	r3, [pc, #564]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 020f 	bic.w	r2, r3, #15
 80044ce:	498b      	ldr	r1, [pc, #556]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d6:	4b89      	ldr	r3, [pc, #548]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 030f 	and.w	r3, r3, #15
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e105      	b.n	80046f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d010      	beq.n	8004516 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b81      	ldr	r3, [pc, #516]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004500:	429a      	cmp	r2, r3
 8004502:	d908      	bls.n	8004516 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004504:	4b7e      	ldr	r3, [pc, #504]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	497b      	ldr	r1, [pc, #492]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d079      	beq.n	8004616 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b03      	cmp	r3, #3
 8004528:	d11e      	bne.n	8004568 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452a:	4b75      	ldr	r3, [pc, #468]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e0dc      	b.n	80046f4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800453a:	f000 fa09 	bl	8004950 <RCC_GetSysClockFreqFromPLLSource>
 800453e:	4603      	mov	r3, r0
 8004540:	4a70      	ldr	r2, [pc, #448]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d946      	bls.n	80045d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004546:	4b6e      	ldr	r3, [pc, #440]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d140      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004552:	4b6b      	ldr	r3, [pc, #428]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800455a:	4a69      	ldr	r2, [pc, #420]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800455c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004560:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004562:	2380      	movs	r3, #128	@ 0x80
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	e035      	b.n	80045d4 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d107      	bne.n	8004580 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004570:	4b63      	ldr	r3, [pc, #396]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d115      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e0b9      	b.n	80046f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d107      	bne.n	8004598 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004588:	4b5d      	ldr	r3, [pc, #372]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d109      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e0ad      	b.n	80046f4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004598:	4b59      	ldr	r3, [pc, #356]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0a5      	b.n	80046f4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80045a8:	f000 f8b4 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4a55      	ldr	r2, [pc, #340]	@ (8004704 <HAL_RCC_ClockConfig+0x264>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d90f      	bls.n	80045d4 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80045b4:	4b52      	ldr	r3, [pc, #328]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045c8:	4a4d      	ldr	r2, [pc, #308]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80045ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045ce:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045d0:	2380      	movs	r3, #128	@ 0x80
 80045d2:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045d4:	4b4a      	ldr	r3, [pc, #296]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 0203 	bic.w	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4947      	ldr	r1, [pc, #284]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e6:	f7fe f829 	bl	800263c <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ee:	f7fe f825 	bl	800263c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e077      	b.n	80046f4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004604:	4b3e      	ldr	r3, [pc, #248]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 020c 	and.w	r2, r3, #12
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	429a      	cmp	r2, r3
 8004614:	d1eb      	bne.n	80045ee <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	2b80      	cmp	r3, #128	@ 0x80
 800461a:	d105      	bne.n	8004628 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800461c:	4b38      	ldr	r3, [pc, #224]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	4a37      	ldr	r2, [pc, #220]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004622:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004626:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d010      	beq.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	4b31      	ldr	r3, [pc, #196]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004640:	429a      	cmp	r2, r3
 8004642:	d208      	bcs.n	8004656 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b2e      	ldr	r3, [pc, #184]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	492b      	ldr	r1, [pc, #172]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004656:	4b29      	ldr	r3, [pc, #164]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d210      	bcs.n	8004686 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004664:	4b25      	ldr	r3, [pc, #148]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 020f 	bic.w	r2, r3, #15
 800466c:	4923      	ldr	r1, [pc, #140]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004674:	4b21      	ldr	r3, [pc, #132]	@ (80046fc <HAL_RCC_ClockConfig+0x25c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e036      	b.n	80046f4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004692:	4b1b      	ldr	r3, [pc, #108]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4918      	ldr	r1, [pc, #96]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b0:	4b13      	ldr	r3, [pc, #76]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4910      	ldr	r1, [pc, #64]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c4:	f000 f826 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <HAL_RCC_ClockConfig+0x260>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	490c      	ldr	r1, [pc, #48]	@ (8004708 <HAL_RCC_ClockConfig+0x268>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
 80046e0:	4a0a      	ldr	r2, [pc, #40]	@ (800470c <HAL_RCC_ClockConfig+0x26c>)
 80046e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <HAL_RCC_ClockConfig+0x270>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fd ff57 	bl	800259c <HAL_InitTick>
 80046ee:	4603      	mov	r3, r0
 80046f0:	73fb      	strb	r3, [r7, #15]

  return status;
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40022000 	.word	0x40022000
 8004700:	40021000 	.word	0x40021000
 8004704:	04c4b400 	.word	0x04c4b400
 8004708:	08009280 	.word	0x08009280
 800470c:	20000000 	.word	0x20000000
 8004710:	200000a0 	.word	0x200000a0

08004714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	@ 0x24
 8004718:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	2300      	movs	r3, #0
 8004720:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004722:	4b3e      	ldr	r3, [pc, #248]	@ (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800472c:	4b3b      	ldr	r3, [pc, #236]	@ (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	f003 0303 	and.w	r3, r3, #3
 8004734:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d005      	beq.n	8004748 <HAL_RCC_GetSysClockFreq+0x34>
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b0c      	cmp	r3, #12
 8004740:	d121      	bne.n	8004786 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d11e      	bne.n	8004786 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004748:	4b34      	ldr	r3, [pc, #208]	@ (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004754:	4b31      	ldr	r3, [pc, #196]	@ (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800475a:	0a1b      	lsrs	r3, r3, #8
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	61fb      	str	r3, [r7, #28]
 8004762:	e005      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004764:	4b2d      	ldr	r3, [pc, #180]	@ (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	091b      	lsrs	r3, r3, #4
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004770:	4a2b      	ldr	r2, [pc, #172]	@ (8004820 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004778:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10d      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004784:	e00a      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	2b04      	cmp	r3, #4
 800478a:	d102      	bne.n	8004792 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800478c:	4b25      	ldr	r3, [pc, #148]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x110>)
 800478e:	61bb      	str	r3, [r7, #24]
 8004790:	e004      	b.n	800479c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d101      	bne.n	800479c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004798:	4b23      	ldr	r3, [pc, #140]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x114>)
 800479a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	2b0c      	cmp	r3, #12
 80047a0:	d134      	bne.n	800480c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047a2:	4b1e      	ldr	r3, [pc, #120]	@ (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0303 	and.w	r3, r3, #3
 80047aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d003      	beq.n	80047ba <HAL_RCC_GetSysClockFreq+0xa6>
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d003      	beq.n	80047c0 <HAL_RCC_GetSysClockFreq+0xac>
 80047b8:	e005      	b.n	80047c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047ba:	4b1a      	ldr	r3, [pc, #104]	@ (8004824 <HAL_RCC_GetSysClockFreq+0x110>)
 80047bc:	617b      	str	r3, [r7, #20]
      break;
 80047be:	e005      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047c0:	4b19      	ldr	r3, [pc, #100]	@ (8004828 <HAL_RCC_GetSysClockFreq+0x114>)
 80047c2:	617b      	str	r3, [r7, #20]
      break;
 80047c4:	e002      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	617b      	str	r3, [r7, #20]
      break;
 80047ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047cc:	4b13      	ldr	r3, [pc, #76]	@ (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	3301      	adds	r3, #1
 80047d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047da:	4b10      	ldr	r3, [pc, #64]	@ (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	0a1b      	lsrs	r3, r3, #8
 80047e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	fb03 f202 	mul.w	r2, r3, r2
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047f2:	4b0a      	ldr	r3, [pc, #40]	@ (800481c <HAL_RCC_GetSysClockFreq+0x108>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	0e5b      	lsrs	r3, r3, #25
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	3301      	adds	r3, #1
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004802:	697a      	ldr	r2, [r7, #20]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800480c:	69bb      	ldr	r3, [r7, #24]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3724      	adds	r7, #36	@ 0x24
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000
 8004820:	08009298 	.word	0x08009298
 8004824:	00f42400 	.word	0x00f42400
 8004828:	007a1200 	.word	0x007a1200

0800482c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004830:	4b03      	ldr	r3, [pc, #12]	@ (8004840 <HAL_RCC_GetHCLKFreq+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000000 	.word	0x20000000

08004844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004848:	f7ff fff0 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0a1b      	lsrs	r3, r3, #8
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4904      	ldr	r1, [pc, #16]	@ (800486c <HAL_RCC_GetPCLK1Freq+0x28>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004864:	4618      	mov	r0, r3
 8004866:	bd80      	pop	{r7, pc}
 8004868:	40021000 	.word	0x40021000
 800486c:	08009290 	.word	0x08009290

08004870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004874:	f7ff ffda 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	0adb      	lsrs	r3, r3, #11
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	4904      	ldr	r1, [pc, #16]	@ (8004898 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	f003 031f 	and.w	r3, r3, #31
 800488c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004890:	4618      	mov	r0, r3
 8004892:	bd80      	pop	{r7, pc}
 8004894:	40021000 	.word	0x40021000
 8004898:	08009290 	.word	0x08009290

0800489c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048a8:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048b4:	f7ff f916 	bl	8003ae4 <HAL_PWREx_GetVoltageRange>
 80048b8:	6178      	str	r0, [r7, #20]
 80048ba:	e014      	b.n	80048e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048bc:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c0:	4a21      	ldr	r2, [pc, #132]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80048c8:	4b1f      	ldr	r3, [pc, #124]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048d4:	f7ff f906 	bl	8003ae4 <HAL_PWREx_GetVoltageRange>
 80048d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048da:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048de:	4a1a      	ldr	r2, [pc, #104]	@ (8004948 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80048e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048ec:	d10b      	bne.n	8004906 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b80      	cmp	r3, #128	@ 0x80
 80048f2:	d913      	bls.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2ba0      	cmp	r3, #160	@ 0xa0
 80048f8:	d902      	bls.n	8004900 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048fa:	2302      	movs	r3, #2
 80048fc:	613b      	str	r3, [r7, #16]
 80048fe:	e00d      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004900:	2301      	movs	r3, #1
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e00a      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b7f      	cmp	r3, #127	@ 0x7f
 800490a:	d902      	bls.n	8004912 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 800490c:	2302      	movs	r3, #2
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e004      	b.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b70      	cmp	r3, #112	@ 0x70
 8004916:	d101      	bne.n	800491c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004918:	2301      	movs	r3, #1
 800491a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800491c:	4b0b      	ldr	r3, [pc, #44]	@ (800494c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 020f 	bic.w	r2, r3, #15
 8004924:	4909      	ldr	r1, [pc, #36]	@ (800494c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800492c:	4b07      	ldr	r3, [pc, #28]	@ (800494c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	429a      	cmp	r2, r3
 8004938:	d001      	beq.n	800493e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e000      	b.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40021000 	.word	0x40021000
 800494c:	40022000 	.word	0x40022000

08004950 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004956:	4b2d      	ldr	r3, [pc, #180]	@ (8004a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2b03      	cmp	r3, #3
 8004964:	d00b      	beq.n	800497e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b03      	cmp	r3, #3
 800496a:	d825      	bhi.n	80049b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d008      	beq.n	8004984 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b02      	cmp	r3, #2
 8004976:	d11f      	bne.n	80049b8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004978:	4b25      	ldr	r3, [pc, #148]	@ (8004a10 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800497a:	613b      	str	r3, [r7, #16]
    break;
 800497c:	e01f      	b.n	80049be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800497e:	4b25      	ldr	r3, [pc, #148]	@ (8004a14 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004980:	613b      	str	r3, [r7, #16]
    break;
 8004982:	e01c      	b.n	80049be <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004984:	4b21      	ldr	r3, [pc, #132]	@ (8004a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d107      	bne.n	80049a0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004990:	4b1e      	ldr	r3, [pc, #120]	@ (8004a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004996:	0a1b      	lsrs	r3, r3, #8
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	e005      	b.n	80049ac <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80049a0:	4b1a      	ldr	r3, [pc, #104]	@ (8004a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80049ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004a18 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b4:	613b      	str	r3, [r7, #16]
    break;
 80049b6:	e002      	b.n	80049be <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	613b      	str	r3, [r7, #16]
    break;
 80049bc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049be:	4b13      	ldr	r3, [pc, #76]	@ (8004a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	091b      	lsrs	r3, r3, #4
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	3301      	adds	r3, #1
 80049ca:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80049cc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	0a1b      	lsrs	r3, r3, #8
 80049d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	fb03 f202 	mul.w	r2, r3, r2
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e2:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80049e4:	4b09      	ldr	r3, [pc, #36]	@ (8004a0c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	0e5b      	lsrs	r3, r3, #25
 80049ea:	f003 0303 	and.w	r3, r3, #3
 80049ee:	3301      	adds	r3, #1
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049fc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80049fe:	683b      	ldr	r3, [r7, #0]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	00f42400 	.word	0x00f42400
 8004a14:	007a1200 	.word	0x007a1200
 8004a18:	08009298 	.word	0x08009298

08004a1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b086      	sub	sp, #24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a24:	2300      	movs	r3, #0
 8004a26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a28:	2300      	movs	r3, #0
 8004a2a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d040      	beq.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a3c:	2b80      	cmp	r3, #128	@ 0x80
 8004a3e:	d02a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a40:	2b80      	cmp	r3, #128	@ 0x80
 8004a42:	d825      	bhi.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a44:	2b60      	cmp	r3, #96	@ 0x60
 8004a46:	d026      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004a48:	2b60      	cmp	r3, #96	@ 0x60
 8004a4a:	d821      	bhi.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a4c:	2b40      	cmp	r3, #64	@ 0x40
 8004a4e:	d006      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004a50:	2b40      	cmp	r3, #64	@ 0x40
 8004a52:	d81d      	bhi.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d009      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004a58:	2b20      	cmp	r3, #32
 8004a5a:	d010      	beq.n	8004a7e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004a5c:	e018      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a5e:	4b89      	ldr	r3, [pc, #548]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	4a88      	ldr	r2, [pc, #544]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a6a:	e015      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3304      	adds	r3, #4
 8004a70:	2100      	movs	r1, #0
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fb02 	bl	800507c <RCCEx_PLLSAI1_Config>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a7c:	e00c      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3320      	adds	r3, #32
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fbed 	bl	8005264 <RCCEx_PLLSAI2_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a8e:	e003      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	74fb      	strb	r3, [r7, #19]
      break;
 8004a94:	e000      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004a96:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a98:	7cfb      	ldrb	r3, [r7, #19]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10b      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a9e:	4b79      	ldr	r3, [pc, #484]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004aa4:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004aac:	4975      	ldr	r1, [pc, #468]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004ab4:	e001      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d047      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ace:	d030      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad4:	d82a      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ad6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ada:	d02a      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004adc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ae0:	d824      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004ae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ae6:	d008      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004ae8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004aec:	d81e      	bhi.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004af6:	d010      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004af8:	e018      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004afa:	4b62      	ldr	r3, [pc, #392]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	4a61      	ldr	r2, [pc, #388]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b04:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b06:	e015      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fab4 	bl	800507c <RCCEx_PLLSAI1_Config>
 8004b14:	4603      	mov	r3, r0
 8004b16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b18:	e00c      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3320      	adds	r3, #32
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f000 fb9f 	bl	8005264 <RCCEx_PLLSAI2_Config>
 8004b26:	4603      	mov	r3, r0
 8004b28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b2a:	e003      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	74fb      	strb	r3, [r7, #19]
      break;
 8004b30:	e000      	b.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b34:	7cfb      	ldrb	r3, [r7, #19]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b3a:	4b52      	ldr	r3, [pc, #328]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b48:	494e      	ldr	r1, [pc, #312]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004b50:	e001      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f000 809f 	beq.w	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b64:	2300      	movs	r3, #0
 8004b66:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b68:	4b46      	ldr	r3, [pc, #280]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00d      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7e:	4b41      	ldr	r3, [pc, #260]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b82:	4a40      	ldr	r2, [pc, #256]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b88:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004b8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b96:	2301      	movs	r3, #1
 8004b98:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a3a      	ldr	r2, [pc, #232]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ba4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ba6:	f7fd fd49 	bl	800263c <HAL_GetTick>
 8004baa:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bac:	e009      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bae:	f7fd fd45 	bl	800263c <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d902      	bls.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	74fb      	strb	r3, [r7, #19]
        break;
 8004bc0:	e005      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bc2:	4b31      	ldr	r3, [pc, #196]	@ (8004c88 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0ef      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004bce:	7cfb      	ldrb	r3, [r7, #19]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d15b      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bde:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d01f      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d019      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bf2:	4b24      	ldr	r3, [pc, #144]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bfe:	4b21      	ldr	r3, [pc, #132]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c04:	4a1f      	ldr	r2, [pc, #124]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c0e:	4b1d      	ldr	r3, [pc, #116]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c14:	4a1b      	ldr	r2, [pc, #108]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c1a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c1e:	4a19      	ldr	r2, [pc, #100]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f003 0301 	and.w	r3, r3, #1
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d016      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fd fd04 	bl	800263c <HAL_GetTick>
 8004c34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c36:	e00b      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fd fd00 	bl	800263c <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d902      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c4e:	e006      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c50:	4b0c      	ldr	r3, [pc, #48]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0ec      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004c5e:	7cfb      	ldrb	r3, [r7, #19]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d10c      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c64:	4b07      	ldr	r3, [pc, #28]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c74:	4903      	ldr	r1, [pc, #12]	@ (8004c84 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004c7c:	e008      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c7e:	7cfb      	ldrb	r3, [r7, #19]
 8004c80:	74bb      	strb	r3, [r7, #18]
 8004c82:	e005      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004c84:	40021000 	.word	0x40021000
 8004c88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c90:	7c7b      	ldrb	r3, [r7, #17]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d105      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c96:	4ba0      	ldr	r3, [pc, #640]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c9a:	4a9f      	ldr	r2, [pc, #636]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004c9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ca0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cae:	4b9a      	ldr	r3, [pc, #616]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cb4:	f023 0203 	bic.w	r2, r3, #3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cbc:	4996      	ldr	r1, [pc, #600]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00a      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cd0:	4b91      	ldr	r3, [pc, #580]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd6:	f023 020c 	bic.w	r2, r3, #12
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	498e      	ldr	r1, [pc, #568]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0304 	and.w	r3, r3, #4
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00a      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cf2:	4b89      	ldr	r3, [pc, #548]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cf8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d00:	4985      	ldr	r1, [pc, #532]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d14:	4b80      	ldr	r3, [pc, #512]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d22:	497d      	ldr	r1, [pc, #500]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0310 	and.w	r3, r3, #16
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d36:	4b78      	ldr	r3, [pc, #480]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d44:	4974      	ldr	r1, [pc, #464]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d58:	4b6f      	ldr	r3, [pc, #444]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d66:	496c      	ldr	r1, [pc, #432]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d7a:	4b67      	ldr	r3, [pc, #412]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d88:	4963      	ldr	r1, [pc, #396]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d9c:	4b5e      	ldr	r3, [pc, #376]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004daa:	495b      	ldr	r1, [pc, #364]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dbe:	4b56      	ldr	r3, [pc, #344]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dcc:	4952      	ldr	r1, [pc, #328]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004de0:	4b4d      	ldr	r3, [pc, #308]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004de6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dee:	494a      	ldr	r1, [pc, #296]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e02:	4b45      	ldr	r3, [pc, #276]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e10:	4941      	ldr	r1, [pc, #260]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e24:	4b3c      	ldr	r3, [pc, #240]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e2a:	f023 0203 	bic.w	r2, r3, #3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e32:	4939      	ldr	r1, [pc, #228]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d028      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e46:	4b34      	ldr	r3, [pc, #208]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e54:	4930      	ldr	r1, [pc, #192]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e64:	d106      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e66:	4b2c      	ldr	r3, [pc, #176]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	4a2b      	ldr	r2, [pc, #172]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004e6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e70:	60d3      	str	r3, [r2, #12]
 8004e72:	e011      	b.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e7c:	d10c      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3304      	adds	r3, #4
 8004e82:	2101      	movs	r1, #1
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 f8f9 	bl	800507c <RCCEx_PLLSAI1_Config>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004e94:	7cfb      	ldrb	r3, [r7, #19]
 8004e96:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d04d      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004eac:	d108      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004eae:	4b1a      	ldr	r3, [pc, #104]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004eb4:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004eb6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004eba:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004ebe:	e012      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004ec0:	4b15      	ldr	r3, [pc, #84]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ec6:	4a14      	ldr	r2, [pc, #80]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ec8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ecc:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8004ed0:	4b11      	ldr	r3, [pc, #68]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ede:	490e      	ldr	r1, [pc, #56]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004eea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004eee:	d106      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ef0:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a08      	ldr	r2, [pc, #32]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004efa:	60d3      	str	r3, [r2, #12]
 8004efc:	e020      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f02:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f06:	d109      	bne.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f08:	4b03      	ldr	r3, [pc, #12]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4a02      	ldr	r2, [pc, #8]	@ (8004f18 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f12:	60d3      	str	r3, [r2, #12]
 8004f14:	e014      	b.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8004f16:	bf00      	nop
 8004f18:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f20:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3304      	adds	r3, #4
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 f8a5 	bl	800507c <RCCEx_PLLSAI1_Config>
 8004f32:	4603      	mov	r3, r0
 8004f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f36:	7cfb      	ldrb	r3, [r7, #19]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d028      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f52:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f5a:	4947      	ldr	r1, [pc, #284]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f66:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f6c:	4b42      	ldr	r3, [pc, #264]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4a41      	ldr	r2, [pc, #260]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f76:	60d3      	str	r3, [r2, #12]
 8004f78:	e011      	b.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f7e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004f82:	d10c      	bne.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	2101      	movs	r1, #1
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 f876 	bl	800507c <RCCEx_PLLSAI1_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f94:	7cfb      	ldrb	r3, [r7, #19]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004f9a:	7cfb      	ldrb	r3, [r7, #19]
 8004f9c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d01e      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004faa:	4b33      	ldr	r3, [pc, #204]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fba:	492f      	ldr	r1, [pc, #188]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	2102      	movs	r1, #2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f851 	bl	800507c <RCCEx_PLLSAI1_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00b      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ff4:	4b20      	ldr	r3, [pc, #128]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ffa:	f023 0204 	bic.w	r2, r3, #4
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005004:	491c      	ldr	r1, [pc, #112]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00b      	beq.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005018:	4b17      	ldr	r3, [pc, #92]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800501a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800501e:	f023 0218 	bic.w	r2, r3, #24
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005028:	4913      	ldr	r1, [pc, #76]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800502a:	4313      	orrs	r3, r2
 800502c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d017      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800503c:	4b0e      	ldr	r3, [pc, #56]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800503e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005042:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800504c:	490a      	ldr	r1, [pc, #40]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800504e:	4313      	orrs	r3, r2
 8005050:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800505a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800505e:	d105      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005060:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4a04      	ldr	r2, [pc, #16]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800506a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800506c:	7cbb      	ldrb	r3, [r7, #18]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3718      	adds	r7, #24
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	40021000 	.word	0x40021000

0800507c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800508a:	4b72      	ldr	r3, [pc, #456]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	f003 0303 	and.w	r3, r3, #3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00e      	beq.n	80050b4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005096:	4b6f      	ldr	r3, [pc, #444]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0203 	and.w	r2, r3, #3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d103      	bne.n	80050ae <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
       ||
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d142      	bne.n	8005134 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
 80050b2:	e03f      	b.n	8005134 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d018      	beq.n	80050ee <RCCEx_PLLSAI1_Config+0x72>
 80050bc:	2b03      	cmp	r3, #3
 80050be:	d825      	bhi.n	800510c <RCCEx_PLLSAI1_Config+0x90>
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d002      	beq.n	80050ca <RCCEx_PLLSAI1_Config+0x4e>
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d009      	beq.n	80050dc <RCCEx_PLLSAI1_Config+0x60>
 80050c8:	e020      	b.n	800510c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050ca:	4b62      	ldr	r3, [pc, #392]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d11d      	bne.n	8005112 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050da:	e01a      	b.n	8005112 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050dc:	4b5d      	ldr	r3, [pc, #372]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d116      	bne.n	8005116 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050ec:	e013      	b.n	8005116 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ee:	4b59      	ldr	r3, [pc, #356]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10f      	bne.n	800511a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050fa:	4b56      	ldr	r3, [pc, #344]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800510a:	e006      	b.n	800511a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	e004      	b.n	800511c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005112:	bf00      	nop
 8005114:	e002      	b.n	800511c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800511a:	bf00      	nop
    }

    if(status == HAL_OK)
 800511c:	7bfb      	ldrb	r3, [r7, #15]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d108      	bne.n	8005134 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005122:	4b4c      	ldr	r3, [pc, #304]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f023 0203 	bic.w	r2, r3, #3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4949      	ldr	r1, [pc, #292]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005130:	4313      	orrs	r3, r2
 8005132:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f040 8086 	bne.w	8005248 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800513c:	4b45      	ldr	r3, [pc, #276]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a44      	ldr	r2, [pc, #272]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005142:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005148:	f7fd fa78 	bl	800263c <HAL_GetTick>
 800514c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800514e:	e009      	b.n	8005164 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005150:	f7fd fa74 	bl	800263c <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b02      	cmp	r3, #2
 800515c:	d902      	bls.n	8005164 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	73fb      	strb	r3, [r7, #15]
        break;
 8005162:	e005      	b.n	8005170 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005164:	4b3b      	ldr	r3, [pc, #236]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1ef      	bne.n	8005150 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d168      	bne.n	8005248 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d113      	bne.n	80051a4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800517c:	4b35      	ldr	r3, [pc, #212]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 800517e:	691a      	ldr	r2, [r3, #16]
 8005180:	4b35      	ldr	r3, [pc, #212]	@ (8005258 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005182:	4013      	ands	r3, r2
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6892      	ldr	r2, [r2, #8]
 8005188:	0211      	lsls	r1, r2, #8
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	68d2      	ldr	r2, [r2, #12]
 800518e:	06d2      	lsls	r2, r2, #27
 8005190:	4311      	orrs	r1, r2
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6852      	ldr	r2, [r2, #4]
 8005196:	3a01      	subs	r2, #1
 8005198:	0112      	lsls	r2, r2, #4
 800519a:	430a      	orrs	r2, r1
 800519c:	492d      	ldr	r1, [pc, #180]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	610b      	str	r3, [r1, #16]
 80051a2:	e02d      	b.n	8005200 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d115      	bne.n	80051d6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051ac:	691a      	ldr	r2, [r3, #16]
 80051ae:	4b2b      	ldr	r3, [pc, #172]	@ (800525c <RCCEx_PLLSAI1_Config+0x1e0>)
 80051b0:	4013      	ands	r3, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6892      	ldr	r2, [r2, #8]
 80051b6:	0211      	lsls	r1, r2, #8
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6912      	ldr	r2, [r2, #16]
 80051bc:	0852      	lsrs	r2, r2, #1
 80051be:	3a01      	subs	r2, #1
 80051c0:	0552      	lsls	r2, r2, #21
 80051c2:	4311      	orrs	r1, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	6852      	ldr	r2, [r2, #4]
 80051c8:	3a01      	subs	r2, #1
 80051ca:	0112      	lsls	r2, r2, #4
 80051cc:	430a      	orrs	r2, r1
 80051ce:	4921      	ldr	r1, [pc, #132]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	610b      	str	r3, [r1, #16]
 80051d4:	e014      	b.n	8005200 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80051d6:	4b1f      	ldr	r3, [pc, #124]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	4b21      	ldr	r3, [pc, #132]	@ (8005260 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051dc:	4013      	ands	r3, r2
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6892      	ldr	r2, [r2, #8]
 80051e2:	0211      	lsls	r1, r2, #8
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6952      	ldr	r2, [r2, #20]
 80051e8:	0852      	lsrs	r2, r2, #1
 80051ea:	3a01      	subs	r2, #1
 80051ec:	0652      	lsls	r2, r2, #25
 80051ee:	4311      	orrs	r1, r2
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	6852      	ldr	r2, [r2, #4]
 80051f4:	3a01      	subs	r2, #1
 80051f6:	0112      	lsls	r2, r2, #4
 80051f8:	430a      	orrs	r2, r1
 80051fa:	4916      	ldr	r1, [pc, #88]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005200:	4b14      	ldr	r3, [pc, #80]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a13      	ldr	r2, [pc, #76]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005206:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800520a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520c:	f7fd fa16 	bl	800263c <HAL_GetTick>
 8005210:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005212:	e009      	b.n	8005228 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005214:	f7fd fa12 	bl	800263c <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d902      	bls.n	8005228 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	73fb      	strb	r3, [r7, #15]
          break;
 8005226:	e005      	b.n	8005234 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005228:	4b0a      	ldr	r3, [pc, #40]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0ef      	beq.n	8005214 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800523a:	4b06      	ldr	r3, [pc, #24]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	4904      	ldr	r1, [pc, #16]	@ (8005254 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005244:	4313      	orrs	r3, r2
 8005246:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005248:	7bfb      	ldrb	r3, [r7, #15]
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	40021000 	.word	0x40021000
 8005258:	07ff800f 	.word	0x07ff800f
 800525c:	ff9f800f 	.word	0xff9f800f
 8005260:	f9ff800f 	.word	0xf9ff800f

08005264 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005272:	4b72      	ldr	r3, [pc, #456]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00e      	beq.n	800529c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800527e:	4b6f      	ldr	r3, [pc, #444]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	f003 0203 	and.w	r2, r3, #3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d103      	bne.n	8005296 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
       ||
 8005292:	2b00      	cmp	r3, #0
 8005294:	d142      	bne.n	800531c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
 800529a:	e03f      	b.n	800531c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d018      	beq.n	80052d6 <RCCEx_PLLSAI2_Config+0x72>
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d825      	bhi.n	80052f4 <RCCEx_PLLSAI2_Config+0x90>
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d002      	beq.n	80052b2 <RCCEx_PLLSAI2_Config+0x4e>
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d009      	beq.n	80052c4 <RCCEx_PLLSAI2_Config+0x60>
 80052b0:	e020      	b.n	80052f4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80052b2:	4b62      	ldr	r3, [pc, #392]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d11d      	bne.n	80052fa <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052c2:	e01a      	b.n	80052fa <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052c4:	4b5d      	ldr	r3, [pc, #372]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d116      	bne.n	80052fe <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052d4:	e013      	b.n	80052fe <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052d6:	4b59      	ldr	r3, [pc, #356]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052e2:	4b56      	ldr	r3, [pc, #344]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d109      	bne.n	8005302 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052f2:	e006      	b.n	8005302 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	73fb      	strb	r3, [r7, #15]
      break;
 80052f8:	e004      	b.n	8005304 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052fa:	bf00      	nop
 80052fc:	e002      	b.n	8005304 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80052fe:	bf00      	nop
 8005300:	e000      	b.n	8005304 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005302:	bf00      	nop
    }

    if(status == HAL_OK)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d108      	bne.n	800531c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800530a:	4b4c      	ldr	r3, [pc, #304]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f023 0203 	bic.w	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4949      	ldr	r1, [pc, #292]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005318:	4313      	orrs	r3, r2
 800531a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b00      	cmp	r3, #0
 8005320:	f040 8086 	bne.w	8005430 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005324:	4b45      	ldr	r3, [pc, #276]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a44      	ldr	r2, [pc, #272]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 800532a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800532e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005330:	f7fd f984 	bl	800263c <HAL_GetTick>
 8005334:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005336:	e009      	b.n	800534c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005338:	f7fd f980 	bl	800263c <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d902      	bls.n	800534c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	73fb      	strb	r3, [r7, #15]
        break;
 800534a:	e005      	b.n	8005358 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800534c:	4b3b      	ldr	r3, [pc, #236]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1ef      	bne.n	8005338 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005358:	7bfb      	ldrb	r3, [r7, #15]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d168      	bne.n	8005430 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d113      	bne.n	800538c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005364:	4b35      	ldr	r3, [pc, #212]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	4b35      	ldr	r3, [pc, #212]	@ (8005440 <RCCEx_PLLSAI2_Config+0x1dc>)
 800536a:	4013      	ands	r3, r2
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6892      	ldr	r2, [r2, #8]
 8005370:	0211      	lsls	r1, r2, #8
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	68d2      	ldr	r2, [r2, #12]
 8005376:	06d2      	lsls	r2, r2, #27
 8005378:	4311      	orrs	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6852      	ldr	r2, [r2, #4]
 800537e:	3a01      	subs	r2, #1
 8005380:	0112      	lsls	r2, r2, #4
 8005382:	430a      	orrs	r2, r1
 8005384:	492d      	ldr	r1, [pc, #180]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005386:	4313      	orrs	r3, r2
 8005388:	614b      	str	r3, [r1, #20]
 800538a:	e02d      	b.n	80053e8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d115      	bne.n	80053be <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005392:	4b2a      	ldr	r3, [pc, #168]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005394:	695a      	ldr	r2, [r3, #20]
 8005396:	4b2b      	ldr	r3, [pc, #172]	@ (8005444 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6892      	ldr	r2, [r2, #8]
 800539e:	0211      	lsls	r1, r2, #8
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6912      	ldr	r2, [r2, #16]
 80053a4:	0852      	lsrs	r2, r2, #1
 80053a6:	3a01      	subs	r2, #1
 80053a8:	0552      	lsls	r2, r2, #21
 80053aa:	4311      	orrs	r1, r2
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	6852      	ldr	r2, [r2, #4]
 80053b0:	3a01      	subs	r2, #1
 80053b2:	0112      	lsls	r2, r2, #4
 80053b4:	430a      	orrs	r2, r1
 80053b6:	4921      	ldr	r1, [pc, #132]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	614b      	str	r3, [r1, #20]
 80053bc:	e014      	b.n	80053e8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053be:	4b1f      	ldr	r3, [pc, #124]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053c0:	695a      	ldr	r2, [r3, #20]
 80053c2:	4b21      	ldr	r3, [pc, #132]	@ (8005448 <RCCEx_PLLSAI2_Config+0x1e4>)
 80053c4:	4013      	ands	r3, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6892      	ldr	r2, [r2, #8]
 80053ca:	0211      	lsls	r1, r2, #8
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6952      	ldr	r2, [r2, #20]
 80053d0:	0852      	lsrs	r2, r2, #1
 80053d2:	3a01      	subs	r2, #1
 80053d4:	0652      	lsls	r2, r2, #25
 80053d6:	4311      	orrs	r1, r2
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6852      	ldr	r2, [r2, #4]
 80053dc:	3a01      	subs	r2, #1
 80053de:	0112      	lsls	r2, r2, #4
 80053e0:	430a      	orrs	r2, r1
 80053e2:	4916      	ldr	r1, [pc, #88]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80053e8:	4b14      	ldr	r3, [pc, #80]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a13      	ldr	r2, [pc, #76]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 80053ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f4:	f7fd f922 	bl	800263c <HAL_GetTick>
 80053f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053fa:	e009      	b.n	8005410 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053fc:	f7fd f91e 	bl	800263c <HAL_GetTick>
 8005400:	4602      	mov	r2, r0
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	1ad3      	subs	r3, r2, r3
 8005406:	2b02      	cmp	r3, #2
 8005408:	d902      	bls.n	8005410 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	73fb      	strb	r3, [r7, #15]
          break;
 800540e:	e005      	b.n	800541c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005410:	4b0a      	ldr	r3, [pc, #40]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d0ef      	beq.n	80053fc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800541c:	7bfb      	ldrb	r3, [r7, #15]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d106      	bne.n	8005430 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005422:	4b06      	ldr	r3, [pc, #24]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005424:	695a      	ldr	r2, [r3, #20]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	4904      	ldr	r1, [pc, #16]	@ (800543c <RCCEx_PLLSAI2_Config+0x1d8>)
 800542c:	4313      	orrs	r3, r2
 800542e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40021000 	.word	0x40021000
 8005440:	07ff800f 	.word	0x07ff800f
 8005444:	ff9f800f 	.word	0xff9f800f
 8005448:	f9ff800f 	.word	0xf9ff800f

0800544c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e042      	b.n	80054e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005464:	2b00      	cmp	r3, #0
 8005466:	d106      	bne.n	8005476 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7fc fbc5 	bl	8001c00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2224      	movs	r2, #36	@ 0x24
 800547a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0201 	bic.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 fbb2 	bl	8005c00 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f000 f8b3 	bl	8005608 <UART_SetConfig>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e01b      	b.n	80054e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f042 0201 	orr.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fc31 	bl	8005d44 <UART_CheckIdleState>
 80054e2:	4603      	mov	r3, r0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	@ 0x28
 80054f0:	af02      	add	r7, sp, #8
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	603b      	str	r3, [r7, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005502:	2b20      	cmp	r3, #32
 8005504:	d17b      	bne.n	80055fe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d002      	beq.n	8005512 <HAL_UART_Transmit+0x26>
 800550c:	88fb      	ldrh	r3, [r7, #6]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e074      	b.n	8005600 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2221      	movs	r2, #33	@ 0x21
 8005522:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005526:	f7fd f889 	bl	800263c <HAL_GetTick>
 800552a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005544:	d108      	bne.n	8005558 <HAL_UART_Transmit+0x6c>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	61bb      	str	r3, [r7, #24]
 8005556:	e003      	b.n	8005560 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800555c:	2300      	movs	r3, #0
 800555e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005560:	e030      	b.n	80055c4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	9300      	str	r3, [sp, #0]
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2200      	movs	r2, #0
 800556a:	2180      	movs	r1, #128	@ 0x80
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fc93 	bl	8005e98 <UART_WaitOnFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2220      	movs	r2, #32
 800557c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e03d      	b.n	8005600 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10b      	bne.n	80055a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	881a      	ldrh	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005596:	b292      	uxth	r2, r2
 8005598:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	3302      	adds	r3, #2
 800559e:	61bb      	str	r3, [r7, #24]
 80055a0:	e007      	b.n	80055b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	781a      	ldrb	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	3301      	adds	r3, #1
 80055b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	3b01      	subs	r3, #1
 80055bc:	b29a      	uxth	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1c8      	bne.n	8005562 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	2200      	movs	r2, #0
 80055d8:	2140      	movs	r1, #64	@ 0x40
 80055da:	68f8      	ldr	r0, [r7, #12]
 80055dc:	f000 fc5c 	bl	8005e98 <UART_WaitOnFlagUntilTimeout>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2220      	movs	r2, #32
 80055ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e006      	b.n	8005600 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2220      	movs	r2, #32
 80055f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	e000      	b.n	8005600 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80055fe:	2302      	movs	r3, #2
  }
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800560c:	b08c      	sub	sp, #48	@ 0x30
 800560e:	af00      	add	r7, sp, #0
 8005610:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	431a      	orrs	r2, r3
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	431a      	orrs	r2, r3
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	4313      	orrs	r3, r2
 800562e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	4baa      	ldr	r3, [pc, #680]	@ (80058e0 <UART_SetConfig+0x2d8>)
 8005638:	4013      	ands	r3, r2
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	6812      	ldr	r2, [r2, #0]
 800563e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005640:	430b      	orrs	r3, r1
 8005642:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a9f      	ldr	r2, [pc, #636]	@ (80058e4 <UART_SetConfig+0x2dc>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005670:	4313      	orrs	r3, r2
 8005672:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800567e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	6812      	ldr	r2, [r2, #0]
 8005686:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005688:	430b      	orrs	r3, r1
 800568a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	f023 010f 	bic.w	r1, r3, #15
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	430a      	orrs	r2, r1
 80056a0:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a90      	ldr	r2, [pc, #576]	@ (80058e8 <UART_SetConfig+0x2e0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d125      	bne.n	80056f8 <UART_SetConfig+0xf0>
 80056ac:	4b8f      	ldr	r3, [pc, #572]	@ (80058ec <UART_SetConfig+0x2e4>)
 80056ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d81a      	bhi.n	80056f0 <UART_SetConfig+0xe8>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0xb8>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056e1 	.word	0x080056e1
 80056c8:	080056d9 	.word	0x080056d9
 80056cc:	080056e9 	.word	0x080056e9
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056d6:	e116      	b.n	8005906 <UART_SetConfig+0x2fe>
 80056d8:	2302      	movs	r3, #2
 80056da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056de:	e112      	b.n	8005906 <UART_SetConfig+0x2fe>
 80056e0:	2304      	movs	r3, #4
 80056e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056e6:	e10e      	b.n	8005906 <UART_SetConfig+0x2fe>
 80056e8:	2308      	movs	r3, #8
 80056ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056ee:	e10a      	b.n	8005906 <UART_SetConfig+0x2fe>
 80056f0:	2310      	movs	r3, #16
 80056f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80056f6:	e106      	b.n	8005906 <UART_SetConfig+0x2fe>
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a7c      	ldr	r2, [pc, #496]	@ (80058f0 <UART_SetConfig+0x2e8>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d138      	bne.n	8005774 <UART_SetConfig+0x16c>
 8005702:	4b7a      	ldr	r3, [pc, #488]	@ (80058ec <UART_SetConfig+0x2e4>)
 8005704:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005708:	f003 030c 	and.w	r3, r3, #12
 800570c:	2b0c      	cmp	r3, #12
 800570e:	d82d      	bhi.n	800576c <UART_SetConfig+0x164>
 8005710:	a201      	add	r2, pc, #4	@ (adr r2, 8005718 <UART_SetConfig+0x110>)
 8005712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005716:	bf00      	nop
 8005718:	0800574d 	.word	0x0800574d
 800571c:	0800576d 	.word	0x0800576d
 8005720:	0800576d 	.word	0x0800576d
 8005724:	0800576d 	.word	0x0800576d
 8005728:	0800575d 	.word	0x0800575d
 800572c:	0800576d 	.word	0x0800576d
 8005730:	0800576d 	.word	0x0800576d
 8005734:	0800576d 	.word	0x0800576d
 8005738:	08005755 	.word	0x08005755
 800573c:	0800576d 	.word	0x0800576d
 8005740:	0800576d 	.word	0x0800576d
 8005744:	0800576d 	.word	0x0800576d
 8005748:	08005765 	.word	0x08005765
 800574c:	2300      	movs	r3, #0
 800574e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005752:	e0d8      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005754:	2302      	movs	r3, #2
 8005756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800575a:	e0d4      	b.n	8005906 <UART_SetConfig+0x2fe>
 800575c:	2304      	movs	r3, #4
 800575e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005762:	e0d0      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005764:	2308      	movs	r3, #8
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800576a:	e0cc      	b.n	8005906 <UART_SetConfig+0x2fe>
 800576c:	2310      	movs	r3, #16
 800576e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005772:	e0c8      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a5e      	ldr	r2, [pc, #376]	@ (80058f4 <UART_SetConfig+0x2ec>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d125      	bne.n	80057ca <UART_SetConfig+0x1c2>
 800577e:	4b5b      	ldr	r3, [pc, #364]	@ (80058ec <UART_SetConfig+0x2e4>)
 8005780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005784:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005788:	2b30      	cmp	r3, #48	@ 0x30
 800578a:	d016      	beq.n	80057ba <UART_SetConfig+0x1b2>
 800578c:	2b30      	cmp	r3, #48	@ 0x30
 800578e:	d818      	bhi.n	80057c2 <UART_SetConfig+0x1ba>
 8005790:	2b20      	cmp	r3, #32
 8005792:	d00a      	beq.n	80057aa <UART_SetConfig+0x1a2>
 8005794:	2b20      	cmp	r3, #32
 8005796:	d814      	bhi.n	80057c2 <UART_SetConfig+0x1ba>
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <UART_SetConfig+0x19a>
 800579c:	2b10      	cmp	r3, #16
 800579e:	d008      	beq.n	80057b2 <UART_SetConfig+0x1aa>
 80057a0:	e00f      	b.n	80057c2 <UART_SetConfig+0x1ba>
 80057a2:	2300      	movs	r3, #0
 80057a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057a8:	e0ad      	b.n	8005906 <UART_SetConfig+0x2fe>
 80057aa:	2302      	movs	r3, #2
 80057ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b0:	e0a9      	b.n	8005906 <UART_SetConfig+0x2fe>
 80057b2:	2304      	movs	r3, #4
 80057b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057b8:	e0a5      	b.n	8005906 <UART_SetConfig+0x2fe>
 80057ba:	2308      	movs	r3, #8
 80057bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c0:	e0a1      	b.n	8005906 <UART_SetConfig+0x2fe>
 80057c2:	2310      	movs	r3, #16
 80057c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057c8:	e09d      	b.n	8005906 <UART_SetConfig+0x2fe>
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a4a      	ldr	r2, [pc, #296]	@ (80058f8 <UART_SetConfig+0x2f0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d125      	bne.n	8005820 <UART_SetConfig+0x218>
 80057d4:	4b45      	ldr	r3, [pc, #276]	@ (80058ec <UART_SetConfig+0x2e4>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80057de:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e0:	d016      	beq.n	8005810 <UART_SetConfig+0x208>
 80057e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80057e4:	d818      	bhi.n	8005818 <UART_SetConfig+0x210>
 80057e6:	2b80      	cmp	r3, #128	@ 0x80
 80057e8:	d00a      	beq.n	8005800 <UART_SetConfig+0x1f8>
 80057ea:	2b80      	cmp	r3, #128	@ 0x80
 80057ec:	d814      	bhi.n	8005818 <UART_SetConfig+0x210>
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <UART_SetConfig+0x1f0>
 80057f2:	2b40      	cmp	r3, #64	@ 0x40
 80057f4:	d008      	beq.n	8005808 <UART_SetConfig+0x200>
 80057f6:	e00f      	b.n	8005818 <UART_SetConfig+0x210>
 80057f8:	2300      	movs	r3, #0
 80057fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80057fe:	e082      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005800:	2302      	movs	r3, #2
 8005802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005806:	e07e      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005808:	2304      	movs	r3, #4
 800580a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800580e:	e07a      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005810:	2308      	movs	r3, #8
 8005812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005816:	e076      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005818:	2310      	movs	r3, #16
 800581a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581e:	e072      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a35      	ldr	r2, [pc, #212]	@ (80058fc <UART_SetConfig+0x2f4>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d12a      	bne.n	8005880 <UART_SetConfig+0x278>
 800582a:	4b30      	ldr	r3, [pc, #192]	@ (80058ec <UART_SetConfig+0x2e4>)
 800582c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005830:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005834:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005838:	d01a      	beq.n	8005870 <UART_SetConfig+0x268>
 800583a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800583e:	d81b      	bhi.n	8005878 <UART_SetConfig+0x270>
 8005840:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005844:	d00c      	beq.n	8005860 <UART_SetConfig+0x258>
 8005846:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800584a:	d815      	bhi.n	8005878 <UART_SetConfig+0x270>
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <UART_SetConfig+0x250>
 8005850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005854:	d008      	beq.n	8005868 <UART_SetConfig+0x260>
 8005856:	e00f      	b.n	8005878 <UART_SetConfig+0x270>
 8005858:	2300      	movs	r3, #0
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800585e:	e052      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005860:	2302      	movs	r3, #2
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005866:	e04e      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005868:	2304      	movs	r3, #4
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800586e:	e04a      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005870:	2308      	movs	r3, #8
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005876:	e046      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005878:	2310      	movs	r3, #16
 800587a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800587e:	e042      	b.n	8005906 <UART_SetConfig+0x2fe>
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a17      	ldr	r2, [pc, #92]	@ (80058e4 <UART_SetConfig+0x2dc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d13a      	bne.n	8005900 <UART_SetConfig+0x2f8>
 800588a:	4b18      	ldr	r3, [pc, #96]	@ (80058ec <UART_SetConfig+0x2e4>)
 800588c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005890:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005894:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005898:	d01a      	beq.n	80058d0 <UART_SetConfig+0x2c8>
 800589a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800589e:	d81b      	bhi.n	80058d8 <UART_SetConfig+0x2d0>
 80058a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058a4:	d00c      	beq.n	80058c0 <UART_SetConfig+0x2b8>
 80058a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058aa:	d815      	bhi.n	80058d8 <UART_SetConfig+0x2d0>
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <UART_SetConfig+0x2b0>
 80058b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058b4:	d008      	beq.n	80058c8 <UART_SetConfig+0x2c0>
 80058b6:	e00f      	b.n	80058d8 <UART_SetConfig+0x2d0>
 80058b8:	2300      	movs	r3, #0
 80058ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058be:	e022      	b.n	8005906 <UART_SetConfig+0x2fe>
 80058c0:	2302      	movs	r3, #2
 80058c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058c6:	e01e      	b.n	8005906 <UART_SetConfig+0x2fe>
 80058c8:	2304      	movs	r3, #4
 80058ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058ce:	e01a      	b.n	8005906 <UART_SetConfig+0x2fe>
 80058d0:	2308      	movs	r3, #8
 80058d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058d6:	e016      	b.n	8005906 <UART_SetConfig+0x2fe>
 80058d8:	2310      	movs	r3, #16
 80058da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80058de:	e012      	b.n	8005906 <UART_SetConfig+0x2fe>
 80058e0:	cfff69f3 	.word	0xcfff69f3
 80058e4:	40008000 	.word	0x40008000
 80058e8:	40013800 	.word	0x40013800
 80058ec:	40021000 	.word	0x40021000
 80058f0:	40004400 	.word	0x40004400
 80058f4:	40004800 	.word	0x40004800
 80058f8:	40004c00 	.word	0x40004c00
 80058fc:	40005000 	.word	0x40005000
 8005900:	2310      	movs	r3, #16
 8005902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4aae      	ldr	r2, [pc, #696]	@ (8005bc4 <UART_SetConfig+0x5bc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	f040 8097 	bne.w	8005a40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005912:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005916:	2b08      	cmp	r3, #8
 8005918:	d823      	bhi.n	8005962 <UART_SetConfig+0x35a>
 800591a:	a201      	add	r2, pc, #4	@ (adr r2, 8005920 <UART_SetConfig+0x318>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	08005945 	.word	0x08005945
 8005924:	08005963 	.word	0x08005963
 8005928:	0800594d 	.word	0x0800594d
 800592c:	08005963 	.word	0x08005963
 8005930:	08005953 	.word	0x08005953
 8005934:	08005963 	.word	0x08005963
 8005938:	08005963 	.word	0x08005963
 800593c:	08005963 	.word	0x08005963
 8005940:	0800595b 	.word	0x0800595b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005944:	f7fe ff7e 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8005948:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800594a:	e010      	b.n	800596e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800594c:	4b9e      	ldr	r3, [pc, #632]	@ (8005bc8 <UART_SetConfig+0x5c0>)
 800594e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005950:	e00d      	b.n	800596e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005952:	f7fe fedf 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005956:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005958:	e009      	b.n	800596e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800595a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800595e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005960:	e005      	b.n	800596e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005962:	2300      	movs	r3, #0
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800596c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 8130 	beq.w	8005bd6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597a:	4a94      	ldr	r2, [pc, #592]	@ (8005bcc <UART_SetConfig+0x5c4>)
 800597c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005980:	461a      	mov	r2, r3
 8005982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005984:	fbb3 f3f2 	udiv	r3, r3, r2
 8005988:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	4413      	add	r3, r2
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	429a      	cmp	r2, r3
 8005998:	d305      	bcc.n	80059a6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d903      	bls.n	80059ae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80059ac:	e113      	b.n	8005bd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	2200      	movs	r2, #0
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	60fa      	str	r2, [r7, #12]
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ba:	4a84      	ldr	r2, [pc, #528]	@ (8005bcc <UART_SetConfig+0x5c4>)
 80059bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2200      	movs	r2, #0
 80059c4:	603b      	str	r3, [r7, #0]
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80059d0:	f7fb f952 	bl	8000c78 <__aeabi_uldivmod>
 80059d4:	4602      	mov	r2, r0
 80059d6:	460b      	mov	r3, r1
 80059d8:	4610      	mov	r0, r2
 80059da:	4619      	mov	r1, r3
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	020b      	lsls	r3, r1, #8
 80059e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80059ea:	0202      	lsls	r2, r0, #8
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	6849      	ldr	r1, [r1, #4]
 80059f0:	0849      	lsrs	r1, r1, #1
 80059f2:	2000      	movs	r0, #0
 80059f4:	460c      	mov	r4, r1
 80059f6:	4605      	mov	r5, r0
 80059f8:	eb12 0804 	adds.w	r8, r2, r4
 80059fc:	eb43 0905 	adc.w	r9, r3, r5
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	2200      	movs	r2, #0
 8005a06:	469a      	mov	sl, r3
 8005a08:	4693      	mov	fp, r2
 8005a0a:	4652      	mov	r2, sl
 8005a0c:	465b      	mov	r3, fp
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	f7fb f931 	bl	8000c78 <__aeabi_uldivmod>
 8005a16:	4602      	mov	r2, r0
 8005a18:	460b      	mov	r3, r1
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a24:	d308      	bcc.n	8005a38 <UART_SetConfig+0x430>
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a2c:	d204      	bcs.n	8005a38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6a3a      	ldr	r2, [r7, #32]
 8005a34:	60da      	str	r2, [r3, #12]
 8005a36:	e0ce      	b.n	8005bd6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005a3e:	e0ca      	b.n	8005bd6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a48:	d166      	bne.n	8005b18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005a4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d827      	bhi.n	8005aa2 <UART_SetConfig+0x49a>
 8005a52:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <UART_SetConfig+0x450>)
 8005a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a58:	08005a7d 	.word	0x08005a7d
 8005a5c:	08005a85 	.word	0x08005a85
 8005a60:	08005a8d 	.word	0x08005a8d
 8005a64:	08005aa3 	.word	0x08005aa3
 8005a68:	08005a93 	.word	0x08005a93
 8005a6c:	08005aa3 	.word	0x08005aa3
 8005a70:	08005aa3 	.word	0x08005aa3
 8005a74:	08005aa3 	.word	0x08005aa3
 8005a78:	08005a9b 	.word	0x08005a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a7c:	f7fe fee2 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8005a80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a82:	e014      	b.n	8005aae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a84:	f7fe fef4 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 8005a88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a8a:	e010      	b.n	8005aae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a8c:	4b4e      	ldr	r3, [pc, #312]	@ (8005bc8 <UART_SetConfig+0x5c0>)
 8005a8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005a90:	e00d      	b.n	8005aae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a92:	f7fe fe3f 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005a96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005a98:	e009      	b.n	8005aae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005aa0:	e005      	b.n	8005aae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005aac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	f000 8090 	beq.w	8005bd6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aba:	4a44      	ldr	r2, [pc, #272]	@ (8005bcc <UART_SetConfig+0x5c4>)
 8005abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ac8:	005a      	lsls	r2, r3, #1
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	085b      	lsrs	r3, r3, #1
 8005ad0:	441a      	add	r2, r3
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ada:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005adc:	6a3b      	ldr	r3, [r7, #32]
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	d916      	bls.n	8005b10 <UART_SetConfig+0x508>
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ae8:	d212      	bcs.n	8005b10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f023 030f 	bic.w	r3, r3, #15
 8005af2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	f003 0307 	and.w	r3, r3, #7
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	8bfb      	ldrh	r3, [r7, #30]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	8bfa      	ldrh	r2, [r7, #30]
 8005b0c:	60da      	str	r2, [r3, #12]
 8005b0e:	e062      	b.n	8005bd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005b16:	e05e      	b.n	8005bd6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005b1c:	2b08      	cmp	r3, #8
 8005b1e:	d828      	bhi.n	8005b72 <UART_SetConfig+0x56a>
 8005b20:	a201      	add	r2, pc, #4	@ (adr r2, 8005b28 <UART_SetConfig+0x520>)
 8005b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b26:	bf00      	nop
 8005b28:	08005b4d 	.word	0x08005b4d
 8005b2c:	08005b55 	.word	0x08005b55
 8005b30:	08005b5d 	.word	0x08005b5d
 8005b34:	08005b73 	.word	0x08005b73
 8005b38:	08005b63 	.word	0x08005b63
 8005b3c:	08005b73 	.word	0x08005b73
 8005b40:	08005b73 	.word	0x08005b73
 8005b44:	08005b73 	.word	0x08005b73
 8005b48:	08005b6b 	.word	0x08005b6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b4c:	f7fe fe7a 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8005b50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b52:	e014      	b.n	8005b7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b54:	f7fe fe8c 	bl	8004870 <HAL_RCC_GetPCLK2Freq>
 8005b58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b5a:	e010      	b.n	8005b7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc8 <UART_SetConfig+0x5c0>)
 8005b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b60:	e00d      	b.n	8005b7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b62:	f7fe fdd7 	bl	8004714 <HAL_RCC_GetSysClockFreq>
 8005b66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005b68:	e009      	b.n	8005b7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005b70:	e005      	b.n	8005b7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005b7c:	bf00      	nop
    }

    if (pclk != 0U)
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d028      	beq.n	8005bd6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b88:	4a10      	ldr	r2, [pc, #64]	@ (8005bcc <UART_SetConfig+0x5c4>)
 8005b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b92:	fbb3 f2f2 	udiv	r2, r3, r2
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	085b      	lsrs	r3, r3, #1
 8005b9c:	441a      	add	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	2b0f      	cmp	r3, #15
 8005bac:	d910      	bls.n	8005bd0 <UART_SetConfig+0x5c8>
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb4:	d20c      	bcs.n	8005bd0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60da      	str	r2, [r3, #12]
 8005bc0:	e009      	b.n	8005bd6 <UART_SetConfig+0x5ce>
 8005bc2:	bf00      	nop
 8005bc4:	40008000 	.word	0x40008000
 8005bc8:	00f42400 	.word	0x00f42400
 8005bcc:	080092c8 	.word	0x080092c8
      }
      else
      {
        ret = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2200      	movs	r2, #0
 8005bea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005bf2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3730      	adds	r7, #48	@ 0x30
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005c00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	430a      	orrs	r2, r1
 8005c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	f003 0310 	and.w	r3, r3, #16
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d01a      	beq.n	8005d16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cfe:	d10a      	bne.n	8005d16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	430a      	orrs	r2, r1
 8005d14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00a      	beq.n	8005d38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	605a      	str	r2, [r3, #4]
  }
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b098      	sub	sp, #96	@ 0x60
 8005d48:	af02      	add	r7, sp, #8
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d54:	f7fc fc72 	bl	800263c <HAL_GetTick>
 8005d58:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0308 	and.w	r3, r3, #8
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d12f      	bne.n	8005dc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d68:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d70:	2200      	movs	r2, #0
 8005d72:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 f88e 	bl	8005e98 <UART_WaitOnFlagUntilTimeout>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d022      	beq.n	8005dc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005da6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e063      	b.n	8005e90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f003 0304 	and.w	r3, r3, #4
 8005dd2:	2b04      	cmp	r3, #4
 8005dd4:	d149      	bne.n	8005e6a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dd6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dde:	2200      	movs	r2, #0
 8005de0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f857 	bl	8005e98 <UART_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d03c      	beq.n	8005e6a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	623b      	str	r3, [r7, #32]
   return(result);
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e10:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e16:	e841 2300 	strex	r3, r2, [r1]
 8005e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e6      	bne.n	8005df0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3308      	adds	r3, #8
 8005e28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	e853 3f00 	ldrex	r3, [r3]
 8005e30:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f023 0301 	bic.w	r3, r3, #1
 8005e38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e42:	61fa      	str	r2, [r7, #28]
 8005e44:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e46:	69b9      	ldr	r1, [r7, #24]
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e5      	bne.n	8005e22 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e012      	b.n	8005e90 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2220      	movs	r2, #32
 8005e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2220      	movs	r2, #32
 8005e76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3758      	adds	r7, #88	@ 0x58
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	603b      	str	r3, [r7, #0]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ea8:	e04f      	b.n	8005f4a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb0:	d04b      	beq.n	8005f4a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eb2:	f7fc fbc3 	bl	800263c <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d302      	bcc.n	8005ec8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e04e      	b.n	8005f6a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d037      	beq.n	8005f4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b80      	cmp	r3, #128	@ 0x80
 8005ede:	d034      	beq.n	8005f4a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b40      	cmp	r3, #64	@ 0x40
 8005ee4:	d031      	beq.n	8005f4a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	f003 0308 	and.w	r3, r3, #8
 8005ef0:	2b08      	cmp	r3, #8
 8005ef2:	d110      	bne.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2208      	movs	r2, #8
 8005efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f838 	bl	8005f72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2208      	movs	r2, #8
 8005f06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e029      	b.n	8005f6a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69db      	ldr	r3, [r3, #28]
 8005f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f24:	d111      	bne.n	8005f4a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 f81e 	bl	8005f72 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e00f      	b.n	8005f6a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4013      	ands	r3, r2
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	bf0c      	ite	eq
 8005f5a:	2301      	moveq	r3, #1
 8005f5c:	2300      	movne	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	461a      	mov	r2, r3
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d0a0      	beq.n	8005eaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b095      	sub	sp, #84	@ 0x54
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	461a      	mov	r2, r3
 8005f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f9a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e6      	bne.n	8005f7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3308      	adds	r3, #8
 8005fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e3      	bne.n	8005fac <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d118      	bne.n	800601e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	e853 3f00 	ldrex	r3, [r3]
 8005ff8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	f023 0310 	bic.w	r3, r3, #16
 8006000:	647b      	str	r3, [r7, #68]	@ 0x44
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	461a      	mov	r2, r3
 8006008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6979      	ldr	r1, [r7, #20]
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	613b      	str	r3, [r7, #16]
   return(result);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e6      	bne.n	8005fec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2220      	movs	r2, #32
 8006022:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006032:	bf00      	nop
 8006034:	3754      	adds	r7, #84	@ 0x54
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800603e:	b480      	push	{r7}
 8006040:	b085      	sub	sp, #20
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800604c:	2b01      	cmp	r3, #1
 800604e:	d101      	bne.n	8006054 <HAL_UARTEx_DisableFifoMode+0x16>
 8006050:	2302      	movs	r3, #2
 8006052:	e027      	b.n	80060a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2224      	movs	r2, #36	@ 0x24
 8006060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0201 	bic.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006082:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68fa      	ldr	r2, [r7, #12]
 8006090:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2220      	movs	r2, #32
 8006096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d101      	bne.n	80060c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060c4:	2302      	movs	r3, #2
 80060c6:	e02d      	b.n	8006124 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2224      	movs	r2, #36	@ 0x24
 80060d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f022 0201 	bic.w	r2, r2, #1
 80060ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	683a      	ldr	r2, [r7, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f84f 	bl	80061a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b084      	sub	sp, #16
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800613c:	2b01      	cmp	r3, #1
 800613e:	d101      	bne.n	8006144 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006140:	2302      	movs	r3, #2
 8006142:	e02d      	b.n	80061a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2224      	movs	r2, #36	@ 0x24
 8006150:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f811 	bl	80061a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2220      	movs	r2, #32
 8006192:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800619e:	2300      	movs	r3, #0
}
 80061a0:	4618      	mov	r0, r3
 80061a2:	3710      	adds	r7, #16
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d108      	bne.n	80061ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061c8:	e031      	b.n	800622e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061ca:	2308      	movs	r3, #8
 80061cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061ce:	2308      	movs	r3, #8
 80061d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	0e5b      	lsrs	r3, r3, #25
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	0f5b      	lsrs	r3, r3, #29
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	7b3a      	ldrb	r2, [r7, #12]
 80061f6:	4911      	ldr	r1, [pc, #68]	@ (800623c <UARTEx_SetNbDataToProcess+0x94>)
 80061f8:	5c8a      	ldrb	r2, [r1, r2]
 80061fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80061fe:	7b3a      	ldrb	r2, [r7, #12]
 8006200:	490f      	ldr	r1, [pc, #60]	@ (8006240 <UARTEx_SetNbDataToProcess+0x98>)
 8006202:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006204:	fb93 f3f2 	sdiv	r3, r3, r2
 8006208:	b29a      	uxth	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	7b7a      	ldrb	r2, [r7, #13]
 8006214:	4909      	ldr	r1, [pc, #36]	@ (800623c <UARTEx_SetNbDataToProcess+0x94>)
 8006216:	5c8a      	ldrb	r2, [r1, r2]
 8006218:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800621c:	7b7a      	ldrb	r2, [r7, #13]
 800621e:	4908      	ldr	r1, [pc, #32]	@ (8006240 <UARTEx_SetNbDataToProcess+0x98>)
 8006220:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006222:	fb93 f3f2 	sdiv	r3, r3, r2
 8006226:	b29a      	uxth	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800622e:	bf00      	nop
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	080092e0 	.word	0x080092e0
 8006240:	080092e8 	.word	0x080092e8

08006244 <__cvt>:
 8006244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006248:	ec57 6b10 	vmov	r6, r7, d0
 800624c:	2f00      	cmp	r7, #0
 800624e:	460c      	mov	r4, r1
 8006250:	4619      	mov	r1, r3
 8006252:	463b      	mov	r3, r7
 8006254:	bfbb      	ittet	lt
 8006256:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800625a:	461f      	movlt	r7, r3
 800625c:	2300      	movge	r3, #0
 800625e:	232d      	movlt	r3, #45	@ 0x2d
 8006260:	700b      	strb	r3, [r1, #0]
 8006262:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006264:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006268:	4691      	mov	r9, r2
 800626a:	f023 0820 	bic.w	r8, r3, #32
 800626e:	bfbc      	itt	lt
 8006270:	4632      	movlt	r2, r6
 8006272:	4616      	movlt	r6, r2
 8006274:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006278:	d005      	beq.n	8006286 <__cvt+0x42>
 800627a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800627e:	d100      	bne.n	8006282 <__cvt+0x3e>
 8006280:	3401      	adds	r4, #1
 8006282:	2102      	movs	r1, #2
 8006284:	e000      	b.n	8006288 <__cvt+0x44>
 8006286:	2103      	movs	r1, #3
 8006288:	ab03      	add	r3, sp, #12
 800628a:	9301      	str	r3, [sp, #4]
 800628c:	ab02      	add	r3, sp, #8
 800628e:	9300      	str	r3, [sp, #0]
 8006290:	ec47 6b10 	vmov	d0, r6, r7
 8006294:	4653      	mov	r3, sl
 8006296:	4622      	mov	r2, r4
 8006298:	f000 fe6a 	bl	8006f70 <_dtoa_r>
 800629c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80062a0:	4605      	mov	r5, r0
 80062a2:	d119      	bne.n	80062d8 <__cvt+0x94>
 80062a4:	f019 0f01 	tst.w	r9, #1
 80062a8:	d00e      	beq.n	80062c8 <__cvt+0x84>
 80062aa:	eb00 0904 	add.w	r9, r0, r4
 80062ae:	2200      	movs	r2, #0
 80062b0:	2300      	movs	r3, #0
 80062b2:	4630      	mov	r0, r6
 80062b4:	4639      	mov	r1, r7
 80062b6:	f7fa fc1f 	bl	8000af8 <__aeabi_dcmpeq>
 80062ba:	b108      	cbz	r0, 80062c0 <__cvt+0x7c>
 80062bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80062c0:	2230      	movs	r2, #48	@ 0x30
 80062c2:	9b03      	ldr	r3, [sp, #12]
 80062c4:	454b      	cmp	r3, r9
 80062c6:	d31e      	bcc.n	8006306 <__cvt+0xc2>
 80062c8:	9b03      	ldr	r3, [sp, #12]
 80062ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062cc:	1b5b      	subs	r3, r3, r5
 80062ce:	4628      	mov	r0, r5
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	b004      	add	sp, #16
 80062d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062dc:	eb00 0904 	add.w	r9, r0, r4
 80062e0:	d1e5      	bne.n	80062ae <__cvt+0x6a>
 80062e2:	7803      	ldrb	r3, [r0, #0]
 80062e4:	2b30      	cmp	r3, #48	@ 0x30
 80062e6:	d10a      	bne.n	80062fe <__cvt+0xba>
 80062e8:	2200      	movs	r2, #0
 80062ea:	2300      	movs	r3, #0
 80062ec:	4630      	mov	r0, r6
 80062ee:	4639      	mov	r1, r7
 80062f0:	f7fa fc02 	bl	8000af8 <__aeabi_dcmpeq>
 80062f4:	b918      	cbnz	r0, 80062fe <__cvt+0xba>
 80062f6:	f1c4 0401 	rsb	r4, r4, #1
 80062fa:	f8ca 4000 	str.w	r4, [sl]
 80062fe:	f8da 3000 	ldr.w	r3, [sl]
 8006302:	4499      	add	r9, r3
 8006304:	e7d3      	b.n	80062ae <__cvt+0x6a>
 8006306:	1c59      	adds	r1, r3, #1
 8006308:	9103      	str	r1, [sp, #12]
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	e7d9      	b.n	80062c2 <__cvt+0x7e>

0800630e <__exponent>:
 800630e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006310:	2900      	cmp	r1, #0
 8006312:	bfba      	itte	lt
 8006314:	4249      	neglt	r1, r1
 8006316:	232d      	movlt	r3, #45	@ 0x2d
 8006318:	232b      	movge	r3, #43	@ 0x2b
 800631a:	2909      	cmp	r1, #9
 800631c:	7002      	strb	r2, [r0, #0]
 800631e:	7043      	strb	r3, [r0, #1]
 8006320:	dd29      	ble.n	8006376 <__exponent+0x68>
 8006322:	f10d 0307 	add.w	r3, sp, #7
 8006326:	461d      	mov	r5, r3
 8006328:	270a      	movs	r7, #10
 800632a:	461a      	mov	r2, r3
 800632c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006330:	fb07 1416 	mls	r4, r7, r6, r1
 8006334:	3430      	adds	r4, #48	@ 0x30
 8006336:	f802 4c01 	strb.w	r4, [r2, #-1]
 800633a:	460c      	mov	r4, r1
 800633c:	2c63      	cmp	r4, #99	@ 0x63
 800633e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006342:	4631      	mov	r1, r6
 8006344:	dcf1      	bgt.n	800632a <__exponent+0x1c>
 8006346:	3130      	adds	r1, #48	@ 0x30
 8006348:	1e94      	subs	r4, r2, #2
 800634a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800634e:	1c41      	adds	r1, r0, #1
 8006350:	4623      	mov	r3, r4
 8006352:	42ab      	cmp	r3, r5
 8006354:	d30a      	bcc.n	800636c <__exponent+0x5e>
 8006356:	f10d 0309 	add.w	r3, sp, #9
 800635a:	1a9b      	subs	r3, r3, r2
 800635c:	42ac      	cmp	r4, r5
 800635e:	bf88      	it	hi
 8006360:	2300      	movhi	r3, #0
 8006362:	3302      	adds	r3, #2
 8006364:	4403      	add	r3, r0
 8006366:	1a18      	subs	r0, r3, r0
 8006368:	b003      	add	sp, #12
 800636a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006370:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006374:	e7ed      	b.n	8006352 <__exponent+0x44>
 8006376:	2330      	movs	r3, #48	@ 0x30
 8006378:	3130      	adds	r1, #48	@ 0x30
 800637a:	7083      	strb	r3, [r0, #2]
 800637c:	70c1      	strb	r1, [r0, #3]
 800637e:	1d03      	adds	r3, r0, #4
 8006380:	e7f1      	b.n	8006366 <__exponent+0x58>
	...

08006384 <_printf_float>:
 8006384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006388:	b08d      	sub	sp, #52	@ 0x34
 800638a:	460c      	mov	r4, r1
 800638c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006390:	4616      	mov	r6, r2
 8006392:	461f      	mov	r7, r3
 8006394:	4605      	mov	r5, r0
 8006396:	f000 fcdb 	bl	8006d50 <_localeconv_r>
 800639a:	6803      	ldr	r3, [r0, #0]
 800639c:	9304      	str	r3, [sp, #16]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7f9 ff7e 	bl	80002a0 <strlen>
 80063a4:	2300      	movs	r3, #0
 80063a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80063a8:	f8d8 3000 	ldr.w	r3, [r8]
 80063ac:	9005      	str	r0, [sp, #20]
 80063ae:	3307      	adds	r3, #7
 80063b0:	f023 0307 	bic.w	r3, r3, #7
 80063b4:	f103 0208 	add.w	r2, r3, #8
 80063b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063bc:	f8d4 b000 	ldr.w	fp, [r4]
 80063c0:	f8c8 2000 	str.w	r2, [r8]
 80063c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80063cc:	9307      	str	r3, [sp, #28]
 80063ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80063d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80063d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063da:	4b9c      	ldr	r3, [pc, #624]	@ (800664c <_printf_float+0x2c8>)
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295
 80063e0:	f7fa fbbc 	bl	8000b5c <__aeabi_dcmpun>
 80063e4:	bb70      	cbnz	r0, 8006444 <_printf_float+0xc0>
 80063e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063ea:	4b98      	ldr	r3, [pc, #608]	@ (800664c <_printf_float+0x2c8>)
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	f7fa fb96 	bl	8000b20 <__aeabi_dcmple>
 80063f4:	bb30      	cbnz	r0, 8006444 <_printf_float+0xc0>
 80063f6:	2200      	movs	r2, #0
 80063f8:	2300      	movs	r3, #0
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	f7fa fb85 	bl	8000b0c <__aeabi_dcmplt>
 8006402:	b110      	cbz	r0, 800640a <_printf_float+0x86>
 8006404:	232d      	movs	r3, #45	@ 0x2d
 8006406:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800640a:	4a91      	ldr	r2, [pc, #580]	@ (8006650 <_printf_float+0x2cc>)
 800640c:	4b91      	ldr	r3, [pc, #580]	@ (8006654 <_printf_float+0x2d0>)
 800640e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006412:	bf94      	ite	ls
 8006414:	4690      	movls	r8, r2
 8006416:	4698      	movhi	r8, r3
 8006418:	2303      	movs	r3, #3
 800641a:	6123      	str	r3, [r4, #16]
 800641c:	f02b 0304 	bic.w	r3, fp, #4
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	f04f 0900 	mov.w	r9, #0
 8006426:	9700      	str	r7, [sp, #0]
 8006428:	4633      	mov	r3, r6
 800642a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800642c:	4621      	mov	r1, r4
 800642e:	4628      	mov	r0, r5
 8006430:	f000 f9d2 	bl	80067d8 <_printf_common>
 8006434:	3001      	adds	r0, #1
 8006436:	f040 808d 	bne.w	8006554 <_printf_float+0x1d0>
 800643a:	f04f 30ff 	mov.w	r0, #4294967295
 800643e:	b00d      	add	sp, #52	@ 0x34
 8006440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006444:	4642      	mov	r2, r8
 8006446:	464b      	mov	r3, r9
 8006448:	4640      	mov	r0, r8
 800644a:	4649      	mov	r1, r9
 800644c:	f7fa fb86 	bl	8000b5c <__aeabi_dcmpun>
 8006450:	b140      	cbz	r0, 8006464 <_printf_float+0xe0>
 8006452:	464b      	mov	r3, r9
 8006454:	2b00      	cmp	r3, #0
 8006456:	bfbc      	itt	lt
 8006458:	232d      	movlt	r3, #45	@ 0x2d
 800645a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800645e:	4a7e      	ldr	r2, [pc, #504]	@ (8006658 <_printf_float+0x2d4>)
 8006460:	4b7e      	ldr	r3, [pc, #504]	@ (800665c <_printf_float+0x2d8>)
 8006462:	e7d4      	b.n	800640e <_printf_float+0x8a>
 8006464:	6863      	ldr	r3, [r4, #4]
 8006466:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800646a:	9206      	str	r2, [sp, #24]
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	d13b      	bne.n	80064e8 <_printf_float+0x164>
 8006470:	2306      	movs	r3, #6
 8006472:	6063      	str	r3, [r4, #4]
 8006474:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006478:	2300      	movs	r3, #0
 800647a:	6022      	str	r2, [r4, #0]
 800647c:	9303      	str	r3, [sp, #12]
 800647e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006480:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006484:	ab09      	add	r3, sp, #36	@ 0x24
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	6861      	ldr	r1, [r4, #4]
 800648a:	ec49 8b10 	vmov	d0, r8, r9
 800648e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006492:	4628      	mov	r0, r5
 8006494:	f7ff fed6 	bl	8006244 <__cvt>
 8006498:	9b06      	ldr	r3, [sp, #24]
 800649a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800649c:	2b47      	cmp	r3, #71	@ 0x47
 800649e:	4680      	mov	r8, r0
 80064a0:	d129      	bne.n	80064f6 <_printf_float+0x172>
 80064a2:	1cc8      	adds	r0, r1, #3
 80064a4:	db02      	blt.n	80064ac <_printf_float+0x128>
 80064a6:	6863      	ldr	r3, [r4, #4]
 80064a8:	4299      	cmp	r1, r3
 80064aa:	dd41      	ble.n	8006530 <_printf_float+0x1ac>
 80064ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80064b0:	fa5f fa8a 	uxtb.w	sl, sl
 80064b4:	3901      	subs	r1, #1
 80064b6:	4652      	mov	r2, sl
 80064b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80064bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80064be:	f7ff ff26 	bl	800630e <__exponent>
 80064c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80064c4:	1813      	adds	r3, r2, r0
 80064c6:	2a01      	cmp	r2, #1
 80064c8:	4681      	mov	r9, r0
 80064ca:	6123      	str	r3, [r4, #16]
 80064cc:	dc02      	bgt.n	80064d4 <_printf_float+0x150>
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	07d2      	lsls	r2, r2, #31
 80064d2:	d501      	bpl.n	80064d8 <_printf_float+0x154>
 80064d4:	3301      	adds	r3, #1
 80064d6:	6123      	str	r3, [r4, #16]
 80064d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d0a2      	beq.n	8006426 <_printf_float+0xa2>
 80064e0:	232d      	movs	r3, #45	@ 0x2d
 80064e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064e6:	e79e      	b.n	8006426 <_printf_float+0xa2>
 80064e8:	9a06      	ldr	r2, [sp, #24]
 80064ea:	2a47      	cmp	r2, #71	@ 0x47
 80064ec:	d1c2      	bne.n	8006474 <_printf_float+0xf0>
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1c0      	bne.n	8006474 <_printf_float+0xf0>
 80064f2:	2301      	movs	r3, #1
 80064f4:	e7bd      	b.n	8006472 <_printf_float+0xee>
 80064f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064fa:	d9db      	bls.n	80064b4 <_printf_float+0x130>
 80064fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006500:	d118      	bne.n	8006534 <_printf_float+0x1b0>
 8006502:	2900      	cmp	r1, #0
 8006504:	6863      	ldr	r3, [r4, #4]
 8006506:	dd0b      	ble.n	8006520 <_printf_float+0x19c>
 8006508:	6121      	str	r1, [r4, #16]
 800650a:	b913      	cbnz	r3, 8006512 <_printf_float+0x18e>
 800650c:	6822      	ldr	r2, [r4, #0]
 800650e:	07d0      	lsls	r0, r2, #31
 8006510:	d502      	bpl.n	8006518 <_printf_float+0x194>
 8006512:	3301      	adds	r3, #1
 8006514:	440b      	add	r3, r1
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	65a1      	str	r1, [r4, #88]	@ 0x58
 800651a:	f04f 0900 	mov.w	r9, #0
 800651e:	e7db      	b.n	80064d8 <_printf_float+0x154>
 8006520:	b913      	cbnz	r3, 8006528 <_printf_float+0x1a4>
 8006522:	6822      	ldr	r2, [r4, #0]
 8006524:	07d2      	lsls	r2, r2, #31
 8006526:	d501      	bpl.n	800652c <_printf_float+0x1a8>
 8006528:	3302      	adds	r3, #2
 800652a:	e7f4      	b.n	8006516 <_printf_float+0x192>
 800652c:	2301      	movs	r3, #1
 800652e:	e7f2      	b.n	8006516 <_printf_float+0x192>
 8006530:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006536:	4299      	cmp	r1, r3
 8006538:	db05      	blt.n	8006546 <_printf_float+0x1c2>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	6121      	str	r1, [r4, #16]
 800653e:	07d8      	lsls	r0, r3, #31
 8006540:	d5ea      	bpl.n	8006518 <_printf_float+0x194>
 8006542:	1c4b      	adds	r3, r1, #1
 8006544:	e7e7      	b.n	8006516 <_printf_float+0x192>
 8006546:	2900      	cmp	r1, #0
 8006548:	bfd4      	ite	le
 800654a:	f1c1 0202 	rsble	r2, r1, #2
 800654e:	2201      	movgt	r2, #1
 8006550:	4413      	add	r3, r2
 8006552:	e7e0      	b.n	8006516 <_printf_float+0x192>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	055a      	lsls	r2, r3, #21
 8006558:	d407      	bmi.n	800656a <_printf_float+0x1e6>
 800655a:	6923      	ldr	r3, [r4, #16]
 800655c:	4642      	mov	r2, r8
 800655e:	4631      	mov	r1, r6
 8006560:	4628      	mov	r0, r5
 8006562:	47b8      	blx	r7
 8006564:	3001      	adds	r0, #1
 8006566:	d12b      	bne.n	80065c0 <_printf_float+0x23c>
 8006568:	e767      	b.n	800643a <_printf_float+0xb6>
 800656a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800656e:	f240 80dd 	bls.w	800672c <_printf_float+0x3a8>
 8006572:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006576:	2200      	movs	r2, #0
 8006578:	2300      	movs	r3, #0
 800657a:	f7fa fabd 	bl	8000af8 <__aeabi_dcmpeq>
 800657e:	2800      	cmp	r0, #0
 8006580:	d033      	beq.n	80065ea <_printf_float+0x266>
 8006582:	4a37      	ldr	r2, [pc, #220]	@ (8006660 <_printf_float+0x2dc>)
 8006584:	2301      	movs	r3, #1
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	47b8      	blx	r7
 800658c:	3001      	adds	r0, #1
 800658e:	f43f af54 	beq.w	800643a <_printf_float+0xb6>
 8006592:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006596:	4543      	cmp	r3, r8
 8006598:	db02      	blt.n	80065a0 <_printf_float+0x21c>
 800659a:	6823      	ldr	r3, [r4, #0]
 800659c:	07d8      	lsls	r0, r3, #31
 800659e:	d50f      	bpl.n	80065c0 <_printf_float+0x23c>
 80065a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	f43f af45 	beq.w	800643a <_printf_float+0xb6>
 80065b0:	f04f 0900 	mov.w	r9, #0
 80065b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80065b8:	f104 0a1a 	add.w	sl, r4, #26
 80065bc:	45c8      	cmp	r8, r9
 80065be:	dc09      	bgt.n	80065d4 <_printf_float+0x250>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	079b      	lsls	r3, r3, #30
 80065c4:	f100 8103 	bmi.w	80067ce <_printf_float+0x44a>
 80065c8:	68e0      	ldr	r0, [r4, #12]
 80065ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065cc:	4298      	cmp	r0, r3
 80065ce:	bfb8      	it	lt
 80065d0:	4618      	movlt	r0, r3
 80065d2:	e734      	b.n	800643e <_printf_float+0xba>
 80065d4:	2301      	movs	r3, #1
 80065d6:	4652      	mov	r2, sl
 80065d8:	4631      	mov	r1, r6
 80065da:	4628      	mov	r0, r5
 80065dc:	47b8      	blx	r7
 80065de:	3001      	adds	r0, #1
 80065e0:	f43f af2b 	beq.w	800643a <_printf_float+0xb6>
 80065e4:	f109 0901 	add.w	r9, r9, #1
 80065e8:	e7e8      	b.n	80065bc <_printf_float+0x238>
 80065ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	dc39      	bgt.n	8006664 <_printf_float+0x2e0>
 80065f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006660 <_printf_float+0x2dc>)
 80065f2:	2301      	movs	r3, #1
 80065f4:	4631      	mov	r1, r6
 80065f6:	4628      	mov	r0, r5
 80065f8:	47b8      	blx	r7
 80065fa:	3001      	adds	r0, #1
 80065fc:	f43f af1d 	beq.w	800643a <_printf_float+0xb6>
 8006600:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006604:	ea59 0303 	orrs.w	r3, r9, r3
 8006608:	d102      	bne.n	8006610 <_printf_float+0x28c>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	07d9      	lsls	r1, r3, #31
 800660e:	d5d7      	bpl.n	80065c0 <_printf_float+0x23c>
 8006610:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f af0d 	beq.w	800643a <_printf_float+0xb6>
 8006620:	f04f 0a00 	mov.w	sl, #0
 8006624:	f104 0b1a 	add.w	fp, r4, #26
 8006628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662a:	425b      	negs	r3, r3
 800662c:	4553      	cmp	r3, sl
 800662e:	dc01      	bgt.n	8006634 <_printf_float+0x2b0>
 8006630:	464b      	mov	r3, r9
 8006632:	e793      	b.n	800655c <_printf_float+0x1d8>
 8006634:	2301      	movs	r3, #1
 8006636:	465a      	mov	r2, fp
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	47b8      	blx	r7
 800663e:	3001      	adds	r0, #1
 8006640:	f43f aefb 	beq.w	800643a <_printf_float+0xb6>
 8006644:	f10a 0a01 	add.w	sl, sl, #1
 8006648:	e7ee      	b.n	8006628 <_printf_float+0x2a4>
 800664a:	bf00      	nop
 800664c:	7fefffff 	.word	0x7fefffff
 8006650:	080092f0 	.word	0x080092f0
 8006654:	080092f4 	.word	0x080092f4
 8006658:	080092f8 	.word	0x080092f8
 800665c:	080092fc 	.word	0x080092fc
 8006660:	08009300 	.word	0x08009300
 8006664:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006666:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800666a:	4553      	cmp	r3, sl
 800666c:	bfa8      	it	ge
 800666e:	4653      	movge	r3, sl
 8006670:	2b00      	cmp	r3, #0
 8006672:	4699      	mov	r9, r3
 8006674:	dc36      	bgt.n	80066e4 <_printf_float+0x360>
 8006676:	f04f 0b00 	mov.w	fp, #0
 800667a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800667e:	f104 021a 	add.w	r2, r4, #26
 8006682:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006684:	9306      	str	r3, [sp, #24]
 8006686:	eba3 0309 	sub.w	r3, r3, r9
 800668a:	455b      	cmp	r3, fp
 800668c:	dc31      	bgt.n	80066f2 <_printf_float+0x36e>
 800668e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006690:	459a      	cmp	sl, r3
 8006692:	dc3a      	bgt.n	800670a <_printf_float+0x386>
 8006694:	6823      	ldr	r3, [r4, #0]
 8006696:	07da      	lsls	r2, r3, #31
 8006698:	d437      	bmi.n	800670a <_printf_float+0x386>
 800669a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800669c:	ebaa 0903 	sub.w	r9, sl, r3
 80066a0:	9b06      	ldr	r3, [sp, #24]
 80066a2:	ebaa 0303 	sub.w	r3, sl, r3
 80066a6:	4599      	cmp	r9, r3
 80066a8:	bfa8      	it	ge
 80066aa:	4699      	movge	r9, r3
 80066ac:	f1b9 0f00 	cmp.w	r9, #0
 80066b0:	dc33      	bgt.n	800671a <_printf_float+0x396>
 80066b2:	f04f 0800 	mov.w	r8, #0
 80066b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ba:	f104 0b1a 	add.w	fp, r4, #26
 80066be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066c0:	ebaa 0303 	sub.w	r3, sl, r3
 80066c4:	eba3 0309 	sub.w	r3, r3, r9
 80066c8:	4543      	cmp	r3, r8
 80066ca:	f77f af79 	ble.w	80065c0 <_printf_float+0x23c>
 80066ce:	2301      	movs	r3, #1
 80066d0:	465a      	mov	r2, fp
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	f43f aeae 	beq.w	800643a <_printf_float+0xb6>
 80066de:	f108 0801 	add.w	r8, r8, #1
 80066e2:	e7ec      	b.n	80066be <_printf_float+0x33a>
 80066e4:	4642      	mov	r2, r8
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	d1c2      	bne.n	8006676 <_printf_float+0x2f2>
 80066f0:	e6a3      	b.n	800643a <_printf_float+0xb6>
 80066f2:	2301      	movs	r3, #1
 80066f4:	4631      	mov	r1, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	9206      	str	r2, [sp, #24]
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f ae9c 	beq.w	800643a <_printf_float+0xb6>
 8006702:	9a06      	ldr	r2, [sp, #24]
 8006704:	f10b 0b01 	add.w	fp, fp, #1
 8006708:	e7bb      	b.n	8006682 <_printf_float+0x2fe>
 800670a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800670e:	4631      	mov	r1, r6
 8006710:	4628      	mov	r0, r5
 8006712:	47b8      	blx	r7
 8006714:	3001      	adds	r0, #1
 8006716:	d1c0      	bne.n	800669a <_printf_float+0x316>
 8006718:	e68f      	b.n	800643a <_printf_float+0xb6>
 800671a:	9a06      	ldr	r2, [sp, #24]
 800671c:	464b      	mov	r3, r9
 800671e:	4442      	add	r2, r8
 8006720:	4631      	mov	r1, r6
 8006722:	4628      	mov	r0, r5
 8006724:	47b8      	blx	r7
 8006726:	3001      	adds	r0, #1
 8006728:	d1c3      	bne.n	80066b2 <_printf_float+0x32e>
 800672a:	e686      	b.n	800643a <_printf_float+0xb6>
 800672c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006730:	f1ba 0f01 	cmp.w	sl, #1
 8006734:	dc01      	bgt.n	800673a <_printf_float+0x3b6>
 8006736:	07db      	lsls	r3, r3, #31
 8006738:	d536      	bpl.n	80067a8 <_printf_float+0x424>
 800673a:	2301      	movs	r3, #1
 800673c:	4642      	mov	r2, r8
 800673e:	4631      	mov	r1, r6
 8006740:	4628      	mov	r0, r5
 8006742:	47b8      	blx	r7
 8006744:	3001      	adds	r0, #1
 8006746:	f43f ae78 	beq.w	800643a <_printf_float+0xb6>
 800674a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800674e:	4631      	mov	r1, r6
 8006750:	4628      	mov	r0, r5
 8006752:	47b8      	blx	r7
 8006754:	3001      	adds	r0, #1
 8006756:	f43f ae70 	beq.w	800643a <_printf_float+0xb6>
 800675a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800675e:	2200      	movs	r2, #0
 8006760:	2300      	movs	r3, #0
 8006762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006766:	f7fa f9c7 	bl	8000af8 <__aeabi_dcmpeq>
 800676a:	b9c0      	cbnz	r0, 800679e <_printf_float+0x41a>
 800676c:	4653      	mov	r3, sl
 800676e:	f108 0201 	add.w	r2, r8, #1
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	d10c      	bne.n	8006796 <_printf_float+0x412>
 800677c:	e65d      	b.n	800643a <_printf_float+0xb6>
 800677e:	2301      	movs	r3, #1
 8006780:	465a      	mov	r2, fp
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	f43f ae56 	beq.w	800643a <_printf_float+0xb6>
 800678e:	f108 0801 	add.w	r8, r8, #1
 8006792:	45d0      	cmp	r8, sl
 8006794:	dbf3      	blt.n	800677e <_printf_float+0x3fa>
 8006796:	464b      	mov	r3, r9
 8006798:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800679c:	e6df      	b.n	800655e <_printf_float+0x1da>
 800679e:	f04f 0800 	mov.w	r8, #0
 80067a2:	f104 0b1a 	add.w	fp, r4, #26
 80067a6:	e7f4      	b.n	8006792 <_printf_float+0x40e>
 80067a8:	2301      	movs	r3, #1
 80067aa:	4642      	mov	r2, r8
 80067ac:	e7e1      	b.n	8006772 <_printf_float+0x3ee>
 80067ae:	2301      	movs	r3, #1
 80067b0:	464a      	mov	r2, r9
 80067b2:	4631      	mov	r1, r6
 80067b4:	4628      	mov	r0, r5
 80067b6:	47b8      	blx	r7
 80067b8:	3001      	adds	r0, #1
 80067ba:	f43f ae3e 	beq.w	800643a <_printf_float+0xb6>
 80067be:	f108 0801 	add.w	r8, r8, #1
 80067c2:	68e3      	ldr	r3, [r4, #12]
 80067c4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80067c6:	1a5b      	subs	r3, r3, r1
 80067c8:	4543      	cmp	r3, r8
 80067ca:	dcf0      	bgt.n	80067ae <_printf_float+0x42a>
 80067cc:	e6fc      	b.n	80065c8 <_printf_float+0x244>
 80067ce:	f04f 0800 	mov.w	r8, #0
 80067d2:	f104 0919 	add.w	r9, r4, #25
 80067d6:	e7f4      	b.n	80067c2 <_printf_float+0x43e>

080067d8 <_printf_common>:
 80067d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067dc:	4616      	mov	r6, r2
 80067de:	4698      	mov	r8, r3
 80067e0:	688a      	ldr	r2, [r1, #8]
 80067e2:	690b      	ldr	r3, [r1, #16]
 80067e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067e8:	4293      	cmp	r3, r2
 80067ea:	bfb8      	it	lt
 80067ec:	4613      	movlt	r3, r2
 80067ee:	6033      	str	r3, [r6, #0]
 80067f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067f4:	4607      	mov	r7, r0
 80067f6:	460c      	mov	r4, r1
 80067f8:	b10a      	cbz	r2, 80067fe <_printf_common+0x26>
 80067fa:	3301      	adds	r3, #1
 80067fc:	6033      	str	r3, [r6, #0]
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	0699      	lsls	r1, r3, #26
 8006802:	bf42      	ittt	mi
 8006804:	6833      	ldrmi	r3, [r6, #0]
 8006806:	3302      	addmi	r3, #2
 8006808:	6033      	strmi	r3, [r6, #0]
 800680a:	6825      	ldr	r5, [r4, #0]
 800680c:	f015 0506 	ands.w	r5, r5, #6
 8006810:	d106      	bne.n	8006820 <_printf_common+0x48>
 8006812:	f104 0a19 	add.w	sl, r4, #25
 8006816:	68e3      	ldr	r3, [r4, #12]
 8006818:	6832      	ldr	r2, [r6, #0]
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	42ab      	cmp	r3, r5
 800681e:	dc26      	bgt.n	800686e <_printf_common+0x96>
 8006820:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	3b00      	subs	r3, #0
 8006828:	bf18      	it	ne
 800682a:	2301      	movne	r3, #1
 800682c:	0692      	lsls	r2, r2, #26
 800682e:	d42b      	bmi.n	8006888 <_printf_common+0xb0>
 8006830:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006834:	4641      	mov	r1, r8
 8006836:	4638      	mov	r0, r7
 8006838:	47c8      	blx	r9
 800683a:	3001      	adds	r0, #1
 800683c:	d01e      	beq.n	800687c <_printf_common+0xa4>
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	6922      	ldr	r2, [r4, #16]
 8006842:	f003 0306 	and.w	r3, r3, #6
 8006846:	2b04      	cmp	r3, #4
 8006848:	bf02      	ittt	eq
 800684a:	68e5      	ldreq	r5, [r4, #12]
 800684c:	6833      	ldreq	r3, [r6, #0]
 800684e:	1aed      	subeq	r5, r5, r3
 8006850:	68a3      	ldr	r3, [r4, #8]
 8006852:	bf0c      	ite	eq
 8006854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006858:	2500      	movne	r5, #0
 800685a:	4293      	cmp	r3, r2
 800685c:	bfc4      	itt	gt
 800685e:	1a9b      	subgt	r3, r3, r2
 8006860:	18ed      	addgt	r5, r5, r3
 8006862:	2600      	movs	r6, #0
 8006864:	341a      	adds	r4, #26
 8006866:	42b5      	cmp	r5, r6
 8006868:	d11a      	bne.n	80068a0 <_printf_common+0xc8>
 800686a:	2000      	movs	r0, #0
 800686c:	e008      	b.n	8006880 <_printf_common+0xa8>
 800686e:	2301      	movs	r3, #1
 8006870:	4652      	mov	r2, sl
 8006872:	4641      	mov	r1, r8
 8006874:	4638      	mov	r0, r7
 8006876:	47c8      	blx	r9
 8006878:	3001      	adds	r0, #1
 800687a:	d103      	bne.n	8006884 <_printf_common+0xac>
 800687c:	f04f 30ff 	mov.w	r0, #4294967295
 8006880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006884:	3501      	adds	r5, #1
 8006886:	e7c6      	b.n	8006816 <_printf_common+0x3e>
 8006888:	18e1      	adds	r1, r4, r3
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	2030      	movs	r0, #48	@ 0x30
 800688e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006892:	4422      	add	r2, r4
 8006894:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006898:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800689c:	3302      	adds	r3, #2
 800689e:	e7c7      	b.n	8006830 <_printf_common+0x58>
 80068a0:	2301      	movs	r3, #1
 80068a2:	4622      	mov	r2, r4
 80068a4:	4641      	mov	r1, r8
 80068a6:	4638      	mov	r0, r7
 80068a8:	47c8      	blx	r9
 80068aa:	3001      	adds	r0, #1
 80068ac:	d0e6      	beq.n	800687c <_printf_common+0xa4>
 80068ae:	3601      	adds	r6, #1
 80068b0:	e7d9      	b.n	8006866 <_printf_common+0x8e>
	...

080068b4 <_printf_i>:
 80068b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068b8:	7e0f      	ldrb	r7, [r1, #24]
 80068ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068bc:	2f78      	cmp	r7, #120	@ 0x78
 80068be:	4691      	mov	r9, r2
 80068c0:	4680      	mov	r8, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	469a      	mov	sl, r3
 80068c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068ca:	d807      	bhi.n	80068dc <_printf_i+0x28>
 80068cc:	2f62      	cmp	r7, #98	@ 0x62
 80068ce:	d80a      	bhi.n	80068e6 <_printf_i+0x32>
 80068d0:	2f00      	cmp	r7, #0
 80068d2:	f000 80d2 	beq.w	8006a7a <_printf_i+0x1c6>
 80068d6:	2f58      	cmp	r7, #88	@ 0x58
 80068d8:	f000 80b9 	beq.w	8006a4e <_printf_i+0x19a>
 80068dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068e4:	e03a      	b.n	800695c <_printf_i+0xa8>
 80068e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068ea:	2b15      	cmp	r3, #21
 80068ec:	d8f6      	bhi.n	80068dc <_printf_i+0x28>
 80068ee:	a101      	add	r1, pc, #4	@ (adr r1, 80068f4 <_printf_i+0x40>)
 80068f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f4:	0800694d 	.word	0x0800694d
 80068f8:	08006961 	.word	0x08006961
 80068fc:	080068dd 	.word	0x080068dd
 8006900:	080068dd 	.word	0x080068dd
 8006904:	080068dd 	.word	0x080068dd
 8006908:	080068dd 	.word	0x080068dd
 800690c:	08006961 	.word	0x08006961
 8006910:	080068dd 	.word	0x080068dd
 8006914:	080068dd 	.word	0x080068dd
 8006918:	080068dd 	.word	0x080068dd
 800691c:	080068dd 	.word	0x080068dd
 8006920:	08006a61 	.word	0x08006a61
 8006924:	0800698b 	.word	0x0800698b
 8006928:	08006a1b 	.word	0x08006a1b
 800692c:	080068dd 	.word	0x080068dd
 8006930:	080068dd 	.word	0x080068dd
 8006934:	08006a83 	.word	0x08006a83
 8006938:	080068dd 	.word	0x080068dd
 800693c:	0800698b 	.word	0x0800698b
 8006940:	080068dd 	.word	0x080068dd
 8006944:	080068dd 	.word	0x080068dd
 8006948:	08006a23 	.word	0x08006a23
 800694c:	6833      	ldr	r3, [r6, #0]
 800694e:	1d1a      	adds	r2, r3, #4
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6032      	str	r2, [r6, #0]
 8006954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006958:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800695c:	2301      	movs	r3, #1
 800695e:	e09d      	b.n	8006a9c <_printf_i+0x1e8>
 8006960:	6833      	ldr	r3, [r6, #0]
 8006962:	6820      	ldr	r0, [r4, #0]
 8006964:	1d19      	adds	r1, r3, #4
 8006966:	6031      	str	r1, [r6, #0]
 8006968:	0606      	lsls	r6, r0, #24
 800696a:	d501      	bpl.n	8006970 <_printf_i+0xbc>
 800696c:	681d      	ldr	r5, [r3, #0]
 800696e:	e003      	b.n	8006978 <_printf_i+0xc4>
 8006970:	0645      	lsls	r5, r0, #25
 8006972:	d5fb      	bpl.n	800696c <_printf_i+0xb8>
 8006974:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006978:	2d00      	cmp	r5, #0
 800697a:	da03      	bge.n	8006984 <_printf_i+0xd0>
 800697c:	232d      	movs	r3, #45	@ 0x2d
 800697e:	426d      	negs	r5, r5
 8006980:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006984:	4859      	ldr	r0, [pc, #356]	@ (8006aec <_printf_i+0x238>)
 8006986:	230a      	movs	r3, #10
 8006988:	e011      	b.n	80069ae <_printf_i+0xfa>
 800698a:	6821      	ldr	r1, [r4, #0]
 800698c:	6833      	ldr	r3, [r6, #0]
 800698e:	0608      	lsls	r0, r1, #24
 8006990:	f853 5b04 	ldr.w	r5, [r3], #4
 8006994:	d402      	bmi.n	800699c <_printf_i+0xe8>
 8006996:	0649      	lsls	r1, r1, #25
 8006998:	bf48      	it	mi
 800699a:	b2ad      	uxthmi	r5, r5
 800699c:	2f6f      	cmp	r7, #111	@ 0x6f
 800699e:	4853      	ldr	r0, [pc, #332]	@ (8006aec <_printf_i+0x238>)
 80069a0:	6033      	str	r3, [r6, #0]
 80069a2:	bf14      	ite	ne
 80069a4:	230a      	movne	r3, #10
 80069a6:	2308      	moveq	r3, #8
 80069a8:	2100      	movs	r1, #0
 80069aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069ae:	6866      	ldr	r6, [r4, #4]
 80069b0:	60a6      	str	r6, [r4, #8]
 80069b2:	2e00      	cmp	r6, #0
 80069b4:	bfa2      	ittt	ge
 80069b6:	6821      	ldrge	r1, [r4, #0]
 80069b8:	f021 0104 	bicge.w	r1, r1, #4
 80069bc:	6021      	strge	r1, [r4, #0]
 80069be:	b90d      	cbnz	r5, 80069c4 <_printf_i+0x110>
 80069c0:	2e00      	cmp	r6, #0
 80069c2:	d04b      	beq.n	8006a5c <_printf_i+0x1a8>
 80069c4:	4616      	mov	r6, r2
 80069c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80069ca:	fb03 5711 	mls	r7, r3, r1, r5
 80069ce:	5dc7      	ldrb	r7, [r0, r7]
 80069d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069d4:	462f      	mov	r7, r5
 80069d6:	42bb      	cmp	r3, r7
 80069d8:	460d      	mov	r5, r1
 80069da:	d9f4      	bls.n	80069c6 <_printf_i+0x112>
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d10b      	bne.n	80069f8 <_printf_i+0x144>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	07df      	lsls	r7, r3, #31
 80069e4:	d508      	bpl.n	80069f8 <_printf_i+0x144>
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	6861      	ldr	r1, [r4, #4]
 80069ea:	4299      	cmp	r1, r3
 80069ec:	bfde      	ittt	le
 80069ee:	2330      	movle	r3, #48	@ 0x30
 80069f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069f8:	1b92      	subs	r2, r2, r6
 80069fa:	6122      	str	r2, [r4, #16]
 80069fc:	f8cd a000 	str.w	sl, [sp]
 8006a00:	464b      	mov	r3, r9
 8006a02:	aa03      	add	r2, sp, #12
 8006a04:	4621      	mov	r1, r4
 8006a06:	4640      	mov	r0, r8
 8006a08:	f7ff fee6 	bl	80067d8 <_printf_common>
 8006a0c:	3001      	adds	r0, #1
 8006a0e:	d14a      	bne.n	8006aa6 <_printf_i+0x1f2>
 8006a10:	f04f 30ff 	mov.w	r0, #4294967295
 8006a14:	b004      	add	sp, #16
 8006a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	f043 0320 	orr.w	r3, r3, #32
 8006a20:	6023      	str	r3, [r4, #0]
 8006a22:	4833      	ldr	r0, [pc, #204]	@ (8006af0 <_printf_i+0x23c>)
 8006a24:	2778      	movs	r7, #120	@ 0x78
 8006a26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a2a:	6823      	ldr	r3, [r4, #0]
 8006a2c:	6831      	ldr	r1, [r6, #0]
 8006a2e:	061f      	lsls	r7, r3, #24
 8006a30:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a34:	d402      	bmi.n	8006a3c <_printf_i+0x188>
 8006a36:	065f      	lsls	r7, r3, #25
 8006a38:	bf48      	it	mi
 8006a3a:	b2ad      	uxthmi	r5, r5
 8006a3c:	6031      	str	r1, [r6, #0]
 8006a3e:	07d9      	lsls	r1, r3, #31
 8006a40:	bf44      	itt	mi
 8006a42:	f043 0320 	orrmi.w	r3, r3, #32
 8006a46:	6023      	strmi	r3, [r4, #0]
 8006a48:	b11d      	cbz	r5, 8006a52 <_printf_i+0x19e>
 8006a4a:	2310      	movs	r3, #16
 8006a4c:	e7ac      	b.n	80069a8 <_printf_i+0xf4>
 8006a4e:	4827      	ldr	r0, [pc, #156]	@ (8006aec <_printf_i+0x238>)
 8006a50:	e7e9      	b.n	8006a26 <_printf_i+0x172>
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	f023 0320 	bic.w	r3, r3, #32
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	e7f6      	b.n	8006a4a <_printf_i+0x196>
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	e7bd      	b.n	80069dc <_printf_i+0x128>
 8006a60:	6833      	ldr	r3, [r6, #0]
 8006a62:	6825      	ldr	r5, [r4, #0]
 8006a64:	6961      	ldr	r1, [r4, #20]
 8006a66:	1d18      	adds	r0, r3, #4
 8006a68:	6030      	str	r0, [r6, #0]
 8006a6a:	062e      	lsls	r6, r5, #24
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	d501      	bpl.n	8006a74 <_printf_i+0x1c0>
 8006a70:	6019      	str	r1, [r3, #0]
 8006a72:	e002      	b.n	8006a7a <_printf_i+0x1c6>
 8006a74:	0668      	lsls	r0, r5, #25
 8006a76:	d5fb      	bpl.n	8006a70 <_printf_i+0x1bc>
 8006a78:	8019      	strh	r1, [r3, #0]
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	4616      	mov	r6, r2
 8006a80:	e7bc      	b.n	80069fc <_printf_i+0x148>
 8006a82:	6833      	ldr	r3, [r6, #0]
 8006a84:	1d1a      	adds	r2, r3, #4
 8006a86:	6032      	str	r2, [r6, #0]
 8006a88:	681e      	ldr	r6, [r3, #0]
 8006a8a:	6862      	ldr	r2, [r4, #4]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	f7f9 fbb6 	bl	8000200 <memchr>
 8006a94:	b108      	cbz	r0, 8006a9a <_printf_i+0x1e6>
 8006a96:	1b80      	subs	r0, r0, r6
 8006a98:	6060      	str	r0, [r4, #4]
 8006a9a:	6863      	ldr	r3, [r4, #4]
 8006a9c:	6123      	str	r3, [r4, #16]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006aa4:	e7aa      	b.n	80069fc <_printf_i+0x148>
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	4632      	mov	r2, r6
 8006aaa:	4649      	mov	r1, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	47d0      	blx	sl
 8006ab0:	3001      	adds	r0, #1
 8006ab2:	d0ad      	beq.n	8006a10 <_printf_i+0x15c>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	079b      	lsls	r3, r3, #30
 8006ab8:	d413      	bmi.n	8006ae2 <_printf_i+0x22e>
 8006aba:	68e0      	ldr	r0, [r4, #12]
 8006abc:	9b03      	ldr	r3, [sp, #12]
 8006abe:	4298      	cmp	r0, r3
 8006ac0:	bfb8      	it	lt
 8006ac2:	4618      	movlt	r0, r3
 8006ac4:	e7a6      	b.n	8006a14 <_printf_i+0x160>
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	4632      	mov	r2, r6
 8006aca:	4649      	mov	r1, r9
 8006acc:	4640      	mov	r0, r8
 8006ace:	47d0      	blx	sl
 8006ad0:	3001      	adds	r0, #1
 8006ad2:	d09d      	beq.n	8006a10 <_printf_i+0x15c>
 8006ad4:	3501      	adds	r5, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	9903      	ldr	r1, [sp, #12]
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	42ab      	cmp	r3, r5
 8006ade:	dcf2      	bgt.n	8006ac6 <_printf_i+0x212>
 8006ae0:	e7eb      	b.n	8006aba <_printf_i+0x206>
 8006ae2:	2500      	movs	r5, #0
 8006ae4:	f104 0619 	add.w	r6, r4, #25
 8006ae8:	e7f5      	b.n	8006ad6 <_printf_i+0x222>
 8006aea:	bf00      	nop
 8006aec:	08009302 	.word	0x08009302
 8006af0:	08009313 	.word	0x08009313

08006af4 <std>:
 8006af4:	2300      	movs	r3, #0
 8006af6:	b510      	push	{r4, lr}
 8006af8:	4604      	mov	r4, r0
 8006afa:	e9c0 3300 	strd	r3, r3, [r0]
 8006afe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b02:	6083      	str	r3, [r0, #8]
 8006b04:	8181      	strh	r1, [r0, #12]
 8006b06:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b08:	81c2      	strh	r2, [r0, #14]
 8006b0a:	6183      	str	r3, [r0, #24]
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	2208      	movs	r2, #8
 8006b10:	305c      	adds	r0, #92	@ 0x5c
 8006b12:	f000 f914 	bl	8006d3e <memset>
 8006b16:	4b0d      	ldr	r3, [pc, #52]	@ (8006b4c <std+0x58>)
 8006b18:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b50 <std+0x5c>)
 8006b1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b54 <std+0x60>)
 8006b20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b22:	4b0d      	ldr	r3, [pc, #52]	@ (8006b58 <std+0x64>)
 8006b24:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <std+0x68>)
 8006b28:	6224      	str	r4, [r4, #32]
 8006b2a:	429c      	cmp	r4, r3
 8006b2c:	d006      	beq.n	8006b3c <std+0x48>
 8006b2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b32:	4294      	cmp	r4, r2
 8006b34:	d002      	beq.n	8006b3c <std+0x48>
 8006b36:	33d0      	adds	r3, #208	@ 0xd0
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	d105      	bne.n	8006b48 <std+0x54>
 8006b3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b44:	f000 b978 	b.w	8006e38 <__retarget_lock_init_recursive>
 8006b48:	bd10      	pop	{r4, pc}
 8006b4a:	bf00      	nop
 8006b4c:	08006cb9 	.word	0x08006cb9
 8006b50:	08006cdb 	.word	0x08006cdb
 8006b54:	08006d13 	.word	0x08006d13
 8006b58:	08006d37 	.word	0x08006d37
 8006b5c:	200003dc 	.word	0x200003dc

08006b60 <stdio_exit_handler>:
 8006b60:	4a02      	ldr	r2, [pc, #8]	@ (8006b6c <stdio_exit_handler+0xc>)
 8006b62:	4903      	ldr	r1, [pc, #12]	@ (8006b70 <stdio_exit_handler+0x10>)
 8006b64:	4803      	ldr	r0, [pc, #12]	@ (8006b74 <stdio_exit_handler+0x14>)
 8006b66:	f000 b869 	b.w	8006c3c <_fwalk_sglue>
 8006b6a:	bf00      	nop
 8006b6c:	200000a8 	.word	0x200000a8
 8006b70:	080087b5 	.word	0x080087b5
 8006b74:	200000b8 	.word	0x200000b8

08006b78 <cleanup_stdio>:
 8006b78:	6841      	ldr	r1, [r0, #4]
 8006b7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006bac <cleanup_stdio+0x34>)
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	b510      	push	{r4, lr}
 8006b80:	4604      	mov	r4, r0
 8006b82:	d001      	beq.n	8006b88 <cleanup_stdio+0x10>
 8006b84:	f001 fe16 	bl	80087b4 <_fflush_r>
 8006b88:	68a1      	ldr	r1, [r4, #8]
 8006b8a:	4b09      	ldr	r3, [pc, #36]	@ (8006bb0 <cleanup_stdio+0x38>)
 8006b8c:	4299      	cmp	r1, r3
 8006b8e:	d002      	beq.n	8006b96 <cleanup_stdio+0x1e>
 8006b90:	4620      	mov	r0, r4
 8006b92:	f001 fe0f 	bl	80087b4 <_fflush_r>
 8006b96:	68e1      	ldr	r1, [r4, #12]
 8006b98:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <cleanup_stdio+0x3c>)
 8006b9a:	4299      	cmp	r1, r3
 8006b9c:	d004      	beq.n	8006ba8 <cleanup_stdio+0x30>
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ba4:	f001 be06 	b.w	80087b4 <_fflush_r>
 8006ba8:	bd10      	pop	{r4, pc}
 8006baa:	bf00      	nop
 8006bac:	200003dc 	.word	0x200003dc
 8006bb0:	20000444 	.word	0x20000444
 8006bb4:	200004ac 	.word	0x200004ac

08006bb8 <global_stdio_init.part.0>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4b0b      	ldr	r3, [pc, #44]	@ (8006be8 <global_stdio_init.part.0+0x30>)
 8006bbc:	4c0b      	ldr	r4, [pc, #44]	@ (8006bec <global_stdio_init.part.0+0x34>)
 8006bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8006bf0 <global_stdio_init.part.0+0x38>)
 8006bc0:	601a      	str	r2, [r3, #0]
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	2104      	movs	r1, #4
 8006bc8:	f7ff ff94 	bl	8006af4 <std>
 8006bcc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	2109      	movs	r1, #9
 8006bd4:	f7ff ff8e 	bl	8006af4 <std>
 8006bd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bdc:	2202      	movs	r2, #2
 8006bde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be2:	2112      	movs	r1, #18
 8006be4:	f7ff bf86 	b.w	8006af4 <std>
 8006be8:	20000514 	.word	0x20000514
 8006bec:	200003dc 	.word	0x200003dc
 8006bf0:	08006b61 	.word	0x08006b61

08006bf4 <__sfp_lock_acquire>:
 8006bf4:	4801      	ldr	r0, [pc, #4]	@ (8006bfc <__sfp_lock_acquire+0x8>)
 8006bf6:	f000 b920 	b.w	8006e3a <__retarget_lock_acquire_recursive>
 8006bfa:	bf00      	nop
 8006bfc:	2000051d 	.word	0x2000051d

08006c00 <__sfp_lock_release>:
 8006c00:	4801      	ldr	r0, [pc, #4]	@ (8006c08 <__sfp_lock_release+0x8>)
 8006c02:	f000 b91b 	b.w	8006e3c <__retarget_lock_release_recursive>
 8006c06:	bf00      	nop
 8006c08:	2000051d 	.word	0x2000051d

08006c0c <__sinit>:
 8006c0c:	b510      	push	{r4, lr}
 8006c0e:	4604      	mov	r4, r0
 8006c10:	f7ff fff0 	bl	8006bf4 <__sfp_lock_acquire>
 8006c14:	6a23      	ldr	r3, [r4, #32]
 8006c16:	b11b      	cbz	r3, 8006c20 <__sinit+0x14>
 8006c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c1c:	f7ff bff0 	b.w	8006c00 <__sfp_lock_release>
 8006c20:	4b04      	ldr	r3, [pc, #16]	@ (8006c34 <__sinit+0x28>)
 8006c22:	6223      	str	r3, [r4, #32]
 8006c24:	4b04      	ldr	r3, [pc, #16]	@ (8006c38 <__sinit+0x2c>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1f5      	bne.n	8006c18 <__sinit+0xc>
 8006c2c:	f7ff ffc4 	bl	8006bb8 <global_stdio_init.part.0>
 8006c30:	e7f2      	b.n	8006c18 <__sinit+0xc>
 8006c32:	bf00      	nop
 8006c34:	08006b79 	.word	0x08006b79
 8006c38:	20000514 	.word	0x20000514

08006c3c <_fwalk_sglue>:
 8006c3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c40:	4607      	mov	r7, r0
 8006c42:	4688      	mov	r8, r1
 8006c44:	4614      	mov	r4, r2
 8006c46:	2600      	movs	r6, #0
 8006c48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006c50:	d505      	bpl.n	8006c5e <_fwalk_sglue+0x22>
 8006c52:	6824      	ldr	r4, [r4, #0]
 8006c54:	2c00      	cmp	r4, #0
 8006c56:	d1f7      	bne.n	8006c48 <_fwalk_sglue+0xc>
 8006c58:	4630      	mov	r0, r6
 8006c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d907      	bls.n	8006c74 <_fwalk_sglue+0x38>
 8006c64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	d003      	beq.n	8006c74 <_fwalk_sglue+0x38>
 8006c6c:	4629      	mov	r1, r5
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c0      	blx	r8
 8006c72:	4306      	orrs	r6, r0
 8006c74:	3568      	adds	r5, #104	@ 0x68
 8006c76:	e7e9      	b.n	8006c4c <_fwalk_sglue+0x10>

08006c78 <siprintf>:
 8006c78:	b40e      	push	{r1, r2, r3}
 8006c7a:	b500      	push	{lr}
 8006c7c:	b09c      	sub	sp, #112	@ 0x70
 8006c7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006c80:	9002      	str	r0, [sp, #8]
 8006c82:	9006      	str	r0, [sp, #24]
 8006c84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c88:	4809      	ldr	r0, [pc, #36]	@ (8006cb0 <siprintf+0x38>)
 8006c8a:	9107      	str	r1, [sp, #28]
 8006c8c:	9104      	str	r1, [sp, #16]
 8006c8e:	4909      	ldr	r1, [pc, #36]	@ (8006cb4 <siprintf+0x3c>)
 8006c90:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c94:	9105      	str	r1, [sp, #20]
 8006c96:	6800      	ldr	r0, [r0, #0]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	a902      	add	r1, sp, #8
 8006c9c:	f001 fc0a 	bl	80084b4 <_svfiprintf_r>
 8006ca0:	9b02      	ldr	r3, [sp, #8]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	b01c      	add	sp, #112	@ 0x70
 8006ca8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cac:	b003      	add	sp, #12
 8006cae:	4770      	bx	lr
 8006cb0:	200000b4 	.word	0x200000b4
 8006cb4:	ffff0208 	.word	0xffff0208

08006cb8 <__sread>:
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	460c      	mov	r4, r1
 8006cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc0:	f000 f86c 	bl	8006d9c <_read_r>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	bfab      	itete	ge
 8006cc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cca:	89a3      	ldrhlt	r3, [r4, #12]
 8006ccc:	181b      	addge	r3, r3, r0
 8006cce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cd2:	bfac      	ite	ge
 8006cd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cd6:	81a3      	strhlt	r3, [r4, #12]
 8006cd8:	bd10      	pop	{r4, pc}

08006cda <__swrite>:
 8006cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cde:	461f      	mov	r7, r3
 8006ce0:	898b      	ldrh	r3, [r1, #12]
 8006ce2:	05db      	lsls	r3, r3, #23
 8006ce4:	4605      	mov	r5, r0
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	4616      	mov	r6, r2
 8006cea:	d505      	bpl.n	8006cf8 <__swrite+0x1e>
 8006cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f000 f840 	bl	8006d78 <_lseek_r>
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006cfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d02:	81a3      	strh	r3, [r4, #12]
 8006d04:	4632      	mov	r2, r6
 8006d06:	463b      	mov	r3, r7
 8006d08:	4628      	mov	r0, r5
 8006d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0e:	f000 b857 	b.w	8006dc0 <_write_r>

08006d12 <__sseek>:
 8006d12:	b510      	push	{r4, lr}
 8006d14:	460c      	mov	r4, r1
 8006d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1a:	f000 f82d 	bl	8006d78 <_lseek_r>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	bf15      	itete	ne
 8006d24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d2e:	81a3      	strheq	r3, [r4, #12]
 8006d30:	bf18      	it	ne
 8006d32:	81a3      	strhne	r3, [r4, #12]
 8006d34:	bd10      	pop	{r4, pc}

08006d36 <__sclose>:
 8006d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3a:	f000 b80d 	b.w	8006d58 <_close_r>

08006d3e <memset>:
 8006d3e:	4402      	add	r2, r0
 8006d40:	4603      	mov	r3, r0
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d100      	bne.n	8006d48 <memset+0xa>
 8006d46:	4770      	bx	lr
 8006d48:	f803 1b01 	strb.w	r1, [r3], #1
 8006d4c:	e7f9      	b.n	8006d42 <memset+0x4>
	...

08006d50 <_localeconv_r>:
 8006d50:	4800      	ldr	r0, [pc, #0]	@ (8006d54 <_localeconv_r+0x4>)
 8006d52:	4770      	bx	lr
 8006d54:	200001f4 	.word	0x200001f4

08006d58 <_close_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d06      	ldr	r5, [pc, #24]	@ (8006d74 <_close_r+0x1c>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7fb f83d 	bl	8001de2 <_close>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_close_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_close_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20000518 	.word	0x20000518

08006d78 <_lseek_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d07      	ldr	r5, [pc, #28]	@ (8006d98 <_lseek_r+0x20>)
 8006d7c:	4604      	mov	r4, r0
 8006d7e:	4608      	mov	r0, r1
 8006d80:	4611      	mov	r1, r2
 8006d82:	2200      	movs	r2, #0
 8006d84:	602a      	str	r2, [r5, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f7fb f852 	bl	8001e30 <_lseek>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_lseek_r+0x1e>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_lseek_r+0x1e>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	20000518 	.word	0x20000518

08006d9c <_read_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4d07      	ldr	r5, [pc, #28]	@ (8006dbc <_read_r+0x20>)
 8006da0:	4604      	mov	r4, r0
 8006da2:	4608      	mov	r0, r1
 8006da4:	4611      	mov	r1, r2
 8006da6:	2200      	movs	r2, #0
 8006da8:	602a      	str	r2, [r5, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f7fa ffe0 	bl	8001d70 <_read>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_read_r+0x1e>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_read_r+0x1e>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	20000518 	.word	0x20000518

08006dc0 <_write_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	@ (8006de0 <_write_r+0x20>)
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	4611      	mov	r1, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f7fa ffeb 	bl	8001daa <_write>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_write_r+0x1e>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_write_r+0x1e>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	20000518 	.word	0x20000518

08006de4 <__errno>:
 8006de4:	4b01      	ldr	r3, [pc, #4]	@ (8006dec <__errno+0x8>)
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	200000b4 	.word	0x200000b4

08006df0 <__libc_init_array>:
 8006df0:	b570      	push	{r4, r5, r6, lr}
 8006df2:	4d0d      	ldr	r5, [pc, #52]	@ (8006e28 <__libc_init_array+0x38>)
 8006df4:	4c0d      	ldr	r4, [pc, #52]	@ (8006e2c <__libc_init_array+0x3c>)
 8006df6:	1b64      	subs	r4, r4, r5
 8006df8:	10a4      	asrs	r4, r4, #2
 8006dfa:	2600      	movs	r6, #0
 8006dfc:	42a6      	cmp	r6, r4
 8006dfe:	d109      	bne.n	8006e14 <__libc_init_array+0x24>
 8006e00:	4d0b      	ldr	r5, [pc, #44]	@ (8006e30 <__libc_init_array+0x40>)
 8006e02:	4c0c      	ldr	r4, [pc, #48]	@ (8006e34 <__libc_init_array+0x44>)
 8006e04:	f002 fa06 	bl	8009214 <_init>
 8006e08:	1b64      	subs	r4, r4, r5
 8006e0a:	10a4      	asrs	r4, r4, #2
 8006e0c:	2600      	movs	r6, #0
 8006e0e:	42a6      	cmp	r6, r4
 8006e10:	d105      	bne.n	8006e1e <__libc_init_array+0x2e>
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e18:	4798      	blx	r3
 8006e1a:	3601      	adds	r6, #1
 8006e1c:	e7ee      	b.n	8006dfc <__libc_init_array+0xc>
 8006e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e22:	4798      	blx	r3
 8006e24:	3601      	adds	r6, #1
 8006e26:	e7f2      	b.n	8006e0e <__libc_init_array+0x1e>
 8006e28:	080096a0 	.word	0x080096a0
 8006e2c:	080096a0 	.word	0x080096a0
 8006e30:	080096a0 	.word	0x080096a0
 8006e34:	080096a4 	.word	0x080096a4

08006e38 <__retarget_lock_init_recursive>:
 8006e38:	4770      	bx	lr

08006e3a <__retarget_lock_acquire_recursive>:
 8006e3a:	4770      	bx	lr

08006e3c <__retarget_lock_release_recursive>:
 8006e3c:	4770      	bx	lr

08006e3e <memcpy>:
 8006e3e:	440a      	add	r2, r1
 8006e40:	4291      	cmp	r1, r2
 8006e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e46:	d100      	bne.n	8006e4a <memcpy+0xc>
 8006e48:	4770      	bx	lr
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e54:	4291      	cmp	r1, r2
 8006e56:	d1f9      	bne.n	8006e4c <memcpy+0xe>
 8006e58:	bd10      	pop	{r4, pc}

08006e5a <quorem>:
 8006e5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5e:	6903      	ldr	r3, [r0, #16]
 8006e60:	690c      	ldr	r4, [r1, #16]
 8006e62:	42a3      	cmp	r3, r4
 8006e64:	4607      	mov	r7, r0
 8006e66:	db7e      	blt.n	8006f66 <quorem+0x10c>
 8006e68:	3c01      	subs	r4, #1
 8006e6a:	f101 0814 	add.w	r8, r1, #20
 8006e6e:	00a3      	lsls	r3, r4, #2
 8006e70:	f100 0514 	add.w	r5, r0, #20
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e7a:	9301      	str	r3, [sp, #4]
 8006e7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e84:	3301      	adds	r3, #1
 8006e86:	429a      	cmp	r2, r3
 8006e88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e8c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e90:	d32e      	bcc.n	8006ef0 <quorem+0x96>
 8006e92:	f04f 0a00 	mov.w	sl, #0
 8006e96:	46c4      	mov	ip, r8
 8006e98:	46ae      	mov	lr, r5
 8006e9a:	46d3      	mov	fp, sl
 8006e9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ea0:	b298      	uxth	r0, r3
 8006ea2:	fb06 a000 	mla	r0, r6, r0, sl
 8006ea6:	0c02      	lsrs	r2, r0, #16
 8006ea8:	0c1b      	lsrs	r3, r3, #16
 8006eaa:	fb06 2303 	mla	r3, r6, r3, r2
 8006eae:	f8de 2000 	ldr.w	r2, [lr]
 8006eb2:	b280      	uxth	r0, r0
 8006eb4:	b292      	uxth	r2, r2
 8006eb6:	1a12      	subs	r2, r2, r0
 8006eb8:	445a      	add	r2, fp
 8006eba:	f8de 0000 	ldr.w	r0, [lr]
 8006ebe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ec8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ecc:	b292      	uxth	r2, r2
 8006ece:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ed2:	45e1      	cmp	r9, ip
 8006ed4:	f84e 2b04 	str.w	r2, [lr], #4
 8006ed8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006edc:	d2de      	bcs.n	8006e9c <quorem+0x42>
 8006ede:	9b00      	ldr	r3, [sp, #0]
 8006ee0:	58eb      	ldr	r3, [r5, r3]
 8006ee2:	b92b      	cbnz	r3, 8006ef0 <quorem+0x96>
 8006ee4:	9b01      	ldr	r3, [sp, #4]
 8006ee6:	3b04      	subs	r3, #4
 8006ee8:	429d      	cmp	r5, r3
 8006eea:	461a      	mov	r2, r3
 8006eec:	d32f      	bcc.n	8006f4e <quorem+0xf4>
 8006eee:	613c      	str	r4, [r7, #16]
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	f001 f97b 	bl	80081ec <__mcmp>
 8006ef6:	2800      	cmp	r0, #0
 8006ef8:	db25      	blt.n	8006f46 <quorem+0xec>
 8006efa:	4629      	mov	r1, r5
 8006efc:	2000      	movs	r0, #0
 8006efe:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f02:	f8d1 c000 	ldr.w	ip, [r1]
 8006f06:	fa1f fe82 	uxth.w	lr, r2
 8006f0a:	fa1f f38c 	uxth.w	r3, ip
 8006f0e:	eba3 030e 	sub.w	r3, r3, lr
 8006f12:	4403      	add	r3, r0
 8006f14:	0c12      	lsrs	r2, r2, #16
 8006f16:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006f1a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f24:	45c1      	cmp	r9, r8
 8006f26:	f841 3b04 	str.w	r3, [r1], #4
 8006f2a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f2e:	d2e6      	bcs.n	8006efe <quorem+0xa4>
 8006f30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f34:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f38:	b922      	cbnz	r2, 8006f44 <quorem+0xea>
 8006f3a:	3b04      	subs	r3, #4
 8006f3c:	429d      	cmp	r5, r3
 8006f3e:	461a      	mov	r2, r3
 8006f40:	d30b      	bcc.n	8006f5a <quorem+0x100>
 8006f42:	613c      	str	r4, [r7, #16]
 8006f44:	3601      	adds	r6, #1
 8006f46:	4630      	mov	r0, r6
 8006f48:	b003      	add	sp, #12
 8006f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	3b04      	subs	r3, #4
 8006f52:	2a00      	cmp	r2, #0
 8006f54:	d1cb      	bne.n	8006eee <quorem+0x94>
 8006f56:	3c01      	subs	r4, #1
 8006f58:	e7c6      	b.n	8006ee8 <quorem+0x8e>
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	3b04      	subs	r3, #4
 8006f5e:	2a00      	cmp	r2, #0
 8006f60:	d1ef      	bne.n	8006f42 <quorem+0xe8>
 8006f62:	3c01      	subs	r4, #1
 8006f64:	e7ea      	b.n	8006f3c <quorem+0xe2>
 8006f66:	2000      	movs	r0, #0
 8006f68:	e7ee      	b.n	8006f48 <quorem+0xee>
 8006f6a:	0000      	movs	r0, r0
 8006f6c:	0000      	movs	r0, r0
	...

08006f70 <_dtoa_r>:
 8006f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f74:	69c7      	ldr	r7, [r0, #28]
 8006f76:	b099      	sub	sp, #100	@ 0x64
 8006f78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f7c:	ec55 4b10 	vmov	r4, r5, d0
 8006f80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006f82:	9109      	str	r1, [sp, #36]	@ 0x24
 8006f84:	4683      	mov	fp, r0
 8006f86:	920e      	str	r2, [sp, #56]	@ 0x38
 8006f88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f8a:	b97f      	cbnz	r7, 8006fac <_dtoa_r+0x3c>
 8006f8c:	2010      	movs	r0, #16
 8006f8e:	f000 fdfd 	bl	8007b8c <malloc>
 8006f92:	4602      	mov	r2, r0
 8006f94:	f8cb 001c 	str.w	r0, [fp, #28]
 8006f98:	b920      	cbnz	r0, 8006fa4 <_dtoa_r+0x34>
 8006f9a:	4ba7      	ldr	r3, [pc, #668]	@ (8007238 <_dtoa_r+0x2c8>)
 8006f9c:	21ef      	movs	r1, #239	@ 0xef
 8006f9e:	48a7      	ldr	r0, [pc, #668]	@ (800723c <_dtoa_r+0x2cc>)
 8006fa0:	f001 fc5a 	bl	8008858 <__assert_func>
 8006fa4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006fa8:	6007      	str	r7, [r0, #0]
 8006faa:	60c7      	str	r7, [r0, #12]
 8006fac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fb0:	6819      	ldr	r1, [r3, #0]
 8006fb2:	b159      	cbz	r1, 8006fcc <_dtoa_r+0x5c>
 8006fb4:	685a      	ldr	r2, [r3, #4]
 8006fb6:	604a      	str	r2, [r1, #4]
 8006fb8:	2301      	movs	r3, #1
 8006fba:	4093      	lsls	r3, r2
 8006fbc:	608b      	str	r3, [r1, #8]
 8006fbe:	4658      	mov	r0, fp
 8006fc0:	f000 feda 	bl	8007d78 <_Bfree>
 8006fc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	601a      	str	r2, [r3, #0]
 8006fcc:	1e2b      	subs	r3, r5, #0
 8006fce:	bfb9      	ittee	lt
 8006fd0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006fd4:	9303      	strlt	r3, [sp, #12]
 8006fd6:	2300      	movge	r3, #0
 8006fd8:	6033      	strge	r3, [r6, #0]
 8006fda:	9f03      	ldr	r7, [sp, #12]
 8006fdc:	4b98      	ldr	r3, [pc, #608]	@ (8007240 <_dtoa_r+0x2d0>)
 8006fde:	bfbc      	itt	lt
 8006fe0:	2201      	movlt	r2, #1
 8006fe2:	6032      	strlt	r2, [r6, #0]
 8006fe4:	43bb      	bics	r3, r7
 8006fe6:	d112      	bne.n	800700e <_dtoa_r+0x9e>
 8006fe8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006fea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ff4:	4323      	orrs	r3, r4
 8006ff6:	f000 854d 	beq.w	8007a94 <_dtoa_r+0xb24>
 8006ffa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ffc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007254 <_dtoa_r+0x2e4>
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 854f 	beq.w	8007aa4 <_dtoa_r+0xb34>
 8007006:	f10a 0303 	add.w	r3, sl, #3
 800700a:	f000 bd49 	b.w	8007aa0 <_dtoa_r+0xb30>
 800700e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007012:	2200      	movs	r2, #0
 8007014:	ec51 0b17 	vmov	r0, r1, d7
 8007018:	2300      	movs	r3, #0
 800701a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800701e:	f7f9 fd6b 	bl	8000af8 <__aeabi_dcmpeq>
 8007022:	4680      	mov	r8, r0
 8007024:	b158      	cbz	r0, 800703e <_dtoa_r+0xce>
 8007026:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007028:	2301      	movs	r3, #1
 800702a:	6013      	str	r3, [r2, #0]
 800702c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800702e:	b113      	cbz	r3, 8007036 <_dtoa_r+0xc6>
 8007030:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007032:	4b84      	ldr	r3, [pc, #528]	@ (8007244 <_dtoa_r+0x2d4>)
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007258 <_dtoa_r+0x2e8>
 800703a:	f000 bd33 	b.w	8007aa4 <_dtoa_r+0xb34>
 800703e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007042:	aa16      	add	r2, sp, #88	@ 0x58
 8007044:	a917      	add	r1, sp, #92	@ 0x5c
 8007046:	4658      	mov	r0, fp
 8007048:	f001 f980 	bl	800834c <__d2b>
 800704c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007050:	4681      	mov	r9, r0
 8007052:	2e00      	cmp	r6, #0
 8007054:	d077      	beq.n	8007146 <_dtoa_r+0x1d6>
 8007056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007058:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800705c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007064:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007068:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800706c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007070:	4619      	mov	r1, r3
 8007072:	2200      	movs	r2, #0
 8007074:	4b74      	ldr	r3, [pc, #464]	@ (8007248 <_dtoa_r+0x2d8>)
 8007076:	f7f9 f91f 	bl	80002b8 <__aeabi_dsub>
 800707a:	a369      	add	r3, pc, #420	@ (adr r3, 8007220 <_dtoa_r+0x2b0>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	f7f9 fad2 	bl	8000628 <__aeabi_dmul>
 8007084:	a368      	add	r3, pc, #416	@ (adr r3, 8007228 <_dtoa_r+0x2b8>)
 8007086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708a:	f7f9 f917 	bl	80002bc <__adddf3>
 800708e:	4604      	mov	r4, r0
 8007090:	4630      	mov	r0, r6
 8007092:	460d      	mov	r5, r1
 8007094:	f7f9 fa5e 	bl	8000554 <__aeabi_i2d>
 8007098:	a365      	add	r3, pc, #404	@ (adr r3, 8007230 <_dtoa_r+0x2c0>)
 800709a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800709e:	f7f9 fac3 	bl	8000628 <__aeabi_dmul>
 80070a2:	4602      	mov	r2, r0
 80070a4:	460b      	mov	r3, r1
 80070a6:	4620      	mov	r0, r4
 80070a8:	4629      	mov	r1, r5
 80070aa:	f7f9 f907 	bl	80002bc <__adddf3>
 80070ae:	4604      	mov	r4, r0
 80070b0:	460d      	mov	r5, r1
 80070b2:	f7f9 fd69 	bl	8000b88 <__aeabi_d2iz>
 80070b6:	2200      	movs	r2, #0
 80070b8:	4607      	mov	r7, r0
 80070ba:	2300      	movs	r3, #0
 80070bc:	4620      	mov	r0, r4
 80070be:	4629      	mov	r1, r5
 80070c0:	f7f9 fd24 	bl	8000b0c <__aeabi_dcmplt>
 80070c4:	b140      	cbz	r0, 80070d8 <_dtoa_r+0x168>
 80070c6:	4638      	mov	r0, r7
 80070c8:	f7f9 fa44 	bl	8000554 <__aeabi_i2d>
 80070cc:	4622      	mov	r2, r4
 80070ce:	462b      	mov	r3, r5
 80070d0:	f7f9 fd12 	bl	8000af8 <__aeabi_dcmpeq>
 80070d4:	b900      	cbnz	r0, 80070d8 <_dtoa_r+0x168>
 80070d6:	3f01      	subs	r7, #1
 80070d8:	2f16      	cmp	r7, #22
 80070da:	d851      	bhi.n	8007180 <_dtoa_r+0x210>
 80070dc:	4b5b      	ldr	r3, [pc, #364]	@ (800724c <_dtoa_r+0x2dc>)
 80070de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070ea:	f7f9 fd0f 	bl	8000b0c <__aeabi_dcmplt>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d048      	beq.n	8007184 <_dtoa_r+0x214>
 80070f2:	3f01      	subs	r7, #1
 80070f4:	2300      	movs	r3, #0
 80070f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80070f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070fa:	1b9b      	subs	r3, r3, r6
 80070fc:	1e5a      	subs	r2, r3, #1
 80070fe:	bf44      	itt	mi
 8007100:	f1c3 0801 	rsbmi	r8, r3, #1
 8007104:	2300      	movmi	r3, #0
 8007106:	9208      	str	r2, [sp, #32]
 8007108:	bf54      	ite	pl
 800710a:	f04f 0800 	movpl.w	r8, #0
 800710e:	9308      	strmi	r3, [sp, #32]
 8007110:	2f00      	cmp	r7, #0
 8007112:	db39      	blt.n	8007188 <_dtoa_r+0x218>
 8007114:	9b08      	ldr	r3, [sp, #32]
 8007116:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007118:	443b      	add	r3, r7
 800711a:	9308      	str	r3, [sp, #32]
 800711c:	2300      	movs	r3, #0
 800711e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007122:	2b09      	cmp	r3, #9
 8007124:	d864      	bhi.n	80071f0 <_dtoa_r+0x280>
 8007126:	2b05      	cmp	r3, #5
 8007128:	bfc4      	itt	gt
 800712a:	3b04      	subgt	r3, #4
 800712c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800712e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007130:	f1a3 0302 	sub.w	r3, r3, #2
 8007134:	bfcc      	ite	gt
 8007136:	2400      	movgt	r4, #0
 8007138:	2401      	movle	r4, #1
 800713a:	2b03      	cmp	r3, #3
 800713c:	d863      	bhi.n	8007206 <_dtoa_r+0x296>
 800713e:	e8df f003 	tbb	[pc, r3]
 8007142:	372a      	.short	0x372a
 8007144:	5535      	.short	0x5535
 8007146:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800714a:	441e      	add	r6, r3
 800714c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007150:	2b20      	cmp	r3, #32
 8007152:	bfc1      	itttt	gt
 8007154:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007158:	409f      	lslgt	r7, r3
 800715a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800715e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007162:	bfd6      	itet	le
 8007164:	f1c3 0320 	rsble	r3, r3, #32
 8007168:	ea47 0003 	orrgt.w	r0, r7, r3
 800716c:	fa04 f003 	lslle.w	r0, r4, r3
 8007170:	f7f9 f9e0 	bl	8000534 <__aeabi_ui2d>
 8007174:	2201      	movs	r2, #1
 8007176:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800717a:	3e01      	subs	r6, #1
 800717c:	9214      	str	r2, [sp, #80]	@ 0x50
 800717e:	e777      	b.n	8007070 <_dtoa_r+0x100>
 8007180:	2301      	movs	r3, #1
 8007182:	e7b8      	b.n	80070f6 <_dtoa_r+0x186>
 8007184:	9012      	str	r0, [sp, #72]	@ 0x48
 8007186:	e7b7      	b.n	80070f8 <_dtoa_r+0x188>
 8007188:	427b      	negs	r3, r7
 800718a:	930a      	str	r3, [sp, #40]	@ 0x28
 800718c:	2300      	movs	r3, #0
 800718e:	eba8 0807 	sub.w	r8, r8, r7
 8007192:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007194:	e7c4      	b.n	8007120 <_dtoa_r+0x1b0>
 8007196:	2300      	movs	r3, #0
 8007198:	930b      	str	r3, [sp, #44]	@ 0x2c
 800719a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800719c:	2b00      	cmp	r3, #0
 800719e:	dc35      	bgt.n	800720c <_dtoa_r+0x29c>
 80071a0:	2301      	movs	r3, #1
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	9307      	str	r3, [sp, #28]
 80071a6:	461a      	mov	r2, r3
 80071a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80071aa:	e00b      	b.n	80071c4 <_dtoa_r+0x254>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e7f3      	b.n	8007198 <_dtoa_r+0x228>
 80071b0:	2300      	movs	r3, #0
 80071b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	3301      	adds	r3, #1
 80071bc:	2b01      	cmp	r3, #1
 80071be:	9307      	str	r3, [sp, #28]
 80071c0:	bfb8      	it	lt
 80071c2:	2301      	movlt	r3, #1
 80071c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80071c8:	2100      	movs	r1, #0
 80071ca:	2204      	movs	r2, #4
 80071cc:	f102 0514 	add.w	r5, r2, #20
 80071d0:	429d      	cmp	r5, r3
 80071d2:	d91f      	bls.n	8007214 <_dtoa_r+0x2a4>
 80071d4:	6041      	str	r1, [r0, #4]
 80071d6:	4658      	mov	r0, fp
 80071d8:	f000 fd8e 	bl	8007cf8 <_Balloc>
 80071dc:	4682      	mov	sl, r0
 80071de:	2800      	cmp	r0, #0
 80071e0:	d13c      	bne.n	800725c <_dtoa_r+0x2ec>
 80071e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007250 <_dtoa_r+0x2e0>)
 80071e4:	4602      	mov	r2, r0
 80071e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80071ea:	e6d8      	b.n	8006f9e <_dtoa_r+0x2e>
 80071ec:	2301      	movs	r3, #1
 80071ee:	e7e0      	b.n	80071b2 <_dtoa_r+0x242>
 80071f0:	2401      	movs	r4, #1
 80071f2:	2300      	movs	r3, #0
 80071f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80071f8:	f04f 33ff 	mov.w	r3, #4294967295
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	9307      	str	r3, [sp, #28]
 8007200:	2200      	movs	r2, #0
 8007202:	2312      	movs	r3, #18
 8007204:	e7d0      	b.n	80071a8 <_dtoa_r+0x238>
 8007206:	2301      	movs	r3, #1
 8007208:	930b      	str	r3, [sp, #44]	@ 0x2c
 800720a:	e7f5      	b.n	80071f8 <_dtoa_r+0x288>
 800720c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800720e:	9300      	str	r3, [sp, #0]
 8007210:	9307      	str	r3, [sp, #28]
 8007212:	e7d7      	b.n	80071c4 <_dtoa_r+0x254>
 8007214:	3101      	adds	r1, #1
 8007216:	0052      	lsls	r2, r2, #1
 8007218:	e7d8      	b.n	80071cc <_dtoa_r+0x25c>
 800721a:	bf00      	nop
 800721c:	f3af 8000 	nop.w
 8007220:	636f4361 	.word	0x636f4361
 8007224:	3fd287a7 	.word	0x3fd287a7
 8007228:	8b60c8b3 	.word	0x8b60c8b3
 800722c:	3fc68a28 	.word	0x3fc68a28
 8007230:	509f79fb 	.word	0x509f79fb
 8007234:	3fd34413 	.word	0x3fd34413
 8007238:	08009331 	.word	0x08009331
 800723c:	08009348 	.word	0x08009348
 8007240:	7ff00000 	.word	0x7ff00000
 8007244:	08009301 	.word	0x08009301
 8007248:	3ff80000 	.word	0x3ff80000
 800724c:	08009440 	.word	0x08009440
 8007250:	080093a0 	.word	0x080093a0
 8007254:	0800932d 	.word	0x0800932d
 8007258:	08009300 	.word	0x08009300
 800725c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007260:	6018      	str	r0, [r3, #0]
 8007262:	9b07      	ldr	r3, [sp, #28]
 8007264:	2b0e      	cmp	r3, #14
 8007266:	f200 80a4 	bhi.w	80073b2 <_dtoa_r+0x442>
 800726a:	2c00      	cmp	r4, #0
 800726c:	f000 80a1 	beq.w	80073b2 <_dtoa_r+0x442>
 8007270:	2f00      	cmp	r7, #0
 8007272:	dd33      	ble.n	80072dc <_dtoa_r+0x36c>
 8007274:	4bad      	ldr	r3, [pc, #692]	@ (800752c <_dtoa_r+0x5bc>)
 8007276:	f007 020f 	and.w	r2, r7, #15
 800727a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800727e:	ed93 7b00 	vldr	d7, [r3]
 8007282:	05f8      	lsls	r0, r7, #23
 8007284:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007288:	ea4f 1427 	mov.w	r4, r7, asr #4
 800728c:	d516      	bpl.n	80072bc <_dtoa_r+0x34c>
 800728e:	4ba8      	ldr	r3, [pc, #672]	@ (8007530 <_dtoa_r+0x5c0>)
 8007290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007294:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007298:	f7f9 faf0 	bl	800087c <__aeabi_ddiv>
 800729c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072a0:	f004 040f 	and.w	r4, r4, #15
 80072a4:	2603      	movs	r6, #3
 80072a6:	4da2      	ldr	r5, [pc, #648]	@ (8007530 <_dtoa_r+0x5c0>)
 80072a8:	b954      	cbnz	r4, 80072c0 <_dtoa_r+0x350>
 80072aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072b2:	f7f9 fae3 	bl	800087c <__aeabi_ddiv>
 80072b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ba:	e028      	b.n	800730e <_dtoa_r+0x39e>
 80072bc:	2602      	movs	r6, #2
 80072be:	e7f2      	b.n	80072a6 <_dtoa_r+0x336>
 80072c0:	07e1      	lsls	r1, r4, #31
 80072c2:	d508      	bpl.n	80072d6 <_dtoa_r+0x366>
 80072c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80072c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072cc:	f7f9 f9ac 	bl	8000628 <__aeabi_dmul>
 80072d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072d4:	3601      	adds	r6, #1
 80072d6:	1064      	asrs	r4, r4, #1
 80072d8:	3508      	adds	r5, #8
 80072da:	e7e5      	b.n	80072a8 <_dtoa_r+0x338>
 80072dc:	f000 80d2 	beq.w	8007484 <_dtoa_r+0x514>
 80072e0:	427c      	negs	r4, r7
 80072e2:	4b92      	ldr	r3, [pc, #584]	@ (800752c <_dtoa_r+0x5bc>)
 80072e4:	4d92      	ldr	r5, [pc, #584]	@ (8007530 <_dtoa_r+0x5c0>)
 80072e6:	f004 020f 	and.w	r2, r4, #15
 80072ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80072f6:	f7f9 f997 	bl	8000628 <__aeabi_dmul>
 80072fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072fe:	1124      	asrs	r4, r4, #4
 8007300:	2300      	movs	r3, #0
 8007302:	2602      	movs	r6, #2
 8007304:	2c00      	cmp	r4, #0
 8007306:	f040 80b2 	bne.w	800746e <_dtoa_r+0x4fe>
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1d3      	bne.n	80072b6 <_dtoa_r+0x346>
 800730e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007310:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 80b7 	beq.w	8007488 <_dtoa_r+0x518>
 800731a:	4b86      	ldr	r3, [pc, #536]	@ (8007534 <_dtoa_r+0x5c4>)
 800731c:	2200      	movs	r2, #0
 800731e:	4620      	mov	r0, r4
 8007320:	4629      	mov	r1, r5
 8007322:	f7f9 fbf3 	bl	8000b0c <__aeabi_dcmplt>
 8007326:	2800      	cmp	r0, #0
 8007328:	f000 80ae 	beq.w	8007488 <_dtoa_r+0x518>
 800732c:	9b07      	ldr	r3, [sp, #28]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f000 80aa 	beq.w	8007488 <_dtoa_r+0x518>
 8007334:	9b00      	ldr	r3, [sp, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	dd37      	ble.n	80073aa <_dtoa_r+0x43a>
 800733a:	1e7b      	subs	r3, r7, #1
 800733c:	9304      	str	r3, [sp, #16]
 800733e:	4620      	mov	r0, r4
 8007340:	4b7d      	ldr	r3, [pc, #500]	@ (8007538 <_dtoa_r+0x5c8>)
 8007342:	2200      	movs	r2, #0
 8007344:	4629      	mov	r1, r5
 8007346:	f7f9 f96f 	bl	8000628 <__aeabi_dmul>
 800734a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800734e:	9c00      	ldr	r4, [sp, #0]
 8007350:	3601      	adds	r6, #1
 8007352:	4630      	mov	r0, r6
 8007354:	f7f9 f8fe 	bl	8000554 <__aeabi_i2d>
 8007358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800735c:	f7f9 f964 	bl	8000628 <__aeabi_dmul>
 8007360:	4b76      	ldr	r3, [pc, #472]	@ (800753c <_dtoa_r+0x5cc>)
 8007362:	2200      	movs	r2, #0
 8007364:	f7f8 ffaa 	bl	80002bc <__adddf3>
 8007368:	4605      	mov	r5, r0
 800736a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800736e:	2c00      	cmp	r4, #0
 8007370:	f040 808d 	bne.w	800748e <_dtoa_r+0x51e>
 8007374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007378:	4b71      	ldr	r3, [pc, #452]	@ (8007540 <_dtoa_r+0x5d0>)
 800737a:	2200      	movs	r2, #0
 800737c:	f7f8 ff9c 	bl	80002b8 <__aeabi_dsub>
 8007380:	4602      	mov	r2, r0
 8007382:	460b      	mov	r3, r1
 8007384:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007388:	462a      	mov	r2, r5
 800738a:	4633      	mov	r3, r6
 800738c:	f7f9 fbdc 	bl	8000b48 <__aeabi_dcmpgt>
 8007390:	2800      	cmp	r0, #0
 8007392:	f040 828b 	bne.w	80078ac <_dtoa_r+0x93c>
 8007396:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800739a:	462a      	mov	r2, r5
 800739c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80073a0:	f7f9 fbb4 	bl	8000b0c <__aeabi_dcmplt>
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f040 8128 	bne.w	80075fa <_dtoa_r+0x68a>
 80073aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80073ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80073b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f2c0 815a 	blt.w	800766e <_dtoa_r+0x6fe>
 80073ba:	2f0e      	cmp	r7, #14
 80073bc:	f300 8157 	bgt.w	800766e <_dtoa_r+0x6fe>
 80073c0:	4b5a      	ldr	r3, [pc, #360]	@ (800752c <_dtoa_r+0x5bc>)
 80073c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073c6:	ed93 7b00 	vldr	d7, [r3]
 80073ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	ed8d 7b00 	vstr	d7, [sp]
 80073d2:	da03      	bge.n	80073dc <_dtoa_r+0x46c>
 80073d4:	9b07      	ldr	r3, [sp, #28]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f340 8101 	ble.w	80075de <_dtoa_r+0x66e>
 80073dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80073e0:	4656      	mov	r6, sl
 80073e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073e6:	4620      	mov	r0, r4
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7f9 fa47 	bl	800087c <__aeabi_ddiv>
 80073ee:	f7f9 fbcb 	bl	8000b88 <__aeabi_d2iz>
 80073f2:	4680      	mov	r8, r0
 80073f4:	f7f9 f8ae 	bl	8000554 <__aeabi_i2d>
 80073f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073fc:	f7f9 f914 	bl	8000628 <__aeabi_dmul>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4620      	mov	r0, r4
 8007406:	4629      	mov	r1, r5
 8007408:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800740c:	f7f8 ff54 	bl	80002b8 <__aeabi_dsub>
 8007410:	f806 4b01 	strb.w	r4, [r6], #1
 8007414:	9d07      	ldr	r5, [sp, #28]
 8007416:	eba6 040a 	sub.w	r4, r6, sl
 800741a:	42a5      	cmp	r5, r4
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	f040 8117 	bne.w	8007652 <_dtoa_r+0x6e2>
 8007424:	f7f8 ff4a 	bl	80002bc <__adddf3>
 8007428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800742c:	4604      	mov	r4, r0
 800742e:	460d      	mov	r5, r1
 8007430:	f7f9 fb8a 	bl	8000b48 <__aeabi_dcmpgt>
 8007434:	2800      	cmp	r0, #0
 8007436:	f040 80f9 	bne.w	800762c <_dtoa_r+0x6bc>
 800743a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800743e:	4620      	mov	r0, r4
 8007440:	4629      	mov	r1, r5
 8007442:	f7f9 fb59 	bl	8000af8 <__aeabi_dcmpeq>
 8007446:	b118      	cbz	r0, 8007450 <_dtoa_r+0x4e0>
 8007448:	f018 0f01 	tst.w	r8, #1
 800744c:	f040 80ee 	bne.w	800762c <_dtoa_r+0x6bc>
 8007450:	4649      	mov	r1, r9
 8007452:	4658      	mov	r0, fp
 8007454:	f000 fc90 	bl	8007d78 <_Bfree>
 8007458:	2300      	movs	r3, #0
 800745a:	7033      	strb	r3, [r6, #0]
 800745c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800745e:	3701      	adds	r7, #1
 8007460:	601f      	str	r7, [r3, #0]
 8007462:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 831d 	beq.w	8007aa4 <_dtoa_r+0xb34>
 800746a:	601e      	str	r6, [r3, #0]
 800746c:	e31a      	b.n	8007aa4 <_dtoa_r+0xb34>
 800746e:	07e2      	lsls	r2, r4, #31
 8007470:	d505      	bpl.n	800747e <_dtoa_r+0x50e>
 8007472:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007476:	f7f9 f8d7 	bl	8000628 <__aeabi_dmul>
 800747a:	3601      	adds	r6, #1
 800747c:	2301      	movs	r3, #1
 800747e:	1064      	asrs	r4, r4, #1
 8007480:	3508      	adds	r5, #8
 8007482:	e73f      	b.n	8007304 <_dtoa_r+0x394>
 8007484:	2602      	movs	r6, #2
 8007486:	e742      	b.n	800730e <_dtoa_r+0x39e>
 8007488:	9c07      	ldr	r4, [sp, #28]
 800748a:	9704      	str	r7, [sp, #16]
 800748c:	e761      	b.n	8007352 <_dtoa_r+0x3e2>
 800748e:	4b27      	ldr	r3, [pc, #156]	@ (800752c <_dtoa_r+0x5bc>)
 8007490:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007492:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007496:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800749a:	4454      	add	r4, sl
 800749c:	2900      	cmp	r1, #0
 800749e:	d053      	beq.n	8007548 <_dtoa_r+0x5d8>
 80074a0:	4928      	ldr	r1, [pc, #160]	@ (8007544 <_dtoa_r+0x5d4>)
 80074a2:	2000      	movs	r0, #0
 80074a4:	f7f9 f9ea 	bl	800087c <__aeabi_ddiv>
 80074a8:	4633      	mov	r3, r6
 80074aa:	462a      	mov	r2, r5
 80074ac:	f7f8 ff04 	bl	80002b8 <__aeabi_dsub>
 80074b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074b4:	4656      	mov	r6, sl
 80074b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ba:	f7f9 fb65 	bl	8000b88 <__aeabi_d2iz>
 80074be:	4605      	mov	r5, r0
 80074c0:	f7f9 f848 	bl	8000554 <__aeabi_i2d>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074cc:	f7f8 fef4 	bl	80002b8 <__aeabi_dsub>
 80074d0:	3530      	adds	r5, #48	@ 0x30
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074da:	f806 5b01 	strb.w	r5, [r6], #1
 80074de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074e2:	f7f9 fb13 	bl	8000b0c <__aeabi_dcmplt>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d171      	bne.n	80075ce <_dtoa_r+0x65e>
 80074ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074ee:	4911      	ldr	r1, [pc, #68]	@ (8007534 <_dtoa_r+0x5c4>)
 80074f0:	2000      	movs	r0, #0
 80074f2:	f7f8 fee1 	bl	80002b8 <__aeabi_dsub>
 80074f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80074fa:	f7f9 fb07 	bl	8000b0c <__aeabi_dcmplt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	f040 8095 	bne.w	800762e <_dtoa_r+0x6be>
 8007504:	42a6      	cmp	r6, r4
 8007506:	f43f af50 	beq.w	80073aa <_dtoa_r+0x43a>
 800750a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800750e:	4b0a      	ldr	r3, [pc, #40]	@ (8007538 <_dtoa_r+0x5c8>)
 8007510:	2200      	movs	r2, #0
 8007512:	f7f9 f889 	bl	8000628 <__aeabi_dmul>
 8007516:	4b08      	ldr	r3, [pc, #32]	@ (8007538 <_dtoa_r+0x5c8>)
 8007518:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800751c:	2200      	movs	r2, #0
 800751e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007522:	f7f9 f881 	bl	8000628 <__aeabi_dmul>
 8007526:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800752a:	e7c4      	b.n	80074b6 <_dtoa_r+0x546>
 800752c:	08009440 	.word	0x08009440
 8007530:	08009418 	.word	0x08009418
 8007534:	3ff00000 	.word	0x3ff00000
 8007538:	40240000 	.word	0x40240000
 800753c:	401c0000 	.word	0x401c0000
 8007540:	40140000 	.word	0x40140000
 8007544:	3fe00000 	.word	0x3fe00000
 8007548:	4631      	mov	r1, r6
 800754a:	4628      	mov	r0, r5
 800754c:	f7f9 f86c 	bl	8000628 <__aeabi_dmul>
 8007550:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007554:	9415      	str	r4, [sp, #84]	@ 0x54
 8007556:	4656      	mov	r6, sl
 8007558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800755c:	f7f9 fb14 	bl	8000b88 <__aeabi_d2iz>
 8007560:	4605      	mov	r5, r0
 8007562:	f7f8 fff7 	bl	8000554 <__aeabi_i2d>
 8007566:	4602      	mov	r2, r0
 8007568:	460b      	mov	r3, r1
 800756a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800756e:	f7f8 fea3 	bl	80002b8 <__aeabi_dsub>
 8007572:	3530      	adds	r5, #48	@ 0x30
 8007574:	f806 5b01 	strb.w	r5, [r6], #1
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	42a6      	cmp	r6, r4
 800757e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	d124      	bne.n	80075d2 <_dtoa_r+0x662>
 8007588:	4bac      	ldr	r3, [pc, #688]	@ (800783c <_dtoa_r+0x8cc>)
 800758a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800758e:	f7f8 fe95 	bl	80002bc <__adddf3>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800759a:	f7f9 fad5 	bl	8000b48 <__aeabi_dcmpgt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d145      	bne.n	800762e <_dtoa_r+0x6be>
 80075a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075a6:	49a5      	ldr	r1, [pc, #660]	@ (800783c <_dtoa_r+0x8cc>)
 80075a8:	2000      	movs	r0, #0
 80075aa:	f7f8 fe85 	bl	80002b8 <__aeabi_dsub>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075b6:	f7f9 faa9 	bl	8000b0c <__aeabi_dcmplt>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	f43f aef5 	beq.w	80073aa <_dtoa_r+0x43a>
 80075c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80075c2:	1e73      	subs	r3, r6, #1
 80075c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80075c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80075ca:	2b30      	cmp	r3, #48	@ 0x30
 80075cc:	d0f8      	beq.n	80075c0 <_dtoa_r+0x650>
 80075ce:	9f04      	ldr	r7, [sp, #16]
 80075d0:	e73e      	b.n	8007450 <_dtoa_r+0x4e0>
 80075d2:	4b9b      	ldr	r3, [pc, #620]	@ (8007840 <_dtoa_r+0x8d0>)
 80075d4:	f7f9 f828 	bl	8000628 <__aeabi_dmul>
 80075d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80075dc:	e7bc      	b.n	8007558 <_dtoa_r+0x5e8>
 80075de:	d10c      	bne.n	80075fa <_dtoa_r+0x68a>
 80075e0:	4b98      	ldr	r3, [pc, #608]	@ (8007844 <_dtoa_r+0x8d4>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075e8:	f7f9 f81e 	bl	8000628 <__aeabi_dmul>
 80075ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80075f0:	f7f9 faa0 	bl	8000b34 <__aeabi_dcmpge>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	f000 8157 	beq.w	80078a8 <_dtoa_r+0x938>
 80075fa:	2400      	movs	r4, #0
 80075fc:	4625      	mov	r5, r4
 80075fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007600:	43db      	mvns	r3, r3
 8007602:	9304      	str	r3, [sp, #16]
 8007604:	4656      	mov	r6, sl
 8007606:	2700      	movs	r7, #0
 8007608:	4621      	mov	r1, r4
 800760a:	4658      	mov	r0, fp
 800760c:	f000 fbb4 	bl	8007d78 <_Bfree>
 8007610:	2d00      	cmp	r5, #0
 8007612:	d0dc      	beq.n	80075ce <_dtoa_r+0x65e>
 8007614:	b12f      	cbz	r7, 8007622 <_dtoa_r+0x6b2>
 8007616:	42af      	cmp	r7, r5
 8007618:	d003      	beq.n	8007622 <_dtoa_r+0x6b2>
 800761a:	4639      	mov	r1, r7
 800761c:	4658      	mov	r0, fp
 800761e:	f000 fbab 	bl	8007d78 <_Bfree>
 8007622:	4629      	mov	r1, r5
 8007624:	4658      	mov	r0, fp
 8007626:	f000 fba7 	bl	8007d78 <_Bfree>
 800762a:	e7d0      	b.n	80075ce <_dtoa_r+0x65e>
 800762c:	9704      	str	r7, [sp, #16]
 800762e:	4633      	mov	r3, r6
 8007630:	461e      	mov	r6, r3
 8007632:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007636:	2a39      	cmp	r2, #57	@ 0x39
 8007638:	d107      	bne.n	800764a <_dtoa_r+0x6da>
 800763a:	459a      	cmp	sl, r3
 800763c:	d1f8      	bne.n	8007630 <_dtoa_r+0x6c0>
 800763e:	9a04      	ldr	r2, [sp, #16]
 8007640:	3201      	adds	r2, #1
 8007642:	9204      	str	r2, [sp, #16]
 8007644:	2230      	movs	r2, #48	@ 0x30
 8007646:	f88a 2000 	strb.w	r2, [sl]
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	3201      	adds	r2, #1
 800764e:	701a      	strb	r2, [r3, #0]
 8007650:	e7bd      	b.n	80075ce <_dtoa_r+0x65e>
 8007652:	4b7b      	ldr	r3, [pc, #492]	@ (8007840 <_dtoa_r+0x8d0>)
 8007654:	2200      	movs	r2, #0
 8007656:	f7f8 ffe7 	bl	8000628 <__aeabi_dmul>
 800765a:	2200      	movs	r2, #0
 800765c:	2300      	movs	r3, #0
 800765e:	4604      	mov	r4, r0
 8007660:	460d      	mov	r5, r1
 8007662:	f7f9 fa49 	bl	8000af8 <__aeabi_dcmpeq>
 8007666:	2800      	cmp	r0, #0
 8007668:	f43f aebb 	beq.w	80073e2 <_dtoa_r+0x472>
 800766c:	e6f0      	b.n	8007450 <_dtoa_r+0x4e0>
 800766e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007670:	2a00      	cmp	r2, #0
 8007672:	f000 80db 	beq.w	800782c <_dtoa_r+0x8bc>
 8007676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007678:	2a01      	cmp	r2, #1
 800767a:	f300 80bf 	bgt.w	80077fc <_dtoa_r+0x88c>
 800767e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007680:	2a00      	cmp	r2, #0
 8007682:	f000 80b7 	beq.w	80077f4 <_dtoa_r+0x884>
 8007686:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800768a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800768c:	4646      	mov	r6, r8
 800768e:	9a08      	ldr	r2, [sp, #32]
 8007690:	2101      	movs	r1, #1
 8007692:	441a      	add	r2, r3
 8007694:	4658      	mov	r0, fp
 8007696:	4498      	add	r8, r3
 8007698:	9208      	str	r2, [sp, #32]
 800769a:	f000 fc21 	bl	8007ee0 <__i2b>
 800769e:	4605      	mov	r5, r0
 80076a0:	b15e      	cbz	r6, 80076ba <_dtoa_r+0x74a>
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	dd08      	ble.n	80076ba <_dtoa_r+0x74a>
 80076a8:	42b3      	cmp	r3, r6
 80076aa:	9a08      	ldr	r2, [sp, #32]
 80076ac:	bfa8      	it	ge
 80076ae:	4633      	movge	r3, r6
 80076b0:	eba8 0803 	sub.w	r8, r8, r3
 80076b4:	1af6      	subs	r6, r6, r3
 80076b6:	1ad3      	subs	r3, r2, r3
 80076b8:	9308      	str	r3, [sp, #32]
 80076ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076bc:	b1f3      	cbz	r3, 80076fc <_dtoa_r+0x78c>
 80076be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 80b7 	beq.w	8007834 <_dtoa_r+0x8c4>
 80076c6:	b18c      	cbz	r4, 80076ec <_dtoa_r+0x77c>
 80076c8:	4629      	mov	r1, r5
 80076ca:	4622      	mov	r2, r4
 80076cc:	4658      	mov	r0, fp
 80076ce:	f000 fcc7 	bl	8008060 <__pow5mult>
 80076d2:	464a      	mov	r2, r9
 80076d4:	4601      	mov	r1, r0
 80076d6:	4605      	mov	r5, r0
 80076d8:	4658      	mov	r0, fp
 80076da:	f000 fc17 	bl	8007f0c <__multiply>
 80076de:	4649      	mov	r1, r9
 80076e0:	9004      	str	r0, [sp, #16]
 80076e2:	4658      	mov	r0, fp
 80076e4:	f000 fb48 	bl	8007d78 <_Bfree>
 80076e8:	9b04      	ldr	r3, [sp, #16]
 80076ea:	4699      	mov	r9, r3
 80076ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ee:	1b1a      	subs	r2, r3, r4
 80076f0:	d004      	beq.n	80076fc <_dtoa_r+0x78c>
 80076f2:	4649      	mov	r1, r9
 80076f4:	4658      	mov	r0, fp
 80076f6:	f000 fcb3 	bl	8008060 <__pow5mult>
 80076fa:	4681      	mov	r9, r0
 80076fc:	2101      	movs	r1, #1
 80076fe:	4658      	mov	r0, fp
 8007700:	f000 fbee 	bl	8007ee0 <__i2b>
 8007704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007706:	4604      	mov	r4, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 81cf 	beq.w	8007aac <_dtoa_r+0xb3c>
 800770e:	461a      	mov	r2, r3
 8007710:	4601      	mov	r1, r0
 8007712:	4658      	mov	r0, fp
 8007714:	f000 fca4 	bl	8008060 <__pow5mult>
 8007718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771a:	2b01      	cmp	r3, #1
 800771c:	4604      	mov	r4, r0
 800771e:	f300 8095 	bgt.w	800784c <_dtoa_r+0x8dc>
 8007722:	9b02      	ldr	r3, [sp, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	f040 8087 	bne.w	8007838 <_dtoa_r+0x8c8>
 800772a:	9b03      	ldr	r3, [sp, #12]
 800772c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007730:	2b00      	cmp	r3, #0
 8007732:	f040 8089 	bne.w	8007848 <_dtoa_r+0x8d8>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800773c:	0d1b      	lsrs	r3, r3, #20
 800773e:	051b      	lsls	r3, r3, #20
 8007740:	b12b      	cbz	r3, 800774e <_dtoa_r+0x7de>
 8007742:	9b08      	ldr	r3, [sp, #32]
 8007744:	3301      	adds	r3, #1
 8007746:	9308      	str	r3, [sp, #32]
 8007748:	f108 0801 	add.w	r8, r8, #1
 800774c:	2301      	movs	r3, #1
 800774e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007750:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 81b0 	beq.w	8007ab8 <_dtoa_r+0xb48>
 8007758:	6923      	ldr	r3, [r4, #16]
 800775a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800775e:	6918      	ldr	r0, [r3, #16]
 8007760:	f000 fb72 	bl	8007e48 <__hi0bits>
 8007764:	f1c0 0020 	rsb	r0, r0, #32
 8007768:	9b08      	ldr	r3, [sp, #32]
 800776a:	4418      	add	r0, r3
 800776c:	f010 001f 	ands.w	r0, r0, #31
 8007770:	d077      	beq.n	8007862 <_dtoa_r+0x8f2>
 8007772:	f1c0 0320 	rsb	r3, r0, #32
 8007776:	2b04      	cmp	r3, #4
 8007778:	dd6b      	ble.n	8007852 <_dtoa_r+0x8e2>
 800777a:	9b08      	ldr	r3, [sp, #32]
 800777c:	f1c0 001c 	rsb	r0, r0, #28
 8007780:	4403      	add	r3, r0
 8007782:	4480      	add	r8, r0
 8007784:	4406      	add	r6, r0
 8007786:	9308      	str	r3, [sp, #32]
 8007788:	f1b8 0f00 	cmp.w	r8, #0
 800778c:	dd05      	ble.n	800779a <_dtoa_r+0x82a>
 800778e:	4649      	mov	r1, r9
 8007790:	4642      	mov	r2, r8
 8007792:	4658      	mov	r0, fp
 8007794:	f000 fcbe 	bl	8008114 <__lshift>
 8007798:	4681      	mov	r9, r0
 800779a:	9b08      	ldr	r3, [sp, #32]
 800779c:	2b00      	cmp	r3, #0
 800779e:	dd05      	ble.n	80077ac <_dtoa_r+0x83c>
 80077a0:	4621      	mov	r1, r4
 80077a2:	461a      	mov	r2, r3
 80077a4:	4658      	mov	r0, fp
 80077a6:	f000 fcb5 	bl	8008114 <__lshift>
 80077aa:	4604      	mov	r4, r0
 80077ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d059      	beq.n	8007866 <_dtoa_r+0x8f6>
 80077b2:	4621      	mov	r1, r4
 80077b4:	4648      	mov	r0, r9
 80077b6:	f000 fd19 	bl	80081ec <__mcmp>
 80077ba:	2800      	cmp	r0, #0
 80077bc:	da53      	bge.n	8007866 <_dtoa_r+0x8f6>
 80077be:	1e7b      	subs	r3, r7, #1
 80077c0:	9304      	str	r3, [sp, #16]
 80077c2:	4649      	mov	r1, r9
 80077c4:	2300      	movs	r3, #0
 80077c6:	220a      	movs	r2, #10
 80077c8:	4658      	mov	r0, fp
 80077ca:	f000 faf7 	bl	8007dbc <__multadd>
 80077ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077d0:	4681      	mov	r9, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	f000 8172 	beq.w	8007abc <_dtoa_r+0xb4c>
 80077d8:	2300      	movs	r3, #0
 80077da:	4629      	mov	r1, r5
 80077dc:	220a      	movs	r2, #10
 80077de:	4658      	mov	r0, fp
 80077e0:	f000 faec 	bl	8007dbc <__multadd>
 80077e4:	9b00      	ldr	r3, [sp, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	4605      	mov	r5, r0
 80077ea:	dc67      	bgt.n	80078bc <_dtoa_r+0x94c>
 80077ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	dc41      	bgt.n	8007876 <_dtoa_r+0x906>
 80077f2:	e063      	b.n	80078bc <_dtoa_r+0x94c>
 80077f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80077f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077fa:	e746      	b.n	800768a <_dtoa_r+0x71a>
 80077fc:	9b07      	ldr	r3, [sp, #28]
 80077fe:	1e5c      	subs	r4, r3, #1
 8007800:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007802:	42a3      	cmp	r3, r4
 8007804:	bfbf      	itttt	lt
 8007806:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007808:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800780a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800780c:	1ae3      	sublt	r3, r4, r3
 800780e:	bfb4      	ite	lt
 8007810:	18d2      	addlt	r2, r2, r3
 8007812:	1b1c      	subge	r4, r3, r4
 8007814:	9b07      	ldr	r3, [sp, #28]
 8007816:	bfbc      	itt	lt
 8007818:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800781a:	2400      	movlt	r4, #0
 800781c:	2b00      	cmp	r3, #0
 800781e:	bfb5      	itete	lt
 8007820:	eba8 0603 	sublt.w	r6, r8, r3
 8007824:	9b07      	ldrge	r3, [sp, #28]
 8007826:	2300      	movlt	r3, #0
 8007828:	4646      	movge	r6, r8
 800782a:	e730      	b.n	800768e <_dtoa_r+0x71e>
 800782c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800782e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007830:	4646      	mov	r6, r8
 8007832:	e735      	b.n	80076a0 <_dtoa_r+0x730>
 8007834:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007836:	e75c      	b.n	80076f2 <_dtoa_r+0x782>
 8007838:	2300      	movs	r3, #0
 800783a:	e788      	b.n	800774e <_dtoa_r+0x7de>
 800783c:	3fe00000 	.word	0x3fe00000
 8007840:	40240000 	.word	0x40240000
 8007844:	40140000 	.word	0x40140000
 8007848:	9b02      	ldr	r3, [sp, #8]
 800784a:	e780      	b.n	800774e <_dtoa_r+0x7de>
 800784c:	2300      	movs	r3, #0
 800784e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007850:	e782      	b.n	8007758 <_dtoa_r+0x7e8>
 8007852:	d099      	beq.n	8007788 <_dtoa_r+0x818>
 8007854:	9a08      	ldr	r2, [sp, #32]
 8007856:	331c      	adds	r3, #28
 8007858:	441a      	add	r2, r3
 800785a:	4498      	add	r8, r3
 800785c:	441e      	add	r6, r3
 800785e:	9208      	str	r2, [sp, #32]
 8007860:	e792      	b.n	8007788 <_dtoa_r+0x818>
 8007862:	4603      	mov	r3, r0
 8007864:	e7f6      	b.n	8007854 <_dtoa_r+0x8e4>
 8007866:	9b07      	ldr	r3, [sp, #28]
 8007868:	9704      	str	r7, [sp, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	dc20      	bgt.n	80078b0 <_dtoa_r+0x940>
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007872:	2b02      	cmp	r3, #2
 8007874:	dd1e      	ble.n	80078b4 <_dtoa_r+0x944>
 8007876:	9b00      	ldr	r3, [sp, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	f47f aec0 	bne.w	80075fe <_dtoa_r+0x68e>
 800787e:	4621      	mov	r1, r4
 8007880:	2205      	movs	r2, #5
 8007882:	4658      	mov	r0, fp
 8007884:	f000 fa9a 	bl	8007dbc <__multadd>
 8007888:	4601      	mov	r1, r0
 800788a:	4604      	mov	r4, r0
 800788c:	4648      	mov	r0, r9
 800788e:	f000 fcad 	bl	80081ec <__mcmp>
 8007892:	2800      	cmp	r0, #0
 8007894:	f77f aeb3 	ble.w	80075fe <_dtoa_r+0x68e>
 8007898:	4656      	mov	r6, sl
 800789a:	2331      	movs	r3, #49	@ 0x31
 800789c:	f806 3b01 	strb.w	r3, [r6], #1
 80078a0:	9b04      	ldr	r3, [sp, #16]
 80078a2:	3301      	adds	r3, #1
 80078a4:	9304      	str	r3, [sp, #16]
 80078a6:	e6ae      	b.n	8007606 <_dtoa_r+0x696>
 80078a8:	9c07      	ldr	r4, [sp, #28]
 80078aa:	9704      	str	r7, [sp, #16]
 80078ac:	4625      	mov	r5, r4
 80078ae:	e7f3      	b.n	8007898 <_dtoa_r+0x928>
 80078b0:	9b07      	ldr	r3, [sp, #28]
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 8104 	beq.w	8007ac4 <_dtoa_r+0xb54>
 80078bc:	2e00      	cmp	r6, #0
 80078be:	dd05      	ble.n	80078cc <_dtoa_r+0x95c>
 80078c0:	4629      	mov	r1, r5
 80078c2:	4632      	mov	r2, r6
 80078c4:	4658      	mov	r0, fp
 80078c6:	f000 fc25 	bl	8008114 <__lshift>
 80078ca:	4605      	mov	r5, r0
 80078cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d05a      	beq.n	8007988 <_dtoa_r+0xa18>
 80078d2:	6869      	ldr	r1, [r5, #4]
 80078d4:	4658      	mov	r0, fp
 80078d6:	f000 fa0f 	bl	8007cf8 <_Balloc>
 80078da:	4606      	mov	r6, r0
 80078dc:	b928      	cbnz	r0, 80078ea <_dtoa_r+0x97a>
 80078de:	4b84      	ldr	r3, [pc, #528]	@ (8007af0 <_dtoa_r+0xb80>)
 80078e0:	4602      	mov	r2, r0
 80078e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80078e6:	f7ff bb5a 	b.w	8006f9e <_dtoa_r+0x2e>
 80078ea:	692a      	ldr	r2, [r5, #16]
 80078ec:	3202      	adds	r2, #2
 80078ee:	0092      	lsls	r2, r2, #2
 80078f0:	f105 010c 	add.w	r1, r5, #12
 80078f4:	300c      	adds	r0, #12
 80078f6:	f7ff faa2 	bl	8006e3e <memcpy>
 80078fa:	2201      	movs	r2, #1
 80078fc:	4631      	mov	r1, r6
 80078fe:	4658      	mov	r0, fp
 8007900:	f000 fc08 	bl	8008114 <__lshift>
 8007904:	f10a 0301 	add.w	r3, sl, #1
 8007908:	9307      	str	r3, [sp, #28]
 800790a:	9b00      	ldr	r3, [sp, #0]
 800790c:	4453      	add	r3, sl
 800790e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007910:	9b02      	ldr	r3, [sp, #8]
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	462f      	mov	r7, r5
 8007918:	930a      	str	r3, [sp, #40]	@ 0x28
 800791a:	4605      	mov	r5, r0
 800791c:	9b07      	ldr	r3, [sp, #28]
 800791e:	4621      	mov	r1, r4
 8007920:	3b01      	subs	r3, #1
 8007922:	4648      	mov	r0, r9
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	f7ff fa98 	bl	8006e5a <quorem>
 800792a:	4639      	mov	r1, r7
 800792c:	9002      	str	r0, [sp, #8]
 800792e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007932:	4648      	mov	r0, r9
 8007934:	f000 fc5a 	bl	80081ec <__mcmp>
 8007938:	462a      	mov	r2, r5
 800793a:	9008      	str	r0, [sp, #32]
 800793c:	4621      	mov	r1, r4
 800793e:	4658      	mov	r0, fp
 8007940:	f000 fc70 	bl	8008224 <__mdiff>
 8007944:	68c2      	ldr	r2, [r0, #12]
 8007946:	4606      	mov	r6, r0
 8007948:	bb02      	cbnz	r2, 800798c <_dtoa_r+0xa1c>
 800794a:	4601      	mov	r1, r0
 800794c:	4648      	mov	r0, r9
 800794e:	f000 fc4d 	bl	80081ec <__mcmp>
 8007952:	4602      	mov	r2, r0
 8007954:	4631      	mov	r1, r6
 8007956:	4658      	mov	r0, fp
 8007958:	920e      	str	r2, [sp, #56]	@ 0x38
 800795a:	f000 fa0d 	bl	8007d78 <_Bfree>
 800795e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007960:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007962:	9e07      	ldr	r6, [sp, #28]
 8007964:	ea43 0102 	orr.w	r1, r3, r2
 8007968:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800796a:	4319      	orrs	r1, r3
 800796c:	d110      	bne.n	8007990 <_dtoa_r+0xa20>
 800796e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007972:	d029      	beq.n	80079c8 <_dtoa_r+0xa58>
 8007974:	9b08      	ldr	r3, [sp, #32]
 8007976:	2b00      	cmp	r3, #0
 8007978:	dd02      	ble.n	8007980 <_dtoa_r+0xa10>
 800797a:	9b02      	ldr	r3, [sp, #8]
 800797c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007980:	9b00      	ldr	r3, [sp, #0]
 8007982:	f883 8000 	strb.w	r8, [r3]
 8007986:	e63f      	b.n	8007608 <_dtoa_r+0x698>
 8007988:	4628      	mov	r0, r5
 800798a:	e7bb      	b.n	8007904 <_dtoa_r+0x994>
 800798c:	2201      	movs	r2, #1
 800798e:	e7e1      	b.n	8007954 <_dtoa_r+0x9e4>
 8007990:	9b08      	ldr	r3, [sp, #32]
 8007992:	2b00      	cmp	r3, #0
 8007994:	db04      	blt.n	80079a0 <_dtoa_r+0xa30>
 8007996:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007998:	430b      	orrs	r3, r1
 800799a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800799c:	430b      	orrs	r3, r1
 800799e:	d120      	bne.n	80079e2 <_dtoa_r+0xa72>
 80079a0:	2a00      	cmp	r2, #0
 80079a2:	dded      	ble.n	8007980 <_dtoa_r+0xa10>
 80079a4:	4649      	mov	r1, r9
 80079a6:	2201      	movs	r2, #1
 80079a8:	4658      	mov	r0, fp
 80079aa:	f000 fbb3 	bl	8008114 <__lshift>
 80079ae:	4621      	mov	r1, r4
 80079b0:	4681      	mov	r9, r0
 80079b2:	f000 fc1b 	bl	80081ec <__mcmp>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	dc03      	bgt.n	80079c2 <_dtoa_r+0xa52>
 80079ba:	d1e1      	bne.n	8007980 <_dtoa_r+0xa10>
 80079bc:	f018 0f01 	tst.w	r8, #1
 80079c0:	d0de      	beq.n	8007980 <_dtoa_r+0xa10>
 80079c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079c6:	d1d8      	bne.n	800797a <_dtoa_r+0xa0a>
 80079c8:	9a00      	ldr	r2, [sp, #0]
 80079ca:	2339      	movs	r3, #57	@ 0x39
 80079cc:	7013      	strb	r3, [r2, #0]
 80079ce:	4633      	mov	r3, r6
 80079d0:	461e      	mov	r6, r3
 80079d2:	3b01      	subs	r3, #1
 80079d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80079d8:	2a39      	cmp	r2, #57	@ 0x39
 80079da:	d052      	beq.n	8007a82 <_dtoa_r+0xb12>
 80079dc:	3201      	adds	r2, #1
 80079de:	701a      	strb	r2, [r3, #0]
 80079e0:	e612      	b.n	8007608 <_dtoa_r+0x698>
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	dd07      	ble.n	80079f6 <_dtoa_r+0xa86>
 80079e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80079ea:	d0ed      	beq.n	80079c8 <_dtoa_r+0xa58>
 80079ec:	9a00      	ldr	r2, [sp, #0]
 80079ee:	f108 0301 	add.w	r3, r8, #1
 80079f2:	7013      	strb	r3, [r2, #0]
 80079f4:	e608      	b.n	8007608 <_dtoa_r+0x698>
 80079f6:	9b07      	ldr	r3, [sp, #28]
 80079f8:	9a07      	ldr	r2, [sp, #28]
 80079fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80079fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d028      	beq.n	8007a56 <_dtoa_r+0xae6>
 8007a04:	4649      	mov	r1, r9
 8007a06:	2300      	movs	r3, #0
 8007a08:	220a      	movs	r2, #10
 8007a0a:	4658      	mov	r0, fp
 8007a0c:	f000 f9d6 	bl	8007dbc <__multadd>
 8007a10:	42af      	cmp	r7, r5
 8007a12:	4681      	mov	r9, r0
 8007a14:	f04f 0300 	mov.w	r3, #0
 8007a18:	f04f 020a 	mov.w	r2, #10
 8007a1c:	4639      	mov	r1, r7
 8007a1e:	4658      	mov	r0, fp
 8007a20:	d107      	bne.n	8007a32 <_dtoa_r+0xac2>
 8007a22:	f000 f9cb 	bl	8007dbc <__multadd>
 8007a26:	4607      	mov	r7, r0
 8007a28:	4605      	mov	r5, r0
 8007a2a:	9b07      	ldr	r3, [sp, #28]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	9307      	str	r3, [sp, #28]
 8007a30:	e774      	b.n	800791c <_dtoa_r+0x9ac>
 8007a32:	f000 f9c3 	bl	8007dbc <__multadd>
 8007a36:	4629      	mov	r1, r5
 8007a38:	4607      	mov	r7, r0
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	220a      	movs	r2, #10
 8007a3e:	4658      	mov	r0, fp
 8007a40:	f000 f9bc 	bl	8007dbc <__multadd>
 8007a44:	4605      	mov	r5, r0
 8007a46:	e7f0      	b.n	8007a2a <_dtoa_r+0xaba>
 8007a48:	9b00      	ldr	r3, [sp, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	bfcc      	ite	gt
 8007a4e:	461e      	movgt	r6, r3
 8007a50:	2601      	movle	r6, #1
 8007a52:	4456      	add	r6, sl
 8007a54:	2700      	movs	r7, #0
 8007a56:	4649      	mov	r1, r9
 8007a58:	2201      	movs	r2, #1
 8007a5a:	4658      	mov	r0, fp
 8007a5c:	f000 fb5a 	bl	8008114 <__lshift>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4681      	mov	r9, r0
 8007a64:	f000 fbc2 	bl	80081ec <__mcmp>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	dcb0      	bgt.n	80079ce <_dtoa_r+0xa5e>
 8007a6c:	d102      	bne.n	8007a74 <_dtoa_r+0xb04>
 8007a6e:	f018 0f01 	tst.w	r8, #1
 8007a72:	d1ac      	bne.n	80079ce <_dtoa_r+0xa5e>
 8007a74:	4633      	mov	r3, r6
 8007a76:	461e      	mov	r6, r3
 8007a78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a7c:	2a30      	cmp	r2, #48	@ 0x30
 8007a7e:	d0fa      	beq.n	8007a76 <_dtoa_r+0xb06>
 8007a80:	e5c2      	b.n	8007608 <_dtoa_r+0x698>
 8007a82:	459a      	cmp	sl, r3
 8007a84:	d1a4      	bne.n	80079d0 <_dtoa_r+0xa60>
 8007a86:	9b04      	ldr	r3, [sp, #16]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	9304      	str	r3, [sp, #16]
 8007a8c:	2331      	movs	r3, #49	@ 0x31
 8007a8e:	f88a 3000 	strb.w	r3, [sl]
 8007a92:	e5b9      	b.n	8007608 <_dtoa_r+0x698>
 8007a94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a96:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007af4 <_dtoa_r+0xb84>
 8007a9a:	b11b      	cbz	r3, 8007aa4 <_dtoa_r+0xb34>
 8007a9c:	f10a 0308 	add.w	r3, sl, #8
 8007aa0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	b019      	add	sp, #100	@ 0x64
 8007aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	f77f ae37 	ble.w	8007722 <_dtoa_r+0x7b2>
 8007ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ab6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ab8:	2001      	movs	r0, #1
 8007aba:	e655      	b.n	8007768 <_dtoa_r+0x7f8>
 8007abc:	9b00      	ldr	r3, [sp, #0]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	f77f aed6 	ble.w	8007870 <_dtoa_r+0x900>
 8007ac4:	4656      	mov	r6, sl
 8007ac6:	4621      	mov	r1, r4
 8007ac8:	4648      	mov	r0, r9
 8007aca:	f7ff f9c6 	bl	8006e5a <quorem>
 8007ace:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007ad2:	f806 8b01 	strb.w	r8, [r6], #1
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	eba6 020a 	sub.w	r2, r6, sl
 8007adc:	4293      	cmp	r3, r2
 8007ade:	ddb3      	ble.n	8007a48 <_dtoa_r+0xad8>
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	220a      	movs	r2, #10
 8007ae6:	4658      	mov	r0, fp
 8007ae8:	f000 f968 	bl	8007dbc <__multadd>
 8007aec:	4681      	mov	r9, r0
 8007aee:	e7ea      	b.n	8007ac6 <_dtoa_r+0xb56>
 8007af0:	080093a0 	.word	0x080093a0
 8007af4:	08009324 	.word	0x08009324

08007af8 <_free_r>:
 8007af8:	b538      	push	{r3, r4, r5, lr}
 8007afa:	4605      	mov	r5, r0
 8007afc:	2900      	cmp	r1, #0
 8007afe:	d041      	beq.n	8007b84 <_free_r+0x8c>
 8007b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b04:	1f0c      	subs	r4, r1, #4
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	bfb8      	it	lt
 8007b0a:	18e4      	addlt	r4, r4, r3
 8007b0c:	f000 f8e8 	bl	8007ce0 <__malloc_lock>
 8007b10:	4a1d      	ldr	r2, [pc, #116]	@ (8007b88 <_free_r+0x90>)
 8007b12:	6813      	ldr	r3, [r2, #0]
 8007b14:	b933      	cbnz	r3, 8007b24 <_free_r+0x2c>
 8007b16:	6063      	str	r3, [r4, #4]
 8007b18:	6014      	str	r4, [r2, #0]
 8007b1a:	4628      	mov	r0, r5
 8007b1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b20:	f000 b8e4 	b.w	8007cec <__malloc_unlock>
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	d908      	bls.n	8007b3a <_free_r+0x42>
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	1821      	adds	r1, r4, r0
 8007b2c:	428b      	cmp	r3, r1
 8007b2e:	bf01      	itttt	eq
 8007b30:	6819      	ldreq	r1, [r3, #0]
 8007b32:	685b      	ldreq	r3, [r3, #4]
 8007b34:	1809      	addeq	r1, r1, r0
 8007b36:	6021      	streq	r1, [r4, #0]
 8007b38:	e7ed      	b.n	8007b16 <_free_r+0x1e>
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	b10b      	cbz	r3, 8007b44 <_free_r+0x4c>
 8007b40:	42a3      	cmp	r3, r4
 8007b42:	d9fa      	bls.n	8007b3a <_free_r+0x42>
 8007b44:	6811      	ldr	r1, [r2, #0]
 8007b46:	1850      	adds	r0, r2, r1
 8007b48:	42a0      	cmp	r0, r4
 8007b4a:	d10b      	bne.n	8007b64 <_free_r+0x6c>
 8007b4c:	6820      	ldr	r0, [r4, #0]
 8007b4e:	4401      	add	r1, r0
 8007b50:	1850      	adds	r0, r2, r1
 8007b52:	4283      	cmp	r3, r0
 8007b54:	6011      	str	r1, [r2, #0]
 8007b56:	d1e0      	bne.n	8007b1a <_free_r+0x22>
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	6053      	str	r3, [r2, #4]
 8007b5e:	4408      	add	r0, r1
 8007b60:	6010      	str	r0, [r2, #0]
 8007b62:	e7da      	b.n	8007b1a <_free_r+0x22>
 8007b64:	d902      	bls.n	8007b6c <_free_r+0x74>
 8007b66:	230c      	movs	r3, #12
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	e7d6      	b.n	8007b1a <_free_r+0x22>
 8007b6c:	6820      	ldr	r0, [r4, #0]
 8007b6e:	1821      	adds	r1, r4, r0
 8007b70:	428b      	cmp	r3, r1
 8007b72:	bf04      	itt	eq
 8007b74:	6819      	ldreq	r1, [r3, #0]
 8007b76:	685b      	ldreq	r3, [r3, #4]
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	bf04      	itt	eq
 8007b7c:	1809      	addeq	r1, r1, r0
 8007b7e:	6021      	streq	r1, [r4, #0]
 8007b80:	6054      	str	r4, [r2, #4]
 8007b82:	e7ca      	b.n	8007b1a <_free_r+0x22>
 8007b84:	bd38      	pop	{r3, r4, r5, pc}
 8007b86:	bf00      	nop
 8007b88:	20000524 	.word	0x20000524

08007b8c <malloc>:
 8007b8c:	4b02      	ldr	r3, [pc, #8]	@ (8007b98 <malloc+0xc>)
 8007b8e:	4601      	mov	r1, r0
 8007b90:	6818      	ldr	r0, [r3, #0]
 8007b92:	f000 b825 	b.w	8007be0 <_malloc_r>
 8007b96:	bf00      	nop
 8007b98:	200000b4 	.word	0x200000b4

08007b9c <sbrk_aligned>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	4e0f      	ldr	r6, [pc, #60]	@ (8007bdc <sbrk_aligned+0x40>)
 8007ba0:	460c      	mov	r4, r1
 8007ba2:	6831      	ldr	r1, [r6, #0]
 8007ba4:	4605      	mov	r5, r0
 8007ba6:	b911      	cbnz	r1, 8007bae <sbrk_aligned+0x12>
 8007ba8:	f000 fe46 	bl	8008838 <_sbrk_r>
 8007bac:	6030      	str	r0, [r6, #0]
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	f000 fe41 	bl	8008838 <_sbrk_r>
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	d103      	bne.n	8007bc2 <sbrk_aligned+0x26>
 8007bba:	f04f 34ff 	mov.w	r4, #4294967295
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	bd70      	pop	{r4, r5, r6, pc}
 8007bc2:	1cc4      	adds	r4, r0, #3
 8007bc4:	f024 0403 	bic.w	r4, r4, #3
 8007bc8:	42a0      	cmp	r0, r4
 8007bca:	d0f8      	beq.n	8007bbe <sbrk_aligned+0x22>
 8007bcc:	1a21      	subs	r1, r4, r0
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fe32 	bl	8008838 <_sbrk_r>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d1f2      	bne.n	8007bbe <sbrk_aligned+0x22>
 8007bd8:	e7ef      	b.n	8007bba <sbrk_aligned+0x1e>
 8007bda:	bf00      	nop
 8007bdc:	20000520 	.word	0x20000520

08007be0 <_malloc_r>:
 8007be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be4:	1ccd      	adds	r5, r1, #3
 8007be6:	f025 0503 	bic.w	r5, r5, #3
 8007bea:	3508      	adds	r5, #8
 8007bec:	2d0c      	cmp	r5, #12
 8007bee:	bf38      	it	cc
 8007bf0:	250c      	movcc	r5, #12
 8007bf2:	2d00      	cmp	r5, #0
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	db01      	blt.n	8007bfc <_malloc_r+0x1c>
 8007bf8:	42a9      	cmp	r1, r5
 8007bfa:	d904      	bls.n	8007c06 <_malloc_r+0x26>
 8007bfc:	230c      	movs	r3, #12
 8007bfe:	6033      	str	r3, [r6, #0]
 8007c00:	2000      	movs	r0, #0
 8007c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007cdc <_malloc_r+0xfc>
 8007c0a:	f000 f869 	bl	8007ce0 <__malloc_lock>
 8007c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c12:	461c      	mov	r4, r3
 8007c14:	bb44      	cbnz	r4, 8007c68 <_malloc_r+0x88>
 8007c16:	4629      	mov	r1, r5
 8007c18:	4630      	mov	r0, r6
 8007c1a:	f7ff ffbf 	bl	8007b9c <sbrk_aligned>
 8007c1e:	1c43      	adds	r3, r0, #1
 8007c20:	4604      	mov	r4, r0
 8007c22:	d158      	bne.n	8007cd6 <_malloc_r+0xf6>
 8007c24:	f8d8 4000 	ldr.w	r4, [r8]
 8007c28:	4627      	mov	r7, r4
 8007c2a:	2f00      	cmp	r7, #0
 8007c2c:	d143      	bne.n	8007cb6 <_malloc_r+0xd6>
 8007c2e:	2c00      	cmp	r4, #0
 8007c30:	d04b      	beq.n	8007cca <_malloc_r+0xea>
 8007c32:	6823      	ldr	r3, [r4, #0]
 8007c34:	4639      	mov	r1, r7
 8007c36:	4630      	mov	r0, r6
 8007c38:	eb04 0903 	add.w	r9, r4, r3
 8007c3c:	f000 fdfc 	bl	8008838 <_sbrk_r>
 8007c40:	4581      	cmp	r9, r0
 8007c42:	d142      	bne.n	8007cca <_malloc_r+0xea>
 8007c44:	6821      	ldr	r1, [r4, #0]
 8007c46:	1a6d      	subs	r5, r5, r1
 8007c48:	4629      	mov	r1, r5
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7ff ffa6 	bl	8007b9c <sbrk_aligned>
 8007c50:	3001      	adds	r0, #1
 8007c52:	d03a      	beq.n	8007cca <_malloc_r+0xea>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	442b      	add	r3, r5
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c5e:	685a      	ldr	r2, [r3, #4]
 8007c60:	bb62      	cbnz	r2, 8007cbc <_malloc_r+0xdc>
 8007c62:	f8c8 7000 	str.w	r7, [r8]
 8007c66:	e00f      	b.n	8007c88 <_malloc_r+0xa8>
 8007c68:	6822      	ldr	r2, [r4, #0]
 8007c6a:	1b52      	subs	r2, r2, r5
 8007c6c:	d420      	bmi.n	8007cb0 <_malloc_r+0xd0>
 8007c6e:	2a0b      	cmp	r2, #11
 8007c70:	d917      	bls.n	8007ca2 <_malloc_r+0xc2>
 8007c72:	1961      	adds	r1, r4, r5
 8007c74:	42a3      	cmp	r3, r4
 8007c76:	6025      	str	r5, [r4, #0]
 8007c78:	bf18      	it	ne
 8007c7a:	6059      	strne	r1, [r3, #4]
 8007c7c:	6863      	ldr	r3, [r4, #4]
 8007c7e:	bf08      	it	eq
 8007c80:	f8c8 1000 	streq.w	r1, [r8]
 8007c84:	5162      	str	r2, [r4, r5]
 8007c86:	604b      	str	r3, [r1, #4]
 8007c88:	4630      	mov	r0, r6
 8007c8a:	f000 f82f 	bl	8007cec <__malloc_unlock>
 8007c8e:	f104 000b 	add.w	r0, r4, #11
 8007c92:	1d23      	adds	r3, r4, #4
 8007c94:	f020 0007 	bic.w	r0, r0, #7
 8007c98:	1ac2      	subs	r2, r0, r3
 8007c9a:	bf1c      	itt	ne
 8007c9c:	1a1b      	subne	r3, r3, r0
 8007c9e:	50a3      	strne	r3, [r4, r2]
 8007ca0:	e7af      	b.n	8007c02 <_malloc_r+0x22>
 8007ca2:	6862      	ldr	r2, [r4, #4]
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	bf0c      	ite	eq
 8007ca8:	f8c8 2000 	streq.w	r2, [r8]
 8007cac:	605a      	strne	r2, [r3, #4]
 8007cae:	e7eb      	b.n	8007c88 <_malloc_r+0xa8>
 8007cb0:	4623      	mov	r3, r4
 8007cb2:	6864      	ldr	r4, [r4, #4]
 8007cb4:	e7ae      	b.n	8007c14 <_malloc_r+0x34>
 8007cb6:	463c      	mov	r4, r7
 8007cb8:	687f      	ldr	r7, [r7, #4]
 8007cba:	e7b6      	b.n	8007c2a <_malloc_r+0x4a>
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	42a3      	cmp	r3, r4
 8007cc2:	d1fb      	bne.n	8007cbc <_malloc_r+0xdc>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	6053      	str	r3, [r2, #4]
 8007cc8:	e7de      	b.n	8007c88 <_malloc_r+0xa8>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	6033      	str	r3, [r6, #0]
 8007cce:	4630      	mov	r0, r6
 8007cd0:	f000 f80c 	bl	8007cec <__malloc_unlock>
 8007cd4:	e794      	b.n	8007c00 <_malloc_r+0x20>
 8007cd6:	6005      	str	r5, [r0, #0]
 8007cd8:	e7d6      	b.n	8007c88 <_malloc_r+0xa8>
 8007cda:	bf00      	nop
 8007cdc:	20000524 	.word	0x20000524

08007ce0 <__malloc_lock>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	@ (8007ce8 <__malloc_lock+0x8>)
 8007ce2:	f7ff b8aa 	b.w	8006e3a <__retarget_lock_acquire_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	2000051c 	.word	0x2000051c

08007cec <__malloc_unlock>:
 8007cec:	4801      	ldr	r0, [pc, #4]	@ (8007cf4 <__malloc_unlock+0x8>)
 8007cee:	f7ff b8a5 	b.w	8006e3c <__retarget_lock_release_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	2000051c 	.word	0x2000051c

08007cf8 <_Balloc>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	69c6      	ldr	r6, [r0, #28]
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	460d      	mov	r5, r1
 8007d00:	b976      	cbnz	r6, 8007d20 <_Balloc+0x28>
 8007d02:	2010      	movs	r0, #16
 8007d04:	f7ff ff42 	bl	8007b8c <malloc>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	61e0      	str	r0, [r4, #28]
 8007d0c:	b920      	cbnz	r0, 8007d18 <_Balloc+0x20>
 8007d0e:	4b18      	ldr	r3, [pc, #96]	@ (8007d70 <_Balloc+0x78>)
 8007d10:	4818      	ldr	r0, [pc, #96]	@ (8007d74 <_Balloc+0x7c>)
 8007d12:	216b      	movs	r1, #107	@ 0x6b
 8007d14:	f000 fda0 	bl	8008858 <__assert_func>
 8007d18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d1c:	6006      	str	r6, [r0, #0]
 8007d1e:	60c6      	str	r6, [r0, #12]
 8007d20:	69e6      	ldr	r6, [r4, #28]
 8007d22:	68f3      	ldr	r3, [r6, #12]
 8007d24:	b183      	cbz	r3, 8007d48 <_Balloc+0x50>
 8007d26:	69e3      	ldr	r3, [r4, #28]
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d2e:	b9b8      	cbnz	r0, 8007d60 <_Balloc+0x68>
 8007d30:	2101      	movs	r1, #1
 8007d32:	fa01 f605 	lsl.w	r6, r1, r5
 8007d36:	1d72      	adds	r2, r6, #5
 8007d38:	0092      	lsls	r2, r2, #2
 8007d3a:	4620      	mov	r0, r4
 8007d3c:	f000 fdaa 	bl	8008894 <_calloc_r>
 8007d40:	b160      	cbz	r0, 8007d5c <_Balloc+0x64>
 8007d42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d46:	e00e      	b.n	8007d66 <_Balloc+0x6e>
 8007d48:	2221      	movs	r2, #33	@ 0x21
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	4620      	mov	r0, r4
 8007d4e:	f000 fda1 	bl	8008894 <_calloc_r>
 8007d52:	69e3      	ldr	r3, [r4, #28]
 8007d54:	60f0      	str	r0, [r6, #12]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e4      	bne.n	8007d26 <_Balloc+0x2e>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	bd70      	pop	{r4, r5, r6, pc}
 8007d60:	6802      	ldr	r2, [r0, #0]
 8007d62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d66:	2300      	movs	r3, #0
 8007d68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d6c:	e7f7      	b.n	8007d5e <_Balloc+0x66>
 8007d6e:	bf00      	nop
 8007d70:	08009331 	.word	0x08009331
 8007d74:	080093b1 	.word	0x080093b1

08007d78 <_Bfree>:
 8007d78:	b570      	push	{r4, r5, r6, lr}
 8007d7a:	69c6      	ldr	r6, [r0, #28]
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	460c      	mov	r4, r1
 8007d80:	b976      	cbnz	r6, 8007da0 <_Bfree+0x28>
 8007d82:	2010      	movs	r0, #16
 8007d84:	f7ff ff02 	bl	8007b8c <malloc>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	61e8      	str	r0, [r5, #28]
 8007d8c:	b920      	cbnz	r0, 8007d98 <_Bfree+0x20>
 8007d8e:	4b09      	ldr	r3, [pc, #36]	@ (8007db4 <_Bfree+0x3c>)
 8007d90:	4809      	ldr	r0, [pc, #36]	@ (8007db8 <_Bfree+0x40>)
 8007d92:	218f      	movs	r1, #143	@ 0x8f
 8007d94:	f000 fd60 	bl	8008858 <__assert_func>
 8007d98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d9c:	6006      	str	r6, [r0, #0]
 8007d9e:	60c6      	str	r6, [r0, #12]
 8007da0:	b13c      	cbz	r4, 8007db2 <_Bfree+0x3a>
 8007da2:	69eb      	ldr	r3, [r5, #28]
 8007da4:	6862      	ldr	r2, [r4, #4]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007dac:	6021      	str	r1, [r4, #0]
 8007dae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007db2:	bd70      	pop	{r4, r5, r6, pc}
 8007db4:	08009331 	.word	0x08009331
 8007db8:	080093b1 	.word	0x080093b1

08007dbc <__multadd>:
 8007dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc0:	690d      	ldr	r5, [r1, #16]
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	460c      	mov	r4, r1
 8007dc6:	461e      	mov	r6, r3
 8007dc8:	f101 0c14 	add.w	ip, r1, #20
 8007dcc:	2000      	movs	r0, #0
 8007dce:	f8dc 3000 	ldr.w	r3, [ip]
 8007dd2:	b299      	uxth	r1, r3
 8007dd4:	fb02 6101 	mla	r1, r2, r1, r6
 8007dd8:	0c1e      	lsrs	r6, r3, #16
 8007dda:	0c0b      	lsrs	r3, r1, #16
 8007ddc:	fb02 3306 	mla	r3, r2, r6, r3
 8007de0:	b289      	uxth	r1, r1
 8007de2:	3001      	adds	r0, #1
 8007de4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007de8:	4285      	cmp	r5, r0
 8007dea:	f84c 1b04 	str.w	r1, [ip], #4
 8007dee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007df2:	dcec      	bgt.n	8007dce <__multadd+0x12>
 8007df4:	b30e      	cbz	r6, 8007e3a <__multadd+0x7e>
 8007df6:	68a3      	ldr	r3, [r4, #8]
 8007df8:	42ab      	cmp	r3, r5
 8007dfa:	dc19      	bgt.n	8007e30 <__multadd+0x74>
 8007dfc:	6861      	ldr	r1, [r4, #4]
 8007dfe:	4638      	mov	r0, r7
 8007e00:	3101      	adds	r1, #1
 8007e02:	f7ff ff79 	bl	8007cf8 <_Balloc>
 8007e06:	4680      	mov	r8, r0
 8007e08:	b928      	cbnz	r0, 8007e16 <__multadd+0x5a>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e40 <__multadd+0x84>)
 8007e0e:	480d      	ldr	r0, [pc, #52]	@ (8007e44 <__multadd+0x88>)
 8007e10:	21ba      	movs	r1, #186	@ 0xba
 8007e12:	f000 fd21 	bl	8008858 <__assert_func>
 8007e16:	6922      	ldr	r2, [r4, #16]
 8007e18:	3202      	adds	r2, #2
 8007e1a:	f104 010c 	add.w	r1, r4, #12
 8007e1e:	0092      	lsls	r2, r2, #2
 8007e20:	300c      	adds	r0, #12
 8007e22:	f7ff f80c 	bl	8006e3e <memcpy>
 8007e26:	4621      	mov	r1, r4
 8007e28:	4638      	mov	r0, r7
 8007e2a:	f7ff ffa5 	bl	8007d78 <_Bfree>
 8007e2e:	4644      	mov	r4, r8
 8007e30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e34:	3501      	adds	r5, #1
 8007e36:	615e      	str	r6, [r3, #20]
 8007e38:	6125      	str	r5, [r4, #16]
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e40:	080093a0 	.word	0x080093a0
 8007e44:	080093b1 	.word	0x080093b1

08007e48 <__hi0bits>:
 8007e48:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	bf36      	itet	cc
 8007e50:	0403      	lslcc	r3, r0, #16
 8007e52:	2000      	movcs	r0, #0
 8007e54:	2010      	movcc	r0, #16
 8007e56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e5a:	bf3c      	itt	cc
 8007e5c:	021b      	lslcc	r3, r3, #8
 8007e5e:	3008      	addcc	r0, #8
 8007e60:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007e64:	bf3c      	itt	cc
 8007e66:	011b      	lslcc	r3, r3, #4
 8007e68:	3004      	addcc	r0, #4
 8007e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e6e:	bf3c      	itt	cc
 8007e70:	009b      	lslcc	r3, r3, #2
 8007e72:	3002      	addcc	r0, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	db05      	blt.n	8007e84 <__hi0bits+0x3c>
 8007e78:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007e7c:	f100 0001 	add.w	r0, r0, #1
 8007e80:	bf08      	it	eq
 8007e82:	2020      	moveq	r0, #32
 8007e84:	4770      	bx	lr

08007e86 <__lo0bits>:
 8007e86:	6803      	ldr	r3, [r0, #0]
 8007e88:	4602      	mov	r2, r0
 8007e8a:	f013 0007 	ands.w	r0, r3, #7
 8007e8e:	d00b      	beq.n	8007ea8 <__lo0bits+0x22>
 8007e90:	07d9      	lsls	r1, r3, #31
 8007e92:	d421      	bmi.n	8007ed8 <__lo0bits+0x52>
 8007e94:	0798      	lsls	r0, r3, #30
 8007e96:	bf49      	itett	mi
 8007e98:	085b      	lsrmi	r3, r3, #1
 8007e9a:	089b      	lsrpl	r3, r3, #2
 8007e9c:	2001      	movmi	r0, #1
 8007e9e:	6013      	strmi	r3, [r2, #0]
 8007ea0:	bf5c      	itt	pl
 8007ea2:	6013      	strpl	r3, [r2, #0]
 8007ea4:	2002      	movpl	r0, #2
 8007ea6:	4770      	bx	lr
 8007ea8:	b299      	uxth	r1, r3
 8007eaa:	b909      	cbnz	r1, 8007eb0 <__lo0bits+0x2a>
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	2010      	movs	r0, #16
 8007eb0:	b2d9      	uxtb	r1, r3
 8007eb2:	b909      	cbnz	r1, 8007eb8 <__lo0bits+0x32>
 8007eb4:	3008      	adds	r0, #8
 8007eb6:	0a1b      	lsrs	r3, r3, #8
 8007eb8:	0719      	lsls	r1, r3, #28
 8007eba:	bf04      	itt	eq
 8007ebc:	091b      	lsreq	r3, r3, #4
 8007ebe:	3004      	addeq	r0, #4
 8007ec0:	0799      	lsls	r1, r3, #30
 8007ec2:	bf04      	itt	eq
 8007ec4:	089b      	lsreq	r3, r3, #2
 8007ec6:	3002      	addeq	r0, #2
 8007ec8:	07d9      	lsls	r1, r3, #31
 8007eca:	d403      	bmi.n	8007ed4 <__lo0bits+0x4e>
 8007ecc:	085b      	lsrs	r3, r3, #1
 8007ece:	f100 0001 	add.w	r0, r0, #1
 8007ed2:	d003      	beq.n	8007edc <__lo0bits+0x56>
 8007ed4:	6013      	str	r3, [r2, #0]
 8007ed6:	4770      	bx	lr
 8007ed8:	2000      	movs	r0, #0
 8007eda:	4770      	bx	lr
 8007edc:	2020      	movs	r0, #32
 8007ede:	4770      	bx	lr

08007ee0 <__i2b>:
 8007ee0:	b510      	push	{r4, lr}
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	f7ff ff07 	bl	8007cf8 <_Balloc>
 8007eea:	4602      	mov	r2, r0
 8007eec:	b928      	cbnz	r0, 8007efa <__i2b+0x1a>
 8007eee:	4b05      	ldr	r3, [pc, #20]	@ (8007f04 <__i2b+0x24>)
 8007ef0:	4805      	ldr	r0, [pc, #20]	@ (8007f08 <__i2b+0x28>)
 8007ef2:	f240 1145 	movw	r1, #325	@ 0x145
 8007ef6:	f000 fcaf 	bl	8008858 <__assert_func>
 8007efa:	2301      	movs	r3, #1
 8007efc:	6144      	str	r4, [r0, #20]
 8007efe:	6103      	str	r3, [r0, #16]
 8007f00:	bd10      	pop	{r4, pc}
 8007f02:	bf00      	nop
 8007f04:	080093a0 	.word	0x080093a0
 8007f08:	080093b1 	.word	0x080093b1

08007f0c <__multiply>:
 8007f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f10:	4614      	mov	r4, r2
 8007f12:	690a      	ldr	r2, [r1, #16]
 8007f14:	6923      	ldr	r3, [r4, #16]
 8007f16:	429a      	cmp	r2, r3
 8007f18:	bfa8      	it	ge
 8007f1a:	4623      	movge	r3, r4
 8007f1c:	460f      	mov	r7, r1
 8007f1e:	bfa4      	itt	ge
 8007f20:	460c      	movge	r4, r1
 8007f22:	461f      	movge	r7, r3
 8007f24:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007f28:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007f2c:	68a3      	ldr	r3, [r4, #8]
 8007f2e:	6861      	ldr	r1, [r4, #4]
 8007f30:	eb0a 0609 	add.w	r6, sl, r9
 8007f34:	42b3      	cmp	r3, r6
 8007f36:	b085      	sub	sp, #20
 8007f38:	bfb8      	it	lt
 8007f3a:	3101      	addlt	r1, #1
 8007f3c:	f7ff fedc 	bl	8007cf8 <_Balloc>
 8007f40:	b930      	cbnz	r0, 8007f50 <__multiply+0x44>
 8007f42:	4602      	mov	r2, r0
 8007f44:	4b44      	ldr	r3, [pc, #272]	@ (8008058 <__multiply+0x14c>)
 8007f46:	4845      	ldr	r0, [pc, #276]	@ (800805c <__multiply+0x150>)
 8007f48:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007f4c:	f000 fc84 	bl	8008858 <__assert_func>
 8007f50:	f100 0514 	add.w	r5, r0, #20
 8007f54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007f58:	462b      	mov	r3, r5
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	4543      	cmp	r3, r8
 8007f5e:	d321      	bcc.n	8007fa4 <__multiply+0x98>
 8007f60:	f107 0114 	add.w	r1, r7, #20
 8007f64:	f104 0214 	add.w	r2, r4, #20
 8007f68:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007f6c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007f70:	9302      	str	r3, [sp, #8]
 8007f72:	1b13      	subs	r3, r2, r4
 8007f74:	3b15      	subs	r3, #21
 8007f76:	f023 0303 	bic.w	r3, r3, #3
 8007f7a:	3304      	adds	r3, #4
 8007f7c:	f104 0715 	add.w	r7, r4, #21
 8007f80:	42ba      	cmp	r2, r7
 8007f82:	bf38      	it	cc
 8007f84:	2304      	movcc	r3, #4
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	9b02      	ldr	r3, [sp, #8]
 8007f8a:	9103      	str	r1, [sp, #12]
 8007f8c:	428b      	cmp	r3, r1
 8007f8e:	d80c      	bhi.n	8007faa <__multiply+0x9e>
 8007f90:	2e00      	cmp	r6, #0
 8007f92:	dd03      	ble.n	8007f9c <__multiply+0x90>
 8007f94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d05b      	beq.n	8008054 <__multiply+0x148>
 8007f9c:	6106      	str	r6, [r0, #16]
 8007f9e:	b005      	add	sp, #20
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	f843 2b04 	str.w	r2, [r3], #4
 8007fa8:	e7d8      	b.n	8007f5c <__multiply+0x50>
 8007faa:	f8b1 a000 	ldrh.w	sl, [r1]
 8007fae:	f1ba 0f00 	cmp.w	sl, #0
 8007fb2:	d024      	beq.n	8007ffe <__multiply+0xf2>
 8007fb4:	f104 0e14 	add.w	lr, r4, #20
 8007fb8:	46a9      	mov	r9, r5
 8007fba:	f04f 0c00 	mov.w	ip, #0
 8007fbe:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007fc2:	f8d9 3000 	ldr.w	r3, [r9]
 8007fc6:	fa1f fb87 	uxth.w	fp, r7
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007fd0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007fd4:	f8d9 7000 	ldr.w	r7, [r9]
 8007fd8:	4463      	add	r3, ip
 8007fda:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007fde:	fb0a c70b 	mla	r7, sl, fp, ip
 8007fe2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007fec:	4572      	cmp	r2, lr
 8007fee:	f849 3b04 	str.w	r3, [r9], #4
 8007ff2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ff6:	d8e2      	bhi.n	8007fbe <__multiply+0xb2>
 8007ff8:	9b01      	ldr	r3, [sp, #4]
 8007ffa:	f845 c003 	str.w	ip, [r5, r3]
 8007ffe:	9b03      	ldr	r3, [sp, #12]
 8008000:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008004:	3104      	adds	r1, #4
 8008006:	f1b9 0f00 	cmp.w	r9, #0
 800800a:	d021      	beq.n	8008050 <__multiply+0x144>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	f104 0c14 	add.w	ip, r4, #20
 8008012:	46ae      	mov	lr, r5
 8008014:	f04f 0a00 	mov.w	sl, #0
 8008018:	f8bc b000 	ldrh.w	fp, [ip]
 800801c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008020:	fb09 770b 	mla	r7, r9, fp, r7
 8008024:	4457      	add	r7, sl
 8008026:	b29b      	uxth	r3, r3
 8008028:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800802c:	f84e 3b04 	str.w	r3, [lr], #4
 8008030:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008034:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008038:	f8be 3000 	ldrh.w	r3, [lr]
 800803c:	fb09 330a 	mla	r3, r9, sl, r3
 8008040:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008044:	4562      	cmp	r2, ip
 8008046:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800804a:	d8e5      	bhi.n	8008018 <__multiply+0x10c>
 800804c:	9f01      	ldr	r7, [sp, #4]
 800804e:	51eb      	str	r3, [r5, r7]
 8008050:	3504      	adds	r5, #4
 8008052:	e799      	b.n	8007f88 <__multiply+0x7c>
 8008054:	3e01      	subs	r6, #1
 8008056:	e79b      	b.n	8007f90 <__multiply+0x84>
 8008058:	080093a0 	.word	0x080093a0
 800805c:	080093b1 	.word	0x080093b1

08008060 <__pow5mult>:
 8008060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008064:	4615      	mov	r5, r2
 8008066:	f012 0203 	ands.w	r2, r2, #3
 800806a:	4607      	mov	r7, r0
 800806c:	460e      	mov	r6, r1
 800806e:	d007      	beq.n	8008080 <__pow5mult+0x20>
 8008070:	4c25      	ldr	r4, [pc, #148]	@ (8008108 <__pow5mult+0xa8>)
 8008072:	3a01      	subs	r2, #1
 8008074:	2300      	movs	r3, #0
 8008076:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800807a:	f7ff fe9f 	bl	8007dbc <__multadd>
 800807e:	4606      	mov	r6, r0
 8008080:	10ad      	asrs	r5, r5, #2
 8008082:	d03d      	beq.n	8008100 <__pow5mult+0xa0>
 8008084:	69fc      	ldr	r4, [r7, #28]
 8008086:	b97c      	cbnz	r4, 80080a8 <__pow5mult+0x48>
 8008088:	2010      	movs	r0, #16
 800808a:	f7ff fd7f 	bl	8007b8c <malloc>
 800808e:	4602      	mov	r2, r0
 8008090:	61f8      	str	r0, [r7, #28]
 8008092:	b928      	cbnz	r0, 80080a0 <__pow5mult+0x40>
 8008094:	4b1d      	ldr	r3, [pc, #116]	@ (800810c <__pow5mult+0xac>)
 8008096:	481e      	ldr	r0, [pc, #120]	@ (8008110 <__pow5mult+0xb0>)
 8008098:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800809c:	f000 fbdc 	bl	8008858 <__assert_func>
 80080a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80080a4:	6004      	str	r4, [r0, #0]
 80080a6:	60c4      	str	r4, [r0, #12]
 80080a8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80080ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80080b0:	b94c      	cbnz	r4, 80080c6 <__pow5mult+0x66>
 80080b2:	f240 2171 	movw	r1, #625	@ 0x271
 80080b6:	4638      	mov	r0, r7
 80080b8:	f7ff ff12 	bl	8007ee0 <__i2b>
 80080bc:	2300      	movs	r3, #0
 80080be:	f8c8 0008 	str.w	r0, [r8, #8]
 80080c2:	4604      	mov	r4, r0
 80080c4:	6003      	str	r3, [r0, #0]
 80080c6:	f04f 0900 	mov.w	r9, #0
 80080ca:	07eb      	lsls	r3, r5, #31
 80080cc:	d50a      	bpl.n	80080e4 <__pow5mult+0x84>
 80080ce:	4631      	mov	r1, r6
 80080d0:	4622      	mov	r2, r4
 80080d2:	4638      	mov	r0, r7
 80080d4:	f7ff ff1a 	bl	8007f0c <__multiply>
 80080d8:	4631      	mov	r1, r6
 80080da:	4680      	mov	r8, r0
 80080dc:	4638      	mov	r0, r7
 80080de:	f7ff fe4b 	bl	8007d78 <_Bfree>
 80080e2:	4646      	mov	r6, r8
 80080e4:	106d      	asrs	r5, r5, #1
 80080e6:	d00b      	beq.n	8008100 <__pow5mult+0xa0>
 80080e8:	6820      	ldr	r0, [r4, #0]
 80080ea:	b938      	cbnz	r0, 80080fc <__pow5mult+0x9c>
 80080ec:	4622      	mov	r2, r4
 80080ee:	4621      	mov	r1, r4
 80080f0:	4638      	mov	r0, r7
 80080f2:	f7ff ff0b 	bl	8007f0c <__multiply>
 80080f6:	6020      	str	r0, [r4, #0]
 80080f8:	f8c0 9000 	str.w	r9, [r0]
 80080fc:	4604      	mov	r4, r0
 80080fe:	e7e4      	b.n	80080ca <__pow5mult+0x6a>
 8008100:	4630      	mov	r0, r6
 8008102:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008106:	bf00      	nop
 8008108:	0800940c 	.word	0x0800940c
 800810c:	08009331 	.word	0x08009331
 8008110:	080093b1 	.word	0x080093b1

08008114 <__lshift>:
 8008114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008118:	460c      	mov	r4, r1
 800811a:	6849      	ldr	r1, [r1, #4]
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008122:	68a3      	ldr	r3, [r4, #8]
 8008124:	4607      	mov	r7, r0
 8008126:	4691      	mov	r9, r2
 8008128:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800812c:	f108 0601 	add.w	r6, r8, #1
 8008130:	42b3      	cmp	r3, r6
 8008132:	db0b      	blt.n	800814c <__lshift+0x38>
 8008134:	4638      	mov	r0, r7
 8008136:	f7ff fddf 	bl	8007cf8 <_Balloc>
 800813a:	4605      	mov	r5, r0
 800813c:	b948      	cbnz	r0, 8008152 <__lshift+0x3e>
 800813e:	4602      	mov	r2, r0
 8008140:	4b28      	ldr	r3, [pc, #160]	@ (80081e4 <__lshift+0xd0>)
 8008142:	4829      	ldr	r0, [pc, #164]	@ (80081e8 <__lshift+0xd4>)
 8008144:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008148:	f000 fb86 	bl	8008858 <__assert_func>
 800814c:	3101      	adds	r1, #1
 800814e:	005b      	lsls	r3, r3, #1
 8008150:	e7ee      	b.n	8008130 <__lshift+0x1c>
 8008152:	2300      	movs	r3, #0
 8008154:	f100 0114 	add.w	r1, r0, #20
 8008158:	f100 0210 	add.w	r2, r0, #16
 800815c:	4618      	mov	r0, r3
 800815e:	4553      	cmp	r3, sl
 8008160:	db33      	blt.n	80081ca <__lshift+0xb6>
 8008162:	6920      	ldr	r0, [r4, #16]
 8008164:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008168:	f104 0314 	add.w	r3, r4, #20
 800816c:	f019 091f 	ands.w	r9, r9, #31
 8008170:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008174:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008178:	d02b      	beq.n	80081d2 <__lshift+0xbe>
 800817a:	f1c9 0e20 	rsb	lr, r9, #32
 800817e:	468a      	mov	sl, r1
 8008180:	2200      	movs	r2, #0
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	fa00 f009 	lsl.w	r0, r0, r9
 8008188:	4310      	orrs	r0, r2
 800818a:	f84a 0b04 	str.w	r0, [sl], #4
 800818e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008192:	459c      	cmp	ip, r3
 8008194:	fa22 f20e 	lsr.w	r2, r2, lr
 8008198:	d8f3      	bhi.n	8008182 <__lshift+0x6e>
 800819a:	ebac 0304 	sub.w	r3, ip, r4
 800819e:	3b15      	subs	r3, #21
 80081a0:	f023 0303 	bic.w	r3, r3, #3
 80081a4:	3304      	adds	r3, #4
 80081a6:	f104 0015 	add.w	r0, r4, #21
 80081aa:	4584      	cmp	ip, r0
 80081ac:	bf38      	it	cc
 80081ae:	2304      	movcc	r3, #4
 80081b0:	50ca      	str	r2, [r1, r3]
 80081b2:	b10a      	cbz	r2, 80081b8 <__lshift+0xa4>
 80081b4:	f108 0602 	add.w	r6, r8, #2
 80081b8:	3e01      	subs	r6, #1
 80081ba:	4638      	mov	r0, r7
 80081bc:	612e      	str	r6, [r5, #16]
 80081be:	4621      	mov	r1, r4
 80081c0:	f7ff fdda 	bl	8007d78 <_Bfree>
 80081c4:	4628      	mov	r0, r5
 80081c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80081ce:	3301      	adds	r3, #1
 80081d0:	e7c5      	b.n	800815e <__lshift+0x4a>
 80081d2:	3904      	subs	r1, #4
 80081d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80081dc:	459c      	cmp	ip, r3
 80081de:	d8f9      	bhi.n	80081d4 <__lshift+0xc0>
 80081e0:	e7ea      	b.n	80081b8 <__lshift+0xa4>
 80081e2:	bf00      	nop
 80081e4:	080093a0 	.word	0x080093a0
 80081e8:	080093b1 	.word	0x080093b1

080081ec <__mcmp>:
 80081ec:	690a      	ldr	r2, [r1, #16]
 80081ee:	4603      	mov	r3, r0
 80081f0:	6900      	ldr	r0, [r0, #16]
 80081f2:	1a80      	subs	r0, r0, r2
 80081f4:	b530      	push	{r4, r5, lr}
 80081f6:	d10e      	bne.n	8008216 <__mcmp+0x2a>
 80081f8:	3314      	adds	r3, #20
 80081fa:	3114      	adds	r1, #20
 80081fc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008200:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008204:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008208:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800820c:	4295      	cmp	r5, r2
 800820e:	d003      	beq.n	8008218 <__mcmp+0x2c>
 8008210:	d205      	bcs.n	800821e <__mcmp+0x32>
 8008212:	f04f 30ff 	mov.w	r0, #4294967295
 8008216:	bd30      	pop	{r4, r5, pc}
 8008218:	42a3      	cmp	r3, r4
 800821a:	d3f3      	bcc.n	8008204 <__mcmp+0x18>
 800821c:	e7fb      	b.n	8008216 <__mcmp+0x2a>
 800821e:	2001      	movs	r0, #1
 8008220:	e7f9      	b.n	8008216 <__mcmp+0x2a>
	...

08008224 <__mdiff>:
 8008224:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	4689      	mov	r9, r1
 800822a:	4606      	mov	r6, r0
 800822c:	4611      	mov	r1, r2
 800822e:	4648      	mov	r0, r9
 8008230:	4614      	mov	r4, r2
 8008232:	f7ff ffdb 	bl	80081ec <__mcmp>
 8008236:	1e05      	subs	r5, r0, #0
 8008238:	d112      	bne.n	8008260 <__mdiff+0x3c>
 800823a:	4629      	mov	r1, r5
 800823c:	4630      	mov	r0, r6
 800823e:	f7ff fd5b 	bl	8007cf8 <_Balloc>
 8008242:	4602      	mov	r2, r0
 8008244:	b928      	cbnz	r0, 8008252 <__mdiff+0x2e>
 8008246:	4b3f      	ldr	r3, [pc, #252]	@ (8008344 <__mdiff+0x120>)
 8008248:	f240 2137 	movw	r1, #567	@ 0x237
 800824c:	483e      	ldr	r0, [pc, #248]	@ (8008348 <__mdiff+0x124>)
 800824e:	f000 fb03 	bl	8008858 <__assert_func>
 8008252:	2301      	movs	r3, #1
 8008254:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008258:	4610      	mov	r0, r2
 800825a:	b003      	add	sp, #12
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	bfbc      	itt	lt
 8008262:	464b      	movlt	r3, r9
 8008264:	46a1      	movlt	r9, r4
 8008266:	4630      	mov	r0, r6
 8008268:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800826c:	bfba      	itte	lt
 800826e:	461c      	movlt	r4, r3
 8008270:	2501      	movlt	r5, #1
 8008272:	2500      	movge	r5, #0
 8008274:	f7ff fd40 	bl	8007cf8 <_Balloc>
 8008278:	4602      	mov	r2, r0
 800827a:	b918      	cbnz	r0, 8008284 <__mdiff+0x60>
 800827c:	4b31      	ldr	r3, [pc, #196]	@ (8008344 <__mdiff+0x120>)
 800827e:	f240 2145 	movw	r1, #581	@ 0x245
 8008282:	e7e3      	b.n	800824c <__mdiff+0x28>
 8008284:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008288:	6926      	ldr	r6, [r4, #16]
 800828a:	60c5      	str	r5, [r0, #12]
 800828c:	f109 0310 	add.w	r3, r9, #16
 8008290:	f109 0514 	add.w	r5, r9, #20
 8008294:	f104 0e14 	add.w	lr, r4, #20
 8008298:	f100 0b14 	add.w	fp, r0, #20
 800829c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80082a0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80082a4:	9301      	str	r3, [sp, #4]
 80082a6:	46d9      	mov	r9, fp
 80082a8:	f04f 0c00 	mov.w	ip, #0
 80082ac:	9b01      	ldr	r3, [sp, #4]
 80082ae:	f85e 0b04 	ldr.w	r0, [lr], #4
 80082b2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80082b6:	9301      	str	r3, [sp, #4]
 80082b8:	fa1f f38a 	uxth.w	r3, sl
 80082bc:	4619      	mov	r1, r3
 80082be:	b283      	uxth	r3, r0
 80082c0:	1acb      	subs	r3, r1, r3
 80082c2:	0c00      	lsrs	r0, r0, #16
 80082c4:	4463      	add	r3, ip
 80082c6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80082ca:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80082d4:	4576      	cmp	r6, lr
 80082d6:	f849 3b04 	str.w	r3, [r9], #4
 80082da:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082de:	d8e5      	bhi.n	80082ac <__mdiff+0x88>
 80082e0:	1b33      	subs	r3, r6, r4
 80082e2:	3b15      	subs	r3, #21
 80082e4:	f023 0303 	bic.w	r3, r3, #3
 80082e8:	3415      	adds	r4, #21
 80082ea:	3304      	adds	r3, #4
 80082ec:	42a6      	cmp	r6, r4
 80082ee:	bf38      	it	cc
 80082f0:	2304      	movcc	r3, #4
 80082f2:	441d      	add	r5, r3
 80082f4:	445b      	add	r3, fp
 80082f6:	461e      	mov	r6, r3
 80082f8:	462c      	mov	r4, r5
 80082fa:	4544      	cmp	r4, r8
 80082fc:	d30e      	bcc.n	800831c <__mdiff+0xf8>
 80082fe:	f108 0103 	add.w	r1, r8, #3
 8008302:	1b49      	subs	r1, r1, r5
 8008304:	f021 0103 	bic.w	r1, r1, #3
 8008308:	3d03      	subs	r5, #3
 800830a:	45a8      	cmp	r8, r5
 800830c:	bf38      	it	cc
 800830e:	2100      	movcc	r1, #0
 8008310:	440b      	add	r3, r1
 8008312:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008316:	b191      	cbz	r1, 800833e <__mdiff+0x11a>
 8008318:	6117      	str	r7, [r2, #16]
 800831a:	e79d      	b.n	8008258 <__mdiff+0x34>
 800831c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008320:	46e6      	mov	lr, ip
 8008322:	0c08      	lsrs	r0, r1, #16
 8008324:	fa1c fc81 	uxtah	ip, ip, r1
 8008328:	4471      	add	r1, lr
 800832a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800832e:	b289      	uxth	r1, r1
 8008330:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008334:	f846 1b04 	str.w	r1, [r6], #4
 8008338:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800833c:	e7dd      	b.n	80082fa <__mdiff+0xd6>
 800833e:	3f01      	subs	r7, #1
 8008340:	e7e7      	b.n	8008312 <__mdiff+0xee>
 8008342:	bf00      	nop
 8008344:	080093a0 	.word	0x080093a0
 8008348:	080093b1 	.word	0x080093b1

0800834c <__d2b>:
 800834c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008350:	460f      	mov	r7, r1
 8008352:	2101      	movs	r1, #1
 8008354:	ec59 8b10 	vmov	r8, r9, d0
 8008358:	4616      	mov	r6, r2
 800835a:	f7ff fccd 	bl	8007cf8 <_Balloc>
 800835e:	4604      	mov	r4, r0
 8008360:	b930      	cbnz	r0, 8008370 <__d2b+0x24>
 8008362:	4602      	mov	r2, r0
 8008364:	4b23      	ldr	r3, [pc, #140]	@ (80083f4 <__d2b+0xa8>)
 8008366:	4824      	ldr	r0, [pc, #144]	@ (80083f8 <__d2b+0xac>)
 8008368:	f240 310f 	movw	r1, #783	@ 0x30f
 800836c:	f000 fa74 	bl	8008858 <__assert_func>
 8008370:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008374:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008378:	b10d      	cbz	r5, 800837e <__d2b+0x32>
 800837a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800837e:	9301      	str	r3, [sp, #4]
 8008380:	f1b8 0300 	subs.w	r3, r8, #0
 8008384:	d023      	beq.n	80083ce <__d2b+0x82>
 8008386:	4668      	mov	r0, sp
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	f7ff fd7c 	bl	8007e86 <__lo0bits>
 800838e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008392:	b1d0      	cbz	r0, 80083ca <__d2b+0x7e>
 8008394:	f1c0 0320 	rsb	r3, r0, #32
 8008398:	fa02 f303 	lsl.w	r3, r2, r3
 800839c:	430b      	orrs	r3, r1
 800839e:	40c2      	lsrs	r2, r0
 80083a0:	6163      	str	r3, [r4, #20]
 80083a2:	9201      	str	r2, [sp, #4]
 80083a4:	9b01      	ldr	r3, [sp, #4]
 80083a6:	61a3      	str	r3, [r4, #24]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bf0c      	ite	eq
 80083ac:	2201      	moveq	r2, #1
 80083ae:	2202      	movne	r2, #2
 80083b0:	6122      	str	r2, [r4, #16]
 80083b2:	b1a5      	cbz	r5, 80083de <__d2b+0x92>
 80083b4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083b8:	4405      	add	r5, r0
 80083ba:	603d      	str	r5, [r7, #0]
 80083bc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80083c0:	6030      	str	r0, [r6, #0]
 80083c2:	4620      	mov	r0, r4
 80083c4:	b003      	add	sp, #12
 80083c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083ca:	6161      	str	r1, [r4, #20]
 80083cc:	e7ea      	b.n	80083a4 <__d2b+0x58>
 80083ce:	a801      	add	r0, sp, #4
 80083d0:	f7ff fd59 	bl	8007e86 <__lo0bits>
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	6163      	str	r3, [r4, #20]
 80083d8:	3020      	adds	r0, #32
 80083da:	2201      	movs	r2, #1
 80083dc:	e7e8      	b.n	80083b0 <__d2b+0x64>
 80083de:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80083e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80083e6:	6038      	str	r0, [r7, #0]
 80083e8:	6918      	ldr	r0, [r3, #16]
 80083ea:	f7ff fd2d 	bl	8007e48 <__hi0bits>
 80083ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80083f2:	e7e5      	b.n	80083c0 <__d2b+0x74>
 80083f4:	080093a0 	.word	0x080093a0
 80083f8:	080093b1 	.word	0x080093b1

080083fc <__ssputs_r>:
 80083fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008400:	688e      	ldr	r6, [r1, #8]
 8008402:	461f      	mov	r7, r3
 8008404:	42be      	cmp	r6, r7
 8008406:	680b      	ldr	r3, [r1, #0]
 8008408:	4682      	mov	sl, r0
 800840a:	460c      	mov	r4, r1
 800840c:	4690      	mov	r8, r2
 800840e:	d82d      	bhi.n	800846c <__ssputs_r+0x70>
 8008410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008418:	d026      	beq.n	8008468 <__ssputs_r+0x6c>
 800841a:	6965      	ldr	r5, [r4, #20]
 800841c:	6909      	ldr	r1, [r1, #16]
 800841e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008422:	eba3 0901 	sub.w	r9, r3, r1
 8008426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800842a:	1c7b      	adds	r3, r7, #1
 800842c:	444b      	add	r3, r9
 800842e:	106d      	asrs	r5, r5, #1
 8008430:	429d      	cmp	r5, r3
 8008432:	bf38      	it	cc
 8008434:	461d      	movcc	r5, r3
 8008436:	0553      	lsls	r3, r2, #21
 8008438:	d527      	bpl.n	800848a <__ssputs_r+0x8e>
 800843a:	4629      	mov	r1, r5
 800843c:	f7ff fbd0 	bl	8007be0 <_malloc_r>
 8008440:	4606      	mov	r6, r0
 8008442:	b360      	cbz	r0, 800849e <__ssputs_r+0xa2>
 8008444:	6921      	ldr	r1, [r4, #16]
 8008446:	464a      	mov	r2, r9
 8008448:	f7fe fcf9 	bl	8006e3e <memcpy>
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008456:	81a3      	strh	r3, [r4, #12]
 8008458:	6126      	str	r6, [r4, #16]
 800845a:	6165      	str	r5, [r4, #20]
 800845c:	444e      	add	r6, r9
 800845e:	eba5 0509 	sub.w	r5, r5, r9
 8008462:	6026      	str	r6, [r4, #0]
 8008464:	60a5      	str	r5, [r4, #8]
 8008466:	463e      	mov	r6, r7
 8008468:	42be      	cmp	r6, r7
 800846a:	d900      	bls.n	800846e <__ssputs_r+0x72>
 800846c:	463e      	mov	r6, r7
 800846e:	6820      	ldr	r0, [r4, #0]
 8008470:	4632      	mov	r2, r6
 8008472:	4641      	mov	r1, r8
 8008474:	f000 f9c6 	bl	8008804 <memmove>
 8008478:	68a3      	ldr	r3, [r4, #8]
 800847a:	1b9b      	subs	r3, r3, r6
 800847c:	60a3      	str	r3, [r4, #8]
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	4433      	add	r3, r6
 8008482:	6023      	str	r3, [r4, #0]
 8008484:	2000      	movs	r0, #0
 8008486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848a:	462a      	mov	r2, r5
 800848c:	f000 fa28 	bl	80088e0 <_realloc_r>
 8008490:	4606      	mov	r6, r0
 8008492:	2800      	cmp	r0, #0
 8008494:	d1e0      	bne.n	8008458 <__ssputs_r+0x5c>
 8008496:	6921      	ldr	r1, [r4, #16]
 8008498:	4650      	mov	r0, sl
 800849a:	f7ff fb2d 	bl	8007af8 <_free_r>
 800849e:	230c      	movs	r3, #12
 80084a0:	f8ca 3000 	str.w	r3, [sl]
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295
 80084b0:	e7e9      	b.n	8008486 <__ssputs_r+0x8a>
	...

080084b4 <_svfiprintf_r>:
 80084b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	4698      	mov	r8, r3
 80084ba:	898b      	ldrh	r3, [r1, #12]
 80084bc:	061b      	lsls	r3, r3, #24
 80084be:	b09d      	sub	sp, #116	@ 0x74
 80084c0:	4607      	mov	r7, r0
 80084c2:	460d      	mov	r5, r1
 80084c4:	4614      	mov	r4, r2
 80084c6:	d510      	bpl.n	80084ea <_svfiprintf_r+0x36>
 80084c8:	690b      	ldr	r3, [r1, #16]
 80084ca:	b973      	cbnz	r3, 80084ea <_svfiprintf_r+0x36>
 80084cc:	2140      	movs	r1, #64	@ 0x40
 80084ce:	f7ff fb87 	bl	8007be0 <_malloc_r>
 80084d2:	6028      	str	r0, [r5, #0]
 80084d4:	6128      	str	r0, [r5, #16]
 80084d6:	b930      	cbnz	r0, 80084e6 <_svfiprintf_r+0x32>
 80084d8:	230c      	movs	r3, #12
 80084da:	603b      	str	r3, [r7, #0]
 80084dc:	f04f 30ff 	mov.w	r0, #4294967295
 80084e0:	b01d      	add	sp, #116	@ 0x74
 80084e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e6:	2340      	movs	r3, #64	@ 0x40
 80084e8:	616b      	str	r3, [r5, #20]
 80084ea:	2300      	movs	r3, #0
 80084ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80084ee:	2320      	movs	r3, #32
 80084f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80084f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80084f8:	2330      	movs	r3, #48	@ 0x30
 80084fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008698 <_svfiprintf_r+0x1e4>
 80084fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008502:	f04f 0901 	mov.w	r9, #1
 8008506:	4623      	mov	r3, r4
 8008508:	469a      	mov	sl, r3
 800850a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800850e:	b10a      	cbz	r2, 8008514 <_svfiprintf_r+0x60>
 8008510:	2a25      	cmp	r2, #37	@ 0x25
 8008512:	d1f9      	bne.n	8008508 <_svfiprintf_r+0x54>
 8008514:	ebba 0b04 	subs.w	fp, sl, r4
 8008518:	d00b      	beq.n	8008532 <_svfiprintf_r+0x7e>
 800851a:	465b      	mov	r3, fp
 800851c:	4622      	mov	r2, r4
 800851e:	4629      	mov	r1, r5
 8008520:	4638      	mov	r0, r7
 8008522:	f7ff ff6b 	bl	80083fc <__ssputs_r>
 8008526:	3001      	adds	r0, #1
 8008528:	f000 80a7 	beq.w	800867a <_svfiprintf_r+0x1c6>
 800852c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800852e:	445a      	add	r2, fp
 8008530:	9209      	str	r2, [sp, #36]	@ 0x24
 8008532:	f89a 3000 	ldrb.w	r3, [sl]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 809f 	beq.w	800867a <_svfiprintf_r+0x1c6>
 800853c:	2300      	movs	r3, #0
 800853e:	f04f 32ff 	mov.w	r2, #4294967295
 8008542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008546:	f10a 0a01 	add.w	sl, sl, #1
 800854a:	9304      	str	r3, [sp, #16]
 800854c:	9307      	str	r3, [sp, #28]
 800854e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008552:	931a      	str	r3, [sp, #104]	@ 0x68
 8008554:	4654      	mov	r4, sl
 8008556:	2205      	movs	r2, #5
 8008558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800855c:	484e      	ldr	r0, [pc, #312]	@ (8008698 <_svfiprintf_r+0x1e4>)
 800855e:	f7f7 fe4f 	bl	8000200 <memchr>
 8008562:	9a04      	ldr	r2, [sp, #16]
 8008564:	b9d8      	cbnz	r0, 800859e <_svfiprintf_r+0xea>
 8008566:	06d0      	lsls	r0, r2, #27
 8008568:	bf44      	itt	mi
 800856a:	2320      	movmi	r3, #32
 800856c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008570:	0711      	lsls	r1, r2, #28
 8008572:	bf44      	itt	mi
 8008574:	232b      	movmi	r3, #43	@ 0x2b
 8008576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800857a:	f89a 3000 	ldrb.w	r3, [sl]
 800857e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008580:	d015      	beq.n	80085ae <_svfiprintf_r+0xfa>
 8008582:	9a07      	ldr	r2, [sp, #28]
 8008584:	4654      	mov	r4, sl
 8008586:	2000      	movs	r0, #0
 8008588:	f04f 0c0a 	mov.w	ip, #10
 800858c:	4621      	mov	r1, r4
 800858e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008592:	3b30      	subs	r3, #48	@ 0x30
 8008594:	2b09      	cmp	r3, #9
 8008596:	d94b      	bls.n	8008630 <_svfiprintf_r+0x17c>
 8008598:	b1b0      	cbz	r0, 80085c8 <_svfiprintf_r+0x114>
 800859a:	9207      	str	r2, [sp, #28]
 800859c:	e014      	b.n	80085c8 <_svfiprintf_r+0x114>
 800859e:	eba0 0308 	sub.w	r3, r0, r8
 80085a2:	fa09 f303 	lsl.w	r3, r9, r3
 80085a6:	4313      	orrs	r3, r2
 80085a8:	9304      	str	r3, [sp, #16]
 80085aa:	46a2      	mov	sl, r4
 80085ac:	e7d2      	b.n	8008554 <_svfiprintf_r+0xa0>
 80085ae:	9b03      	ldr	r3, [sp, #12]
 80085b0:	1d19      	adds	r1, r3, #4
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	9103      	str	r1, [sp, #12]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	bfbb      	ittet	lt
 80085ba:	425b      	neglt	r3, r3
 80085bc:	f042 0202 	orrlt.w	r2, r2, #2
 80085c0:	9307      	strge	r3, [sp, #28]
 80085c2:	9307      	strlt	r3, [sp, #28]
 80085c4:	bfb8      	it	lt
 80085c6:	9204      	strlt	r2, [sp, #16]
 80085c8:	7823      	ldrb	r3, [r4, #0]
 80085ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80085cc:	d10a      	bne.n	80085e4 <_svfiprintf_r+0x130>
 80085ce:	7863      	ldrb	r3, [r4, #1]
 80085d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80085d2:	d132      	bne.n	800863a <_svfiprintf_r+0x186>
 80085d4:	9b03      	ldr	r3, [sp, #12]
 80085d6:	1d1a      	adds	r2, r3, #4
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	9203      	str	r2, [sp, #12]
 80085dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80085e0:	3402      	adds	r4, #2
 80085e2:	9305      	str	r3, [sp, #20]
 80085e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80086a8 <_svfiprintf_r+0x1f4>
 80085e8:	7821      	ldrb	r1, [r4, #0]
 80085ea:	2203      	movs	r2, #3
 80085ec:	4650      	mov	r0, sl
 80085ee:	f7f7 fe07 	bl	8000200 <memchr>
 80085f2:	b138      	cbz	r0, 8008604 <_svfiprintf_r+0x150>
 80085f4:	9b04      	ldr	r3, [sp, #16]
 80085f6:	eba0 000a 	sub.w	r0, r0, sl
 80085fa:	2240      	movs	r2, #64	@ 0x40
 80085fc:	4082      	lsls	r2, r0
 80085fe:	4313      	orrs	r3, r2
 8008600:	3401      	adds	r4, #1
 8008602:	9304      	str	r3, [sp, #16]
 8008604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008608:	4824      	ldr	r0, [pc, #144]	@ (800869c <_svfiprintf_r+0x1e8>)
 800860a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800860e:	2206      	movs	r2, #6
 8008610:	f7f7 fdf6 	bl	8000200 <memchr>
 8008614:	2800      	cmp	r0, #0
 8008616:	d036      	beq.n	8008686 <_svfiprintf_r+0x1d2>
 8008618:	4b21      	ldr	r3, [pc, #132]	@ (80086a0 <_svfiprintf_r+0x1ec>)
 800861a:	bb1b      	cbnz	r3, 8008664 <_svfiprintf_r+0x1b0>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	3307      	adds	r3, #7
 8008620:	f023 0307 	bic.w	r3, r3, #7
 8008624:	3308      	adds	r3, #8
 8008626:	9303      	str	r3, [sp, #12]
 8008628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862a:	4433      	add	r3, r6
 800862c:	9309      	str	r3, [sp, #36]	@ 0x24
 800862e:	e76a      	b.n	8008506 <_svfiprintf_r+0x52>
 8008630:	fb0c 3202 	mla	r2, ip, r2, r3
 8008634:	460c      	mov	r4, r1
 8008636:	2001      	movs	r0, #1
 8008638:	e7a8      	b.n	800858c <_svfiprintf_r+0xd8>
 800863a:	2300      	movs	r3, #0
 800863c:	3401      	adds	r4, #1
 800863e:	9305      	str	r3, [sp, #20]
 8008640:	4619      	mov	r1, r3
 8008642:	f04f 0c0a 	mov.w	ip, #10
 8008646:	4620      	mov	r0, r4
 8008648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800864c:	3a30      	subs	r2, #48	@ 0x30
 800864e:	2a09      	cmp	r2, #9
 8008650:	d903      	bls.n	800865a <_svfiprintf_r+0x1a6>
 8008652:	2b00      	cmp	r3, #0
 8008654:	d0c6      	beq.n	80085e4 <_svfiprintf_r+0x130>
 8008656:	9105      	str	r1, [sp, #20]
 8008658:	e7c4      	b.n	80085e4 <_svfiprintf_r+0x130>
 800865a:	fb0c 2101 	mla	r1, ip, r1, r2
 800865e:	4604      	mov	r4, r0
 8008660:	2301      	movs	r3, #1
 8008662:	e7f0      	b.n	8008646 <_svfiprintf_r+0x192>
 8008664:	ab03      	add	r3, sp, #12
 8008666:	9300      	str	r3, [sp, #0]
 8008668:	462a      	mov	r2, r5
 800866a:	4b0e      	ldr	r3, [pc, #56]	@ (80086a4 <_svfiprintf_r+0x1f0>)
 800866c:	a904      	add	r1, sp, #16
 800866e:	4638      	mov	r0, r7
 8008670:	f7fd fe88 	bl	8006384 <_printf_float>
 8008674:	1c42      	adds	r2, r0, #1
 8008676:	4606      	mov	r6, r0
 8008678:	d1d6      	bne.n	8008628 <_svfiprintf_r+0x174>
 800867a:	89ab      	ldrh	r3, [r5, #12]
 800867c:	065b      	lsls	r3, r3, #25
 800867e:	f53f af2d 	bmi.w	80084dc <_svfiprintf_r+0x28>
 8008682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008684:	e72c      	b.n	80084e0 <_svfiprintf_r+0x2c>
 8008686:	ab03      	add	r3, sp, #12
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	462a      	mov	r2, r5
 800868c:	4b05      	ldr	r3, [pc, #20]	@ (80086a4 <_svfiprintf_r+0x1f0>)
 800868e:	a904      	add	r1, sp, #16
 8008690:	4638      	mov	r0, r7
 8008692:	f7fe f90f 	bl	80068b4 <_printf_i>
 8008696:	e7ed      	b.n	8008674 <_svfiprintf_r+0x1c0>
 8008698:	08009508 	.word	0x08009508
 800869c:	08009512 	.word	0x08009512
 80086a0:	08006385 	.word	0x08006385
 80086a4:	080083fd 	.word	0x080083fd
 80086a8:	0800950e 	.word	0x0800950e

080086ac <__sflush_r>:
 80086ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	0716      	lsls	r6, r2, #28
 80086b6:	4605      	mov	r5, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	d454      	bmi.n	8008766 <__sflush_r+0xba>
 80086bc:	684b      	ldr	r3, [r1, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc02      	bgt.n	80086c8 <__sflush_r+0x1c>
 80086c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd48      	ble.n	800875a <__sflush_r+0xae>
 80086c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	d045      	beq.n	800875a <__sflush_r+0xae>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086d4:	682f      	ldr	r7, [r5, #0]
 80086d6:	6a21      	ldr	r1, [r4, #32]
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	d030      	beq.n	800873e <__sflush_r+0x92>
 80086dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	0759      	lsls	r1, r3, #29
 80086e2:	d505      	bpl.n	80086f0 <__sflush_r+0x44>
 80086e4:	6863      	ldr	r3, [r4, #4]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086ea:	b10b      	cbz	r3, 80086f0 <__sflush_r+0x44>
 80086ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	2300      	movs	r3, #0
 80086f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086f4:	6a21      	ldr	r1, [r4, #32]
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b0      	blx	r6
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	d106      	bne.n	800870e <__sflush_r+0x62>
 8008700:	6829      	ldr	r1, [r5, #0]
 8008702:	291d      	cmp	r1, #29
 8008704:	d82b      	bhi.n	800875e <__sflush_r+0xb2>
 8008706:	4a2a      	ldr	r2, [pc, #168]	@ (80087b0 <__sflush_r+0x104>)
 8008708:	410a      	asrs	r2, r1
 800870a:	07d6      	lsls	r6, r2, #31
 800870c:	d427      	bmi.n	800875e <__sflush_r+0xb2>
 800870e:	2200      	movs	r2, #0
 8008710:	6062      	str	r2, [r4, #4]
 8008712:	04d9      	lsls	r1, r3, #19
 8008714:	6922      	ldr	r2, [r4, #16]
 8008716:	6022      	str	r2, [r4, #0]
 8008718:	d504      	bpl.n	8008724 <__sflush_r+0x78>
 800871a:	1c42      	adds	r2, r0, #1
 800871c:	d101      	bne.n	8008722 <__sflush_r+0x76>
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	b903      	cbnz	r3, 8008724 <__sflush_r+0x78>
 8008722:	6560      	str	r0, [r4, #84]	@ 0x54
 8008724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008726:	602f      	str	r7, [r5, #0]
 8008728:	b1b9      	cbz	r1, 800875a <__sflush_r+0xae>
 800872a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800872e:	4299      	cmp	r1, r3
 8008730:	d002      	beq.n	8008738 <__sflush_r+0x8c>
 8008732:	4628      	mov	r0, r5
 8008734:	f7ff f9e0 	bl	8007af8 <_free_r>
 8008738:	2300      	movs	r3, #0
 800873a:	6363      	str	r3, [r4, #52]	@ 0x34
 800873c:	e00d      	b.n	800875a <__sflush_r+0xae>
 800873e:	2301      	movs	r3, #1
 8008740:	4628      	mov	r0, r5
 8008742:	47b0      	blx	r6
 8008744:	4602      	mov	r2, r0
 8008746:	1c50      	adds	r0, r2, #1
 8008748:	d1c9      	bne.n	80086de <__sflush_r+0x32>
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0c6      	beq.n	80086de <__sflush_r+0x32>
 8008750:	2b1d      	cmp	r3, #29
 8008752:	d001      	beq.n	8008758 <__sflush_r+0xac>
 8008754:	2b16      	cmp	r3, #22
 8008756:	d11e      	bne.n	8008796 <__sflush_r+0xea>
 8008758:	602f      	str	r7, [r5, #0]
 800875a:	2000      	movs	r0, #0
 800875c:	e022      	b.n	80087a4 <__sflush_r+0xf8>
 800875e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008762:	b21b      	sxth	r3, r3
 8008764:	e01b      	b.n	800879e <__sflush_r+0xf2>
 8008766:	690f      	ldr	r7, [r1, #16]
 8008768:	2f00      	cmp	r7, #0
 800876a:	d0f6      	beq.n	800875a <__sflush_r+0xae>
 800876c:	0793      	lsls	r3, r2, #30
 800876e:	680e      	ldr	r6, [r1, #0]
 8008770:	bf08      	it	eq
 8008772:	694b      	ldreq	r3, [r1, #20]
 8008774:	600f      	str	r7, [r1, #0]
 8008776:	bf18      	it	ne
 8008778:	2300      	movne	r3, #0
 800877a:	eba6 0807 	sub.w	r8, r6, r7
 800877e:	608b      	str	r3, [r1, #8]
 8008780:	f1b8 0f00 	cmp.w	r8, #0
 8008784:	dde9      	ble.n	800875a <__sflush_r+0xae>
 8008786:	6a21      	ldr	r1, [r4, #32]
 8008788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800878a:	4643      	mov	r3, r8
 800878c:	463a      	mov	r2, r7
 800878e:	4628      	mov	r0, r5
 8008790:	47b0      	blx	r6
 8008792:	2800      	cmp	r0, #0
 8008794:	dc08      	bgt.n	80087a8 <__sflush_r+0xfc>
 8008796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800879a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a8:	4407      	add	r7, r0
 80087aa:	eba8 0800 	sub.w	r8, r8, r0
 80087ae:	e7e7      	b.n	8008780 <__sflush_r+0xd4>
 80087b0:	dfbffffe 	.word	0xdfbffffe

080087b4 <_fflush_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	690b      	ldr	r3, [r1, #16]
 80087b8:	4605      	mov	r5, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	b913      	cbnz	r3, 80087c4 <_fflush_r+0x10>
 80087be:	2500      	movs	r5, #0
 80087c0:	4628      	mov	r0, r5
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	b118      	cbz	r0, 80087ce <_fflush_r+0x1a>
 80087c6:	6a03      	ldr	r3, [r0, #32]
 80087c8:	b90b      	cbnz	r3, 80087ce <_fflush_r+0x1a>
 80087ca:	f7fe fa1f 	bl	8006c0c <__sinit>
 80087ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0f3      	beq.n	80087be <_fflush_r+0xa>
 80087d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087d8:	07d0      	lsls	r0, r2, #31
 80087da:	d404      	bmi.n	80087e6 <_fflush_r+0x32>
 80087dc:	0599      	lsls	r1, r3, #22
 80087de:	d402      	bmi.n	80087e6 <_fflush_r+0x32>
 80087e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087e2:	f7fe fb2a 	bl	8006e3a <__retarget_lock_acquire_recursive>
 80087e6:	4628      	mov	r0, r5
 80087e8:	4621      	mov	r1, r4
 80087ea:	f7ff ff5f 	bl	80086ac <__sflush_r>
 80087ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087f0:	07da      	lsls	r2, r3, #31
 80087f2:	4605      	mov	r5, r0
 80087f4:	d4e4      	bmi.n	80087c0 <_fflush_r+0xc>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	059b      	lsls	r3, r3, #22
 80087fa:	d4e1      	bmi.n	80087c0 <_fflush_r+0xc>
 80087fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087fe:	f7fe fb1d 	bl	8006e3c <__retarget_lock_release_recursive>
 8008802:	e7dd      	b.n	80087c0 <_fflush_r+0xc>

08008804 <memmove>:
 8008804:	4288      	cmp	r0, r1
 8008806:	b510      	push	{r4, lr}
 8008808:	eb01 0402 	add.w	r4, r1, r2
 800880c:	d902      	bls.n	8008814 <memmove+0x10>
 800880e:	4284      	cmp	r4, r0
 8008810:	4623      	mov	r3, r4
 8008812:	d807      	bhi.n	8008824 <memmove+0x20>
 8008814:	1e43      	subs	r3, r0, #1
 8008816:	42a1      	cmp	r1, r4
 8008818:	d008      	beq.n	800882c <memmove+0x28>
 800881a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800881e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008822:	e7f8      	b.n	8008816 <memmove+0x12>
 8008824:	4402      	add	r2, r0
 8008826:	4601      	mov	r1, r0
 8008828:	428a      	cmp	r2, r1
 800882a:	d100      	bne.n	800882e <memmove+0x2a>
 800882c:	bd10      	pop	{r4, pc}
 800882e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008832:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008836:	e7f7      	b.n	8008828 <memmove+0x24>

08008838 <_sbrk_r>:
 8008838:	b538      	push	{r3, r4, r5, lr}
 800883a:	4d06      	ldr	r5, [pc, #24]	@ (8008854 <_sbrk_r+0x1c>)
 800883c:	2300      	movs	r3, #0
 800883e:	4604      	mov	r4, r0
 8008840:	4608      	mov	r0, r1
 8008842:	602b      	str	r3, [r5, #0]
 8008844:	f7f9 fb02 	bl	8001e4c <_sbrk>
 8008848:	1c43      	adds	r3, r0, #1
 800884a:	d102      	bne.n	8008852 <_sbrk_r+0x1a>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	b103      	cbz	r3, 8008852 <_sbrk_r+0x1a>
 8008850:	6023      	str	r3, [r4, #0]
 8008852:	bd38      	pop	{r3, r4, r5, pc}
 8008854:	20000518 	.word	0x20000518

08008858 <__assert_func>:
 8008858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800885a:	4614      	mov	r4, r2
 800885c:	461a      	mov	r2, r3
 800885e:	4b09      	ldr	r3, [pc, #36]	@ (8008884 <__assert_func+0x2c>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4605      	mov	r5, r0
 8008864:	68d8      	ldr	r0, [r3, #12]
 8008866:	b954      	cbnz	r4, 800887e <__assert_func+0x26>
 8008868:	4b07      	ldr	r3, [pc, #28]	@ (8008888 <__assert_func+0x30>)
 800886a:	461c      	mov	r4, r3
 800886c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008870:	9100      	str	r1, [sp, #0]
 8008872:	462b      	mov	r3, r5
 8008874:	4905      	ldr	r1, [pc, #20]	@ (800888c <__assert_func+0x34>)
 8008876:	f000 f86f 	bl	8008958 <fiprintf>
 800887a:	f000 f87f 	bl	800897c <abort>
 800887e:	4b04      	ldr	r3, [pc, #16]	@ (8008890 <__assert_func+0x38>)
 8008880:	e7f4      	b.n	800886c <__assert_func+0x14>
 8008882:	bf00      	nop
 8008884:	200000b4 	.word	0x200000b4
 8008888:	0800955e 	.word	0x0800955e
 800888c:	08009530 	.word	0x08009530
 8008890:	08009523 	.word	0x08009523

08008894 <_calloc_r>:
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	fba1 5402 	umull	r5, r4, r1, r2
 800889a:	b93c      	cbnz	r4, 80088ac <_calloc_r+0x18>
 800889c:	4629      	mov	r1, r5
 800889e:	f7ff f99f 	bl	8007be0 <_malloc_r>
 80088a2:	4606      	mov	r6, r0
 80088a4:	b928      	cbnz	r0, 80088b2 <_calloc_r+0x1e>
 80088a6:	2600      	movs	r6, #0
 80088a8:	4630      	mov	r0, r6
 80088aa:	bd70      	pop	{r4, r5, r6, pc}
 80088ac:	220c      	movs	r2, #12
 80088ae:	6002      	str	r2, [r0, #0]
 80088b0:	e7f9      	b.n	80088a6 <_calloc_r+0x12>
 80088b2:	462a      	mov	r2, r5
 80088b4:	4621      	mov	r1, r4
 80088b6:	f7fe fa42 	bl	8006d3e <memset>
 80088ba:	e7f5      	b.n	80088a8 <_calloc_r+0x14>

080088bc <__ascii_mbtowc>:
 80088bc:	b082      	sub	sp, #8
 80088be:	b901      	cbnz	r1, 80088c2 <__ascii_mbtowc+0x6>
 80088c0:	a901      	add	r1, sp, #4
 80088c2:	b142      	cbz	r2, 80088d6 <__ascii_mbtowc+0x1a>
 80088c4:	b14b      	cbz	r3, 80088da <__ascii_mbtowc+0x1e>
 80088c6:	7813      	ldrb	r3, [r2, #0]
 80088c8:	600b      	str	r3, [r1, #0]
 80088ca:	7812      	ldrb	r2, [r2, #0]
 80088cc:	1e10      	subs	r0, r2, #0
 80088ce:	bf18      	it	ne
 80088d0:	2001      	movne	r0, #1
 80088d2:	b002      	add	sp, #8
 80088d4:	4770      	bx	lr
 80088d6:	4610      	mov	r0, r2
 80088d8:	e7fb      	b.n	80088d2 <__ascii_mbtowc+0x16>
 80088da:	f06f 0001 	mvn.w	r0, #1
 80088de:	e7f8      	b.n	80088d2 <__ascii_mbtowc+0x16>

080088e0 <_realloc_r>:
 80088e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e4:	4680      	mov	r8, r0
 80088e6:	4615      	mov	r5, r2
 80088e8:	460c      	mov	r4, r1
 80088ea:	b921      	cbnz	r1, 80088f6 <_realloc_r+0x16>
 80088ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f0:	4611      	mov	r1, r2
 80088f2:	f7ff b975 	b.w	8007be0 <_malloc_r>
 80088f6:	b92a      	cbnz	r2, 8008904 <_realloc_r+0x24>
 80088f8:	f7ff f8fe 	bl	8007af8 <_free_r>
 80088fc:	2400      	movs	r4, #0
 80088fe:	4620      	mov	r0, r4
 8008900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008904:	f000 f841 	bl	800898a <_malloc_usable_size_r>
 8008908:	4285      	cmp	r5, r0
 800890a:	4606      	mov	r6, r0
 800890c:	d802      	bhi.n	8008914 <_realloc_r+0x34>
 800890e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008912:	d8f4      	bhi.n	80088fe <_realloc_r+0x1e>
 8008914:	4629      	mov	r1, r5
 8008916:	4640      	mov	r0, r8
 8008918:	f7ff f962 	bl	8007be0 <_malloc_r>
 800891c:	4607      	mov	r7, r0
 800891e:	2800      	cmp	r0, #0
 8008920:	d0ec      	beq.n	80088fc <_realloc_r+0x1c>
 8008922:	42b5      	cmp	r5, r6
 8008924:	462a      	mov	r2, r5
 8008926:	4621      	mov	r1, r4
 8008928:	bf28      	it	cs
 800892a:	4632      	movcs	r2, r6
 800892c:	f7fe fa87 	bl	8006e3e <memcpy>
 8008930:	4621      	mov	r1, r4
 8008932:	4640      	mov	r0, r8
 8008934:	f7ff f8e0 	bl	8007af8 <_free_r>
 8008938:	463c      	mov	r4, r7
 800893a:	e7e0      	b.n	80088fe <_realloc_r+0x1e>

0800893c <__ascii_wctomb>:
 800893c:	4603      	mov	r3, r0
 800893e:	4608      	mov	r0, r1
 8008940:	b141      	cbz	r1, 8008954 <__ascii_wctomb+0x18>
 8008942:	2aff      	cmp	r2, #255	@ 0xff
 8008944:	d904      	bls.n	8008950 <__ascii_wctomb+0x14>
 8008946:	228a      	movs	r2, #138	@ 0x8a
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	f04f 30ff 	mov.w	r0, #4294967295
 800894e:	4770      	bx	lr
 8008950:	700a      	strb	r2, [r1, #0]
 8008952:	2001      	movs	r0, #1
 8008954:	4770      	bx	lr
	...

08008958 <fiprintf>:
 8008958:	b40e      	push	{r1, r2, r3}
 800895a:	b503      	push	{r0, r1, lr}
 800895c:	4601      	mov	r1, r0
 800895e:	ab03      	add	r3, sp, #12
 8008960:	4805      	ldr	r0, [pc, #20]	@ (8008978 <fiprintf+0x20>)
 8008962:	f853 2b04 	ldr.w	r2, [r3], #4
 8008966:	6800      	ldr	r0, [r0, #0]
 8008968:	9301      	str	r3, [sp, #4]
 800896a:	f000 f83f 	bl	80089ec <_vfiprintf_r>
 800896e:	b002      	add	sp, #8
 8008970:	f85d eb04 	ldr.w	lr, [sp], #4
 8008974:	b003      	add	sp, #12
 8008976:	4770      	bx	lr
 8008978:	200000b4 	.word	0x200000b4

0800897c <abort>:
 800897c:	b508      	push	{r3, lr}
 800897e:	2006      	movs	r0, #6
 8008980:	f000 fa08 	bl	8008d94 <raise>
 8008984:	2001      	movs	r0, #1
 8008986:	f7f9 f9e8 	bl	8001d5a <_exit>

0800898a <_malloc_usable_size_r>:
 800898a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800898e:	1f18      	subs	r0, r3, #4
 8008990:	2b00      	cmp	r3, #0
 8008992:	bfbc      	itt	lt
 8008994:	580b      	ldrlt	r3, [r1, r0]
 8008996:	18c0      	addlt	r0, r0, r3
 8008998:	4770      	bx	lr

0800899a <__sfputc_r>:
 800899a:	6893      	ldr	r3, [r2, #8]
 800899c:	3b01      	subs	r3, #1
 800899e:	2b00      	cmp	r3, #0
 80089a0:	b410      	push	{r4}
 80089a2:	6093      	str	r3, [r2, #8]
 80089a4:	da08      	bge.n	80089b8 <__sfputc_r+0x1e>
 80089a6:	6994      	ldr	r4, [r2, #24]
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	db01      	blt.n	80089b0 <__sfputc_r+0x16>
 80089ac:	290a      	cmp	r1, #10
 80089ae:	d103      	bne.n	80089b8 <__sfputc_r+0x1e>
 80089b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089b4:	f000 b932 	b.w	8008c1c <__swbuf_r>
 80089b8:	6813      	ldr	r3, [r2, #0]
 80089ba:	1c58      	adds	r0, r3, #1
 80089bc:	6010      	str	r0, [r2, #0]
 80089be:	7019      	strb	r1, [r3, #0]
 80089c0:	4608      	mov	r0, r1
 80089c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <__sfputs_r>:
 80089c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ca:	4606      	mov	r6, r0
 80089cc:	460f      	mov	r7, r1
 80089ce:	4614      	mov	r4, r2
 80089d0:	18d5      	adds	r5, r2, r3
 80089d2:	42ac      	cmp	r4, r5
 80089d4:	d101      	bne.n	80089da <__sfputs_r+0x12>
 80089d6:	2000      	movs	r0, #0
 80089d8:	e007      	b.n	80089ea <__sfputs_r+0x22>
 80089da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089de:	463a      	mov	r2, r7
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7ff ffda 	bl	800899a <__sfputc_r>
 80089e6:	1c43      	adds	r3, r0, #1
 80089e8:	d1f3      	bne.n	80089d2 <__sfputs_r+0xa>
 80089ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089ec <_vfiprintf_r>:
 80089ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	460d      	mov	r5, r1
 80089f2:	b09d      	sub	sp, #116	@ 0x74
 80089f4:	4614      	mov	r4, r2
 80089f6:	4698      	mov	r8, r3
 80089f8:	4606      	mov	r6, r0
 80089fa:	b118      	cbz	r0, 8008a04 <_vfiprintf_r+0x18>
 80089fc:	6a03      	ldr	r3, [r0, #32]
 80089fe:	b90b      	cbnz	r3, 8008a04 <_vfiprintf_r+0x18>
 8008a00:	f7fe f904 	bl	8006c0c <__sinit>
 8008a04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a06:	07d9      	lsls	r1, r3, #31
 8008a08:	d405      	bmi.n	8008a16 <_vfiprintf_r+0x2a>
 8008a0a:	89ab      	ldrh	r3, [r5, #12]
 8008a0c:	059a      	lsls	r2, r3, #22
 8008a0e:	d402      	bmi.n	8008a16 <_vfiprintf_r+0x2a>
 8008a10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a12:	f7fe fa12 	bl	8006e3a <__retarget_lock_acquire_recursive>
 8008a16:	89ab      	ldrh	r3, [r5, #12]
 8008a18:	071b      	lsls	r3, r3, #28
 8008a1a:	d501      	bpl.n	8008a20 <_vfiprintf_r+0x34>
 8008a1c:	692b      	ldr	r3, [r5, #16]
 8008a1e:	b99b      	cbnz	r3, 8008a48 <_vfiprintf_r+0x5c>
 8008a20:	4629      	mov	r1, r5
 8008a22:	4630      	mov	r0, r6
 8008a24:	f000 f938 	bl	8008c98 <__swsetup_r>
 8008a28:	b170      	cbz	r0, 8008a48 <_vfiprintf_r+0x5c>
 8008a2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a2c:	07dc      	lsls	r4, r3, #31
 8008a2e:	d504      	bpl.n	8008a3a <_vfiprintf_r+0x4e>
 8008a30:	f04f 30ff 	mov.w	r0, #4294967295
 8008a34:	b01d      	add	sp, #116	@ 0x74
 8008a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	0598      	lsls	r0, r3, #22
 8008a3e:	d4f7      	bmi.n	8008a30 <_vfiprintf_r+0x44>
 8008a40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a42:	f7fe f9fb 	bl	8006e3c <__retarget_lock_release_recursive>
 8008a46:	e7f3      	b.n	8008a30 <_vfiprintf_r+0x44>
 8008a48:	2300      	movs	r3, #0
 8008a4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a4c:	2320      	movs	r3, #32
 8008a4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a52:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a56:	2330      	movs	r3, #48	@ 0x30
 8008a58:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c08 <_vfiprintf_r+0x21c>
 8008a5c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a60:	f04f 0901 	mov.w	r9, #1
 8008a64:	4623      	mov	r3, r4
 8008a66:	469a      	mov	sl, r3
 8008a68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a6c:	b10a      	cbz	r2, 8008a72 <_vfiprintf_r+0x86>
 8008a6e:	2a25      	cmp	r2, #37	@ 0x25
 8008a70:	d1f9      	bne.n	8008a66 <_vfiprintf_r+0x7a>
 8008a72:	ebba 0b04 	subs.w	fp, sl, r4
 8008a76:	d00b      	beq.n	8008a90 <_vfiprintf_r+0xa4>
 8008a78:	465b      	mov	r3, fp
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	4629      	mov	r1, r5
 8008a7e:	4630      	mov	r0, r6
 8008a80:	f7ff ffa2 	bl	80089c8 <__sfputs_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	f000 80a7 	beq.w	8008bd8 <_vfiprintf_r+0x1ec>
 8008a8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a8c:	445a      	add	r2, fp
 8008a8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a90:	f89a 3000 	ldrb.w	r3, [sl]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 809f 	beq.w	8008bd8 <_vfiprintf_r+0x1ec>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008aa4:	f10a 0a01 	add.w	sl, sl, #1
 8008aa8:	9304      	str	r3, [sp, #16]
 8008aaa:	9307      	str	r3, [sp, #28]
 8008aac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ab0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ab2:	4654      	mov	r4, sl
 8008ab4:	2205      	movs	r2, #5
 8008ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aba:	4853      	ldr	r0, [pc, #332]	@ (8008c08 <_vfiprintf_r+0x21c>)
 8008abc:	f7f7 fba0 	bl	8000200 <memchr>
 8008ac0:	9a04      	ldr	r2, [sp, #16]
 8008ac2:	b9d8      	cbnz	r0, 8008afc <_vfiprintf_r+0x110>
 8008ac4:	06d1      	lsls	r1, r2, #27
 8008ac6:	bf44      	itt	mi
 8008ac8:	2320      	movmi	r3, #32
 8008aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ace:	0713      	lsls	r3, r2, #28
 8008ad0:	bf44      	itt	mi
 8008ad2:	232b      	movmi	r3, #43	@ 0x2b
 8008ad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8008adc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ade:	d015      	beq.n	8008b0c <_vfiprintf_r+0x120>
 8008ae0:	9a07      	ldr	r2, [sp, #28]
 8008ae2:	4654      	mov	r4, sl
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f04f 0c0a 	mov.w	ip, #10
 8008aea:	4621      	mov	r1, r4
 8008aec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008af0:	3b30      	subs	r3, #48	@ 0x30
 8008af2:	2b09      	cmp	r3, #9
 8008af4:	d94b      	bls.n	8008b8e <_vfiprintf_r+0x1a2>
 8008af6:	b1b0      	cbz	r0, 8008b26 <_vfiprintf_r+0x13a>
 8008af8:	9207      	str	r2, [sp, #28]
 8008afa:	e014      	b.n	8008b26 <_vfiprintf_r+0x13a>
 8008afc:	eba0 0308 	sub.w	r3, r0, r8
 8008b00:	fa09 f303 	lsl.w	r3, r9, r3
 8008b04:	4313      	orrs	r3, r2
 8008b06:	9304      	str	r3, [sp, #16]
 8008b08:	46a2      	mov	sl, r4
 8008b0a:	e7d2      	b.n	8008ab2 <_vfiprintf_r+0xc6>
 8008b0c:	9b03      	ldr	r3, [sp, #12]
 8008b0e:	1d19      	adds	r1, r3, #4
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	9103      	str	r1, [sp, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	bfbb      	ittet	lt
 8008b18:	425b      	neglt	r3, r3
 8008b1a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b1e:	9307      	strge	r3, [sp, #28]
 8008b20:	9307      	strlt	r3, [sp, #28]
 8008b22:	bfb8      	it	lt
 8008b24:	9204      	strlt	r2, [sp, #16]
 8008b26:	7823      	ldrb	r3, [r4, #0]
 8008b28:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b2a:	d10a      	bne.n	8008b42 <_vfiprintf_r+0x156>
 8008b2c:	7863      	ldrb	r3, [r4, #1]
 8008b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b30:	d132      	bne.n	8008b98 <_vfiprintf_r+0x1ac>
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	1d1a      	adds	r2, r3, #4
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	9203      	str	r2, [sp, #12]
 8008b3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b3e:	3402      	adds	r4, #2
 8008b40:	9305      	str	r3, [sp, #20]
 8008b42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c18 <_vfiprintf_r+0x22c>
 8008b46:	7821      	ldrb	r1, [r4, #0]
 8008b48:	2203      	movs	r2, #3
 8008b4a:	4650      	mov	r0, sl
 8008b4c:	f7f7 fb58 	bl	8000200 <memchr>
 8008b50:	b138      	cbz	r0, 8008b62 <_vfiprintf_r+0x176>
 8008b52:	9b04      	ldr	r3, [sp, #16]
 8008b54:	eba0 000a 	sub.w	r0, r0, sl
 8008b58:	2240      	movs	r2, #64	@ 0x40
 8008b5a:	4082      	lsls	r2, r0
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	3401      	adds	r4, #1
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b66:	4829      	ldr	r0, [pc, #164]	@ (8008c0c <_vfiprintf_r+0x220>)
 8008b68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b6c:	2206      	movs	r2, #6
 8008b6e:	f7f7 fb47 	bl	8000200 <memchr>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d03f      	beq.n	8008bf6 <_vfiprintf_r+0x20a>
 8008b76:	4b26      	ldr	r3, [pc, #152]	@ (8008c10 <_vfiprintf_r+0x224>)
 8008b78:	bb1b      	cbnz	r3, 8008bc2 <_vfiprintf_r+0x1d6>
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	3307      	adds	r3, #7
 8008b7e:	f023 0307 	bic.w	r3, r3, #7
 8008b82:	3308      	adds	r3, #8
 8008b84:	9303      	str	r3, [sp, #12]
 8008b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b88:	443b      	add	r3, r7
 8008b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b8c:	e76a      	b.n	8008a64 <_vfiprintf_r+0x78>
 8008b8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b92:	460c      	mov	r4, r1
 8008b94:	2001      	movs	r0, #1
 8008b96:	e7a8      	b.n	8008aea <_vfiprintf_r+0xfe>
 8008b98:	2300      	movs	r3, #0
 8008b9a:	3401      	adds	r4, #1
 8008b9c:	9305      	str	r3, [sp, #20]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	f04f 0c0a 	mov.w	ip, #10
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008baa:	3a30      	subs	r2, #48	@ 0x30
 8008bac:	2a09      	cmp	r2, #9
 8008bae:	d903      	bls.n	8008bb8 <_vfiprintf_r+0x1cc>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d0c6      	beq.n	8008b42 <_vfiprintf_r+0x156>
 8008bb4:	9105      	str	r1, [sp, #20]
 8008bb6:	e7c4      	b.n	8008b42 <_vfiprintf_r+0x156>
 8008bb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	e7f0      	b.n	8008ba4 <_vfiprintf_r+0x1b8>
 8008bc2:	ab03      	add	r3, sp, #12
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	462a      	mov	r2, r5
 8008bc8:	4b12      	ldr	r3, [pc, #72]	@ (8008c14 <_vfiprintf_r+0x228>)
 8008bca:	a904      	add	r1, sp, #16
 8008bcc:	4630      	mov	r0, r6
 8008bce:	f7fd fbd9 	bl	8006384 <_printf_float>
 8008bd2:	4607      	mov	r7, r0
 8008bd4:	1c78      	adds	r0, r7, #1
 8008bd6:	d1d6      	bne.n	8008b86 <_vfiprintf_r+0x19a>
 8008bd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bda:	07d9      	lsls	r1, r3, #31
 8008bdc:	d405      	bmi.n	8008bea <_vfiprintf_r+0x1fe>
 8008bde:	89ab      	ldrh	r3, [r5, #12]
 8008be0:	059a      	lsls	r2, r3, #22
 8008be2:	d402      	bmi.n	8008bea <_vfiprintf_r+0x1fe>
 8008be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008be6:	f7fe f929 	bl	8006e3c <__retarget_lock_release_recursive>
 8008bea:	89ab      	ldrh	r3, [r5, #12]
 8008bec:	065b      	lsls	r3, r3, #25
 8008bee:	f53f af1f 	bmi.w	8008a30 <_vfiprintf_r+0x44>
 8008bf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008bf4:	e71e      	b.n	8008a34 <_vfiprintf_r+0x48>
 8008bf6:	ab03      	add	r3, sp, #12
 8008bf8:	9300      	str	r3, [sp, #0]
 8008bfa:	462a      	mov	r2, r5
 8008bfc:	4b05      	ldr	r3, [pc, #20]	@ (8008c14 <_vfiprintf_r+0x228>)
 8008bfe:	a904      	add	r1, sp, #16
 8008c00:	4630      	mov	r0, r6
 8008c02:	f7fd fe57 	bl	80068b4 <_printf_i>
 8008c06:	e7e4      	b.n	8008bd2 <_vfiprintf_r+0x1e6>
 8008c08:	08009508 	.word	0x08009508
 8008c0c:	08009512 	.word	0x08009512
 8008c10:	08006385 	.word	0x08006385
 8008c14:	080089c9 	.word	0x080089c9
 8008c18:	0800950e 	.word	0x0800950e

08008c1c <__swbuf_r>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	460e      	mov	r6, r1
 8008c20:	4614      	mov	r4, r2
 8008c22:	4605      	mov	r5, r0
 8008c24:	b118      	cbz	r0, 8008c2e <__swbuf_r+0x12>
 8008c26:	6a03      	ldr	r3, [r0, #32]
 8008c28:	b90b      	cbnz	r3, 8008c2e <__swbuf_r+0x12>
 8008c2a:	f7fd ffef 	bl	8006c0c <__sinit>
 8008c2e:	69a3      	ldr	r3, [r4, #24]
 8008c30:	60a3      	str	r3, [r4, #8]
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	071a      	lsls	r2, r3, #28
 8008c36:	d501      	bpl.n	8008c3c <__swbuf_r+0x20>
 8008c38:	6923      	ldr	r3, [r4, #16]
 8008c3a:	b943      	cbnz	r3, 8008c4e <__swbuf_r+0x32>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 f82a 	bl	8008c98 <__swsetup_r>
 8008c44:	b118      	cbz	r0, 8008c4e <__swbuf_r+0x32>
 8008c46:	f04f 37ff 	mov.w	r7, #4294967295
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c4e:	6823      	ldr	r3, [r4, #0]
 8008c50:	6922      	ldr	r2, [r4, #16]
 8008c52:	1a98      	subs	r0, r3, r2
 8008c54:	6963      	ldr	r3, [r4, #20]
 8008c56:	b2f6      	uxtb	r6, r6
 8008c58:	4283      	cmp	r3, r0
 8008c5a:	4637      	mov	r7, r6
 8008c5c:	dc05      	bgt.n	8008c6a <__swbuf_r+0x4e>
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4628      	mov	r0, r5
 8008c62:	f7ff fda7 	bl	80087b4 <_fflush_r>
 8008c66:	2800      	cmp	r0, #0
 8008c68:	d1ed      	bne.n	8008c46 <__swbuf_r+0x2a>
 8008c6a:	68a3      	ldr	r3, [r4, #8]
 8008c6c:	3b01      	subs	r3, #1
 8008c6e:	60a3      	str	r3, [r4, #8]
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	1c5a      	adds	r2, r3, #1
 8008c74:	6022      	str	r2, [r4, #0]
 8008c76:	701e      	strb	r6, [r3, #0]
 8008c78:	6962      	ldr	r2, [r4, #20]
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d004      	beq.n	8008c8a <__swbuf_r+0x6e>
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	07db      	lsls	r3, r3, #31
 8008c84:	d5e1      	bpl.n	8008c4a <__swbuf_r+0x2e>
 8008c86:	2e0a      	cmp	r6, #10
 8008c88:	d1df      	bne.n	8008c4a <__swbuf_r+0x2e>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f7ff fd91 	bl	80087b4 <_fflush_r>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	d0d9      	beq.n	8008c4a <__swbuf_r+0x2e>
 8008c96:	e7d6      	b.n	8008c46 <__swbuf_r+0x2a>

08008c98 <__swsetup_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	4b29      	ldr	r3, [pc, #164]	@ (8008d40 <__swsetup_r+0xa8>)
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	460c      	mov	r4, r1
 8008ca2:	b118      	cbz	r0, 8008cac <__swsetup_r+0x14>
 8008ca4:	6a03      	ldr	r3, [r0, #32]
 8008ca6:	b90b      	cbnz	r3, 8008cac <__swsetup_r+0x14>
 8008ca8:	f7fd ffb0 	bl	8006c0c <__sinit>
 8008cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb0:	0719      	lsls	r1, r3, #28
 8008cb2:	d422      	bmi.n	8008cfa <__swsetup_r+0x62>
 8008cb4:	06da      	lsls	r2, r3, #27
 8008cb6:	d407      	bmi.n	8008cc8 <__swsetup_r+0x30>
 8008cb8:	2209      	movs	r2, #9
 8008cba:	602a      	str	r2, [r5, #0]
 8008cbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cc0:	81a3      	strh	r3, [r4, #12]
 8008cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc6:	e033      	b.n	8008d30 <__swsetup_r+0x98>
 8008cc8:	0758      	lsls	r0, r3, #29
 8008cca:	d512      	bpl.n	8008cf2 <__swsetup_r+0x5a>
 8008ccc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cce:	b141      	cbz	r1, 8008ce2 <__swsetup_r+0x4a>
 8008cd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cd4:	4299      	cmp	r1, r3
 8008cd6:	d002      	beq.n	8008cde <__swsetup_r+0x46>
 8008cd8:	4628      	mov	r0, r5
 8008cda:	f7fe ff0d 	bl	8007af8 <_free_r>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ce8:	81a3      	strh	r3, [r4, #12]
 8008cea:	2300      	movs	r3, #0
 8008cec:	6063      	str	r3, [r4, #4]
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	89a3      	ldrh	r3, [r4, #12]
 8008cf4:	f043 0308 	orr.w	r3, r3, #8
 8008cf8:	81a3      	strh	r3, [r4, #12]
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	b94b      	cbnz	r3, 8008d12 <__swsetup_r+0x7a>
 8008cfe:	89a3      	ldrh	r3, [r4, #12]
 8008d00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d08:	d003      	beq.n	8008d12 <__swsetup_r+0x7a>
 8008d0a:	4621      	mov	r1, r4
 8008d0c:	4628      	mov	r0, r5
 8008d0e:	f000 f883 	bl	8008e18 <__smakebuf_r>
 8008d12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d16:	f013 0201 	ands.w	r2, r3, #1
 8008d1a:	d00a      	beq.n	8008d32 <__swsetup_r+0x9a>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	60a2      	str	r2, [r4, #8]
 8008d20:	6962      	ldr	r2, [r4, #20]
 8008d22:	4252      	negs	r2, r2
 8008d24:	61a2      	str	r2, [r4, #24]
 8008d26:	6922      	ldr	r2, [r4, #16]
 8008d28:	b942      	cbnz	r2, 8008d3c <__swsetup_r+0xa4>
 8008d2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d2e:	d1c5      	bne.n	8008cbc <__swsetup_r+0x24>
 8008d30:	bd38      	pop	{r3, r4, r5, pc}
 8008d32:	0799      	lsls	r1, r3, #30
 8008d34:	bf58      	it	pl
 8008d36:	6962      	ldrpl	r2, [r4, #20]
 8008d38:	60a2      	str	r2, [r4, #8]
 8008d3a:	e7f4      	b.n	8008d26 <__swsetup_r+0x8e>
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	e7f7      	b.n	8008d30 <__swsetup_r+0x98>
 8008d40:	200000b4 	.word	0x200000b4

08008d44 <_raise_r>:
 8008d44:	291f      	cmp	r1, #31
 8008d46:	b538      	push	{r3, r4, r5, lr}
 8008d48:	4605      	mov	r5, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	d904      	bls.n	8008d58 <_raise_r+0x14>
 8008d4e:	2316      	movs	r3, #22
 8008d50:	6003      	str	r3, [r0, #0]
 8008d52:	f04f 30ff 	mov.w	r0, #4294967295
 8008d56:	bd38      	pop	{r3, r4, r5, pc}
 8008d58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d5a:	b112      	cbz	r2, 8008d62 <_raise_r+0x1e>
 8008d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d60:	b94b      	cbnz	r3, 8008d76 <_raise_r+0x32>
 8008d62:	4628      	mov	r0, r5
 8008d64:	f000 f830 	bl	8008dc8 <_getpid_r>
 8008d68:	4622      	mov	r2, r4
 8008d6a:	4601      	mov	r1, r0
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d72:	f000 b817 	b.w	8008da4 <_kill_r>
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d00a      	beq.n	8008d90 <_raise_r+0x4c>
 8008d7a:	1c59      	adds	r1, r3, #1
 8008d7c:	d103      	bne.n	8008d86 <_raise_r+0x42>
 8008d7e:	2316      	movs	r3, #22
 8008d80:	6003      	str	r3, [r0, #0]
 8008d82:	2001      	movs	r0, #1
 8008d84:	e7e7      	b.n	8008d56 <_raise_r+0x12>
 8008d86:	2100      	movs	r1, #0
 8008d88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	4798      	blx	r3
 8008d90:	2000      	movs	r0, #0
 8008d92:	e7e0      	b.n	8008d56 <_raise_r+0x12>

08008d94 <raise>:
 8008d94:	4b02      	ldr	r3, [pc, #8]	@ (8008da0 <raise+0xc>)
 8008d96:	4601      	mov	r1, r0
 8008d98:	6818      	ldr	r0, [r3, #0]
 8008d9a:	f7ff bfd3 	b.w	8008d44 <_raise_r>
 8008d9e:	bf00      	nop
 8008da0:	200000b4 	.word	0x200000b4

08008da4 <_kill_r>:
 8008da4:	b538      	push	{r3, r4, r5, lr}
 8008da6:	4d07      	ldr	r5, [pc, #28]	@ (8008dc4 <_kill_r+0x20>)
 8008da8:	2300      	movs	r3, #0
 8008daa:	4604      	mov	r4, r0
 8008dac:	4608      	mov	r0, r1
 8008dae:	4611      	mov	r1, r2
 8008db0:	602b      	str	r3, [r5, #0]
 8008db2:	f7f8 ffc2 	bl	8001d3a <_kill>
 8008db6:	1c43      	adds	r3, r0, #1
 8008db8:	d102      	bne.n	8008dc0 <_kill_r+0x1c>
 8008dba:	682b      	ldr	r3, [r5, #0]
 8008dbc:	b103      	cbz	r3, 8008dc0 <_kill_r+0x1c>
 8008dbe:	6023      	str	r3, [r4, #0]
 8008dc0:	bd38      	pop	{r3, r4, r5, pc}
 8008dc2:	bf00      	nop
 8008dc4:	20000518 	.word	0x20000518

08008dc8 <_getpid_r>:
 8008dc8:	f7f8 bfaf 	b.w	8001d2a <_getpid>

08008dcc <__swhatbuf_r>:
 8008dcc:	b570      	push	{r4, r5, r6, lr}
 8008dce:	460c      	mov	r4, r1
 8008dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008dd4:	2900      	cmp	r1, #0
 8008dd6:	b096      	sub	sp, #88	@ 0x58
 8008dd8:	4615      	mov	r5, r2
 8008dda:	461e      	mov	r6, r3
 8008ddc:	da0d      	bge.n	8008dfa <__swhatbuf_r+0x2e>
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008de4:	f04f 0100 	mov.w	r1, #0
 8008de8:	bf14      	ite	ne
 8008dea:	2340      	movne	r3, #64	@ 0x40
 8008dec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008df0:	2000      	movs	r0, #0
 8008df2:	6031      	str	r1, [r6, #0]
 8008df4:	602b      	str	r3, [r5, #0]
 8008df6:	b016      	add	sp, #88	@ 0x58
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
 8008dfa:	466a      	mov	r2, sp
 8008dfc:	f000 f848 	bl	8008e90 <_fstat_r>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	dbec      	blt.n	8008dde <__swhatbuf_r+0x12>
 8008e04:	9901      	ldr	r1, [sp, #4]
 8008e06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e0e:	4259      	negs	r1, r3
 8008e10:	4159      	adcs	r1, r3
 8008e12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e16:	e7eb      	b.n	8008df0 <__swhatbuf_r+0x24>

08008e18 <__smakebuf_r>:
 8008e18:	898b      	ldrh	r3, [r1, #12]
 8008e1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e1c:	079d      	lsls	r5, r3, #30
 8008e1e:	4606      	mov	r6, r0
 8008e20:	460c      	mov	r4, r1
 8008e22:	d507      	bpl.n	8008e34 <__smakebuf_r+0x1c>
 8008e24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	6123      	str	r3, [r4, #16]
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	6163      	str	r3, [r4, #20]
 8008e30:	b003      	add	sp, #12
 8008e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e34:	ab01      	add	r3, sp, #4
 8008e36:	466a      	mov	r2, sp
 8008e38:	f7ff ffc8 	bl	8008dcc <__swhatbuf_r>
 8008e3c:	9f00      	ldr	r7, [sp, #0]
 8008e3e:	4605      	mov	r5, r0
 8008e40:	4639      	mov	r1, r7
 8008e42:	4630      	mov	r0, r6
 8008e44:	f7fe fecc 	bl	8007be0 <_malloc_r>
 8008e48:	b948      	cbnz	r0, 8008e5e <__smakebuf_r+0x46>
 8008e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e4e:	059a      	lsls	r2, r3, #22
 8008e50:	d4ee      	bmi.n	8008e30 <__smakebuf_r+0x18>
 8008e52:	f023 0303 	bic.w	r3, r3, #3
 8008e56:	f043 0302 	orr.w	r3, r3, #2
 8008e5a:	81a3      	strh	r3, [r4, #12]
 8008e5c:	e7e2      	b.n	8008e24 <__smakebuf_r+0xc>
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	6020      	str	r0, [r4, #0]
 8008e62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	9b01      	ldr	r3, [sp, #4]
 8008e6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008e6e:	b15b      	cbz	r3, 8008e88 <__smakebuf_r+0x70>
 8008e70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e74:	4630      	mov	r0, r6
 8008e76:	f000 f81d 	bl	8008eb4 <_isatty_r>
 8008e7a:	b128      	cbz	r0, 8008e88 <__smakebuf_r+0x70>
 8008e7c:	89a3      	ldrh	r3, [r4, #12]
 8008e7e:	f023 0303 	bic.w	r3, r3, #3
 8008e82:	f043 0301 	orr.w	r3, r3, #1
 8008e86:	81a3      	strh	r3, [r4, #12]
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	431d      	orrs	r5, r3
 8008e8c:	81a5      	strh	r5, [r4, #12]
 8008e8e:	e7cf      	b.n	8008e30 <__smakebuf_r+0x18>

08008e90 <_fstat_r>:
 8008e90:	b538      	push	{r3, r4, r5, lr}
 8008e92:	4d07      	ldr	r5, [pc, #28]	@ (8008eb0 <_fstat_r+0x20>)
 8008e94:	2300      	movs	r3, #0
 8008e96:	4604      	mov	r4, r0
 8008e98:	4608      	mov	r0, r1
 8008e9a:	4611      	mov	r1, r2
 8008e9c:	602b      	str	r3, [r5, #0]
 8008e9e:	f7f8 ffac 	bl	8001dfa <_fstat>
 8008ea2:	1c43      	adds	r3, r0, #1
 8008ea4:	d102      	bne.n	8008eac <_fstat_r+0x1c>
 8008ea6:	682b      	ldr	r3, [r5, #0]
 8008ea8:	b103      	cbz	r3, 8008eac <_fstat_r+0x1c>
 8008eaa:	6023      	str	r3, [r4, #0]
 8008eac:	bd38      	pop	{r3, r4, r5, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000518 	.word	0x20000518

08008eb4 <_isatty_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d06      	ldr	r5, [pc, #24]	@ (8008ed0 <_isatty_r+0x1c>)
 8008eb8:	2300      	movs	r3, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	f7f8 ffab 	bl	8001e1a <_isatty>
 8008ec4:	1c43      	adds	r3, r0, #1
 8008ec6:	d102      	bne.n	8008ece <_isatty_r+0x1a>
 8008ec8:	682b      	ldr	r3, [r5, #0]
 8008eca:	b103      	cbz	r3, 8008ece <_isatty_r+0x1a>
 8008ecc:	6023      	str	r3, [r4, #0]
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	20000518 	.word	0x20000518

08008ed4 <atan2f>:
 8008ed4:	f000 b822 	b.w	8008f1c <__ieee754_atan2f>

08008ed8 <sqrtf>:
 8008ed8:	b508      	push	{r3, lr}
 8008eda:	ed2d 8b02 	vpush	{d8}
 8008ede:	eeb0 8a40 	vmov.f32	s16, s0
 8008ee2:	f000 f817 	bl	8008f14 <__ieee754_sqrtf>
 8008ee6:	eeb4 8a48 	vcmp.f32	s16, s16
 8008eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eee:	d60c      	bvs.n	8008f0a <sqrtf+0x32>
 8008ef0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008f10 <sqrtf+0x38>
 8008ef4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008efc:	d505      	bpl.n	8008f0a <sqrtf+0x32>
 8008efe:	f7fd ff71 	bl	8006de4 <__errno>
 8008f02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008f06:	2321      	movs	r3, #33	@ 0x21
 8008f08:	6003      	str	r3, [r0, #0]
 8008f0a:	ecbd 8b02 	vpop	{d8}
 8008f0e:	bd08      	pop	{r3, pc}
 8008f10:	00000000 	.word	0x00000000

08008f14 <__ieee754_sqrtf>:
 8008f14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008f18:	4770      	bx	lr
	...

08008f1c <__ieee754_atan2f>:
 8008f1c:	ee10 2a90 	vmov	r2, s1
 8008f20:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008f24:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	eef0 7a40 	vmov.f32	s15, s0
 8008f2e:	d806      	bhi.n	8008f3e <__ieee754_atan2f+0x22>
 8008f30:	ee10 0a10 	vmov	r0, s0
 8008f34:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008f38:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f3c:	d904      	bls.n	8008f48 <__ieee754_atan2f+0x2c>
 8008f3e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008f42:	eeb0 0a67 	vmov.f32	s0, s15
 8008f46:	bd10      	pop	{r4, pc}
 8008f48:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8008f4c:	d103      	bne.n	8008f56 <__ieee754_atan2f+0x3a>
 8008f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f52:	f000 b883 	b.w	800905c <atanf>
 8008f56:	1794      	asrs	r4, r2, #30
 8008f58:	f004 0402 	and.w	r4, r4, #2
 8008f5c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008f60:	b943      	cbnz	r3, 8008f74 <__ieee754_atan2f+0x58>
 8008f62:	2c02      	cmp	r4, #2
 8008f64:	d05e      	beq.n	8009024 <__ieee754_atan2f+0x108>
 8008f66:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8009038 <__ieee754_atan2f+0x11c>
 8008f6a:	2c03      	cmp	r4, #3
 8008f6c:	bf08      	it	eq
 8008f6e:	eef0 7a47 	vmoveq.f32	s15, s14
 8008f72:	e7e6      	b.n	8008f42 <__ieee754_atan2f+0x26>
 8008f74:	b941      	cbnz	r1, 8008f88 <__ieee754_atan2f+0x6c>
 8008f76:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800903c <__ieee754_atan2f+0x120>
 8008f7a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8009040 <__ieee754_atan2f+0x124>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	bfb8      	it	lt
 8008f82:	eef0 7a47 	vmovlt.f32	s15, s14
 8008f86:	e7dc      	b.n	8008f42 <__ieee754_atan2f+0x26>
 8008f88:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008f8c:	d110      	bne.n	8008fb0 <__ieee754_atan2f+0x94>
 8008f8e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008f92:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f96:	d107      	bne.n	8008fa8 <__ieee754_atan2f+0x8c>
 8008f98:	2c02      	cmp	r4, #2
 8008f9a:	d846      	bhi.n	800902a <__ieee754_atan2f+0x10e>
 8008f9c:	4b29      	ldr	r3, [pc, #164]	@ (8009044 <__ieee754_atan2f+0x128>)
 8008f9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008fa2:	edd3 7a00 	vldr	s15, [r3]
 8008fa6:	e7cc      	b.n	8008f42 <__ieee754_atan2f+0x26>
 8008fa8:	2c02      	cmp	r4, #2
 8008faa:	d841      	bhi.n	8009030 <__ieee754_atan2f+0x114>
 8008fac:	4b26      	ldr	r3, [pc, #152]	@ (8009048 <__ieee754_atan2f+0x12c>)
 8008fae:	e7f6      	b.n	8008f9e <__ieee754_atan2f+0x82>
 8008fb0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008fb4:	d0df      	beq.n	8008f76 <__ieee754_atan2f+0x5a>
 8008fb6:	1a5b      	subs	r3, r3, r1
 8008fb8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8008fbc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008fc0:	da1a      	bge.n	8008ff8 <__ieee754_atan2f+0xdc>
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	da01      	bge.n	8008fca <__ieee754_atan2f+0xae>
 8008fc6:	313c      	adds	r1, #60	@ 0x3c
 8008fc8:	db19      	blt.n	8008ffe <__ieee754_atan2f+0xe2>
 8008fca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008fce:	f000 f919 	bl	8009204 <fabsf>
 8008fd2:	f000 f843 	bl	800905c <atanf>
 8008fd6:	eef0 7a40 	vmov.f32	s15, s0
 8008fda:	2c01      	cmp	r4, #1
 8008fdc:	d012      	beq.n	8009004 <__ieee754_atan2f+0xe8>
 8008fde:	2c02      	cmp	r4, #2
 8008fe0:	d017      	beq.n	8009012 <__ieee754_atan2f+0xf6>
 8008fe2:	2c00      	cmp	r4, #0
 8008fe4:	d0ad      	beq.n	8008f42 <__ieee754_atan2f+0x26>
 8008fe6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800904c <__ieee754_atan2f+0x130>
 8008fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fee:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8009050 <__ieee754_atan2f+0x134>
 8008ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ff6:	e7a4      	b.n	8008f42 <__ieee754_atan2f+0x26>
 8008ff8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800903c <__ieee754_atan2f+0x120>
 8008ffc:	e7ed      	b.n	8008fda <__ieee754_atan2f+0xbe>
 8008ffe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8009054 <__ieee754_atan2f+0x138>
 8009002:	e7ea      	b.n	8008fda <__ieee754_atan2f+0xbe>
 8009004:	ee17 3a90 	vmov	r3, s15
 8009008:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800900c:	ee07 3a90 	vmov	s15, r3
 8009010:	e797      	b.n	8008f42 <__ieee754_atan2f+0x26>
 8009012:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800904c <__ieee754_atan2f+0x130>
 8009016:	ee77 7a87 	vadd.f32	s15, s15, s14
 800901a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8009050 <__ieee754_atan2f+0x134>
 800901e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009022:	e78e      	b.n	8008f42 <__ieee754_atan2f+0x26>
 8009024:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8009050 <__ieee754_atan2f+0x134>
 8009028:	e78b      	b.n	8008f42 <__ieee754_atan2f+0x26>
 800902a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8009058 <__ieee754_atan2f+0x13c>
 800902e:	e788      	b.n	8008f42 <__ieee754_atan2f+0x26>
 8009030:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8009054 <__ieee754_atan2f+0x138>
 8009034:	e785      	b.n	8008f42 <__ieee754_atan2f+0x26>
 8009036:	bf00      	nop
 8009038:	c0490fdb 	.word	0xc0490fdb
 800903c:	3fc90fdb 	.word	0x3fc90fdb
 8009040:	bfc90fdb 	.word	0xbfc90fdb
 8009044:	0800966c 	.word	0x0800966c
 8009048:	08009660 	.word	0x08009660
 800904c:	33bbbd2e 	.word	0x33bbbd2e
 8009050:	40490fdb 	.word	0x40490fdb
 8009054:	00000000 	.word	0x00000000
 8009058:	3f490fdb 	.word	0x3f490fdb

0800905c <atanf>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	ee10 5a10 	vmov	r5, s0
 8009062:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8009066:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800906a:	eef0 7a40 	vmov.f32	s15, s0
 800906e:	d310      	bcc.n	8009092 <atanf+0x36>
 8009070:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8009074:	d904      	bls.n	8009080 <atanf+0x24>
 8009076:	ee70 7a00 	vadd.f32	s15, s0, s0
 800907a:	eeb0 0a67 	vmov.f32	s0, s15
 800907e:	bd38      	pop	{r3, r4, r5, pc}
 8009080:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80091b8 <atanf+0x15c>
 8009084:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80091bc <atanf+0x160>
 8009088:	2d00      	cmp	r5, #0
 800908a:	bfc8      	it	gt
 800908c:	eef0 7a47 	vmovgt.f32	s15, s14
 8009090:	e7f3      	b.n	800907a <atanf+0x1e>
 8009092:	4b4b      	ldr	r3, [pc, #300]	@ (80091c0 <atanf+0x164>)
 8009094:	429c      	cmp	r4, r3
 8009096:	d810      	bhi.n	80090ba <atanf+0x5e>
 8009098:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800909c:	d20a      	bcs.n	80090b4 <atanf+0x58>
 800909e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80091c4 <atanf+0x168>
 80090a2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80090a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80090aa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80090ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b2:	dce2      	bgt.n	800907a <atanf+0x1e>
 80090b4:	f04f 33ff 	mov.w	r3, #4294967295
 80090b8:	e013      	b.n	80090e2 <atanf+0x86>
 80090ba:	f000 f8a3 	bl	8009204 <fabsf>
 80090be:	4b42      	ldr	r3, [pc, #264]	@ (80091c8 <atanf+0x16c>)
 80090c0:	429c      	cmp	r4, r3
 80090c2:	d84f      	bhi.n	8009164 <atanf+0x108>
 80090c4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80090c8:	429c      	cmp	r4, r3
 80090ca:	d841      	bhi.n	8009150 <atanf+0xf4>
 80090cc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80090d0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80090d4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80090d8:	2300      	movs	r3, #0
 80090da:	ee30 0a27 	vadd.f32	s0, s0, s15
 80090de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80090e2:	1c5a      	adds	r2, r3, #1
 80090e4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80090e8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80091cc <atanf+0x170>
 80090ec:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80091d0 <atanf+0x174>
 80090f0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80091d4 <atanf+0x178>
 80090f4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80090f8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80090fc:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80091d8 <atanf+0x17c>
 8009100:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009104:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80091dc <atanf+0x180>
 8009108:	eee7 5a26 	vfma.f32	s11, s14, s13
 800910c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80091e0 <atanf+0x184>
 8009110:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8009114:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80091e4 <atanf+0x188>
 8009118:	eee7 5a26 	vfma.f32	s11, s14, s13
 800911c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80091e8 <atanf+0x18c>
 8009120:	eea6 5a87 	vfma.f32	s10, s13, s14
 8009124:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80091ec <atanf+0x190>
 8009128:	eea5 7a26 	vfma.f32	s14, s10, s13
 800912c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80091f0 <atanf+0x194>
 8009130:	eea7 5a26 	vfma.f32	s10, s14, s13
 8009134:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80091f4 <atanf+0x198>
 8009138:	eea5 7a26 	vfma.f32	s14, s10, s13
 800913c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8009140:	eea5 7a86 	vfma.f32	s14, s11, s12
 8009144:	ee27 7a87 	vmul.f32	s14, s15, s14
 8009148:	d121      	bne.n	800918e <atanf+0x132>
 800914a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800914e:	e794      	b.n	800907a <atanf+0x1e>
 8009150:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009154:	ee30 7a67 	vsub.f32	s14, s0, s15
 8009158:	ee30 0a27 	vadd.f32	s0, s0, s15
 800915c:	2301      	movs	r3, #1
 800915e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8009162:	e7be      	b.n	80090e2 <atanf+0x86>
 8009164:	4b24      	ldr	r3, [pc, #144]	@ (80091f8 <atanf+0x19c>)
 8009166:	429c      	cmp	r4, r3
 8009168:	d80b      	bhi.n	8009182 <atanf+0x126>
 800916a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800916e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009172:	eea0 7a27 	vfma.f32	s14, s0, s15
 8009176:	2302      	movs	r3, #2
 8009178:	ee70 6a67 	vsub.f32	s13, s0, s15
 800917c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009180:	e7af      	b.n	80090e2 <atanf+0x86>
 8009182:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8009186:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800918a:	2303      	movs	r3, #3
 800918c:	e7a9      	b.n	80090e2 <atanf+0x86>
 800918e:	4a1b      	ldr	r2, [pc, #108]	@ (80091fc <atanf+0x1a0>)
 8009190:	491b      	ldr	r1, [pc, #108]	@ (8009200 <atanf+0x1a4>)
 8009192:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8009196:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800919a:	edd3 6a00 	vldr	s13, [r3]
 800919e:	ee37 7a66 	vsub.f32	s14, s14, s13
 80091a2:	2d00      	cmp	r5, #0
 80091a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80091a8:	edd2 7a00 	vldr	s15, [r2]
 80091ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091b0:	bfb8      	it	lt
 80091b2:	eef1 7a67 	vneglt.f32	s15, s15
 80091b6:	e760      	b.n	800907a <atanf+0x1e>
 80091b8:	bfc90fdb 	.word	0xbfc90fdb
 80091bc:	3fc90fdb 	.word	0x3fc90fdb
 80091c0:	3edfffff 	.word	0x3edfffff
 80091c4:	7149f2ca 	.word	0x7149f2ca
 80091c8:	3f97ffff 	.word	0x3f97ffff
 80091cc:	3c8569d7 	.word	0x3c8569d7
 80091d0:	3d4bda59 	.word	0x3d4bda59
 80091d4:	bd6ef16b 	.word	0xbd6ef16b
 80091d8:	3d886b35 	.word	0x3d886b35
 80091dc:	3dba2e6e 	.word	0x3dba2e6e
 80091e0:	3e124925 	.word	0x3e124925
 80091e4:	3eaaaaab 	.word	0x3eaaaaab
 80091e8:	bd15a221 	.word	0xbd15a221
 80091ec:	bd9d8795 	.word	0xbd9d8795
 80091f0:	bde38e38 	.word	0xbde38e38
 80091f4:	be4ccccd 	.word	0xbe4ccccd
 80091f8:	401bffff 	.word	0x401bffff
 80091fc:	08009688 	.word	0x08009688
 8009200:	08009678 	.word	0x08009678

08009204 <fabsf>:
 8009204:	ee10 3a10 	vmov	r3, s0
 8009208:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800920c:	ee00 3a10 	vmov	s0, r3
 8009210:	4770      	bx	lr
	...

08009214 <_init>:
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	bf00      	nop
 8009218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921a:	bc08      	pop	{r3}
 800921c:	469e      	mov	lr, r3
 800921e:	4770      	bx	lr

08009220 <_fini>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr
