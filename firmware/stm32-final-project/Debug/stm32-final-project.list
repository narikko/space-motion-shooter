
stm32-final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003844  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003a00  08003a00  00004a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a70  08003a70  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a70  08003a70  00004a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a78  08003a78  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a78  08003a78  00004a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a7c  08003a7c  00004a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003a80  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  08003a8c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08003a8c  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcf1  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efa  00000000  00000000  00014d2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00016c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a09  00000000  00000000  00017908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000295b1  00000000  00000000  00018311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b9d  00000000  00000000  000418c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe896  00000000  00000000  0005245f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150cf5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003580  00000000  00000000  00150d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001542b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080039e8 	.word	0x080039e8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	080039e8 	.word	0x080039e8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96a 	b.w	80004e8 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	460c      	mov	r4, r1
 8000234:	2b00      	cmp	r3, #0
 8000236:	d14e      	bne.n	80002d6 <__udivmoddi4+0xaa>
 8000238:	4694      	mov	ip, r2
 800023a:	458c      	cmp	ip, r1
 800023c:	4686      	mov	lr, r0
 800023e:	fab2 f282 	clz	r2, r2
 8000242:	d962      	bls.n	800030a <__udivmoddi4+0xde>
 8000244:	b14a      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000246:	f1c2 0320 	rsb	r3, r2, #32
 800024a:	4091      	lsls	r1, r2
 800024c:	fa20 f303 	lsr.w	r3, r0, r3
 8000250:	fa0c fc02 	lsl.w	ip, ip, r2
 8000254:	4319      	orrs	r1, r3
 8000256:	fa00 fe02 	lsl.w	lr, r0, r2
 800025a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800025e:	fa1f f68c 	uxth.w	r6, ip
 8000262:	fbb1 f4f7 	udiv	r4, r1, r7
 8000266:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026a:	fb07 1114 	mls	r1, r7, r4, r1
 800026e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000272:	fb04 f106 	mul.w	r1, r4, r6
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000282:	f080 8112 	bcs.w	80004aa <__udivmoddi4+0x27e>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 810f 	bls.w	80004aa <__udivmoddi4+0x27e>
 800028c:	3c02      	subs	r4, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a59      	subs	r1, r3, r1
 8000292:	fa1f f38e 	uxth.w	r3, lr
 8000296:	fbb1 f0f7 	udiv	r0, r1, r7
 800029a:	fb07 1110 	mls	r1, r7, r0, r1
 800029e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a2:	fb00 f606 	mul.w	r6, r0, r6
 80002a6:	429e      	cmp	r6, r3
 80002a8:	d90a      	bls.n	80002c0 <__udivmoddi4+0x94>
 80002aa:	eb1c 0303 	adds.w	r3, ip, r3
 80002ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b2:	f080 80fc 	bcs.w	80004ae <__udivmoddi4+0x282>
 80002b6:	429e      	cmp	r6, r3
 80002b8:	f240 80f9 	bls.w	80004ae <__udivmoddi4+0x282>
 80002bc:	4463      	add	r3, ip
 80002be:	3802      	subs	r0, #2
 80002c0:	1b9b      	subs	r3, r3, r6
 80002c2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	b11d      	cbz	r5, 80002d2 <__udivmoddi4+0xa6>
 80002ca:	40d3      	lsrs	r3, r2
 80002cc:	2200      	movs	r2, #0
 80002ce:	e9c5 3200 	strd	r3, r2, [r5]
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d905      	bls.n	80002e6 <__udivmoddi4+0xba>
 80002da:	b10d      	cbz	r5, 80002e0 <__udivmoddi4+0xb4>
 80002dc:	e9c5 0100 	strd	r0, r1, [r5]
 80002e0:	2100      	movs	r1, #0
 80002e2:	4608      	mov	r0, r1
 80002e4:	e7f5      	b.n	80002d2 <__udivmoddi4+0xa6>
 80002e6:	fab3 f183 	clz	r1, r3
 80002ea:	2900      	cmp	r1, #0
 80002ec:	d146      	bne.n	800037c <__udivmoddi4+0x150>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xcc>
 80002f2:	4290      	cmp	r0, r2
 80002f4:	f0c0 80f0 	bcc.w	80004d8 <__udivmoddi4+0x2ac>
 80002f8:	1a86      	subs	r6, r0, r2
 80002fa:	eb64 0303 	sbc.w	r3, r4, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	2d00      	cmp	r5, #0
 8000302:	d0e6      	beq.n	80002d2 <__udivmoddi4+0xa6>
 8000304:	e9c5 6300 	strd	r6, r3, [r5]
 8000308:	e7e3      	b.n	80002d2 <__udivmoddi4+0xa6>
 800030a:	2a00      	cmp	r2, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x204>
 8000310:	eba1 040c 	sub.w	r4, r1, ip
 8000314:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000318:	fa1f f78c 	uxth.w	r7, ip
 800031c:	2101      	movs	r1, #1
 800031e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000322:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000326:	fb08 4416 	mls	r4, r8, r6, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb07 f006 	mul.w	r0, r7, r6
 8000332:	4298      	cmp	r0, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x11c>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f106 34ff 	add.w	r4, r6, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x11a>
 8000340:	4298      	cmp	r0, r3
 8000342:	f200 80cd 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 8000346:	4626      	mov	r6, r4
 8000348:	1a1c      	subs	r4, r3, r0
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000352:	fb08 4410 	mls	r4, r8, r0, r4
 8000356:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035a:	fb00 f707 	mul.w	r7, r0, r7
 800035e:	429f      	cmp	r7, r3
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x148>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 34ff 	add.w	r4, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x146>
 800036c:	429f      	cmp	r7, r3
 800036e:	f200 80b0 	bhi.w	80004d2 <__udivmoddi4+0x2a6>
 8000372:	4620      	mov	r0, r4
 8000374:	1bdb      	subs	r3, r3, r7
 8000376:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037a:	e7a5      	b.n	80002c8 <__udivmoddi4+0x9c>
 800037c:	f1c1 0620 	rsb	r6, r1, #32
 8000380:	408b      	lsls	r3, r1
 8000382:	fa22 f706 	lsr.w	r7, r2, r6
 8000386:	431f      	orrs	r7, r3
 8000388:	fa20 fc06 	lsr.w	ip, r0, r6
 800038c:	fa04 f301 	lsl.w	r3, r4, r1
 8000390:	ea43 030c 	orr.w	r3, r3, ip
 8000394:	40f4      	lsrs	r4, r6
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	0c38      	lsrs	r0, r7, #16
 800039c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a0:	fbb4 fef0 	udiv	lr, r4, r0
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	fb00 441e 	mls	r4, r0, lr, r4
 80003ac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b0:	fb0e f90c 	mul.w	r9, lr, ip
 80003b4:	45a1      	cmp	r9, r4
 80003b6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x1a6>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c2:	f080 8084 	bcs.w	80004ce <__udivmoddi4+0x2a2>
 80003c6:	45a1      	cmp	r9, r4
 80003c8:	f240 8081 	bls.w	80004ce <__udivmoddi4+0x2a2>
 80003cc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	eba4 0409 	sub.w	r4, r4, r9
 80003d6:	fa1f f983 	uxth.w	r9, r3
 80003da:	fbb4 f3f0 	udiv	r3, r4, r0
 80003de:	fb00 4413 	mls	r4, r0, r3, r4
 80003e2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003e6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ea:	45a4      	cmp	ip, r4
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x1d2>
 80003ee:	193c      	adds	r4, r7, r4
 80003f0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f4:	d267      	bcs.n	80004c6 <__udivmoddi4+0x29a>
 80003f6:	45a4      	cmp	ip, r4
 80003f8:	d965      	bls.n	80004c6 <__udivmoddi4+0x29a>
 80003fa:	3b02      	subs	r3, #2
 80003fc:	443c      	add	r4, r7
 80003fe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000402:	fba0 9302 	umull	r9, r3, r0, r2
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	429c      	cmp	r4, r3
 800040c:	46ce      	mov	lr, r9
 800040e:	469c      	mov	ip, r3
 8000410:	d351      	bcc.n	80004b6 <__udivmoddi4+0x28a>
 8000412:	d04e      	beq.n	80004b2 <__udivmoddi4+0x286>
 8000414:	b155      	cbz	r5, 800042c <__udivmoddi4+0x200>
 8000416:	ebb8 030e 	subs.w	r3, r8, lr
 800041a:	eb64 040c 	sbc.w	r4, r4, ip
 800041e:	fa04 f606 	lsl.w	r6, r4, r6
 8000422:	40cb      	lsrs	r3, r1
 8000424:	431e      	orrs	r6, r3
 8000426:	40cc      	lsrs	r4, r1
 8000428:	e9c5 6400 	strd	r6, r4, [r5]
 800042c:	2100      	movs	r1, #0
 800042e:	e750      	b.n	80002d2 <__udivmoddi4+0xa6>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f103 	lsr.w	r1, r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa24 f303 	lsr.w	r3, r4, r3
 8000440:	4094      	lsls	r4, r2
 8000442:	430c      	orrs	r4, r1
 8000444:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000448:	fa00 fe02 	lsl.w	lr, r0, r2
 800044c:	fa1f f78c 	uxth.w	r7, ip
 8000450:	fbb3 f0f8 	udiv	r0, r3, r8
 8000454:	fb08 3110 	mls	r1, r8, r0, r3
 8000458:	0c23      	lsrs	r3, r4, #16
 800045a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045e:	fb00 f107 	mul.w	r1, r0, r7
 8000462:	4299      	cmp	r1, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x24c>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 36ff 	add.w	r6, r0, #4294967295
 800046e:	d22c      	bcs.n	80004ca <__udivmoddi4+0x29e>
 8000470:	4299      	cmp	r1, r3
 8000472:	d92a      	bls.n	80004ca <__udivmoddi4+0x29e>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1a5b      	subs	r3, r3, r1
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000480:	fb08 3311 	mls	r3, r8, r1, r3
 8000484:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000488:	fb01 f307 	mul.w	r3, r1, r7
 800048c:	42a3      	cmp	r3, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x276>
 8000490:	eb1c 0404 	adds.w	r4, ip, r4
 8000494:	f101 36ff 	add.w	r6, r1, #4294967295
 8000498:	d213      	bcs.n	80004c2 <__udivmoddi4+0x296>
 800049a:	42a3      	cmp	r3, r4
 800049c:	d911      	bls.n	80004c2 <__udivmoddi4+0x296>
 800049e:	3902      	subs	r1, #2
 80004a0:	4464      	add	r4, ip
 80004a2:	1ae4      	subs	r4, r4, r3
 80004a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a8:	e739      	b.n	800031e <__udivmoddi4+0xf2>
 80004aa:	4604      	mov	r4, r0
 80004ac:	e6f0      	b.n	8000290 <__udivmoddi4+0x64>
 80004ae:	4608      	mov	r0, r1
 80004b0:	e706      	b.n	80002c0 <__udivmoddi4+0x94>
 80004b2:	45c8      	cmp	r8, r9
 80004b4:	d2ae      	bcs.n	8000414 <__udivmoddi4+0x1e8>
 80004b6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ba:	eb63 0c07 	sbc.w	ip, r3, r7
 80004be:	3801      	subs	r0, #1
 80004c0:	e7a8      	b.n	8000414 <__udivmoddi4+0x1e8>
 80004c2:	4631      	mov	r1, r6
 80004c4:	e7ed      	b.n	80004a2 <__udivmoddi4+0x276>
 80004c6:	4603      	mov	r3, r0
 80004c8:	e799      	b.n	80003fe <__udivmoddi4+0x1d2>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e7d4      	b.n	8000478 <__udivmoddi4+0x24c>
 80004ce:	46d6      	mov	lr, sl
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1a6>
 80004d2:	4463      	add	r3, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e74d      	b.n	8000374 <__udivmoddi4+0x148>
 80004d8:	4606      	mov	r6, r0
 80004da:	4623      	mov	r3, r4
 80004dc:	4608      	mov	r0, r1
 80004de:	e70f      	b.n	8000300 <__udivmoddi4+0xd4>
 80004e0:	3e02      	subs	r6, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	e730      	b.n	8000348 <__udivmoddi4+0x11c>
 80004e6:	bf00      	nop

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 faa5 	bl	8000a3e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f808 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f8e4 	bl	80006c4 <MX_GPIO_Init>
  MX_I2C2_Init();
 80004fc:	f000 f856 	bl	80005ac <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f894 	bl	800062c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <main+0x18>

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b096      	sub	sp, #88	@ 0x58
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0314 	add.w	r3, r7, #20
 8000512:	2244      	movs	r2, #68	@ 0x44
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fa3a 	bl	8003990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	463b      	mov	r3, r7
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800052a:	2000      	movs	r0, #0
 800052c:	f000 ff2e 	bl	800138c <HAL_PWREx_ControlVoltageScaling>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000536:	f000 f929 	bl	800078c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800053a:	2310      	movs	r3, #16
 800053c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800053e:	2301      	movs	r3, #1
 8000540:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000546:	2360      	movs	r3, #96	@ 0x60
 8000548:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800054e:	2301      	movs	r3, #1
 8000550:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000552:	2301      	movs	r3, #1
 8000554:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000556:	233c      	movs	r3, #60	@ 0x3c
 8000558:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055a:	2302      	movs	r3, #2
 800055c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800055e:	2302      	movs	r3, #2
 8000560:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0314 	add.w	r3, r7, #20
 800056a:	4618      	mov	r0, r3
 800056c:	f000 ffb2 	bl	80014d4 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000576:	f000 f909 	bl	800078c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2303      	movs	r3, #3
 8000580:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	2105      	movs	r1, #5
 8000592:	4618      	mov	r0, r3
 8000594:	f001 fbb8 	bl	8001d08 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800059e:	f000 f8f5 	bl	800078c <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3758      	adds	r7, #88	@ 0x58
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005b2:	4a1c      	ldr	r2, [pc, #112]	@ (8000624 <MX_I2C2_Init+0x78>)
 80005b4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005b8:	4a1b      	ldr	r2, [pc, #108]	@ (8000628 <MX_I2C2_Init+0x7c>)
 80005ba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80005bc:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c2:	4b17      	ldr	r3, [pc, #92]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005c8:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005ce:	4b14      	ldr	r3, [pc, #80]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005dc:	2200      	movs	r2, #0
 80005de:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80005e6:	480e      	ldr	r0, [pc, #56]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005e8:	f000 fd7d 	bl	80010e6 <HAL_I2C_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80005f2:	f000 f8cb 	bl	800078c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4809      	ldr	r0, [pc, #36]	@ (8000620 <MX_I2C2_Init+0x74>)
 80005fa:	f000 fe0f 	bl	800121c <HAL_I2CEx_ConfigAnalogFilter>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000604:	f000 f8c2 	bl	800078c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000608:	2100      	movs	r1, #0
 800060a:	4805      	ldr	r0, [pc, #20]	@ (8000620 <MX_I2C2_Init+0x74>)
 800060c:	f000 fe51 	bl	80012b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000616:	f000 f8b9 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000028 	.word	0x20000028
 8000624:	40005800 	.word	0x40005800
 8000628:	30a175ab 	.word	0x30a175ab

0800062c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000630:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000632:	4a23      	ldr	r2, [pc, #140]	@ (80006c0 <MX_USART1_UART_Init+0x94>)
 8000634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000636:	4b21      	ldr	r3, [pc, #132]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000638:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800063c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800063e:	4b1f      	ldr	r3, [pc, #124]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000644:	4b1d      	ldr	r3, [pc, #116]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064a:	4b1c      	ldr	r3, [pc, #112]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 800064c:	2200      	movs	r2, #0
 800064e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000650:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000652:	220c      	movs	r2, #12
 8000654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000656:	4b19      	ldr	r3, [pc, #100]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 800066a:	2200      	movs	r2, #0
 800066c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000670:	2200      	movs	r2, #0
 8000672:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000674:	4811      	ldr	r0, [pc, #68]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000676:	f002 fb1d 	bl	8002cb4 <HAL_UART_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000680:	f000 f884 	bl	800078c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000684:	2100      	movs	r1, #0
 8000686:	480d      	ldr	r0, [pc, #52]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 8000688:	f003 f8b8 	bl	80037fc <HAL_UARTEx_SetTxFifoThreshold>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000692:	f000 f87b 	bl	800078c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4808      	ldr	r0, [pc, #32]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 800069a:	f003 f8ed 	bl	8003878 <HAL_UARTEx_SetRxFifoThreshold>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006a4:	f000 f872 	bl	800078c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_USART1_UART_Init+0x90>)
 80006aa:	f003 f86e 	bl	800378a <HAL_UARTEx_DisableFifoMode>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006b4:	f000 f86a 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	40013800 	.word	0x40013800

080006c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <MX_GPIO_Init+0xbc>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4a28      	ldr	r2, [pc, #160]	@ (8000780 <MX_GPIO_Init+0xbc>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <MX_GPIO_Init+0xbc>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <MX_GPIO_Init+0xbc>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <MX_GPIO_Init+0xbc>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <MX_GPIO_Init+0xbc>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <MX_GPIO_Init+0xbc>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a1c      	ldr	r2, [pc, #112]	@ (8000780 <MX_GPIO_Init+0xbc>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <MX_GPIO_Init+0xbc>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000728:	4816      	ldr	r0, [pc, #88]	@ (8000784 <MX_GPIO_Init+0xc0>)
 800072a:	f000 fca1 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800072e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000734:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	4810      	ldr	r0, [pc, #64]	@ (8000788 <MX_GPIO_Init+0xc4>)
 8000746:	f000 fb01 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800074a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800074e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2301      	movs	r3, #1
 8000752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075c:	f107 030c 	add.w	r3, r7, #12
 8000760:	4619      	mov	r1, r3
 8000762:	4808      	ldr	r0, [pc, #32]	@ (8000784 <MX_GPIO_Init+0xc0>)
 8000764:	f000 faf2 	bl	8000d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000768:	2200      	movs	r2, #0
 800076a:	2100      	movs	r1, #0
 800076c:	2028      	movs	r0, #40	@ 0x28
 800076e:	f000 fab6 	bl	8000cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000772:	2028      	movs	r0, #40	@ 0x28
 8000774:	f000 facf 	bl	8000d16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000778:	bf00      	nop
 800077a:	3720      	adds	r7, #32
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40021000 	.word	0x40021000
 8000784:	48000400 	.word	0x48000400
 8000788:	48000800 	.word	0x48000800

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <Error_Handler+0x8>

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_MspInit+0x44>)
 80007a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <HAL_MspInit+0x44>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b6:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <HAL_MspInit+0x44>)
 80007b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ba:	4a08      	ldr	r2, [pc, #32]	@ (80007dc <HAL_MspInit+0x44>)
 80007bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80007c2:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b0ae      	sub	sp, #184	@ 0xb8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	f107 0310 	add.w	r3, r7, #16
 80007fc:	2294      	movs	r2, #148	@ 0x94
 80007fe:	2100      	movs	r1, #0
 8000800:	4618      	mov	r0, r3
 8000802:	f003 f8c5 	bl	8003990 <memset>
  if(hi2c->Instance==I2C2)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <HAL_I2C_MspInit+0xb0>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d13b      	bne.n	8000888 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000810:	2380      	movs	r3, #128	@ 0x80
 8000812:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000814:	2300      	movs	r3, #0
 8000816:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fd31 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000828:	f7ff ffb0 	bl	800078c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082c:	4b19      	ldr	r3, [pc, #100]	@ (8000894 <HAL_I2C_MspInit+0xb4>)
 800082e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000830:	4a18      	ldr	r2, [pc, #96]	@ (8000894 <HAL_I2C_MspInit+0xb4>)
 8000832:	f043 0302 	orr.w	r3, r3, #2
 8000836:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000838:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <HAL_I2C_MspInit+0xb4>)
 800083a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083c:	f003 0302 	and.w	r3, r3, #2
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000844:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000848:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800084c:	2312      	movs	r3, #18
 800084e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800085e:	2304      	movs	r3, #4
 8000860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000864:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000868:	4619      	mov	r1, r3
 800086a:	480b      	ldr	r0, [pc, #44]	@ (8000898 <HAL_I2C_MspInit+0xb8>)
 800086c:	f000 fa6e 	bl	8000d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <HAL_I2C_MspInit+0xb4>)
 8000872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000874:	4a07      	ldr	r2, [pc, #28]	@ (8000894 <HAL_I2C_MspInit+0xb4>)
 8000876:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800087a:	6593      	str	r3, [r2, #88]	@ 0x58
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <HAL_I2C_MspInit+0xb4>)
 800087e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000880:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000888:	bf00      	nop
 800088a:	37b8      	adds	r7, #184	@ 0xb8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40005800 	.word	0x40005800
 8000894:	40021000 	.word	0x40021000
 8000898:	48000400 	.word	0x48000400

0800089c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b0ae      	sub	sp, #184	@ 0xb8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b4:	f107 0310 	add.w	r3, r7, #16
 80008b8:	2294      	movs	r2, #148	@ 0x94
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 f867 	bl	8003990 <memset>
  if(huart->Instance==USART1)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a22      	ldr	r2, [pc, #136]	@ (8000950 <HAL_UART_MspInit+0xb4>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d13c      	bne.n	8000946 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008cc:	2301      	movs	r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4618      	mov	r0, r3
 80008da:	f001 fcd3 	bl	8002284 <HAL_RCCEx_PeriphCLKConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e4:	f7ff ff52 	bl	800078c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000954 <HAL_UART_MspInit+0xb8>)
 80008ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ec:	4a19      	ldr	r2, [pc, #100]	@ (8000954 <HAL_UART_MspInit+0xb8>)
 80008ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f4:	4b17      	ldr	r3, [pc, #92]	@ (8000954 <HAL_UART_MspInit+0xb8>)
 80008f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <HAL_UART_MspInit+0xb8>)
 8000902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000904:	4a13      	ldr	r2, [pc, #76]	@ (8000954 <HAL_UART_MspInit+0xb8>)
 8000906:	f043 0301 	orr.w	r3, r3, #1
 800090a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <HAL_UART_MspInit+0xb8>)
 800090e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000918:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800091c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000932:	2307      	movs	r3, #7
 8000934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800093c:	4619      	mov	r1, r3
 800093e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000942:	f000 fa03 	bl	8000d4c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000946:	bf00      	nop
 8000948:	37b8      	adds	r7, #184	@ 0xb8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40013800 	.word	0x40013800
 8000954:	40021000 	.word	0x40021000

08000958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <NMI_Handler+0x4>

08000960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <HardFault_Handler+0x4>

08000968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800096c:	bf00      	nop
 800096e:	e7fd      	b.n	800096c <MemManage_Handler+0x4>

08000970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <BusFault_Handler+0x4>

08000978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <UsageFault_Handler+0x4>

08000980 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ae:	f000 f89b 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009ba:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80009be:	f000 fb6f 	bl	80010a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
	...

080009c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <SystemInit+0x20>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <SystemInit+0x20>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	e000ed00 	.word	0xe000ed00

080009ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a24 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f0:	f7ff ffea 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	@ (8000a28 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	@ (8000a2c <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <LoopForever+0xe>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a38 <LoopForever+0x16>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a1a:	f002 ffc1 	bl	80039a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1e:	f7ff fd65 	bl	80004ec <main>

08000a22 <LoopForever>:

LoopForever:
    b LoopForever
 8000a22:	e7fe      	b.n	8000a22 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a24:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a30:	08003a80 	.word	0x08003a80
  ldr r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a38:	20000114 	.word	0x20000114

08000a3c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_IRQHandler>

08000a3e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a44:	2300      	movs	r3, #0
 8000a46:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a48:	2003      	movs	r0, #3
 8000a4a:	f000 f93d 	bl	8000cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4e:	2000      	movs	r0, #0
 8000a50:	f000 f80e 	bl	8000a70 <HAL_InitTick>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d002      	beq.n	8000a60 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	e001      	b.n	8000a64 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a60:	f7ff fe9a 	bl	8000798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a7c:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_InitTick+0x6c>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d023      	beq.n	8000acc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <HAL_InitTick+0x70>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_InitTick+0x6c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f949 	bl	8000d32 <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d10f      	bne.n	8000ac6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d809      	bhi.n	8000ac0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	f000 f913 	bl	8000cde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0x74>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	e007      	b.n	8000ad0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
 8000ac4:	e004      	b.n	8000ad0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	e001      	b.n	8000ad0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000acc:	2301      	movs	r3, #1
 8000ace:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <HAL_IncTick+0x20>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_IncTick+0x24>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	4a04      	ldr	r2, [pc, #16]	@ (8000b0c <HAL_IncTick+0x24>)
 8000afa:	6013      	str	r3, [r2, #0]
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	20000008 	.word	0x20000008
 8000b0c:	20000110 	.word	0x20000110

08000b10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  return uwTick;
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_GetTick+0x14>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000110 	.word	0x20000110

08000b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b3e:	68ba      	ldr	r2, [r7, #8]
 8000b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5a:	4a04      	ldr	r2, [pc, #16]	@ (8000b6c <__NVIC_SetPriorityGrouping+0x44>)
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	60d3      	str	r3, [r2, #12]
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <__NVIC_GetPriorityGrouping+0x18>)
 8000b76:	68db      	ldr	r3, [r3, #12]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 0307 	and.w	r3, r3, #7
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	db0b      	blt.n	8000bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	f003 021f 	and.w	r2, r3, #31
 8000ba4:	4907      	ldr	r1, [pc, #28]	@ (8000bc4 <__NVIC_EnableIRQ+0x38>)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	095b      	lsrs	r3, r3, #5
 8000bac:	2001      	movs	r0, #1
 8000bae:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000e100 	.word	0xe000e100

08000bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	db0a      	blt.n	8000bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	490c      	ldr	r1, [pc, #48]	@ (8000c14 <__NVIC_SetPriority+0x4c>)
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	0112      	lsls	r2, r2, #4
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	440b      	add	r3, r1
 8000bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf0:	e00a      	b.n	8000c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4908      	ldr	r1, [pc, #32]	@ (8000c18 <__NVIC_SetPriority+0x50>)
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	f003 030f 	and.w	r3, r3, #15
 8000bfe:	3b04      	subs	r3, #4
 8000c00:	0112      	lsls	r2, r2, #4
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	440b      	add	r3, r1
 8000c06:	761a      	strb	r2, [r3, #24]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000e100 	.word	0xe000e100
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	@ 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	f1c3 0307 	rsb	r3, r3, #7
 8000c36:	2b04      	cmp	r3, #4
 8000c38:	bf28      	it	cs
 8000c3a:	2304      	movcs	r3, #4
 8000c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	3304      	adds	r3, #4
 8000c42:	2b06      	cmp	r3, #6
 8000c44:	d902      	bls.n	8000c4c <NVIC_EncodePriority+0x30>
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3b03      	subs	r3, #3
 8000c4a:	e000      	b.n	8000c4e <NVIC_EncodePriority+0x32>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	f04f 32ff 	mov.w	r2, #4294967295
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	401a      	ands	r2, r3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c64:	f04f 31ff 	mov.w	r1, #4294967295
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6e:	43d9      	mvns	r1, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	4313      	orrs	r3, r2
         );
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3724      	adds	r7, #36	@ 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
	...

08000c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	3b01      	subs	r3, #1
 8000c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c94:	d301      	bcc.n	8000c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00f      	b.n	8000cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <SysTick_Config+0x40>)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca2:	210f      	movs	r1, #15
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca8:	f7ff ff8e 	bl	8000bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cac:	4b05      	ldr	r3, [pc, #20]	@ (8000cc4 <SysTick_Config+0x40>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb2:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <SysTick_Config+0x40>)
 8000cb4:	2207      	movs	r2, #7
 8000cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff29 	bl	8000b28 <__NVIC_SetPriorityGrouping>
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b086      	sub	sp, #24
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf0:	f7ff ff3e 	bl	8000b70 <__NVIC_GetPriorityGrouping>
 8000cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	68b9      	ldr	r1, [r7, #8]
 8000cfa:	6978      	ldr	r0, [r7, #20]
 8000cfc:	f7ff ff8e 	bl	8000c1c <NVIC_EncodePriority>
 8000d00:	4602      	mov	r2, r0
 8000d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d06:	4611      	mov	r1, r2
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f7ff ff5d 	bl	8000bc8 <__NVIC_SetPriority>
}
 8000d0e:	bf00      	nop
 8000d10:	3718      	adds	r7, #24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b082      	sub	sp, #8
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff31 	bl	8000b8c <__NVIC_EnableIRQ>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ffa2 	bl	8000c84 <SysTick_Config>
 8000d40:	4603      	mov	r3, r0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	e166      	b.n	800102a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8158 	beq.w	8001024 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d005      	beq.n	8000d8c <HAL_GPIO_Init+0x40>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d130      	bne.n	8000dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 0201 	and.w	r2, r3, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d017      	beq.n	8000e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d123      	bne.n	8000e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f003 0307 	and.w	r3, r3, #7
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	6939      	ldr	r1, [r7, #16]
 8000e7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	693a      	ldr	r2, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 0203 	and.w	r2, r3, #3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 80b2 	beq.w	8001024 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec0:	4b61      	ldr	r3, [pc, #388]	@ (8001048 <HAL_GPIO_Init+0x2fc>)
 8000ec2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec4:	4a60      	ldr	r2, [pc, #384]	@ (8001048 <HAL_GPIO_Init+0x2fc>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ecc:	4b5e      	ldr	r3, [pc, #376]	@ (8001048 <HAL_GPIO_Init+0x2fc>)
 8000ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed8:	4a5c      	ldr	r2, [pc, #368]	@ (800104c <HAL_GPIO_Init+0x300>)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f02:	d02b      	beq.n	8000f5c <HAL_GPIO_Init+0x210>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a52      	ldr	r2, [pc, #328]	@ (8001050 <HAL_GPIO_Init+0x304>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d025      	beq.n	8000f58 <HAL_GPIO_Init+0x20c>
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	4a51      	ldr	r2, [pc, #324]	@ (8001054 <HAL_GPIO_Init+0x308>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d01f      	beq.n	8000f54 <HAL_GPIO_Init+0x208>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a50      	ldr	r2, [pc, #320]	@ (8001058 <HAL_GPIO_Init+0x30c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d019      	beq.n	8000f50 <HAL_GPIO_Init+0x204>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a4f      	ldr	r2, [pc, #316]	@ (800105c <HAL_GPIO_Init+0x310>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d013      	beq.n	8000f4c <HAL_GPIO_Init+0x200>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a4e      	ldr	r2, [pc, #312]	@ (8001060 <HAL_GPIO_Init+0x314>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00d      	beq.n	8000f48 <HAL_GPIO_Init+0x1fc>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8001064 <HAL_GPIO_Init+0x318>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x1f8>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a4c      	ldr	r2, [pc, #304]	@ (8001068 <HAL_GPIO_Init+0x31c>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_GPIO_Init+0x1f4>
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	e00e      	b.n	8000f5e <HAL_GPIO_Init+0x212>
 8000f40:	2308      	movs	r3, #8
 8000f42:	e00c      	b.n	8000f5e <HAL_GPIO_Init+0x212>
 8000f44:	2306      	movs	r3, #6
 8000f46:	e00a      	b.n	8000f5e <HAL_GPIO_Init+0x212>
 8000f48:	2305      	movs	r3, #5
 8000f4a:	e008      	b.n	8000f5e <HAL_GPIO_Init+0x212>
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	e006      	b.n	8000f5e <HAL_GPIO_Init+0x212>
 8000f50:	2303      	movs	r3, #3
 8000f52:	e004      	b.n	8000f5e <HAL_GPIO_Init+0x212>
 8000f54:	2302      	movs	r3, #2
 8000f56:	e002      	b.n	8000f5e <HAL_GPIO_Init+0x212>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <HAL_GPIO_Init+0x212>
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	f002 0203 	and.w	r2, r2, #3
 8000f64:	0092      	lsls	r2, r2, #2
 8000f66:	4093      	lsls	r3, r2
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f6e:	4937      	ldr	r1, [pc, #220]	@ (800104c <HAL_GPIO_Init+0x300>)
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	3302      	adds	r3, #2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800106c <HAL_GPIO_Init+0x320>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fa0:	4a32      	ldr	r2, [pc, #200]	@ (800106c <HAL_GPIO_Init+0x320>)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fa6:	4b31      	ldr	r3, [pc, #196]	@ (800106c <HAL_GPIO_Init+0x320>)
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fca:	4a28      	ldr	r2, [pc, #160]	@ (800106c <HAL_GPIO_Init+0x320>)
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fd0:	4b26      	ldr	r3, [pc, #152]	@ (800106c <HAL_GPIO_Init+0x320>)
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ff4:	4a1d      	ldr	r2, [pc, #116]	@ (800106c <HAL_GPIO_Init+0x320>)
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	@ (800106c <HAL_GPIO_Init+0x320>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800101e:	4a13      	ldr	r2, [pc, #76]	@ (800106c <HAL_GPIO_Init+0x320>)
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa22 f303 	lsr.w	r3, r2, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	f47f ae91 	bne.w	8000d5c <HAL_GPIO_Init+0x10>
  }
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	48000400 	.word	0x48000400
 8001054:	48000800 	.word	0x48000800
 8001058:	48000c00 	.word	0x48000c00
 800105c:	48001000 	.word	0x48001000
 8001060:	48001400 	.word	0x48001400
 8001064:	48001800 	.word	0x48001800
 8001068:	48001c00 	.word	0x48001c00
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800108c:	e002      	b.n	8001094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80010aa:	4b08      	ldr	r3, [pc, #32]	@ (80010cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d006      	beq.n	80010c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010b6:	4a05      	ldr	r2, [pc, #20]	@ (80010cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f806 	bl	80010d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	e08d      	b.n	8001214 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff fb67 	bl	80007e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2224      	movs	r2, #36	@ 0x24
 8001116:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f022 0201 	bic.w	r2, r2, #1
 8001128:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685a      	ldr	r2, [r3, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001136:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689a      	ldr	r2, [r3, #8]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001146:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d107      	bne.n	8001160 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	e006      	b.n	800116e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800116c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d108      	bne.n	8001188 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	e007      	b.n	8001198 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001196:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011aa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68da      	ldr	r2, [r3, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011ba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691a      	ldr	r2, [r3, #16]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69d9      	ldr	r1, [r3, #28]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a1a      	ldr	r2, [r3, #32]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f042 0201 	orr.w	r2, r2, #1
 80011f4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2200      	movs	r2, #0
 80011fa:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2220      	movs	r2, #32
 8001200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b20      	cmp	r3, #32
 8001230:	d138      	bne.n	80012a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800123c:	2302      	movs	r3, #2
 800123e:	e032      	b.n	80012a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2224      	movs	r2, #36	@ 0x24
 800124c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800126e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	683a      	ldr	r2, [r7, #0]
 800127c:	430a      	orrs	r2, r1
 800127e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f042 0201 	orr.w	r2, r2, #1
 800128e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2220      	movs	r2, #32
 8001294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e000      	b.n	80012a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012a4:	2302      	movs	r3, #2
  }
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b20      	cmp	r3, #32
 80012c6:	d139      	bne.n	800133c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d101      	bne.n	80012d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e033      	b.n	800133e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2224      	movs	r2, #36	@ 0x24
 80012e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001304:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	021b      	lsls	r3, r3, #8
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	4313      	orrs	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2220      	movs	r2, #32
 800132c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001338:	2300      	movs	r3, #0
 800133a:	e000      	b.n	800133e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800133c:	2302      	movs	r3, #2
  }
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
	...

0800134c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001350:	4b0d      	ldr	r3, [pc, #52]	@ (8001388 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001358:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800135c:	d102      	bne.n	8001364 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800135e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001362:	e00b      	b.n	800137c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001364:	4b08      	ldr	r3, [pc, #32]	@ (8001388 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001366:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800136a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001372:	d102      	bne.n	800137a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001374:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001378:	e000      	b.n	800137c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800137a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800137c:	4618      	mov	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40007000 	.word	0x40007000

0800138c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d141      	bne.n	800141e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800139a:	4b4b      	ldr	r3, [pc, #300]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013a6:	d131      	bne.n	800140c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013a8:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80013ae:	4a46      	ldr	r2, [pc, #280]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013b4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b8:	4b43      	ldr	r3, [pc, #268]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013c0:	4a41      	ldr	r2, [pc, #260]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013c8:	4b40      	ldr	r3, [pc, #256]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2232      	movs	r2, #50	@ 0x32
 80013ce:	fb02 f303 	mul.w	r3, r2, r3
 80013d2:	4a3f      	ldr	r2, [pc, #252]	@ (80014d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013d4:	fba2 2303 	umull	r2, r3, r2, r3
 80013d8:	0c9b      	lsrs	r3, r3, #18
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013de:	e002      	b.n	80013e6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e6:	4b38      	ldr	r3, [pc, #224]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013f2:	d102      	bne.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f2      	bne.n	80013e0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013fa:	4b33      	ldr	r3, [pc, #204]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001406:	d158      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e057      	b.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800140c:	4b2e      	ldr	r3, [pc, #184]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001412:	4a2d      	ldr	r2, [pc, #180]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001414:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001418:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800141c:	e04d      	b.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001424:	d141      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001426:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800142e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001432:	d131      	bne.n	8001498 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001434:	4b24      	ldr	r3, [pc, #144]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001436:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800143a:	4a23      	ldr	r2, [pc, #140]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001440:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001444:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800144c:	4a1e      	ldr	r2, [pc, #120]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001452:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001454:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2232      	movs	r2, #50	@ 0x32
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	4a1c      	ldr	r2, [pc, #112]	@ (80014d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001460:	fba2 2303 	umull	r2, r3, r2, r3
 8001464:	0c9b      	lsrs	r3, r3, #18
 8001466:	3301      	adds	r3, #1
 8001468:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146a:	e002      	b.n	8001472 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	3b01      	subs	r3, #1
 8001470:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800147a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147e:	d102      	bne.n	8001486 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f2      	bne.n	800146c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	695b      	ldr	r3, [r3, #20]
 800148a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800148e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001492:	d112      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e011      	b.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001498:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149e:	4a0a      	ldr	r2, [pc, #40]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80014a8:	e007      	b.n	80014ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014aa:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014b8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	40007000 	.word	0x40007000
 80014cc:	20000000 	.word	0x20000000
 80014d0:	431bde83 	.word	0x431bde83

080014d4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f000 bc08 	b.w	8001cf8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e8:	4b96      	ldr	r3, [pc, #600]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f2:	4b94      	ldr	r3, [pc, #592]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0310 	and.w	r3, r3, #16
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 80e4 	beq.w	80016d2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d007      	beq.n	8001520 <HAL_RCC_OscConfig+0x4c>
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	2b0c      	cmp	r3, #12
 8001514:	f040 808b 	bne.w	800162e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	2b01      	cmp	r3, #1
 800151c:	f040 8087 	bne.w	800162e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001520:	4b88      	ldr	r3, [pc, #544]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_RCC_OscConfig+0x64>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e3df      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1a      	ldr	r2, [r3, #32]
 800153c:	4b81      	ldr	r3, [pc, #516]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d004      	beq.n	8001552 <HAL_RCC_OscConfig+0x7e>
 8001548:	4b7e      	ldr	r3, [pc, #504]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001550:	e005      	b.n	800155e <HAL_RCC_OscConfig+0x8a>
 8001552:	4b7c      	ldr	r3, [pc, #496]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001554:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001558:	091b      	lsrs	r3, r3, #4
 800155a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800155e:	4293      	cmp	r3, r2
 8001560:	d223      	bcs.n	80015aa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a1b      	ldr	r3, [r3, #32]
 8001566:	4618      	mov	r0, r3
 8001568:	f000 fdcc 	bl	8002104 <RCC_SetFlashLatencyFromMSIRange>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e3c0      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001576:	4b73      	ldr	r3, [pc, #460]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a72      	ldr	r2, [pc, #456]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800157c:	f043 0308 	orr.w	r3, r3, #8
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b70      	ldr	r3, [pc, #448]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	496d      	ldr	r1, [pc, #436]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001594:	4b6b      	ldr	r3, [pc, #428]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69db      	ldr	r3, [r3, #28]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	4968      	ldr	r1, [pc, #416]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
 80015a8:	e025      	b.n	80015f6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015aa:	4b66      	ldr	r3, [pc, #408]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a65      	ldr	r2, [pc, #404]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80015b0:	f043 0308 	orr.w	r3, r3, #8
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	4b63      	ldr	r3, [pc, #396]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1b      	ldr	r3, [r3, #32]
 80015c2:	4960      	ldr	r1, [pc, #384]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	495b      	ldr	r1, [pc, #364]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d109      	bne.n	80015f6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fd8c 	bl	8002104 <RCC_SetFlashLatencyFromMSIRange>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e380      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f6:	f000 fcc1 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 80015fa:	4602      	mov	r2, r0
 80015fc:	4b51      	ldr	r3, [pc, #324]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 030f 	and.w	r3, r3, #15
 8001606:	4950      	ldr	r1, [pc, #320]	@ (8001748 <HAL_RCC_OscConfig+0x274>)
 8001608:	5ccb      	ldrb	r3, [r1, r3]
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	4a4e      	ldr	r2, [pc, #312]	@ (800174c <HAL_RCC_OscConfig+0x278>)
 8001614:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001616:	4b4e      	ldr	r3, [pc, #312]	@ (8001750 <HAL_RCC_OscConfig+0x27c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fa28 	bl	8000a70 <HAL_InitTick>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d052      	beq.n	80016d0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	e364      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	699b      	ldr	r3, [r3, #24]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d032      	beq.n	800169c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001636:	4b43      	ldr	r3, [pc, #268]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a42      	ldr	r2, [pc, #264]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001642:	f7ff fa65 	bl	8000b10 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800164a:	f7ff fa61 	bl	8000b10 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e34d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800165c:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001668:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a35      	ldr	r2, [pc, #212]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800166e:	f043 0308 	orr.w	r3, r3, #8
 8001672:	6013      	str	r3, [r2, #0]
 8001674:	4b33      	ldr	r3, [pc, #204]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4930      	ldr	r1, [pc, #192]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001686:	4b2f      	ldr	r3, [pc, #188]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69db      	ldr	r3, [r3, #28]
 8001692:	021b      	lsls	r3, r3, #8
 8001694:	492b      	ldr	r1, [pc, #172]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e01a      	b.n	80016d2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800169c:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a28      	ldr	r2, [pc, #160]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80016a2:	f023 0301 	bic.w	r3, r3, #1
 80016a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a8:	f7ff fa32 	bl	8000b10 <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b0:	f7ff fa2e 	bl	8000b10 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e31a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c2:	4b20      	ldr	r3, [pc, #128]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f0      	bne.n	80016b0 <HAL_RCC_OscConfig+0x1dc>
 80016ce:	e000      	b.n	80016d2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d073      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b08      	cmp	r3, #8
 80016e2:	d005      	beq.n	80016f0 <HAL_RCC_OscConfig+0x21c>
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	2b0c      	cmp	r3, #12
 80016e8:	d10e      	bne.n	8001708 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b03      	cmp	r3, #3
 80016ee:	d10b      	bne.n	8001708 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f0:	4b14      	ldr	r3, [pc, #80]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d063      	beq.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d15f      	bne.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e2f7      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001710:	d106      	bne.n	8001720 <HAL_RCC_OscConfig+0x24c>
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	e025      	b.n	800176c <HAL_RCC_OscConfig+0x298>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001728:	d114      	bne.n	8001754 <HAL_RCC_OscConfig+0x280>
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001730:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001734:	6013      	str	r3, [r2, #0]
 8001736:	4b03      	ldr	r3, [pc, #12]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a02      	ldr	r2, [pc, #8]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800173c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	e013      	b.n	800176c <HAL_RCC_OscConfig+0x298>
 8001744:	40021000 	.word	0x40021000
 8001748:	08003a00 	.word	0x08003a00
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004
 8001754:	4ba0      	ldr	r3, [pc, #640]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a9f      	ldr	r2, [pc, #636]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b9d      	ldr	r3, [pc, #628]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a9c      	ldr	r2, [pc, #624]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d013      	beq.n	800179c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff f9cc 	bl	8000b10 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff f9c8 	bl	8000b10 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	@ 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e2b4      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178e:	4b92      	ldr	r3, [pc, #584]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d0f0      	beq.n	800177c <HAL_RCC_OscConfig+0x2a8>
 800179a:	e014      	b.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff f9b8 	bl	8000b10 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a4:	f7ff f9b4 	bl	8000b10 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b64      	cmp	r3, #100	@ 0x64
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e2a0      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b6:	4b88      	ldr	r3, [pc, #544]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2d0>
 80017c2:	e000      	b.n	80017c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d060      	beq.n	8001894 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	2b04      	cmp	r3, #4
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_OscConfig+0x310>
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b0c      	cmp	r3, #12
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d116      	bne.n	8001812 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e4:	4b7c      	ldr	r3, [pc, #496]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d005      	beq.n	80017fc <HAL_RCC_OscConfig+0x328>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e27d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b76      	ldr	r3, [pc, #472]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	061b      	lsls	r3, r3, #24
 800180a:	4973      	ldr	r1, [pc, #460]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800180c:	4313      	orrs	r3, r2
 800180e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001810:	e040      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d023      	beq.n	8001862 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800181a:	4b6f      	ldr	r3, [pc, #444]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a6e      	ldr	r2, [pc, #440]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001820:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001824:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001826:	f7ff f973 	bl	8000b10 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182e:	f7ff f96f 	bl	8000b10 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e25b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001840:	4b65      	ldr	r3, [pc, #404]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001848:	2b00      	cmp	r3, #0
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184c:	4b62      	ldr	r3, [pc, #392]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	061b      	lsls	r3, r3, #24
 800185a:	495f      	ldr	r1, [pc, #380]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
 8001860:	e018      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001862:	4b5d      	ldr	r3, [pc, #372]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a5c      	ldr	r2, [pc, #368]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001868:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800186c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7ff f94f 	bl	8000b10 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff f94b 	bl	8000b10 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e237      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001888:	4b53      	ldr	r3, [pc, #332]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1f0      	bne.n	8001876 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0308 	and.w	r3, r3, #8
 800189c:	2b00      	cmp	r3, #0
 800189e:	d03c      	beq.n	800191a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d01c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a8:	4b4b      	ldr	r3, [pc, #300]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018ae:	4a4a      	ldr	r2, [pc, #296]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b8:	f7ff f92a 	bl	8000b10 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c0:	f7ff f926 	bl	8000b10 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e212      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d0ef      	beq.n	80018c0 <HAL_RCC_OscConfig+0x3ec>
 80018e0:	e01b      	b.n	800191a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018e2:	4b3d      	ldr	r3, [pc, #244]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80018e8:	4a3b      	ldr	r2, [pc, #236]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80018ea:	f023 0301 	bic.w	r3, r3, #1
 80018ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff f90d 	bl	8000b10 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff f909 	bl	8000b10 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e1f5      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800190c:	4b32      	ldr	r3, [pc, #200]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d1ef      	bne.n	80018fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80a6 	beq.w	8001a74 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001928:	2300      	movs	r3, #0
 800192a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800192c:	4b2a      	ldr	r3, [pc, #168]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d10d      	bne.n	8001954 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001938:	4b27      	ldr	r3, [pc, #156]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193c:	4a26      	ldr	r2, [pc, #152]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800193e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001942:	6593      	str	r3, [r2, #88]	@ 0x58
 8001944:	4b24      	ldr	r3, [pc, #144]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 8001946:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001948:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001950:	2301      	movs	r3, #1
 8001952:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001954:	4b21      	ldr	r3, [pc, #132]	@ (80019dc <HAL_RCC_OscConfig+0x508>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d118      	bne.n	8001992 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001960:	4b1e      	ldr	r3, [pc, #120]	@ (80019dc <HAL_RCC_OscConfig+0x508>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <HAL_RCC_OscConfig+0x508>)
 8001966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800196c:	f7ff f8d0 	bl	8000b10 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001974:	f7ff f8cc 	bl	8000b10 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e1b8      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001986:	4b15      	ldr	r3, [pc, #84]	@ (80019dc <HAL_RCC_OscConfig+0x508>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <HAL_RCC_OscConfig+0x4d8>
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 800199c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019aa:	e029      	b.n	8001a00 <HAL_RCC_OscConfig+0x52c>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	d115      	bne.n	80019e0 <HAL_RCC_OscConfig+0x50c>
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ba:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019bc:	f043 0304 	orr.w	r3, r3, #4
 80019c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ca:	4a03      	ldr	r2, [pc, #12]	@ (80019d8 <HAL_RCC_OscConfig+0x504>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019d4:	e014      	b.n	8001a00 <HAL_RCC_OscConfig+0x52c>
 80019d6:	bf00      	nop
 80019d8:	40021000 	.word	0x40021000
 80019dc:	40007000 	.word	0x40007000
 80019e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019e6:	4a9c      	ldr	r2, [pc, #624]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80019f0:	4b99      	ldr	r3, [pc, #612]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 80019f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019f6:	4a98      	ldr	r2, [pc, #608]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d016      	beq.n	8001a36 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f882 	bl	8000b10 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a10:	f7ff f87e 	bl	8000b10 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e168      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a26:	4b8c      	ldr	r3, [pc, #560]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0ed      	beq.n	8001a10 <HAL_RCC_OscConfig+0x53c>
 8001a34:	e015      	b.n	8001a62 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a36:	f7ff f86b 	bl	8000b10 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a3c:	e00a      	b.n	8001a54 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff f867 	bl	8000b10 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e151      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a54:	4b80      	ldr	r3, [pc, #512]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ed      	bne.n	8001a3e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a62:	7ffb      	ldrb	r3, [r7, #31]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	4b7b      	ldr	r3, [pc, #492]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6c:	4a7a      	ldr	r2, [pc, #488]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001a6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d03c      	beq.n	8001afa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d01c      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a88:	4b73      	ldr	r3, [pc, #460]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001a8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001a8e:	4a72      	ldr	r2, [pc, #456]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff f83a 	bl	8000b10 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001aa0:	f7ff f836 	bl	8000b10 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e122      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ab2:	4b69      	ldr	r3, [pc, #420]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001ab4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ef      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x5cc>
 8001ac0:	e01b      	b.n	8001afa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ac2:	4b65      	ldr	r3, [pc, #404]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001ac4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ac8:	4a63      	ldr	r2, [pc, #396]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001aca:	f023 0301 	bic.w	r3, r3, #1
 8001ace:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad2:	f7ff f81d 	bl	8000b10 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ada:	f7ff f819 	bl	8000b10 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e105      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001aec:	4b5a      	ldr	r3, [pc, #360]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001aee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ef      	bne.n	8001ada <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80f9 	beq.w	8001cf6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	f040 80cf 	bne.w	8001cac <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b0e:	4b52      	ldr	r3, [pc, #328]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f003 0203 	and.w	r2, r3, #3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d12c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d123      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b3e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d11b      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b4e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d113      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b5e:	085b      	lsrs	r3, r3, #1
 8001b60:	3b01      	subs	r3, #1
 8001b62:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d109      	bne.n	8001b7c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	085b      	lsrs	r3, r3, #1
 8001b74:	3b01      	subs	r3, #1
 8001b76:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d071      	beq.n	8001c60 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d068      	beq.n	8001c54 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b82:	4b35      	ldr	r3, [pc, #212]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b8e:	4b32      	ldr	r3, [pc, #200]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e0ac      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001ba4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ba8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001baa:	f7fe ffb1 	bl	8000b10 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb2:	f7fe ffad 	bl	8000b10 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e099      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc4:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1f0      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd0:	4b21      	ldr	r3, [pc, #132]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <HAL_RCC_OscConfig+0x788>)
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001be0:	3a01      	subs	r2, #1
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	4311      	orrs	r1, r2
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bea:	0212      	lsls	r2, r2, #8
 8001bec:	4311      	orrs	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001bf2:	0852      	lsrs	r2, r2, #1
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	0552      	lsls	r2, r2, #21
 8001bf8:	4311      	orrs	r1, r2
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001bfe:	0852      	lsrs	r2, r2, #1
 8001c00:	3a01      	subs	r2, #1
 8001c02:	0652      	lsls	r2, r2, #25
 8001c04:	4311      	orrs	r1, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c0a:	06d2      	lsls	r2, r2, #27
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	4912      	ldr	r1, [pc, #72]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c14:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001c1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c20:	4b0d      	ldr	r3, [pc, #52]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4a0c      	ldr	r2, [pc, #48]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001c26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c2c:	f7fe ff70 	bl	8000b10 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c34:	f7fe ff6c 	bl	8000b10 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e058      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c46:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <HAL_RCC_OscConfig+0x784>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c52:	e050      	b.n	8001cf6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e04f      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c60:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d144      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c6c:	4b24      	ldr	r3, [pc, #144]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a23      	ldr	r2, [pc, #140]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001c72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c78:	4b21      	ldr	r3, [pc, #132]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4a20      	ldr	r2, [pc, #128]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001c7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c84:	f7fe ff44 	bl	8000b10 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe ff40 	bl	8000b10 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e02c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9e:	4b18      	ldr	r3, [pc, #96]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x7b8>
 8001caa:	e024      	b.n	8001cf6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d01f      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b13      	ldr	r3, [pc, #76]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a12      	ldr	r2, [pc, #72]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001cb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbe:	f7fe ff27 	bl	8000b10 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cc4:	e008      	b.n	8001cd8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc6:	f7fe ff23 	bl	8000b10 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e00f      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f0      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4905      	ldr	r1, [pc, #20]	@ (8001d00 <HAL_RCC_OscConfig+0x82c>)
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_RCC_OscConfig+0x830>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
 8001cf0:	e001      	b.n	8001cf6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e000      	b.n	8001cf8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40021000 	.word	0x40021000
 8001d04:	feeefffc 	.word	0xfeeefffc

08001d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e11d      	b.n	8001f5c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b90      	ldr	r3, [pc, #576]	@ (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d910      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 020f 	bic.w	r2, r3, #15
 8001d36:	498b      	ldr	r1, [pc, #556]	@ (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b89      	ldr	r3, [pc, #548]	@ (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e105      	b.n	8001f5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d010      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689a      	ldr	r2, [r3, #8]
 8001d60:	4b81      	ldr	r3, [pc, #516]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d908      	bls.n	8001d7e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	497b      	ldr	r1, [pc, #492]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d079      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d11e      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d92:	4b75      	ldr	r3, [pc, #468]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e0dc      	b.n	8001f5c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001da2:	f000 fa09 	bl	80021b8 <RCC_GetSysClockFreqFromPLLSource>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a70      	ldr	r2, [pc, #448]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d946      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001dae:	4b6e      	ldr	r3, [pc, #440]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d140      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dba:	4b6b      	ldr	r3, [pc, #428]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001dc2:	4a69      	ldr	r2, [pc, #420]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001dc8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dca:	2380      	movs	r3, #128	@ 0x80
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	e035      	b.n	8001e3c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd8:	4b63      	ldr	r3, [pc, #396]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d115      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0b9      	b.n	8001f5c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d107      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001df0:	4b5d      	ldr	r3, [pc, #372]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0ad      	b.n	8001f5c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e00:	4b59      	ldr	r3, [pc, #356]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0a5      	b.n	8001f5c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001e10:	f000 f8b4 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a55      	ldr	r2, [pc, #340]	@ (8001f6c <HAL_RCC_ClockConfig+0x264>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d90f      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e1c:	4b52      	ldr	r3, [pc, #328]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d109      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e28:	4b4f      	ldr	r3, [pc, #316]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e30:	4a4d      	ldr	r2, [pc, #308]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e36:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e38:	2380      	movs	r3, #128	@ 0x80
 8001e3a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f023 0203 	bic.w	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	4947      	ldr	r1, [pc, #284]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e4e:	f7fe fe5f 	bl	8000b10 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e56:	f7fe fe5b 	bl	8000b10 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e077      	b.n	8001f5c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6c:	4b3e      	ldr	r3, [pc, #248]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 020c 	and.w	r2, r3, #12
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d1eb      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b80      	cmp	r3, #128	@ 0x80
 8001e82:	d105      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e84:	4b38      	ldr	r3, [pc, #224]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a37      	ldr	r2, [pc, #220]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001e8e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d010      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4b31      	ldr	r3, [pc, #196]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d208      	bcs.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b2e      	ldr	r3, [pc, #184]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	492b      	ldr	r1, [pc, #172]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebe:	4b29      	ldr	r3, [pc, #164]	@ (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d210      	bcs.n	8001eee <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ecc:	4b25      	ldr	r3, [pc, #148]	@ (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f023 020f 	bic.w	r2, r3, #15
 8001ed4:	4923      	ldr	r1, [pc, #140]	@ (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001edc:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <HAL_RCC_ClockConfig+0x25c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d001      	beq.n	8001eee <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e036      	b.n	8001f5c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0304 	and.w	r3, r3, #4
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	4918      	ldr	r1, [pc, #96]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d009      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4910      	ldr	r1, [pc, #64]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f2c:	f000 f826 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 8001f30:	4602      	mov	r2, r0
 8001f32:	4b0d      	ldr	r3, [pc, #52]	@ (8001f68 <HAL_RCC_ClockConfig+0x260>)
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	490c      	ldr	r1, [pc, #48]	@ (8001f70 <HAL_RCC_ClockConfig+0x268>)
 8001f3e:	5ccb      	ldrb	r3, [r1, r3]
 8001f40:	f003 031f 	and.w	r3, r3, #31
 8001f44:	fa22 f303 	lsr.w	r3, r2, r3
 8001f48:	4a0a      	ldr	r2, [pc, #40]	@ (8001f74 <HAL_RCC_ClockConfig+0x26c>)
 8001f4a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_RCC_ClockConfig+0x270>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fd8d 	bl	8000a70 <HAL_InitTick>
 8001f56:	4603      	mov	r3, r0
 8001f58:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40022000 	.word	0x40022000
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	04c4b400 	.word	0x04c4b400
 8001f70:	08003a00 	.word	0x08003a00
 8001f74:	20000000 	.word	0x20000000
 8001f78:	20000004 	.word	0x20000004

08001f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b089      	sub	sp, #36	@ 0x24
 8001f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f94:	4b3b      	ldr	r3, [pc, #236]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	d121      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d11e      	bne.n	8001fee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fb0:	4b34      	ldr	r3, [pc, #208]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0308 	and.w	r3, r3, #8
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fbc:	4b31      	ldr	r3, [pc, #196]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	e005      	b.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	091b      	lsrs	r3, r3, #4
 8001fd2:	f003 030f 	and.w	r3, r3, #15
 8001fd6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fd8:	4a2b      	ldr	r2, [pc, #172]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10d      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d102      	bne.n	8001ffa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ff4:	4b25      	ldr	r3, [pc, #148]	@ (800208c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	e004      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002000:	4b23      	ldr	r3, [pc, #140]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x114>)
 8002002:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d134      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200a:	4b1e      	ldr	r3, [pc, #120]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d003      	beq.n	8002022 <HAL_RCC_GetSysClockFreq+0xa6>
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d003      	beq.n	8002028 <HAL_RCC_GetSysClockFreq+0xac>
 8002020:	e005      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002022:	4b1a      	ldr	r3, [pc, #104]	@ (800208c <HAL_RCC_GetSysClockFreq+0x110>)
 8002024:	617b      	str	r3, [r7, #20]
      break;
 8002026:	e005      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002028:	4b19      	ldr	r3, [pc, #100]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x114>)
 800202a:	617b      	str	r3, [r7, #20]
      break;
 800202c:	e002      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	617b      	str	r3, [r7, #20]
      break;
 8002032:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002034:	4b13      	ldr	r3, [pc, #76]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3301      	adds	r3, #1
 8002040:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	0a1b      	lsrs	r3, r3, #8
 8002048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	fb03 f202 	mul.w	r2, r3, r2
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800205a:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x108>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	0e5b      	lsrs	r3, r3, #25
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	3301      	adds	r3, #1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002072:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002074:	69bb      	ldr	r3, [r7, #24]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	@ 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40021000 	.word	0x40021000
 8002088:	08003a18 	.word	0x08003a18
 800208c:	00f42400 	.word	0x00f42400
 8002090:	007a1200 	.word	0x007a1200

08002094 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	20000000 	.word	0x20000000

080020ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020b0:	f7ff fff0 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020b4:	4602      	mov	r2, r0
 80020b6:	4b06      	ldr	r3, [pc, #24]	@ (80020d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0307 	and.w	r3, r3, #7
 80020c0:	4904      	ldr	r1, [pc, #16]	@ (80020d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020c2:	5ccb      	ldrb	r3, [r1, r3]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08003a10 	.word	0x08003a10

080020d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020dc:	f7ff ffda 	bl	8002094 <HAL_RCC_GetHCLKFreq>
 80020e0:	4602      	mov	r2, r0
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	0adb      	lsrs	r3, r3, #11
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	4904      	ldr	r1, [pc, #16]	@ (8002100 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ee:	5ccb      	ldrb	r3, [r1, r3]
 80020f0:	f003 031f 	and.w	r3, r3, #31
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	08003a10 	.word	0x08003a10

08002104 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002110:	4b27      	ldr	r3, [pc, #156]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800211c:	f7ff f916 	bl	800134c <HAL_PWREx_GetVoltageRange>
 8002120:	6178      	str	r0, [r7, #20]
 8002122:	e014      	b.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002124:	4b22      	ldr	r3, [pc, #136]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002128:	4a21      	ldr	r2, [pc, #132]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800212a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800212e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002130:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800213c:	f7ff f906 	bl	800134c <HAL_PWREx_GetVoltageRange>
 8002140:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002142:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002146:	4a1a      	ldr	r2, [pc, #104]	@ (80021b0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002148:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800214c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002154:	d10b      	bne.n	800216e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b80      	cmp	r3, #128	@ 0x80
 800215a:	d913      	bls.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002160:	d902      	bls.n	8002168 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002162:	2302      	movs	r3, #2
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	e00d      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002168:	2301      	movs	r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	e00a      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b7f      	cmp	r3, #127	@ 0x7f
 8002172:	d902      	bls.n	800217a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002174:	2302      	movs	r3, #2
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e004      	b.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b70      	cmp	r3, #112	@ 0x70
 800217e:	d101      	bne.n	8002184 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002180:	2301      	movs	r3, #1
 8002182:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002184:	4b0b      	ldr	r3, [pc, #44]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 020f 	bic.w	r2, r3, #15
 800218c:	4909      	ldr	r1, [pc, #36]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002194:	4b07      	ldr	r3, [pc, #28]	@ (80021b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 030f 	and.w	r3, r3, #15
 800219c:	693a      	ldr	r2, [r7, #16]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d001      	beq.n	80021a6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40022000 	.word	0x40022000

080021b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021be:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d00b      	beq.n	80021e6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d825      	bhi.n	8002220 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d008      	beq.n	80021ec <RCC_GetSysClockFreqFromPLLSource+0x34>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d11f      	bne.n	8002220 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021e2:	613b      	str	r3, [r7, #16]
    break;
 80021e4:	e01f      	b.n	8002226 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80021e6:	4b25      	ldr	r3, [pc, #148]	@ (800227c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80021e8:	613b      	str	r3, [r7, #16]
    break;
 80021ea:	e01c      	b.n	8002226 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021ec:	4b21      	ldr	r3, [pc, #132]	@ (8002274 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d107      	bne.n	8002208 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002274 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e005      	b.n	8002214 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002208:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002214:	4a1a      	ldr	r2, [pc, #104]	@ (8002280 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221c:	613b      	str	r3, [r7, #16]
    break;
 800221e:	e002      	b.n	8002226 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	613b      	str	r3, [r7, #16]
    break;
 8002224:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	3301      	adds	r3, #1
 8002232:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002234:	4b0f      	ldr	r3, [pc, #60]	@ (8002274 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	fb03 f202 	mul.w	r2, r3, r2
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0e5b      	lsrs	r3, r3, #25
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	3301      	adds	r3, #1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002266:	683b      	ldr	r3, [r7, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40021000 	.word	0x40021000
 8002278:	00f42400 	.word	0x00f42400
 800227c:	007a1200 	.word	0x007a1200
 8002280:	08003a18 	.word	0x08003a18

08002284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800228c:	2300      	movs	r3, #0
 800228e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002290:	2300      	movs	r3, #0
 8002292:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800229c:	2b00      	cmp	r3, #0
 800229e:	d040      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022a4:	2b80      	cmp	r3, #128	@ 0x80
 80022a6:	d02a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022a8:	2b80      	cmp	r3, #128	@ 0x80
 80022aa:	d825      	bhi.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022ac:	2b60      	cmp	r3, #96	@ 0x60
 80022ae:	d026      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80022b0:	2b60      	cmp	r3, #96	@ 0x60
 80022b2:	d821      	bhi.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022b4:	2b40      	cmp	r3, #64	@ 0x40
 80022b6:	d006      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80022b8:	2b40      	cmp	r3, #64	@ 0x40
 80022ba:	d81d      	bhi.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d009      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80022c0:	2b20      	cmp	r3, #32
 80022c2:	d010      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80022c4:	e018      	b.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022c6:	4b89      	ldr	r3, [pc, #548]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	4a88      	ldr	r2, [pc, #544]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022d0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022d2:	e015      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3304      	adds	r3, #4
 80022d8:	2100      	movs	r1, #0
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fb02 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 80022e0:	4603      	mov	r3, r0
 80022e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e4:	e00c      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3320      	adds	r3, #32
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f000 fbed 	bl	8002acc <RCCEx_PLLSAI2_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f6:	e003      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	74fb      	strb	r3, [r7, #19]
      break;
 80022fc:	e000      	b.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80022fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002300:	7cfb      	ldrb	r3, [r7, #19]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10b      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002306:	4b79      	ldr	r3, [pc, #484]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002308:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800230c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002314:	4975      	ldr	r1, [pc, #468]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800231c:	e001      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d047      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002332:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002336:	d030      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002338:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233c:	d82a      	bhi.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800233e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002342:	d02a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002344:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002348:	d824      	bhi.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800234a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800234e:	d008      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002350:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002354:	d81e      	bhi.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800235a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800235e:	d010      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002360:	e018      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002362:	4b62      	ldr	r3, [pc, #392]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a61      	ldr	r2, [pc, #388]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800236c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800236e:	e015      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3304      	adds	r3, #4
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f000 fab4 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 800237c:	4603      	mov	r3, r0
 800237e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002380:	e00c      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3320      	adds	r3, #32
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fb9f 	bl	8002acc <RCCEx_PLLSAI2_Config>
 800238e:	4603      	mov	r3, r0
 8002390:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002392:	e003      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	74fb      	strb	r3, [r7, #19]
      break;
 8002398:	e000      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800239a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10b      	bne.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023a2:	4b52      	ldr	r3, [pc, #328]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80023a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b0:	494e      	ldr	r1, [pc, #312]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80023b8:	e001      	b.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 809f 	beq.w	800250a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023cc:	2300      	movs	r3, #0
 80023ce:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023d0:	4b46      	ldr	r3, [pc, #280]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d101      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80023dc:	2301      	movs	r3, #1
 80023de:	e000      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80023e0:	2300      	movs	r3, #0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e6:	4b41      	ldr	r3, [pc, #260]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	4a40      	ldr	r2, [pc, #256]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80023f2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023fa:	60bb      	str	r3, [r7, #8]
 80023fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fe:	2301      	movs	r3, #1
 8002400:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002402:	4b3b      	ldr	r3, [pc, #236]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a3a      	ldr	r2, [pc, #232]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800240c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240e:	f7fe fb7f 	bl	8000b10 <HAL_GetTick>
 8002412:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002414:	e009      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002416:	f7fe fb7b 	bl	8000b10 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d902      	bls.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	74fb      	strb	r3, [r7, #19]
        break;
 8002428:	e005      	b.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800242a:	4b31      	ldr	r3, [pc, #196]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0ef      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002436:	7cfb      	ldrb	r3, [r7, #19]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d15b      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800243c:	4b2b      	ldr	r3, [pc, #172]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002446:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d01f      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	429a      	cmp	r2, r3
 8002458:	d019      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002460:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002464:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002466:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800246c:	4a1f      	ldr	r2, [pc, #124]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800246e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002472:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002476:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800247c:	4a1b      	ldr	r2, [pc, #108]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800247e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002482:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002486:	4a19      	ldr	r2, [pc, #100]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d016      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fb3a 	bl	8000b10 <HAL_GetTick>
 800249c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249e:	e00b      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a0:	f7fe fb36 	bl	8000b10 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d902      	bls.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	74fb      	strb	r3, [r7, #19]
            break;
 80024b6:	e006      	b.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b8:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ec      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80024c6:	7cfb      	ldrb	r3, [r7, #19]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10c      	bne.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024cc:	4b07      	ldr	r3, [pc, #28]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024dc:	4903      	ldr	r1, [pc, #12]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80024e4:	e008      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024e6:	7cfb      	ldrb	r3, [r7, #19]
 80024e8:	74bb      	strb	r3, [r7, #18]
 80024ea:	e005      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f8:	7c7b      	ldrb	r3, [r7, #17]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4ba0      	ldr	r3, [pc, #640]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	4a9f      	ldr	r2, [pc, #636]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002508:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002516:	4b9a      	ldr	r3, [pc, #616]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800251c:	f023 0203 	bic.w	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002524:	4996      	ldr	r1, [pc, #600]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002538:	4b91      	ldr	r3, [pc, #580]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253e:	f023 020c 	bic.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	498e      	ldr	r1, [pc, #568]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800255a:	4b89      	ldr	r3, [pc, #548]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002560:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002568:	4985      	ldr	r1, [pc, #532]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800257c:	4b80      	ldr	r3, [pc, #512]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002582:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258a:	497d      	ldr	r1, [pc, #500]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800259e:	4b78      	ldr	r3, [pc, #480]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ac:	4974      	ldr	r1, [pc, #464]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ce:	496c      	ldr	r1, [pc, #432]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025e2:	4b67      	ldr	r3, [pc, #412]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025f0:	4963      	ldr	r1, [pc, #396]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002604:	4b5e      	ldr	r3, [pc, #376]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002612:	495b      	ldr	r1, [pc, #364]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002626:	4b56      	ldr	r3, [pc, #344]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	4952      	ldr	r1, [pc, #328]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002648:	4b4d      	ldr	r3, [pc, #308]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002656:	494a      	ldr	r1, [pc, #296]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800266a:	4b45      	ldr	r3, [pc, #276]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002670:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002678:	4941      	ldr	r1, [pc, #260]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800268c:	4b3c      	ldr	r3, [pc, #240]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800268e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002692:	f023 0203 	bic.w	r2, r3, #3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269a:	4939      	ldr	r1, [pc, #228]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d028      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026ae:	4b34      	ldr	r3, [pc, #208]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026bc:	4930      	ldr	r1, [pc, #192]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026cc:	d106      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026d8:	60d3      	str	r3, [r2, #12]
 80026da:	e011      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026e4:	d10c      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2101      	movs	r1, #1
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f8f9 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 80026f2:	4603      	mov	r3, r0
 80026f4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d04d      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002710:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002714:	d108      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002716:	4b1a      	ldr	r3, [pc, #104]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002718:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800271c:	4a18      	ldr	r2, [pc, #96]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800271e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002722:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002726:	e012      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002728:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800272a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800272e:	4a14      	ldr	r2, [pc, #80]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002730:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002734:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002738:	4b11      	ldr	r3, [pc, #68]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002746:	490e      	ldr	r1, [pc, #56]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002752:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002756:	d106      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002758:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	4a08      	ldr	r2, [pc, #32]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800275e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002762:	60d3      	str	r3, [r2, #12]
 8002764:	e020      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800276a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800276e:	d109      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a02      	ldr	r2, [pc, #8]	@ (8002780 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277a:	60d3      	str	r3, [r2, #12]
 800277c:	e014      	b.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002788:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800278c:	d10c      	bne.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3304      	adds	r3, #4
 8002792:	2101      	movs	r1, #1
 8002794:	4618      	mov	r0, r3
 8002796:	f000 f8a5 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 800279a:	4603      	mov	r3, r0
 800279c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800279e:	7cfb      	ldrb	r3, [r7, #19]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80027a4:	7cfb      	ldrb	r3, [r7, #19]
 80027a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d028      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027b4:	4b4a      	ldr	r3, [pc, #296]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027c2:	4947      	ldr	r1, [pc, #284]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027d2:	d106      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d4:	4b42      	ldr	r3, [pc, #264]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a41      	ldr	r2, [pc, #260]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027de:	60d3      	str	r3, [r2, #12]
 80027e0:	e011      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ea:	d10c      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3304      	adds	r3, #4
 80027f0:	2101      	movs	r1, #1
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 f876 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 80027f8:	4603      	mov	r3, r0
 80027fa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fc:	7cfb      	ldrb	r3, [r7, #19]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d01e      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002812:	4b33      	ldr	r3, [pc, #204]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002818:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002822:	492f      	ldr	r1, [pc, #188]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002830:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002834:	d10c      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	3304      	adds	r3, #4
 800283a:	2102      	movs	r1, #2
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f851 	bl	80028e4 <RCCEx_PLLSAI1_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002846:	7cfb      	ldrb	r3, [r7, #19]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800285c:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800285e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002862:	f023 0204 	bic.w	r2, r3, #4
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800286c:	491c      	ldr	r1, [pc, #112]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002880:	4b17      	ldr	r3, [pc, #92]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002882:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002886:	f023 0218 	bic.w	r2, r3, #24
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002890:	4913      	ldr	r1, [pc, #76]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d017      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80028a4:	4b0e      	ldr	r3, [pc, #56]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028b4:	490a      	ldr	r1, [pc, #40]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028c6:	d105      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c8:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4a04      	ldr	r2, [pc, #16]	@ (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000

080028e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028f2:	4b72      	ldr	r3, [pc, #456]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00e      	beq.n	800291c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028fe:	4b6f      	ldr	r3, [pc, #444]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f003 0203 	and.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d103      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
       ||
 8002912:	2b00      	cmp	r3, #0
 8002914:	d142      	bne.n	800299c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
 800291a:	e03f      	b.n	800299c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d018      	beq.n	8002956 <RCCEx_PLLSAI1_Config+0x72>
 8002924:	2b03      	cmp	r3, #3
 8002926:	d825      	bhi.n	8002974 <RCCEx_PLLSAI1_Config+0x90>
 8002928:	2b01      	cmp	r3, #1
 800292a:	d002      	beq.n	8002932 <RCCEx_PLLSAI1_Config+0x4e>
 800292c:	2b02      	cmp	r3, #2
 800292e:	d009      	beq.n	8002944 <RCCEx_PLLSAI1_Config+0x60>
 8002930:	e020      	b.n	8002974 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002932:	4b62      	ldr	r3, [pc, #392]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d11d      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002942:	e01a      	b.n	800297a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002944:	4b5d      	ldr	r3, [pc, #372]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d116      	bne.n	800297e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002954:	e013      	b.n	800297e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002956:	4b59      	ldr	r3, [pc, #356]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10f      	bne.n	8002982 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002962:	4b56      	ldr	r3, [pc, #344]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002972:	e006      	b.n	8002982 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      break;
 8002978:	e004      	b.n	8002984 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800297a:	bf00      	nop
 800297c:	e002      	b.n	8002984 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800297e:	bf00      	nop
 8002980:	e000      	b.n	8002984 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002982:	bf00      	nop
    }

    if(status == HAL_OK)
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d108      	bne.n	800299c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800298a:	4b4c      	ldr	r3, [pc, #304]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f023 0203 	bic.w	r2, r3, #3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4949      	ldr	r1, [pc, #292]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002998:	4313      	orrs	r3, r2
 800299a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800299c:	7bfb      	ldrb	r3, [r7, #15]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f040 8086 	bne.w	8002ab0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029a4:	4b45      	ldr	r3, [pc, #276]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a44      	ldr	r2, [pc, #272]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80029aa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80029ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029b0:	f7fe f8ae 	bl	8000b10 <HAL_GetTick>
 80029b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029b6:	e009      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b8:	f7fe f8aa 	bl	8000b10 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d902      	bls.n	80029cc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	73fb      	strb	r3, [r7, #15]
        break;
 80029ca:	e005      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80029cc:	4b3b      	ldr	r3, [pc, #236]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ef      	bne.n	80029b8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d168      	bne.n	8002ab0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d113      	bne.n	8002a0c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e4:	4b35      	ldr	r3, [pc, #212]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 80029e6:	691a      	ldr	r2, [r3, #16]
 80029e8:	4b35      	ldr	r3, [pc, #212]	@ (8002ac0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ea:	4013      	ands	r3, r2
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	6892      	ldr	r2, [r2, #8]
 80029f0:	0211      	lsls	r1, r2, #8
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	06d2      	lsls	r2, r2, #27
 80029f8:	4311      	orrs	r1, r2
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6852      	ldr	r2, [r2, #4]
 80029fe:	3a01      	subs	r2, #1
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	430a      	orrs	r2, r1
 8002a04:	492d      	ldr	r1, [pc, #180]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	610b      	str	r3, [r1, #16]
 8002a0a:	e02d      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d115      	bne.n	8002a3e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a12:	4b2a      	ldr	r3, [pc, #168]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6892      	ldr	r2, [r2, #8]
 8002a1e:	0211      	lsls	r1, r2, #8
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	6912      	ldr	r2, [r2, #16]
 8002a24:	0852      	lsrs	r2, r2, #1
 8002a26:	3a01      	subs	r2, #1
 8002a28:	0552      	lsls	r2, r2, #21
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6852      	ldr	r2, [r2, #4]
 8002a30:	3a01      	subs	r2, #1
 8002a32:	0112      	lsls	r2, r2, #4
 8002a34:	430a      	orrs	r2, r1
 8002a36:	4921      	ldr	r1, [pc, #132]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	610b      	str	r3, [r1, #16]
 8002a3c:	e014      	b.n	8002a68 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	4b21      	ldr	r3, [pc, #132]	@ (8002ac8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6892      	ldr	r2, [r2, #8]
 8002a4a:	0211      	lsls	r1, r2, #8
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6952      	ldr	r2, [r2, #20]
 8002a50:	0852      	lsrs	r2, r2, #1
 8002a52:	3a01      	subs	r2, #1
 8002a54:	0652      	lsls	r2, r2, #25
 8002a56:	4311      	orrs	r1, r2
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6852      	ldr	r2, [r2, #4]
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	430a      	orrs	r2, r1
 8002a62:	4916      	ldr	r1, [pc, #88]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a68:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a13      	ldr	r2, [pc, #76]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe f84c 	bl	8000b10 <HAL_GetTick>
 8002a78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a7a:	e009      	b.n	8002a90 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a7c:	f7fe f848 	bl	8000b10 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d902      	bls.n	8002a90 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a8e:	e005      	b.n	8002a9c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a90:	4b0a      	ldr	r3, [pc, #40]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ef      	beq.n	8002a7c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002aa2:	4b06      	ldr	r3, [pc, #24]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	4904      	ldr	r1, [pc, #16]	@ (8002abc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	07ff800f 	.word	0x07ff800f
 8002ac4:	ff9f800f 	.word	0xff9f800f
 8002ac8:	f9ff800f 	.word	0xf9ff800f

08002acc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ada:	4b72      	ldr	r3, [pc, #456]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00e      	beq.n	8002b04 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f003 0203 	and.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d103      	bne.n	8002afe <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
       ||
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d142      	bne.n	8002b84 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	e03f      	b.n	8002b84 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d018      	beq.n	8002b3e <RCCEx_PLLSAI2_Config+0x72>
 8002b0c:	2b03      	cmp	r3, #3
 8002b0e:	d825      	bhi.n	8002b5c <RCCEx_PLLSAI2_Config+0x90>
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d002      	beq.n	8002b1a <RCCEx_PLLSAI2_Config+0x4e>
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d009      	beq.n	8002b2c <RCCEx_PLLSAI2_Config+0x60>
 8002b18:	e020      	b.n	8002b5c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b1a:	4b62      	ldr	r3, [pc, #392]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d11d      	bne.n	8002b62 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b2a:	e01a      	b.n	8002b62 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b2c:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d116      	bne.n	8002b66 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3c:	e013      	b.n	8002b66 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b3e:	4b59      	ldr	r3, [pc, #356]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b4a:	4b56      	ldr	r3, [pc, #344]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d109      	bne.n	8002b6a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b5a:	e006      	b.n	8002b6a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b60:	e004      	b.n	8002b6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b62:	bf00      	nop
 8002b64:	e002      	b.n	8002b6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b66:	bf00      	nop
 8002b68:	e000      	b.n	8002b6c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002b6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002b72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f023 0203 	bic.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4949      	ldr	r1, [pc, #292]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f040 8086 	bne.w	8002c98 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b8c:	4b45      	ldr	r3, [pc, #276]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a44      	ldr	r2, [pc, #272]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b98:	f7fd ffba 	bl	8000b10 <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b9e:	e009      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ba0:	f7fd ffb6 	bl	8000b10 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d902      	bls.n	8002bb4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002bb2:	e005      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d1ef      	bne.n	8002ba0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d168      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d113      	bne.n	8002bf4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bcc:	4b35      	ldr	r3, [pc, #212]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	4b35      	ldr	r3, [pc, #212]	@ (8002ca8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6892      	ldr	r2, [r2, #8]
 8002bd8:	0211      	lsls	r1, r2, #8
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	06d2      	lsls	r2, r2, #27
 8002be0:	4311      	orrs	r1, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6852      	ldr	r2, [r2, #4]
 8002be6:	3a01      	subs	r2, #1
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	430a      	orrs	r2, r1
 8002bec:	492d      	ldr	r1, [pc, #180]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	614b      	str	r3, [r1, #20]
 8002bf2:	e02d      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d115      	bne.n	8002c26 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002bfc:	695a      	ldr	r2, [r3, #20]
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8002cac <RCCEx_PLLSAI2_Config+0x1e0>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6892      	ldr	r2, [r2, #8]
 8002c06:	0211      	lsls	r1, r2, #8
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6912      	ldr	r2, [r2, #16]
 8002c0c:	0852      	lsrs	r2, r2, #1
 8002c0e:	3a01      	subs	r2, #1
 8002c10:	0552      	lsls	r2, r2, #21
 8002c12:	4311      	orrs	r1, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6852      	ldr	r2, [r2, #4]
 8002c18:	3a01      	subs	r2, #1
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	4921      	ldr	r1, [pc, #132]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	614b      	str	r3, [r1, #20]
 8002c24:	e014      	b.n	8002c50 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c26:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6892      	ldr	r2, [r2, #8]
 8002c32:	0211      	lsls	r1, r2, #8
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6952      	ldr	r2, [r2, #20]
 8002c38:	0852      	lsrs	r2, r2, #1
 8002c3a:	3a01      	subs	r2, #1
 8002c3c:	0652      	lsls	r2, r2, #25
 8002c3e:	4311      	orrs	r1, r2
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	6852      	ldr	r2, [r2, #4]
 8002c44:	3a01      	subs	r2, #1
 8002c46:	0112      	lsls	r2, r2, #4
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	4916      	ldr	r1, [pc, #88]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c50:	4b14      	ldr	r3, [pc, #80]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a13      	ldr	r2, [pc, #76]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fd ff58 	bl	8000b10 <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c62:	e009      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c64:	f7fd ff54 	bl	8000b10 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d902      	bls.n	8002c78 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	73fb      	strb	r3, [r7, #15]
          break;
 8002c76:	e005      	b.n	8002c84 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c8c:	695a      	ldr	r2, [r3, #20]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	4904      	ldr	r1, [pc, #16]	@ (8002ca4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	07ff800f 	.word	0x07ff800f
 8002cac:	ff9f800f 	.word	0xff9f800f
 8002cb0:	f9ff800f 	.word	0xf9ff800f

08002cb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e042      	b.n	8002d4c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d106      	bne.n	8002cde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7fd fddf 	bl	800089c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2224      	movs	r2, #36	@ 0x24
 8002ce2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fb24 	bl	800334c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f825 	bl	8002d54 <UART_SetConfig>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e01b      	b.n	8002d4c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f042 0201 	orr.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 fba3 	bl	8003490 <UART_CheckIdleState>
 8002d4a:	4603      	mov	r3, r0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d58:	b08c      	sub	sp, #48	@ 0x30
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	431a      	orrs	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4baa      	ldr	r3, [pc, #680]	@ (800302c <UART_SetConfig+0x2d8>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a9f      	ldr	r2, [pc, #636]	@ (8003030 <UART_SetConfig+0x2dc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d004      	beq.n	8002dc0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6a1b      	ldr	r3, [r3, #32]
 8002dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002dca:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dd4:	430b      	orrs	r3, r1
 8002dd6:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dde:	f023 010f 	bic.w	r1, r3, #15
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	430a      	orrs	r2, r1
 8002dec:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a90      	ldr	r2, [pc, #576]	@ (8003034 <UART_SetConfig+0x2e0>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d125      	bne.n	8002e44 <UART_SetConfig+0xf0>
 8002df8:	4b8f      	ldr	r3, [pc, #572]	@ (8003038 <UART_SetConfig+0x2e4>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d81a      	bhi.n	8002e3c <UART_SetConfig+0xe8>
 8002e06:	a201      	add	r2, pc, #4	@ (adr r2, 8002e0c <UART_SetConfig+0xb8>)
 8002e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e0c:	08002e1d 	.word	0x08002e1d
 8002e10:	08002e2d 	.word	0x08002e2d
 8002e14:	08002e25 	.word	0x08002e25
 8002e18:	08002e35 	.word	0x08002e35
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e22:	e116      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002e24:	2302      	movs	r3, #2
 8002e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e2a:	e112      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e32:	e10e      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002e34:	2308      	movs	r3, #8
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e3a:	e10a      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e42:	e106      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a7c      	ldr	r2, [pc, #496]	@ (800303c <UART_SetConfig+0x2e8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d138      	bne.n	8002ec0 <UART_SetConfig+0x16c>
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003038 <UART_SetConfig+0x2e4>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	f003 030c 	and.w	r3, r3, #12
 8002e58:	2b0c      	cmp	r3, #12
 8002e5a:	d82d      	bhi.n	8002eb8 <UART_SetConfig+0x164>
 8002e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e64 <UART_SetConfig+0x110>)
 8002e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e62:	bf00      	nop
 8002e64:	08002e99 	.word	0x08002e99
 8002e68:	08002eb9 	.word	0x08002eb9
 8002e6c:	08002eb9 	.word	0x08002eb9
 8002e70:	08002eb9 	.word	0x08002eb9
 8002e74:	08002ea9 	.word	0x08002ea9
 8002e78:	08002eb9 	.word	0x08002eb9
 8002e7c:	08002eb9 	.word	0x08002eb9
 8002e80:	08002eb9 	.word	0x08002eb9
 8002e84:	08002ea1 	.word	0x08002ea1
 8002e88:	08002eb9 	.word	0x08002eb9
 8002e8c:	08002eb9 	.word	0x08002eb9
 8002e90:	08002eb9 	.word	0x08002eb9
 8002e94:	08002eb1 	.word	0x08002eb1
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e9e:	e0d8      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ea6:	e0d4      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002ea8:	2304      	movs	r3, #4
 8002eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eae:	e0d0      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002eb0:	2308      	movs	r3, #8
 8002eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002eb6:	e0cc      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ebe:	e0c8      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a5e      	ldr	r2, [pc, #376]	@ (8003040 <UART_SetConfig+0x2ec>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d125      	bne.n	8002f16 <UART_SetConfig+0x1c2>
 8002eca:	4b5b      	ldr	r3, [pc, #364]	@ (8003038 <UART_SetConfig+0x2e4>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ed4:	2b30      	cmp	r3, #48	@ 0x30
 8002ed6:	d016      	beq.n	8002f06 <UART_SetConfig+0x1b2>
 8002ed8:	2b30      	cmp	r3, #48	@ 0x30
 8002eda:	d818      	bhi.n	8002f0e <UART_SetConfig+0x1ba>
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d00a      	beq.n	8002ef6 <UART_SetConfig+0x1a2>
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d814      	bhi.n	8002f0e <UART_SetConfig+0x1ba>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <UART_SetConfig+0x19a>
 8002ee8:	2b10      	cmp	r3, #16
 8002eea:	d008      	beq.n	8002efe <UART_SetConfig+0x1aa>
 8002eec:	e00f      	b.n	8002f0e <UART_SetConfig+0x1ba>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ef4:	e0ad      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002efc:	e0a9      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002efe:	2304      	movs	r3, #4
 8002f00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f04:	e0a5      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002f06:	2308      	movs	r3, #8
 8002f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f0c:	e0a1      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002f0e:	2310      	movs	r3, #16
 8002f10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f14:	e09d      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a4a      	ldr	r2, [pc, #296]	@ (8003044 <UART_SetConfig+0x2f0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d125      	bne.n	8002f6c <UART_SetConfig+0x218>
 8002f20:	4b45      	ldr	r3, [pc, #276]	@ (8003038 <UART_SetConfig+0x2e4>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f2c:	d016      	beq.n	8002f5c <UART_SetConfig+0x208>
 8002f2e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f30:	d818      	bhi.n	8002f64 <UART_SetConfig+0x210>
 8002f32:	2b80      	cmp	r3, #128	@ 0x80
 8002f34:	d00a      	beq.n	8002f4c <UART_SetConfig+0x1f8>
 8002f36:	2b80      	cmp	r3, #128	@ 0x80
 8002f38:	d814      	bhi.n	8002f64 <UART_SetConfig+0x210>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <UART_SetConfig+0x1f0>
 8002f3e:	2b40      	cmp	r3, #64	@ 0x40
 8002f40:	d008      	beq.n	8002f54 <UART_SetConfig+0x200>
 8002f42:	e00f      	b.n	8002f64 <UART_SetConfig+0x210>
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f4a:	e082      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f52:	e07e      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002f54:	2304      	movs	r3, #4
 8002f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f5a:	e07a      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002f5c:	2308      	movs	r3, #8
 8002f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f62:	e076      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002f64:	2310      	movs	r3, #16
 8002f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002f6a:	e072      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a35      	ldr	r2, [pc, #212]	@ (8003048 <UART_SetConfig+0x2f4>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d12a      	bne.n	8002fcc <UART_SetConfig+0x278>
 8002f76:	4b30      	ldr	r3, [pc, #192]	@ (8003038 <UART_SetConfig+0x2e4>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f84:	d01a      	beq.n	8002fbc <UART_SetConfig+0x268>
 8002f86:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f8a:	d81b      	bhi.n	8002fc4 <UART_SetConfig+0x270>
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f90:	d00c      	beq.n	8002fac <UART_SetConfig+0x258>
 8002f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f96:	d815      	bhi.n	8002fc4 <UART_SetConfig+0x270>
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <UART_SetConfig+0x250>
 8002f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fa0:	d008      	beq.n	8002fb4 <UART_SetConfig+0x260>
 8002fa2:	e00f      	b.n	8002fc4 <UART_SetConfig+0x270>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002faa:	e052      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002fac:	2302      	movs	r3, #2
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fb2:	e04e      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fba:	e04a      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fc2:	e046      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002fc4:	2310      	movs	r3, #16
 8002fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002fca:	e042      	b.n	8003052 <UART_SetConfig+0x2fe>
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a17      	ldr	r2, [pc, #92]	@ (8003030 <UART_SetConfig+0x2dc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d13a      	bne.n	800304c <UART_SetConfig+0x2f8>
 8002fd6:	4b18      	ldr	r3, [pc, #96]	@ (8003038 <UART_SetConfig+0x2e4>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fe0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fe4:	d01a      	beq.n	800301c <UART_SetConfig+0x2c8>
 8002fe6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fea:	d81b      	bhi.n	8003024 <UART_SetConfig+0x2d0>
 8002fec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff0:	d00c      	beq.n	800300c <UART_SetConfig+0x2b8>
 8002ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ff6:	d815      	bhi.n	8003024 <UART_SetConfig+0x2d0>
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <UART_SetConfig+0x2b0>
 8002ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003000:	d008      	beq.n	8003014 <UART_SetConfig+0x2c0>
 8003002:	e00f      	b.n	8003024 <UART_SetConfig+0x2d0>
 8003004:	2300      	movs	r3, #0
 8003006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800300a:	e022      	b.n	8003052 <UART_SetConfig+0x2fe>
 800300c:	2302      	movs	r3, #2
 800300e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003012:	e01e      	b.n	8003052 <UART_SetConfig+0x2fe>
 8003014:	2304      	movs	r3, #4
 8003016:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800301a:	e01a      	b.n	8003052 <UART_SetConfig+0x2fe>
 800301c:	2308      	movs	r3, #8
 800301e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003022:	e016      	b.n	8003052 <UART_SetConfig+0x2fe>
 8003024:	2310      	movs	r3, #16
 8003026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800302a:	e012      	b.n	8003052 <UART_SetConfig+0x2fe>
 800302c:	cfff69f3 	.word	0xcfff69f3
 8003030:	40008000 	.word	0x40008000
 8003034:	40013800 	.word	0x40013800
 8003038:	40021000 	.word	0x40021000
 800303c:	40004400 	.word	0x40004400
 8003040:	40004800 	.word	0x40004800
 8003044:	40004c00 	.word	0x40004c00
 8003048:	40005000 	.word	0x40005000
 800304c:	2310      	movs	r3, #16
 800304e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4aae      	ldr	r2, [pc, #696]	@ (8003310 <UART_SetConfig+0x5bc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	f040 8097 	bne.w	800318c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800305e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003062:	2b08      	cmp	r3, #8
 8003064:	d823      	bhi.n	80030ae <UART_SetConfig+0x35a>
 8003066:	a201      	add	r2, pc, #4	@ (adr r2, 800306c <UART_SetConfig+0x318>)
 8003068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306c:	08003091 	.word	0x08003091
 8003070:	080030af 	.word	0x080030af
 8003074:	08003099 	.word	0x08003099
 8003078:	080030af 	.word	0x080030af
 800307c:	0800309f 	.word	0x0800309f
 8003080:	080030af 	.word	0x080030af
 8003084:	080030af 	.word	0x080030af
 8003088:	080030af 	.word	0x080030af
 800308c:	080030a7 	.word	0x080030a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003090:	f7ff f80c 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 8003094:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003096:	e010      	b.n	80030ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003098:	4b9e      	ldr	r3, [pc, #632]	@ (8003314 <UART_SetConfig+0x5c0>)
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800309c:	e00d      	b.n	80030ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800309e:	f7fe ff6d 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 80030a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030a4:	e009      	b.n	80030ba <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80030ac:	e005      	b.n	80030ba <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80030b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8130 	beq.w	8003322 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	4a94      	ldr	r2, [pc, #592]	@ (8003318 <UART_SetConfig+0x5c4>)
 80030c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80030cc:	461a      	mov	r2, r3
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d903      	bls.n	80030fa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030f8:	e113      	b.n	8003322 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	2200      	movs	r2, #0
 80030fe:	60bb      	str	r3, [r7, #8]
 8003100:	60fa      	str	r2, [r7, #12]
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003106:	4a84      	ldr	r2, [pc, #528]	@ (8003318 <UART_SetConfig+0x5c4>)
 8003108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800310c:	b29b      	uxth	r3, r3
 800310e:	2200      	movs	r2, #0
 8003110:	603b      	str	r3, [r7, #0]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003118:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800311c:	f7fd f86e 	bl	80001fc <__aeabi_uldivmod>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4610      	mov	r0, r2
 8003126:	4619      	mov	r1, r3
 8003128:	f04f 0200 	mov.w	r2, #0
 800312c:	f04f 0300 	mov.w	r3, #0
 8003130:	020b      	lsls	r3, r1, #8
 8003132:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003136:	0202      	lsls	r2, r0, #8
 8003138:	6979      	ldr	r1, [r7, #20]
 800313a:	6849      	ldr	r1, [r1, #4]
 800313c:	0849      	lsrs	r1, r1, #1
 800313e:	2000      	movs	r0, #0
 8003140:	460c      	mov	r4, r1
 8003142:	4605      	mov	r5, r0
 8003144:	eb12 0804 	adds.w	r8, r2, r4
 8003148:	eb43 0905 	adc.w	r9, r3, r5
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	469a      	mov	sl, r3
 8003154:	4693      	mov	fp, r2
 8003156:	4652      	mov	r2, sl
 8003158:	465b      	mov	r3, fp
 800315a:	4640      	mov	r0, r8
 800315c:	4649      	mov	r1, r9
 800315e:	f7fd f84d 	bl	80001fc <__aeabi_uldivmod>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4613      	mov	r3, r2
 8003168:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003170:	d308      	bcc.n	8003184 <UART_SetConfig+0x430>
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003178:	d204      	bcs.n	8003184 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6a3a      	ldr	r2, [r7, #32]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	e0ce      	b.n	8003322 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800318a:	e0ca      	b.n	8003322 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	69db      	ldr	r3, [r3, #28]
 8003190:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003194:	d166      	bne.n	8003264 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003196:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800319a:	2b08      	cmp	r3, #8
 800319c:	d827      	bhi.n	80031ee <UART_SetConfig+0x49a>
 800319e:	a201      	add	r2, pc, #4	@ (adr r2, 80031a4 <UART_SetConfig+0x450>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031c9 	.word	0x080031c9
 80031a8:	080031d1 	.word	0x080031d1
 80031ac:	080031d9 	.word	0x080031d9
 80031b0:	080031ef 	.word	0x080031ef
 80031b4:	080031df 	.word	0x080031df
 80031b8:	080031ef 	.word	0x080031ef
 80031bc:	080031ef 	.word	0x080031ef
 80031c0:	080031ef 	.word	0x080031ef
 80031c4:	080031e7 	.word	0x080031e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c8:	f7fe ff70 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 80031cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031ce:	e014      	b.n	80031fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d0:	f7fe ff82 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 80031d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031d6:	e010      	b.n	80031fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031d8:	4b4e      	ldr	r3, [pc, #312]	@ (8003314 <UART_SetConfig+0x5c0>)
 80031da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031dc:	e00d      	b.n	80031fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031de:	f7fe fecd 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 80031e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80031e4:	e009      	b.n	80031fa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80031ec:	e005      	b.n	80031fa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80031f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8090 	beq.w	8003322 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	4a44      	ldr	r2, [pc, #272]	@ (8003318 <UART_SetConfig+0x5c4>)
 8003208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800320c:	461a      	mov	r2, r3
 800320e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003210:	fbb3 f3f2 	udiv	r3, r3, r2
 8003214:	005a      	lsls	r2, r3, #1
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	085b      	lsrs	r3, r3, #1
 800321c:	441a      	add	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	fbb2 f3f3 	udiv	r3, r2, r3
 8003226:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	d916      	bls.n	800325c <UART_SetConfig+0x508>
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003234:	d212      	bcs.n	800325c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	b29b      	uxth	r3, r3
 800323a:	f023 030f 	bic.w	r3, r3, #15
 800323e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	085b      	lsrs	r3, r3, #1
 8003244:	b29b      	uxth	r3, r3
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	b29a      	uxth	r2, r3
 800324c:	8bfb      	ldrh	r3, [r7, #30]
 800324e:	4313      	orrs	r3, r2
 8003250:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	8bfa      	ldrh	r2, [r7, #30]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	e062      	b.n	8003322 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003262:	e05e      	b.n	8003322 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003264:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003268:	2b08      	cmp	r3, #8
 800326a:	d828      	bhi.n	80032be <UART_SetConfig+0x56a>
 800326c:	a201      	add	r2, pc, #4	@ (adr r2, 8003274 <UART_SetConfig+0x520>)
 800326e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003272:	bf00      	nop
 8003274:	08003299 	.word	0x08003299
 8003278:	080032a1 	.word	0x080032a1
 800327c:	080032a9 	.word	0x080032a9
 8003280:	080032bf 	.word	0x080032bf
 8003284:	080032af 	.word	0x080032af
 8003288:	080032bf 	.word	0x080032bf
 800328c:	080032bf 	.word	0x080032bf
 8003290:	080032bf 	.word	0x080032bf
 8003294:	080032b7 	.word	0x080032b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003298:	f7fe ff08 	bl	80020ac <HAL_RCC_GetPCLK1Freq>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800329e:	e014      	b.n	80032ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032a0:	f7fe ff1a 	bl	80020d8 <HAL_RCC_GetPCLK2Freq>
 80032a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032a6:	e010      	b.n	80032ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003314 <UART_SetConfig+0x5c0>)
 80032aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032ac:	e00d      	b.n	80032ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ae:	f7fe fe65 	bl	8001f7c <HAL_RCC_GetSysClockFreq>
 80032b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032b4:	e009      	b.n	80032ca <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032bc:	e005      	b.n	80032ca <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80032c8:	bf00      	nop
    }

    if (pclk != 0U)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d028      	beq.n	8003322 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d4:	4a10      	ldr	r2, [pc, #64]	@ (8003318 <UART_SetConfig+0x5c4>)
 80032d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032da:	461a      	mov	r2, r3
 80032dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032de:	fbb3 f2f2 	udiv	r2, r3, r2
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	441a      	add	r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	d910      	bls.n	800331c <UART_SetConfig+0x5c8>
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003300:	d20c      	bcs.n	800331c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	b29a      	uxth	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	60da      	str	r2, [r3, #12]
 800330c:	e009      	b.n	8003322 <UART_SetConfig+0x5ce>
 800330e:	bf00      	nop
 8003310:	40008000 	.word	0x40008000
 8003314:	00f42400 	.word	0x00f42400
 8003318:	08003a48 	.word	0x08003a48
      }
      else
      {
        ret = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	2201      	movs	r2, #1
 8003326:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2201      	movs	r2, #1
 800332e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2200      	movs	r2, #0
 8003336:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	2200      	movs	r2, #0
 800333c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800333e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003342:	4618      	mov	r0, r3
 8003344:	3730      	adds	r7, #48	@ 0x30
 8003346:	46bd      	mov	sp, r7
 8003348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800334c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00a      	beq.n	80033ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00a      	beq.n	80033dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00a      	beq.n	80033fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01a      	beq.n	8003462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003446:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800344a:	d10a      	bne.n	8003462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	430a      	orrs	r2, r1
 8003460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00a      	beq.n	8003484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	605a      	str	r2, [r3, #4]
  }
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b098      	sub	sp, #96	@ 0x60
 8003494:	af02      	add	r7, sp, #8
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034a0:	f7fd fb36 	bl	8000b10 <HAL_GetTick>
 80034a4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0308 	and.w	r3, r3, #8
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d12f      	bne.n	8003514 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034bc:	2200      	movs	r2, #0
 80034be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f88e 	bl	80035e4 <UART_WaitOnFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d022      	beq.n	8003514 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e6      	bne.n	80034ce <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e063      	b.n	80035dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b04      	cmp	r3, #4
 8003520:	d149      	bne.n	80035b6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003522:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352a:	2200      	movs	r2, #0
 800352c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f857 	bl	80035e4 <UART_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d03c      	beq.n	80035b6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	623b      	str	r3, [r7, #32]
   return(result);
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003550:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800355a:	633b      	str	r3, [r7, #48]	@ 0x30
 800355c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e6      	bne.n	800353c <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3308      	adds	r3, #8
 8003574:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	60fb      	str	r3, [r7, #12]
   return(result);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f023 0301 	bic.w	r3, r3, #1
 8003584:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3308      	adds	r3, #8
 800358c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800358e:	61fa      	str	r2, [r7, #28]
 8003590:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	69b9      	ldr	r1, [r7, #24]
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	617b      	str	r3, [r7, #20]
   return(result);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e5      	bne.n	800356e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e012      	b.n	80035dc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3758      	adds	r7, #88	@ 0x58
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f4:	e04f      	b.n	8003696 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d04b      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fd fa87 	bl	8000b10 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <UART_WaitOnFlagUntilTimeout+0x30>
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e04e      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	2b00      	cmp	r3, #0
 8003624:	d037      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b80      	cmp	r3, #128	@ 0x80
 800362a:	d034      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0xb2>
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b40      	cmp	r3, #64	@ 0x40
 8003630:	d031      	beq.n	8003696 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b08      	cmp	r3, #8
 800363e:	d110      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2208      	movs	r2, #8
 8003646:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 f838 	bl	80036be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2208      	movs	r2, #8
 8003652:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e029      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800366c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003670:	d111      	bne.n	8003696 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800367a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f81e 	bl	80036be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2220      	movs	r2, #32
 8003686:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e00f      	b.n	80036b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4013      	ands	r3, r2
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	79fb      	ldrb	r3, [r7, #7]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d0a0      	beq.n	80035f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036be:	b480      	push	{r7}
 80036c0:	b095      	sub	sp, #84	@ 0x54
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80036e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e6      	bne.n	80036c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3308      	adds	r3, #8
 80036fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	6a3b      	ldr	r3, [r7, #32]
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	61fb      	str	r3, [r7, #28]
   return(result);
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3308      	adds	r3, #8
 800371a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800371c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800371e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003724:	e841 2300 	strex	r3, r2, [r1]
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800372a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e3      	bne.n	80036f8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003734:	2b01      	cmp	r3, #1
 8003736:	d118      	bne.n	800376a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	60bb      	str	r3, [r7, #8]
   return(result);
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f023 0310 	bic.w	r3, r3, #16
 800374c:	647b      	str	r3, [r7, #68]	@ 0x44
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800375a:	6979      	ldr	r1, [r7, #20]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	e841 2300 	strex	r3, r2, [r1]
 8003762:	613b      	str	r3, [r7, #16]
   return(result);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1e6      	bne.n	8003738 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800377e:	bf00      	nop
 8003780:	3754      	adds	r7, #84	@ 0x54
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003798:	2b01      	cmp	r3, #1
 800379a:	d101      	bne.n	80037a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800379c:	2302      	movs	r3, #2
 800379e:	e027      	b.n	80037f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2224      	movs	r2, #36	@ 0x24
 80037ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0201 	bic.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80037ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2220      	movs	r2, #32
 80037e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003810:	2302      	movs	r3, #2
 8003812:	e02d      	b.n	8003870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2224      	movs	r2, #36	@ 0x24
 8003820:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f84f 	bl	80038f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2220      	movs	r2, #32
 8003862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800386e:	2300      	movs	r3, #0
}
 8003870:	4618      	mov	r0, r3
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003888:	2b01      	cmp	r3, #1
 800388a:	d101      	bne.n	8003890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800388c:	2302      	movs	r3, #2
 800388e:	e02d      	b.n	80038ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2224      	movs	r2, #36	@ 0x24
 800389c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0201 	bic.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f811 	bl	80038f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003900:	2b00      	cmp	r3, #0
 8003902:	d108      	bne.n	8003916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003914:	e031      	b.n	800397a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003916:	2308      	movs	r3, #8
 8003918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800391a:	2308      	movs	r3, #8
 800391c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	0e5b      	lsrs	r3, r3, #25
 8003926:	b2db      	uxtb	r3, r3
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	0f5b      	lsrs	r3, r3, #29
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800393e:	7bbb      	ldrb	r3, [r7, #14]
 8003940:	7b3a      	ldrb	r2, [r7, #12]
 8003942:	4911      	ldr	r1, [pc, #68]	@ (8003988 <UARTEx_SetNbDataToProcess+0x94>)
 8003944:	5c8a      	ldrb	r2, [r1, r2]
 8003946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800394a:	7b3a      	ldrb	r2, [r7, #12]
 800394c:	490f      	ldr	r1, [pc, #60]	@ (800398c <UARTEx_SetNbDataToProcess+0x98>)
 800394e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003950:	fb93 f3f2 	sdiv	r3, r3, r2
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	7b7a      	ldrb	r2, [r7, #13]
 8003960:	4909      	ldr	r1, [pc, #36]	@ (8003988 <UARTEx_SetNbDataToProcess+0x94>)
 8003962:	5c8a      	ldrb	r2, [r1, r2]
 8003964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003968:	7b7a      	ldrb	r2, [r7, #13]
 800396a:	4908      	ldr	r1, [pc, #32]	@ (800398c <UARTEx_SetNbDataToProcess+0x98>)
 800396c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800396e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003972:	b29a      	uxth	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	08003a60 	.word	0x08003a60
 800398c:	08003a68 	.word	0x08003a68

08003990 <memset>:
 8003990:	4402      	add	r2, r0
 8003992:	4603      	mov	r3, r0
 8003994:	4293      	cmp	r3, r2
 8003996:	d100      	bne.n	800399a <memset+0xa>
 8003998:	4770      	bx	lr
 800399a:	f803 1b01 	strb.w	r1, [r3], #1
 800399e:	e7f9      	b.n	8003994 <memset+0x4>

080039a0 <__libc_init_array>:
 80039a0:	b570      	push	{r4, r5, r6, lr}
 80039a2:	4d0d      	ldr	r5, [pc, #52]	@ (80039d8 <__libc_init_array+0x38>)
 80039a4:	4c0d      	ldr	r4, [pc, #52]	@ (80039dc <__libc_init_array+0x3c>)
 80039a6:	1b64      	subs	r4, r4, r5
 80039a8:	10a4      	asrs	r4, r4, #2
 80039aa:	2600      	movs	r6, #0
 80039ac:	42a6      	cmp	r6, r4
 80039ae:	d109      	bne.n	80039c4 <__libc_init_array+0x24>
 80039b0:	4d0b      	ldr	r5, [pc, #44]	@ (80039e0 <__libc_init_array+0x40>)
 80039b2:	4c0c      	ldr	r4, [pc, #48]	@ (80039e4 <__libc_init_array+0x44>)
 80039b4:	f000 f818 	bl	80039e8 <_init>
 80039b8:	1b64      	subs	r4, r4, r5
 80039ba:	10a4      	asrs	r4, r4, #2
 80039bc:	2600      	movs	r6, #0
 80039be:	42a6      	cmp	r6, r4
 80039c0:	d105      	bne.n	80039ce <__libc_init_array+0x2e>
 80039c2:	bd70      	pop	{r4, r5, r6, pc}
 80039c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c8:	4798      	blx	r3
 80039ca:	3601      	adds	r6, #1
 80039cc:	e7ee      	b.n	80039ac <__libc_init_array+0xc>
 80039ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d2:	4798      	blx	r3
 80039d4:	3601      	adds	r6, #1
 80039d6:	e7f2      	b.n	80039be <__libc_init_array+0x1e>
 80039d8:	08003a78 	.word	0x08003a78
 80039dc:	08003a78 	.word	0x08003a78
 80039e0:	08003a78 	.word	0x08003a78
 80039e4:	08003a7c 	.word	0x08003a7c

080039e8 <_init>:
 80039e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ea:	bf00      	nop
 80039ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ee:	bc08      	pop	{r3}
 80039f0:	469e      	mov	lr, r3
 80039f2:	4770      	bx	lr

080039f4 <_fini>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	bf00      	nop
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr
