
stm32-final-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000897c  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08008b40  08008b40  00009b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f88  08008f88  0000a208  2**0
                  CONTENTS
  4 .ARM          00000008  08008f88  08008f88  00009f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f90  08008f90  0000a208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f90  08008f90  00009f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008f94  08008f94  00009f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  08008f98  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000208  080091a0  0000a208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  080091a0  0000a4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ef4  00000000  00000000  0000a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c5  00000000  00000000  0001d12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0001f9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf0  00000000  00000000  00020980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004a2e  00000000  00000000  00021570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140cb  00000000  00000000  00025f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010823e  00000000  00000000  0003a069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001422a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e8  00000000  00000000  001422ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  001474d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000208 	.word	0x20000208
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008b24 	.word	0x08008b24

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000020c 	.word	0x2000020c
 80001fc:	08008b24 	.word	0x08008b24

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96a 	b.w	8000f64 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	460c      	mov	r4, r1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d14e      	bne.n	8000d52 <__udivmoddi4+0xaa>
 8000cb4:	4694      	mov	ip, r2
 8000cb6:	458c      	cmp	ip, r1
 8000cb8:	4686      	mov	lr, r0
 8000cba:	fab2 f282 	clz	r2, r2
 8000cbe:	d962      	bls.n	8000d86 <__udivmoddi4+0xde>
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0320 	rsb	r3, r2, #32
 8000cc6:	4091      	lsls	r1, r2
 8000cc8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ccc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f f68c 	uxth.w	r6, ip
 8000cde:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ce2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ce6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb04 f106 	mul.w	r1, r4, r6
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x64>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cfe:	f080 8112 	bcs.w	8000f26 <__udivmoddi4+0x27e>
 8000d02:	4299      	cmp	r1, r3
 8000d04:	f240 810f 	bls.w	8000f26 <__udivmoddi4+0x27e>
 8000d08:	3c02      	subs	r4, #2
 8000d0a:	4463      	add	r3, ip
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	fa1f f38e 	uxth.w	r3, lr
 8000d12:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d16:	fb07 1110 	mls	r1, r7, r0, r1
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f606 	mul.w	r6, r0, r6
 8000d22:	429e      	cmp	r6, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x94>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d2e:	f080 80fc 	bcs.w	8000f2a <__udivmoddi4+0x282>
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f240 80f9 	bls.w	8000f2a <__udivmoddi4+0x282>
 8000d38:	4463      	add	r3, ip
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	1b9b      	subs	r3, r3, r6
 8000d3e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d42:	2100      	movs	r1, #0
 8000d44:	b11d      	cbz	r5, 8000d4e <__udivmoddi4+0xa6>
 8000d46:	40d3      	lsrs	r3, r2
 8000d48:	2200      	movs	r2, #0
 8000d4a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d905      	bls.n	8000d62 <__udivmoddi4+0xba>
 8000d56:	b10d      	cbz	r5, 8000d5c <__udivmoddi4+0xb4>
 8000d58:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e7f5      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d62:	fab3 f183 	clz	r1, r3
 8000d66:	2900      	cmp	r1, #0
 8000d68:	d146      	bne.n	8000df8 <__udivmoddi4+0x150>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d302      	bcc.n	8000d74 <__udivmoddi4+0xcc>
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	f0c0 80f0 	bcc.w	8000f54 <__udivmoddi4+0x2ac>
 8000d74:	1a86      	subs	r6, r0, r2
 8000d76:	eb64 0303 	sbc.w	r3, r4, r3
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d0e6      	beq.n	8000d4e <__udivmoddi4+0xa6>
 8000d80:	e9c5 6300 	strd	r6, r3, [r5]
 8000d84:	e7e3      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	f040 8090 	bne.w	8000eac <__udivmoddi4+0x204>
 8000d8c:	eba1 040c 	sub.w	r4, r1, ip
 8000d90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d94:	fa1f f78c 	uxth.w	r7, ip
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb08 4416 	mls	r4, r8, r6, r4
 8000da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000daa:	fb07 f006 	mul.w	r0, r7, r6
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x11c>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x11a>
 8000dbc:	4298      	cmp	r0, r3
 8000dbe:	f200 80cd 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000dc2:	4626      	mov	r6, r4
 8000dc4:	1a1c      	subs	r4, r3, r0
 8000dc6:	fa1f f38e 	uxth.w	r3, lr
 8000dca:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dce:	fb08 4410 	mls	r4, r8, r0, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb00 f707 	mul.w	r7, r0, r7
 8000dda:	429f      	cmp	r7, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x148>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x146>
 8000de8:	429f      	cmp	r7, r3
 8000dea:	f200 80b0 	bhi.w	8000f4e <__udivmoddi4+0x2a6>
 8000dee:	4620      	mov	r0, r4
 8000df0:	1bdb      	subs	r3, r3, r7
 8000df2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df6:	e7a5      	b.n	8000d44 <__udivmoddi4+0x9c>
 8000df8:	f1c1 0620 	rsb	r6, r1, #32
 8000dfc:	408b      	lsls	r3, r1
 8000dfe:	fa22 f706 	lsr.w	r7, r2, r6
 8000e02:	431f      	orrs	r7, r3
 8000e04:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e08:	fa04 f301 	lsl.w	r3, r4, r1
 8000e0c:	ea43 030c 	orr.w	r3, r3, ip
 8000e10:	40f4      	lsrs	r4, r6
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	0c38      	lsrs	r0, r7, #16
 8000e18:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e1c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	fb00 441e 	mls	r4, r0, lr, r4
 8000e28:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e2c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e30:	45a1      	cmp	r9, r4
 8000e32:	fa02 f201 	lsl.w	r2, r2, r1
 8000e36:	d90a      	bls.n	8000e4e <__udivmoddi4+0x1a6>
 8000e38:	193c      	adds	r4, r7, r4
 8000e3a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e3e:	f080 8084 	bcs.w	8000f4a <__udivmoddi4+0x2a2>
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	f240 8081 	bls.w	8000f4a <__udivmoddi4+0x2a2>
 8000e48:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4c:	443c      	add	r4, r7
 8000e4e:	eba4 0409 	sub.w	r4, r4, r9
 8000e52:	fa1f f983 	uxth.w	r9, r3
 8000e56:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e5a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e5e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e62:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e66:	45a4      	cmp	ip, r4
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x1d2>
 8000e6a:	193c      	adds	r4, r7, r4
 8000e6c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e70:	d267      	bcs.n	8000f42 <__udivmoddi4+0x29a>
 8000e72:	45a4      	cmp	ip, r4
 8000e74:	d965      	bls.n	8000f42 <__udivmoddi4+0x29a>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e7e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e82:	eba4 040c 	sub.w	r4, r4, ip
 8000e86:	429c      	cmp	r4, r3
 8000e88:	46ce      	mov	lr, r9
 8000e8a:	469c      	mov	ip, r3
 8000e8c:	d351      	bcc.n	8000f32 <__udivmoddi4+0x28a>
 8000e8e:	d04e      	beq.n	8000f2e <__udivmoddi4+0x286>
 8000e90:	b155      	cbz	r5, 8000ea8 <__udivmoddi4+0x200>
 8000e92:	ebb8 030e 	subs.w	r3, r8, lr
 8000e96:	eb64 040c 	sbc.w	r4, r4, ip
 8000e9a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	431e      	orrs	r6, r3
 8000ea2:	40cc      	lsrs	r4, r1
 8000ea4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	e750      	b.n	8000d4e <__udivmoddi4+0xa6>
 8000eac:	f1c2 0320 	rsb	r3, r2, #32
 8000eb0:	fa20 f103 	lsr.w	r1, r0, r3
 8000eb4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eb8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ebc:	4094      	lsls	r4, r2
 8000ebe:	430c      	orrs	r4, r1
 8000ec0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ed0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ed4:	0c23      	lsrs	r3, r4, #16
 8000ed6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eda:	fb00 f107 	mul.w	r1, r0, r7
 8000ede:	4299      	cmp	r1, r3
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x24c>
 8000ee2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ee6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eea:	d22c      	bcs.n	8000f46 <__udivmoddi4+0x29e>
 8000eec:	4299      	cmp	r1, r3
 8000eee:	d92a      	bls.n	8000f46 <__udivmoddi4+0x29e>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	4463      	add	r3, ip
 8000ef4:	1a5b      	subs	r3, r3, r1
 8000ef6:	b2a4      	uxth	r4, r4
 8000ef8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000efc:	fb08 3311 	mls	r3, r8, r1, r3
 8000f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f04:	fb01 f307 	mul.w	r3, r1, r7
 8000f08:	42a3      	cmp	r3, r4
 8000f0a:	d908      	bls.n	8000f1e <__udivmoddi4+0x276>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f14:	d213      	bcs.n	8000f3e <__udivmoddi4+0x296>
 8000f16:	42a3      	cmp	r3, r4
 8000f18:	d911      	bls.n	8000f3e <__udivmoddi4+0x296>
 8000f1a:	3902      	subs	r1, #2
 8000f1c:	4464      	add	r4, ip
 8000f1e:	1ae4      	subs	r4, r4, r3
 8000f20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f24:	e739      	b.n	8000d9a <__udivmoddi4+0xf2>
 8000f26:	4604      	mov	r4, r0
 8000f28:	e6f0      	b.n	8000d0c <__udivmoddi4+0x64>
 8000f2a:	4608      	mov	r0, r1
 8000f2c:	e706      	b.n	8000d3c <__udivmoddi4+0x94>
 8000f2e:	45c8      	cmp	r8, r9
 8000f30:	d2ae      	bcs.n	8000e90 <__udivmoddi4+0x1e8>
 8000f32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f3a:	3801      	subs	r0, #1
 8000f3c:	e7a8      	b.n	8000e90 <__udivmoddi4+0x1e8>
 8000f3e:	4631      	mov	r1, r6
 8000f40:	e7ed      	b.n	8000f1e <__udivmoddi4+0x276>
 8000f42:	4603      	mov	r3, r0
 8000f44:	e799      	b.n	8000e7a <__udivmoddi4+0x1d2>
 8000f46:	4630      	mov	r0, r6
 8000f48:	e7d4      	b.n	8000ef4 <__udivmoddi4+0x24c>
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	e77f      	b.n	8000e4e <__udivmoddi4+0x1a6>
 8000f4e:	4463      	add	r3, ip
 8000f50:	3802      	subs	r0, #2
 8000f52:	e74d      	b.n	8000df0 <__udivmoddi4+0x148>
 8000f54:	4606      	mov	r6, r0
 8000f56:	4623      	mov	r3, r4
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e70f      	b.n	8000d7c <__udivmoddi4+0xd4>
 8000f5c:	3e02      	subs	r6, #2
 8000f5e:	4463      	add	r3, ip
 8000f60:	e730      	b.n	8000dc4 <__udivmoddi4+0x11c>
 8000f62:	bf00      	nop

08000f64 <__aeabi_idiv0>:
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <kalmanFilter_update>:
    float x;
    float p;
    float k;
};

int kalmanFilter_update(struct kstate* kstate, float measurement){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	ed87 0a00 	vstr	s0, [r7]
	// Clear all floating-point exceptions before starting calculations
	feclearexcept(FE_ALL_EXCEPT);
 8000f74:	209f      	movs	r0, #159	@ 0x9f
 8000f76:	f007 fc4c 	bl	8008812 <feclearexcept>

	// Instantiate local variables that will hold the state variables
	float q = kstate->q;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	61fb      	str	r3, [r7, #28]
	float r = kstate->r;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	61bb      	str	r3, [r7, #24]
	float x = kstate->x;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	617b      	str	r3, [r7, #20]
	float k = kstate->k;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	613b      	str	r3, [r7, #16]
	float p = kstate->p;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	60fb      	str	r3, [r7, #12]

	// Update estimated error covariance by adding process noise
	p = p + q;
 8000f98:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fa4:	edc7 7a03 	vstr	s15, [r7, #12]

	// Compute Kalman gain
	k = p / (p + r);
 8000fa8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fac:	edd7 7a06 	vldr	s15, [r7, #24]
 8000fb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000fb4:	edd7 6a03 	vldr	s13, [r7, #12]
 8000fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fbc:	edc7 7a04 	vstr	s15, [r7, #16]

	// Update estimated state with correction factor
	x = x + k * (measurement - x);
 8000fc0:	ed97 7a00 	vldr	s14, [r7]
 8000fc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fc8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fcc:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fdc:	edc7 7a05 	vstr	s15, [r7, #20]

	// Update error covariance
	p = (1 - k) * p;
 8000fe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fe4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fec:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff4:	edc7 7a03 	vstr	s15, [r7, #12]

	// Check for floating-point exceptions after all operations
	if (fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)) {
 8000ff8:	200f      	movs	r0, #15
 8000ffa:	f007 fc12 	bl	8008822 <fetestexcept>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <kalmanFilter_update+0xa2>
		return -1;
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	e018      	b.n	800103c <kalmanFilter_update+0xd4>
	}

	// Store updated state variables
	kstate->q = q;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69fa      	ldr	r2, [r7, #28]
 800100e:	601a      	str	r2, [r3, #0]
	kstate->r = r;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	605a      	str	r2, [r3, #4]
	kstate->x = x;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	609a      	str	r2, [r3, #8]
	kstate->k = k;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	611a      	str	r2, [r3, #16]
	kstate->p = p;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68fa      	ldr	r2, [r7, #12]
 8001026:	60da      	str	r2, [r3, #12]

	// Check for floating-point exceptions after all operations
	if (fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW)) {
 8001028:	200f      	movs	r0, #15
 800102a:	f007 fbfa 	bl	8008822 <fetestexcept>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d002      	beq.n	800103a <kalmanFilter_update+0xd2>
		return -1;
 8001034:	f04f 33ff 	mov.w	r3, #4294967295
 8001038:	e000      	b.n	800103c <kalmanFilter_update+0xd4>
	}

	return 0;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3720      	adds	r7, #32
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	0000      	movs	r0, r0
	...

08001048 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001048:	b5b0      	push	{r4, r5, r7, lr}
 800104a:	b0ae      	sub	sp, #184	@ 0xb8
 800104c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104e:	f000 ff09 	bl	8001e64 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_ACCELERO_Init();
 8001052:	f000 fb5f 	bl	8001714 <BSP_ACCELERO_Init>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 f8d1 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 f9ad 	bl	80013b8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800105e:	f000 f91f 	bl	80012a0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001062:	f000 f95d 	bl	8001320 <MX_USART1_UART_Init>
      float r;
      float x;
      float p;
      float k;
  };
  struct kstate roll_filter = {0.01f, 0.1f, 0.0f, 1.0f, 0.0f};
 8001066:	4b62      	ldr	r3, [pc, #392]	@ (80011f0 <main+0x1a8>)
 8001068:	f107 0414 	add.w	r4, r7, #20
 800106c:	461d      	mov	r5, r3
 800106e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001072:	682b      	ldr	r3, [r5, #0]
 8001074:	6023      	str	r3, [r4, #0]
  struct kstate pitch_filter = {0.01f, 0.1f, 0.0f, 1.0f, 0.0f};
 8001076:	4b5e      	ldr	r3, [pc, #376]	@ (80011f0 <main+0x1a8>)
 8001078:	463c      	mov	r4, r7
 800107a:	461d      	mov	r5, r3
 800107c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	6023      	str	r3, [r4, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BSP_ACCELERO_AccGetXYZ(acceleroVal);
 8001084:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fb81 	bl	8001790 <BSP_ACCELERO_AccGetXYZ>

	  float ax = (float)acceleroVal[0];
 800108e:	f9b7 308c 	ldrsh.w	r3, [r7, #140]	@ 0x8c
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109a:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
	  float ay = (float)acceleroVal[1];
 800109e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	@ 0x8e
 80010a2:	ee07 3a90 	vmov	s15, r3
 80010a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010aa:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
	  float az = (float)acceleroVal[2];
 80010ae:	f9b7 3090 	ldrsh.w	r3, [r7, #144]	@ 0x90
 80010b2:	ee07 3a90 	vmov	s15, r3
 80010b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ba:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4

	  float pitch_denom = sqrtf(ay * ay + az * az);
 80010be:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80010c2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010c6:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80010ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d2:	eeb0 0a67 	vmov.f32	s0, s15
 80010d6:	f007 fb7b 	bl	80087d0 <sqrtf>
 80010da:	ed87 0a28 	vstr	s0, [r7, #160]	@ 0xa0
	  float roll_denom = sqrtf(ax * ax + az * az);
 80010de:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80010e2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80010e6:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80010ea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f2:	eeb0 0a67 	vmov.f32	s0, s15
 80010f6:	f007 fb6b 	bl	80087d0 <sqrtf>
 80010fa:	ed87 0a27 	vstr	s0, [r7, #156]	@ 0x9c

	  pitch = atan2f(-ax, pitch_denom) * (180.0f / M_PI);
 80010fe:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8001102:	eef1 7a67 	vneg.f32	s15, s15
 8001106:	edd7 0a28 	vldr	s1, [r7, #160]	@ 0xa0
 800110a:	eeb0 0a67 	vmov.f32	s0, s15
 800110e:	f007 fb5d 	bl	80087cc <atan2f>
 8001112:	ee10 3a10 	vmov	r3, s0
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa2e 	bl	8000578 <__aeabi_f2d>
 800111c:	a332      	add	r3, pc, #200	@ (adr r3, 80011e8 <main+0x1a0>)
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	f7ff fa81 	bl	8000628 <__aeabi_dmul>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd53 	bl	8000bd8 <__aeabi_d2f>
 8001132:	4603      	mov	r3, r0
 8001134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	  roll = atan2f(ay, roll_denom) * (180.0f / M_PI);
 8001138:	edd7 0a27 	vldr	s1, [r7, #156]	@ 0x9c
 800113c:	ed97 0a2a 	vldr	s0, [r7, #168]	@ 0xa8
 8001140:	f007 fb44 	bl	80087cc <atan2f>
 8001144:	ee10 3a10 	vmov	r3, s0
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa15 	bl	8000578 <__aeabi_f2d>
 800114e:	a326      	add	r3, pc, #152	@ (adr r3, 80011e8 <main+0x1a0>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa68 	bl	8000628 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fd3a 	bl	8000bd8 <__aeabi_d2f>
 8001164:	4603      	mov	r3, r0
 8001166:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	  kalmanFilter_update(&roll_filter, roll);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	ed97 0a25 	vldr	s0, [r7, #148]	@ 0x94
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fef8 	bl	8000f68 <kalmanFilter_update>
	  kalmanFilter_update(&pitch_filter, pitch);
 8001178:	463b      	mov	r3, r7
 800117a:	ed97 0a26 	vldr	s0, [r7, #152]	@ 0x98
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fef2 	bl	8000f68 <kalmanFilter_update>

	  roll = roll_filter.x;
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	  pitch = pitch_filter.x;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	  sprintf(output, "Roll: %.2f, Pitch: %.2f\r\n", roll, pitch);
 8001190:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001194:	f7ff f9f0 	bl	8000578 <__aeabi_f2d>
 8001198:	4604      	mov	r4, r0
 800119a:	460d      	mov	r5, r1
 800119c:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 80011a0:	f7ff f9ea 	bl	8000578 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80011ac:	e9cd 2300 	strd	r2, r3, [sp]
 80011b0:	4622      	mov	r2, r4
 80011b2:	462b      	mov	r3, r5
 80011b4:	490f      	ldr	r1, [pc, #60]	@ (80011f4 <main+0x1ac>)
 80011b6:	f005 f9db 	bl	8006570 <siprintf>

	  int16_t len = strlen(output);
 80011ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f86e 	bl	80002a0 <strlen>
 80011c4:	4603      	mov	r3, r0
 80011c6:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
	  HAL_UART_Transmit(&huart1, (uint8_t*)output, len, 10000);
 80011ca:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 80011ce:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80011d2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011d6:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <main+0x1b0>)
 80011d8:	f003 fe04 	bl	8004de4 <HAL_UART_Transmit>

	  HAL_Delay(100);
 80011dc:	2064      	movs	r0, #100	@ 0x64
 80011de:	f000 feb5 	bl	8001f4c <HAL_Delay>
  {
 80011e2:	bf00      	nop
 80011e4:	e74e      	b.n	8001084 <main+0x3c>
 80011e6:	bf00      	nop
 80011e8:	1a63c1f8 	.word	0x1a63c1f8
 80011ec:	404ca5dc 	.word	0x404ca5dc
 80011f0:	08008b5c 	.word	0x08008b5c
 80011f4:	08008b40 	.word	0x08008b40
 80011f8:	20000278 	.word	0x20000278

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b096      	sub	sp, #88	@ 0x58
 8001200:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2244      	movs	r2, #68	@ 0x44
 8001208:	2100      	movs	r1, #0
 800120a:	4618      	mov	r0, r3
 800120c:	f005 fa13 	bl	8006636 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001210:	463b      	mov	r3, r7
 8001212:	2200      	movs	r2, #0
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	605a      	str	r2, [r3, #4]
 8001218:	609a      	str	r2, [r3, #8]
 800121a:	60da      	str	r2, [r3, #12]
 800121c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800121e:	2000      	movs	r0, #0
 8001220:	f002 f8fc 	bl	800341c <HAL_PWREx_ControlVoltageScaling>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x32>
  {
    Error_Handler();
 800122a:	f000 f91d 	bl	8001468 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800122e:	2310      	movs	r3, #16
 8001230:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001232:	2301      	movs	r3, #1
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001236:	2300      	movs	r3, #0
 8001238:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800123a:	2360      	movs	r3, #96	@ 0x60
 800123c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001242:	2301      	movs	r3, #1
 8001244:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001246:	2301      	movs	r3, #1
 8001248:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800124a:	233c      	movs	r3, #60	@ 0x3c
 800124c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4618      	mov	r0, r3
 8001260:	f002 f980 	bl	8003564 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800126a:	f000 f8fd 	bl	8001468 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001282:	463b      	mov	r3, r7
 8001284:	2105      	movs	r1, #5
 8001286:	4618      	mov	r0, r3
 8001288:	f002 fd86 	bl	8003d98 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001292:	f000 f8e9 	bl	8001468 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3758      	adds	r7, #88	@ 0x58
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001318 <MX_I2C2_Init+0x78>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 80012aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012ac:	4a1b      	ldr	r2, [pc, #108]	@ (800131c <MX_I2C2_Init+0x7c>)
 80012ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80012b0:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b6:	4b17      	ldr	r3, [pc, #92]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80012c2:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012c8:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012da:	480e      	ldr	r0, [pc, #56]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012dc:	f001 fa2b 	bl	8002736 <HAL_I2C_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80012e6:	f000 f8bf 	bl	8001468 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ea:	2100      	movs	r1, #0
 80012ec:	4809      	ldr	r0, [pc, #36]	@ (8001314 <MX_I2C2_Init+0x74>)
 80012ee:	f001 ffdd 	bl	80032ac <HAL_I2CEx_ConfigAnalogFilter>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80012f8:	f000 f8b6 	bl	8001468 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80012fc:	2100      	movs	r1, #0
 80012fe:	4805      	ldr	r0, [pc, #20]	@ (8001314 <MX_I2C2_Init+0x74>)
 8001300:	f002 f81f 	bl	8003342 <HAL_I2CEx_ConfigDigitalFilter>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800130a:	f000 f8ad 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000224 	.word	0x20000224
 8001318:	40005800 	.word	0x40005800
 800131c:	30a175ab 	.word	0x30a175ab

08001320 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 8001326:	4a23      	ldr	r2, [pc, #140]	@ (80013b4 <MX_USART1_UART_Init+0x94>)
 8001328:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800132a:	4b21      	ldr	r3, [pc, #132]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 800132c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001330:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b1f      	ldr	r3, [pc, #124]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b1d      	ldr	r3, [pc, #116]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800133e:	4b1c      	ldr	r3, [pc, #112]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b19      	ldr	r3, [pc, #100]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 8001358:	2200      	movs	r2, #0
 800135a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 8001364:	2200      	movs	r2, #0
 8001366:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001368:	4811      	ldr	r0, [pc, #68]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 800136a:	f003 fceb 	bl	8004d44 <HAL_UART_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001374:	f000 f878 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001378:	2100      	movs	r1, #0
 800137a:	480d      	ldr	r0, [pc, #52]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 800137c:	f004 fb14 	bl	80059a8 <HAL_UARTEx_SetTxFifoThreshold>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001386:	f000 f86f 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138a:	2100      	movs	r1, #0
 800138c:	4808      	ldr	r0, [pc, #32]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 800138e:	f004 fb49 	bl	8005a24 <HAL_UARTEx_SetRxFifoThreshold>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001398:	f000 f866 	bl	8001468 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <MX_USART1_UART_Init+0x90>)
 800139e:	f004 faca 	bl	8005936 <HAL_UARTEx_DisableFifoMode>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80013a8:	f000 f85e 	bl	8001468 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000278 	.word	0x20000278
 80013b4:	40013800 	.word	0x40013800

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	4b23      	ldr	r3, [pc, #140]	@ (800145c <MX_GPIO_Init+0xa4>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a22      	ldr	r2, [pc, #136]	@ (800145c <MX_GPIO_Init+0xa4>)
 80013d4:	f043 0304 	orr.w	r3, r3, #4
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b20      	ldr	r3, [pc, #128]	@ (800145c <MX_GPIO_Init+0xa4>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	4b1d      	ldr	r3, [pc, #116]	@ (800145c <MX_GPIO_Init+0xa4>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a1c      	ldr	r2, [pc, #112]	@ (800145c <MX_GPIO_Init+0xa4>)
 80013ec:	f043 0302 	orr.w	r3, r3, #2
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_GPIO_Init+0xa4>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001404:	4816      	ldr	r0, [pc, #88]	@ (8001460 <MX_GPIO_Init+0xa8>)
 8001406:	f001 f95b 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800140a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001410:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	4619      	mov	r1, r3
 8001420:	4810      	ldr	r0, [pc, #64]	@ (8001464 <MX_GPIO_Init+0xac>)
 8001422:	f000 fec9 	bl	80021b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001426:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800142a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4619      	mov	r1, r3
 800143e:	4808      	ldr	r0, [pc, #32]	@ (8001460 <MX_GPIO_Init+0xa8>)
 8001440:	f000 feba 	bl	80021b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001444:	2200      	movs	r2, #0
 8001446:	2100      	movs	r1, #0
 8001448:	2028      	movs	r0, #40	@ 0x28
 800144a:	f000 fe7e 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800144e:	2028      	movs	r0, #40	@ 0x28
 8001450:	f000 fe97 	bl	8002182 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001454:	bf00      	nop
 8001456:	3720      	adds	r7, #32
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40021000 	.word	0x40021000
 8001460:	48000400 	.word	0x48000400
 8001464:	48000800 	.word	0x48000800

08001468 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800146c:	b672      	cpsid	i
}
 800146e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <Error_Handler+0x8>

08001474 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	@ 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800147c:	4b27      	ldr	r3, [pc, #156]	@ (800151c <I2Cx_MspInit+0xa8>)
 800147e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001480:	4a26      	ldr	r2, [pc, #152]	@ (800151c <I2Cx_MspInit+0xa8>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001488:	4b24      	ldr	r3, [pc, #144]	@ (800151c <I2Cx_MspInit+0xa8>)
 800148a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001494:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001498:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800149a:	2312      	movs	r3, #18
 800149c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800149e:	2301      	movs	r3, #1
 80014a0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80014a6:	2304      	movs	r3, #4
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	481b      	ldr	r0, [pc, #108]	@ (8001520 <I2Cx_MspInit+0xac>)
 80014b2:	f000 fe81 	bl	80021b8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4818      	ldr	r0, [pc, #96]	@ (8001520 <I2Cx_MspInit+0xac>)
 80014be:	f000 fe7b 	bl	80021b8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80014c2:	4b16      	ldr	r3, [pc, #88]	@ (800151c <I2Cx_MspInit+0xa8>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	4a15      	ldr	r2, [pc, #84]	@ (800151c <I2Cx_MspInit+0xa8>)
 80014c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <I2Cx_MspInit+0xa8>)
 80014d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80014da:	4b10      	ldr	r3, [pc, #64]	@ (800151c <I2Cx_MspInit+0xa8>)
 80014dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014de:	4a0f      	ldr	r2, [pc, #60]	@ (800151c <I2Cx_MspInit+0xa8>)
 80014e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014e4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <I2Cx_MspInit+0xa8>)
 80014e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014ea:	4a0c      	ldr	r2, [pc, #48]	@ (800151c <I2Cx_MspInit+0xa8>)
 80014ec:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80014f0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	210f      	movs	r1, #15
 80014f6:	2021      	movs	r0, #33	@ 0x21
 80014f8:	f000 fe27 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80014fc:	2021      	movs	r0, #33	@ 0x21
 80014fe:	f000 fe40 	bl	8002182 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	210f      	movs	r1, #15
 8001506:	2022      	movs	r0, #34	@ 0x22
 8001508:	f000 fe1f 	bl	800214a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800150c:	2022      	movs	r0, #34	@ 0x22
 800150e:	f000 fe38 	bl	8002182 <HAL_NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	@ 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	48000400 	.word	0x48000400

08001524 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <I2Cx_Init+0x54>)
 8001530:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a11      	ldr	r2, [pc, #68]	@ (800157c <I2Cx_Init+0x58>)
 8001536:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff ff89 	bl	8001474 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f001 f8e7 	bl	8002736 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8001568:	2100      	movs	r1, #0
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f001 fe9e 	bl	80032ac <HAL_I2CEx_ConfigAnalogFilter>
}
 8001570:	bf00      	nop
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40005800 	.word	0x40005800
 800157c:	00702681 	.word	0x00702681

08001580 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	@ 0x28
 8001584:	af04      	add	r7, sp, #16
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	4608      	mov	r0, r1
 800158a:	4611      	mov	r1, r2
 800158c:	461a      	mov	r2, r3
 800158e:	4603      	mov	r3, r0
 8001590:	72fb      	strb	r3, [r7, #11]
 8001592:	460b      	mov	r3, r1
 8001594:	813b      	strh	r3, [r7, #8]
 8001596:	4613      	mov	r3, r2
 8001598:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800159a:	2300      	movs	r3, #0
 800159c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800159e:	7afb      	ldrb	r3, [r7, #11]
 80015a0:	b299      	uxth	r1, r3
 80015a2:	88f8      	ldrh	r0, [r7, #6]
 80015a4:	893a      	ldrh	r2, [r7, #8]
 80015a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015aa:	9302      	str	r3, [sp, #8]
 80015ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	6a3b      	ldr	r3, [r7, #32]
 80015b2:	9300      	str	r3, [sp, #0]
 80015b4:	4603      	mov	r3, r0
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f001 fa9c 	bl	8002af4 <HAL_I2C_Mem_Read>
 80015bc:	4603      	mov	r3, r0
 80015be:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d004      	beq.n	80015d0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80015c6:	7afb      	ldrb	r3, [r7, #11]
 80015c8:	4619      	mov	r1, r3
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f832 	bl	8001634 <I2Cx_Error>
  }
  return status;
 80015d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b08a      	sub	sp, #40	@ 0x28
 80015de:	af04      	add	r7, sp, #16
 80015e0:	60f8      	str	r0, [r7, #12]
 80015e2:	4608      	mov	r0, r1
 80015e4:	4611      	mov	r1, r2
 80015e6:	461a      	mov	r2, r3
 80015e8:	4603      	mov	r3, r0
 80015ea:	72fb      	strb	r3, [r7, #11]
 80015ec:	460b      	mov	r3, r1
 80015ee:	813b      	strh	r3, [r7, #8]
 80015f0:	4613      	mov	r3, r2
 80015f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80015f4:	2300      	movs	r3, #0
 80015f6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	b299      	uxth	r1, r3
 80015fc:	88f8      	ldrh	r0, [r7, #6]
 80015fe:	893a      	ldrh	r2, [r7, #8]
 8001600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001604:	9302      	str	r3, [sp, #8]
 8001606:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	6a3b      	ldr	r3, [r7, #32]
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	4603      	mov	r3, r0
 8001610:	68f8      	ldr	r0, [r7, #12]
 8001612:	f001 f95b 	bl	80028cc <HAL_I2C_Mem_Write>
 8001616:	4603      	mov	r3, r0
 8001618:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d004      	beq.n	800162a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001620:	7afb      	ldrb	r3, [r7, #11]
 8001622:	4619      	mov	r1, r3
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f805 	bl	8001634 <I2Cx_Error>
  }
  return status;
 800162a:	7dfb      	ldrb	r3, [r7, #23]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f001 f913 	bl	800286c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f7ff ff6c 	bl	8001524 <I2Cx_Init>
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <SENSOR_IO_Init+0x10>)
 800165a:	f7ff ff63 	bl	8001524 <I2Cx_Init>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	2000030c 	.word	0x2000030c

08001668 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af02      	add	r7, sp, #8
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	460b      	mov	r3, r1
 8001674:	71bb      	strb	r3, [r7, #6]
 8001676:	4613      	mov	r3, r2
 8001678:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	b29a      	uxth	r2, r3
 800167e:	79f9      	ldrb	r1, [r7, #7]
 8001680:	2301      	movs	r3, #1
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	1d7b      	adds	r3, r7, #5
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	2301      	movs	r3, #1
 800168a:	4803      	ldr	r0, [pc, #12]	@ (8001698 <SENSOR_IO_Write+0x30>)
 800168c:	f7ff ffa5 	bl	80015da <I2Cx_WriteMultiple>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000030c 	.word	0x2000030c

0800169c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	4603      	mov	r3, r0
 80016a4:	460a      	mov	r2, r1
 80016a6:	71fb      	strb	r3, [r7, #7]
 80016a8:	4613      	mov	r3, r2
 80016aa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80016b0:	79bb      	ldrb	r3, [r7, #6]
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	79f9      	ldrb	r1, [r7, #7]
 80016b6:	2301      	movs	r3, #1
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	f107 030f 	add.w	r3, r7, #15
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2301      	movs	r3, #1
 80016c2:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <SENSOR_IO_Read+0x38>)
 80016c4:	f7ff ff5c 	bl	8001580 <I2Cx_ReadMultiple>

  return read_value;
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3710      	adds	r7, #16
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000030c 	.word	0x2000030c

080016d8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af02      	add	r7, sp, #8
 80016de:	603a      	str	r2, [r7, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	460b      	mov	r3, r1
 80016e8:	71bb      	strb	r3, [r7, #6]
 80016ea:	4613      	mov	r3, r2
 80016ec:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80016ee:	79bb      	ldrb	r3, [r7, #6]
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	79f9      	ldrb	r1, [r7, #7]
 80016f4:	88bb      	ldrh	r3, [r7, #4]
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	2301      	movs	r3, #1
 80016fe:	4804      	ldr	r0, [pc, #16]	@ (8001710 <SENSOR_IO_ReadMultiple+0x38>)
 8001700:	f7ff ff3e 	bl	8001580 <I2Cx_ReadMultiple>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000030c 	.word	0x2000030c

08001714 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800171e:	2300      	movs	r3, #0
 8001720:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <BSP_ACCELERO_Init+0x74>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	4798      	blx	r3
 8001728:	4603      	mov	r3, r0
 800172a:	2b6a      	cmp	r3, #106	@ 0x6a
 800172c:	d002      	beq.n	8001734 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	e024      	b.n	800177e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001734:	4b15      	ldr	r3, [pc, #84]	@ (800178c <BSP_ACCELERO_Init+0x78>)
 8001736:	4a14      	ldr	r2, [pc, #80]	@ (8001788 <BSP_ACCELERO_Init+0x74>)
 8001738:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800173a:	2330      	movs	r3, #48	@ 0x30
 800173c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001742:	2300      	movs	r3, #0
 8001744:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001746:	2340      	movs	r3, #64	@ 0x40
 8001748:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800174e:	2300      	movs	r3, #0
 8001750:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001752:	797a      	ldrb	r2, [r7, #5]
 8001754:	7abb      	ldrb	r3, [r7, #10]
 8001756:	4313      	orrs	r3, r2
 8001758:	b2db      	uxtb	r3, r3
 800175a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800175c:	7a3b      	ldrb	r3, [r7, #8]
 800175e:	f043 0304 	orr.w	r3, r3, #4
 8001762:	b2db      	uxtb	r3, r3
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b21a      	sxth	r2, r3
 8001768:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800176c:	4313      	orrs	r3, r2
 800176e:	b21b      	sxth	r3, r3
 8001770:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <BSP_ACCELERO_Init+0x78>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	89ba      	ldrh	r2, [r7, #12]
 800177a:	4610      	mov	r0, r2
 800177c:	4798      	blx	r3
  }  

  return ret;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000004 	.word	0x20000004
 800178c:	20000360 	.word	0x20000360

08001790 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d009      	beq.n	80017b4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80017a0:	4b06      	ldr	r3, [pc, #24]	@ (80017bc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d004      	beq.n	80017b4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80017aa:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
    }
  }
}
 80017b4:	bf00      	nop
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000360 	.word	0x20000360

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <HAL_MspInit+0x44>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001804 <HAL_MspInit+0x44>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <HAL_MspInit+0x44>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <HAL_MspInit+0x44>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <HAL_MspInit+0x44>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_MspInit+0x44>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000

08001808 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b0ae      	sub	sp, #184	@ 0xb8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001810:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001820:	f107 0310 	add.w	r3, r7, #16
 8001824:	2294      	movs	r2, #148	@ 0x94
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f004 ff04 	bl	8006636 <memset>
  if(hi2c->Instance==I2C2)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a21      	ldr	r2, [pc, #132]	@ (80018b8 <HAL_I2C_MspInit+0xb0>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d13b      	bne.n	80018b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001838:	2380      	movs	r3, #128	@ 0x80
 800183a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800183c:	2300      	movs	r3, #0
 800183e:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4618      	mov	r0, r3
 8001846:	f002 fd65 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001850:	f7ff fe0a 	bl	8001468 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001854:	4b19      	ldr	r3, [pc, #100]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 8001856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001858:	4a18      	ldr	r2, [pc, #96]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 800185a:	f043 0302 	orr.w	r3, r3, #2
 800185e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001860:	4b16      	ldr	r3, [pc, #88]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 8001862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001864:	f003 0302 	and.w	r3, r3, #2
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800186c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001870:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001874:	2312      	movs	r3, #18
 8001876:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001880:	2303      	movs	r3, #3
 8001882:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001886:	2304      	movs	r3, #4
 8001888:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001890:	4619      	mov	r1, r3
 8001892:	480b      	ldr	r0, [pc, #44]	@ (80018c0 <HAL_I2C_MspInit+0xb8>)
 8001894:	f000 fc90 	bl	80021b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 800189a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189c:	4a07      	ldr	r2, [pc, #28]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 800189e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80018a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <HAL_I2C_MspInit+0xb4>)
 80018a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80018b0:	bf00      	nop
 80018b2:	37b8      	adds	r7, #184	@ 0xb8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40005800 	.word	0x40005800
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48000400 	.word	0x48000400

080018c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <HAL_I2C_MspDeInit+0x3c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10f      	bne.n	80018f6 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80018d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_I2C_MspDeInit+0x40>)
 80018d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_I2C_MspDeInit+0x40>)
 80018dc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80018e0:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80018e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018e6:	4808      	ldr	r0, [pc, #32]	@ (8001908 <HAL_I2C_MspDeInit+0x44>)
 80018e8:	f000 fdf8 	bl	80024dc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80018ec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <HAL_I2C_MspDeInit+0x44>)
 80018f2:	f000 fdf3 	bl	80024dc <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40005800 	.word	0x40005800
 8001904:	40021000 	.word	0x40021000
 8001908:	48000400 	.word	0x48000400

0800190c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b0ae      	sub	sp, #184	@ 0xb8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001924:	f107 0310 	add.w	r3, r7, #16
 8001928:	2294      	movs	r2, #148	@ 0x94
 800192a:	2100      	movs	r1, #0
 800192c:	4618      	mov	r0, r3
 800192e:	f004 fe82 	bl	8006636 <memset>
  if(huart->Instance==USART1)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_UART_MspInit+0xb0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d13a      	bne.n	80019b2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800193c:	2301      	movs	r3, #1
 800193e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001940:	2300      	movs	r3, #0
 8001942:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4618      	mov	r0, r3
 800194a:	f002 fce3 	bl	8004314 <HAL_RCCEx_PeriphCLKConfig>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001954:	f7ff fd88 	bl	8001468 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001958:	4b19      	ldr	r3, [pc, #100]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 800195a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195c:	4a18      	ldr	r2, [pc, #96]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 800195e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001962:	6613      	str	r3, [r2, #96]	@ 0x60
 8001964:	4b16      	ldr	r3, [pc, #88]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 8001966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001968:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	4b13      	ldr	r3, [pc, #76]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001974:	4a12      	ldr	r2, [pc, #72]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <HAL_UART_MspInit+0xb4>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001988:	23c0      	movs	r3, #192	@ 0xc0
 800198a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198e:	2302      	movs	r3, #2
 8001990:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199a:	2303      	movs	r3, #3
 800199c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019a0:	2307      	movs	r3, #7
 80019a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80019aa:	4619      	mov	r1, r3
 80019ac:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <HAL_UART_MspInit+0xb8>)
 80019ae:	f000 fc03 	bl	80021b8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80019b2:	bf00      	nop
 80019b4:	37b8      	adds	r7, #184	@ 0xb8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40013800 	.word	0x40013800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	48000400 	.word	0x48000400

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019cc:	bf00      	nop
 80019ce:	e7fd      	b.n	80019cc <NMI_Handler+0x4>

080019d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	bf00      	nop
 80019de:	e7fd      	b.n	80019dc <MemManage_Handler+0x4>

080019e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e4:	bf00      	nop
 80019e6:	e7fd      	b.n	80019e4 <BusFault_Handler+0x4>

080019e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ec:	bf00      	nop
 80019ee:	e7fd      	b.n	80019ec <UsageFault_Handler+0x4>

080019f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a1e:	f000 fa75 	bl	8001f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a2a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a2e:	f000 fe5f 	bl	80026f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0
  return 1;
 8001a3a:	2301      	movs	r3, #1
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_kill>:

int _kill(int pid, int sig)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a50:	f004 fe44 	bl	80066dc <__errno>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2216      	movs	r2, #22
 8001a58:	601a      	str	r2, [r3, #0]
  return -1;
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_exit>:

void _exit (int status)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffe7 	bl	8001a46 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <_exit+0x12>

08001a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	e00a      	b.n	8001aa4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a8e:	f3af 8000 	nop.w
 8001a92:	4601      	mov	r1, r0
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	60ba      	str	r2, [r7, #8]
 8001a9a:	b2ca      	uxtb	r2, r1
 8001a9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	dbf0      	blt.n	8001a8e <_read+0x12>
  }

  return len;
 8001aac:	687b      	ldr	r3, [r7, #4]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3718      	adds	r7, #24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e009      	b.n	8001adc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	1c5a      	adds	r2, r3, #1
 8001acc:	60ba      	str	r2, [r7, #8]
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf1      	blt.n	8001ac8 <_write+0x12>
  }
  return len;
 8001ae4:	687b      	ldr	r3, [r7, #4]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_close>:

int _close(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b083      	sub	sp, #12
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b16:	605a      	str	r2, [r3, #4]
  return 0;
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <_isatty>:

int _isatty(int file)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b2e:	2301      	movs	r3, #1
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b60:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <_sbrk+0x5c>)
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <_sbrk+0x60>)
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b6c:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <_sbrk+0x64>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d102      	bne.n	8001b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b74:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <_sbrk+0x64>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	@ (8001bc0 <_sbrk+0x68>)
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b7a:	4b10      	ldr	r3, [pc, #64]	@ (8001bbc <_sbrk+0x64>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4413      	add	r3, r2
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d207      	bcs.n	8001b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b88:	f004 fda8 	bl	80066dc <__errno>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	220c      	movs	r2, #12
 8001b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e009      	b.n	8001bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b9e:	4b07      	ldr	r3, [pc, #28]	@ (8001bbc <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	4a05      	ldr	r2, [pc, #20]	@ (8001bbc <_sbrk+0x64>)
 8001ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001baa:	68fb      	ldr	r3, [r7, #12]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200a0000 	.word	0x200a0000
 8001bb8:	00000400 	.word	0x00000400
 8001bbc:	20000364 	.word	0x20000364
 8001bc0:	200004b8 	.word	0x200004b8

08001bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <SystemInit+0x20>)
 8001bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bce:	4a05      	ldr	r2, [pc, #20]	@ (8001be4 <SystemInit+0x20>)
 8001bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bec:	f7ff ffea 	bl	8001bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf0:	480c      	ldr	r0, [pc, #48]	@ (8001c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf2:	490d      	ldr	r1, [pc, #52]	@ (8001c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <LoopForever+0xe>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf8:	e002      	b.n	8001c00 <LoopCopyDataInit>

08001bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bfe:	3304      	adds	r3, #4

08001c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c04:	d3f9      	bcc.n	8001bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c06:	4a0a      	ldr	r2, [pc, #40]	@ (8001c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c08:	4c0a      	ldr	r4, [pc, #40]	@ (8001c34 <LoopForever+0x16>)
  movs r3, #0
 8001c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c0c:	e001      	b.n	8001c12 <LoopFillZerobss>

08001c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c10:	3204      	adds	r2, #4

08001c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c14:	d3fb      	bcc.n	8001c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c16:	f004 fd67 	bl	80066e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c1a:	f7ff fa15 	bl	8001048 <main>

08001c1e <LoopForever>:

LoopForever:
    b LoopForever
 8001c1e:	e7fe      	b.n	8001c1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c28:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8001c2c:	08008f98 	.word	0x08008f98
  ldr r2, =_sbss
 8001c30:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8001c34:	200004b8 	.word	0x200004b8

08001c38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c38:	e7fe      	b.n	8001c38 <ADC1_IRQHandler>

08001c3a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001c48:	2110      	movs	r1, #16
 8001c4a:	20d4      	movs	r0, #212	@ 0xd4
 8001c4c:	f7ff fd26 	bl	800169c <SENSOR_IO_Read>
 8001c50:	4603      	mov	r3, r0
 8001c52:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8001c54:	88fb      	ldrh	r3, [r7, #6]
 8001c56:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8001c58:	7bbb      	ldrb	r3, [r7, #14]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8001c60:	7bba      	ldrb	r2, [r7, #14]
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001c68:	7bbb      	ldrb	r3, [r7, #14]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	2110      	movs	r1, #16
 8001c6e:	20d4      	movs	r0, #212	@ 0xd4
 8001c70:	f7ff fcfa 	bl	8001668 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001c74:	2112      	movs	r1, #18
 8001c76:	20d4      	movs	r0, #212	@ 0xd4
 8001c78:	f7ff fd10 	bl	800169c <SENSOR_IO_Read>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8001c80:	88fb      	ldrh	r3, [r7, #6]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8001c88:	7bbb      	ldrb	r3, [r7, #14]
 8001c8a:	f023 0344 	bic.w	r3, r3, #68	@ 0x44
 8001c8e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8001c90:	7bba      	ldrb	r2, [r7, #14]
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001c98:	7bbb      	ldrb	r3, [r7, #14]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	2112      	movs	r1, #18
 8001c9e:	20d4      	movs	r0, #212	@ 0xd4
 8001ca0:	f7ff fce2 	bl	8001668 <SENSOR_IO_Write>
}
 8001ca4:	bf00      	nop
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001cb6:	2110      	movs	r1, #16
 8001cb8:	20d4      	movs	r0, #212	@ 0xd4
 8001cba:	f7ff fcef 	bl	800169c <SENSOR_IO_Read>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	f003 030f 	and.w	r3, r3, #15
 8001cc8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	2110      	movs	r1, #16
 8001cd0:	20d4      	movs	r0, #212	@ 0xd4
 8001cd2:	f7ff fcc9 	bl	8001668 <SENSOR_IO_Write>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8001ce2:	f7ff fcb7 	bl	8001654 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8001ce6:	210f      	movs	r1, #15
 8001ce8:	20d4      	movs	r0, #212	@ 0xd4
 8001cea:	f7ff fcd7 	bl	800169c <SENSOR_IO_Read>
 8001cee:	4603      	mov	r3, r0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001d02:	2115      	movs	r1, #21
 8001d04:	20d4      	movs	r0, #212	@ 0xd4
 8001d06:	f7ff fcc9 	bl	800169c <SENSOR_IO_Read>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	f023 0310 	bic.w	r3, r3, #16
 8001d14:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	f043 0310 	orr.w	r3, r3, #16
 8001d22:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	461a      	mov	r2, r3
 8001d28:	2115      	movs	r1, #21
 8001d2a:	20d4      	movs	r0, #212	@ 0xd4
 8001d2c:	f7ff fc9c 	bl	8001668 <SENSOR_IO_Write>
}
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b088      	sub	sp, #32
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001d4e:	2110      	movs	r1, #16
 8001d50:	20d4      	movs	r0, #212	@ 0xd4
 8001d52:	f7ff fca3 	bl	800169c <SENSOR_IO_Read>
 8001d56:	4603      	mov	r3, r0
 8001d58:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8001d5a:	f107 0208 	add.w	r2, r7, #8
 8001d5e:	2306      	movs	r3, #6
 8001d60:	2128      	movs	r1, #40	@ 0x28
 8001d62:	20d4      	movs	r0, #212	@ 0xd4
 8001d64:	f7ff fcb8 	bl	80016d8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	77fb      	strb	r3, [r7, #31]
 8001d6c:	e01a      	b.n	8001da4 <LSM6DSL_AccReadXYZ+0x6c>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001d6e:	7ffb      	ldrb	r3, [r7, #31]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	3301      	adds	r3, #1
 8001d74:	3320      	adds	r3, #32
 8001d76:	443b      	add	r3, r7
 8001d78:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8001d7c:	021b      	lsls	r3, r3, #8
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	7ffa      	ldrb	r2, [r7, #31]
 8001d82:	0052      	lsls	r2, r2, #1
 8001d84:	3220      	adds	r2, #32
 8001d86:	443a      	add	r2, r7
 8001d88:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	7ffb      	ldrb	r3, [r7, #31]
 8001d92:	b212      	sxth	r2, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	3320      	adds	r3, #32
 8001d98:	443b      	add	r3, r7
 8001d9a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8001d9e:	7ffb      	ldrb	r3, [r7, #31]
 8001da0:	3301      	adds	r3, #1
 8001da2:	77fb      	strb	r3, [r7, #31]
 8001da4:	7ffb      	ldrb	r3, [r7, #31]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d9e1      	bls.n	8001d6e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b0c      	cmp	r3, #12
 8001db2:	d829      	bhi.n	8001e08 <LSM6DSL_AccReadXYZ+0xd0>
 8001db4:	a201      	add	r2, pc, #4	@ (adr r2, 8001dbc <LSM6DSL_AccReadXYZ+0x84>)
 8001db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dba:	bf00      	nop
 8001dbc:	08001df1 	.word	0x08001df1
 8001dc0:	08001e09 	.word	0x08001e09
 8001dc4:	08001e09 	.word	0x08001e09
 8001dc8:	08001e09 	.word	0x08001e09
 8001dcc:	08001e03 	.word	0x08001e03
 8001dd0:	08001e09 	.word	0x08001e09
 8001dd4:	08001e09 	.word	0x08001e09
 8001dd8:	08001e09 	.word	0x08001e09
 8001ddc:	08001df7 	.word	0x08001df7
 8001de0:	08001e09 	.word	0x08001e09
 8001de4:	08001e09 	.word	0x08001e09
 8001de8:	08001e09 	.word	0x08001e09
 8001dec:	08001dfd 	.word	0x08001dfd
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8001df0:	4b18      	ldr	r3, [pc, #96]	@ (8001e54 <LSM6DSL_AccReadXYZ+0x11c>)
 8001df2:	61bb      	str	r3, [r7, #24]
    break;
 8001df4:	e008      	b.n	8001e08 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8001df6:	4b18      	ldr	r3, [pc, #96]	@ (8001e58 <LSM6DSL_AccReadXYZ+0x120>)
 8001df8:	61bb      	str	r3, [r7, #24]
    break;
 8001dfa:	e005      	b.n	8001e08 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <LSM6DSL_AccReadXYZ+0x124>)
 8001dfe:	61bb      	str	r3, [r7, #24]
    break;
 8001e00:	e002      	b.n	8001e08 <LSM6DSL_AccReadXYZ+0xd0>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8001e02:	4b17      	ldr	r3, [pc, #92]	@ (8001e60 <LSM6DSL_AccReadXYZ+0x128>)
 8001e04:	61bb      	str	r3, [r7, #24]
    break;    
 8001e06:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	77fb      	strb	r3, [r7, #31]
 8001e0c:	e01a      	b.n	8001e44 <LSM6DSL_AccReadXYZ+0x10c>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	3320      	adds	r3, #32
 8001e14:	443b      	add	r3, r7
 8001e16:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8001e1a:	ee07 3a90 	vmov	s15, r3
 8001e1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e22:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e2a:	7ffb      	ldrb	r3, [r7, #31]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e36:	ee17 2a90 	vmov	r2, s15
 8001e3a:	b212      	sxth	r2, r2
 8001e3c:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001e3e:	7ffb      	ldrb	r3, [r7, #31]
 8001e40:	3301      	adds	r3, #1
 8001e42:	77fb      	strb	r3, [r7, #31]
 8001e44:	7ffb      	ldrb	r3, [r7, #31]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d9e1      	bls.n	8001e0e <LSM6DSL_AccReadXYZ+0xd6>
  }
}
 8001e4a:	bf00      	nop
 8001e4c:	bf00      	nop
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	3d79db23 	.word	0x3d79db23
 8001e58:	3df9db23 	.word	0x3df9db23
 8001e5c:	3e79db23 	.word	0x3e79db23
 8001e60:	3ef9db23 	.word	0x3ef9db23

08001e64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6e:	2003      	movs	r0, #3
 8001e70:	f000 f960 	bl	8002134 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e74:	2000      	movs	r0, #0
 8001e76:	f000 f80d 	bl	8001e94 <HAL_InitTick>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	71fb      	strb	r3, [r7, #7]
 8001e84:	e001      	b.n	8001e8a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e86:	f7ff fc9b 	bl	80017c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ea0:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <HAL_InitTick+0x6c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d023      	beq.n	8001ef0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ea8:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_InitTick+0x70>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <HAL_InitTick+0x6c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f96d 	bl	800219e <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10f      	bne.n	8001eea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b0f      	cmp	r3, #15
 8001ece:	d809      	bhi.n	8001ee4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed8:	f000 f937 	bl	800214a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001edc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <HAL_InitTick+0x74>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e007      	b.n	8001ef4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
 8001ee8:	e004      	b.n	8001ef4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e001      	b.n	8001ef4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000003c 	.word	0x2000003c
 8001f04:	20000000 	.word	0x20000000
 8001f08:	20000038 	.word	0x20000038

08001f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_IncTick+0x20>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_IncTick+0x24>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	4a04      	ldr	r2, [pc, #16]	@ (8001f30 <HAL_IncTick+0x24>)
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	2000003c 	.word	0x2000003c
 8001f30:	20000368 	.word	0x20000368

08001f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  return uwTick;
 8001f38:	4b03      	ldr	r3, [pc, #12]	@ (8001f48 <HAL_GetTick+0x14>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
 8001f46:	bf00      	nop
 8001f48:	20000368 	.word	0x20000368

08001f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f54:	f7ff ffee 	bl	8001f34 <HAL_GetTick>
 8001f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f64:	d005      	beq.n	8001f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f66:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <HAL_Delay+0x44>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4413      	add	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f72:	bf00      	nop
 8001f74:	f7ff ffde 	bl	8001f34 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d8f7      	bhi.n	8001f74 <HAL_Delay+0x28>
  {
  }
}
 8001f84:	bf00      	nop
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000003c 	.word	0x2000003c

08001f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001faa:	68ba      	ldr	r2, [r7, #8]
 8001fac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc6:	4a04      	ldr	r2, [pc, #16]	@ (8001fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	60d3      	str	r3, [r2, #12]
}
 8001fcc:	bf00      	nop
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed00 	.word	0xe000ed00

08001fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	f003 0307 	and.w	r3, r3, #7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	db0b      	blt.n	8002022 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4907      	ldr	r1, [pc, #28]	@ (8002030 <__NVIC_EnableIRQ+0x38>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	2001      	movs	r0, #1
 800201a:	fa00 f202 	lsl.w	r2, r0, r2
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	@ (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	@ (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	@ 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3b01      	subs	r3, #1
 80020fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002100:	d301      	bcc.n	8002106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002102:	2301      	movs	r3, #1
 8002104:	e00f      	b.n	8002126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002106:	4a0a      	ldr	r2, [pc, #40]	@ (8002130 <SysTick_Config+0x40>)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210e:	210f      	movs	r1, #15
 8002110:	f04f 30ff 	mov.w	r0, #4294967295
 8002114:	f7ff ff8e 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <SysTick_Config+0x40>)
 800211a:	2200      	movs	r2, #0
 800211c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <SysTick_Config+0x40>)
 8002120:	2207      	movs	r2, #7
 8002122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	e000e010 	.word	0xe000e010

08002134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff29 	bl	8001f94 <__NVIC_SetPriorityGrouping>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b086      	sub	sp, #24
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800215c:	f7ff ff3e 	bl	8001fdc <__NVIC_GetPriorityGrouping>
 8002160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68b9      	ldr	r1, [r7, #8]
 8002166:	6978      	ldr	r0, [r7, #20]
 8002168:	f7ff ff8e 	bl	8002088 <NVIC_EncodePriority>
 800216c:	4602      	mov	r2, r0
 800216e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002172:	4611      	mov	r1, r2
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff ff5d 	bl	8002034 <__NVIC_SetPriority>
}
 800217a:	bf00      	nop
 800217c:	3718      	adds	r7, #24
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b082      	sub	sp, #8
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff ff31 	bl	8001ff8 <__NVIC_EnableIRQ>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ffa2 	bl	80020f0 <SysTick_Config>
 80021ac:	4603      	mov	r3, r0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021c6:	e166      	b.n	8002496 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2101      	movs	r1, #1
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	fa01 f303 	lsl.w	r3, r1, r3
 80021d4:	4013      	ands	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8158 	beq.w	8002490 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d005      	beq.n	80021f8 <HAL_GPIO_Init+0x40>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d130      	bne.n	800225a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	693a      	ldr	r2, [r7, #16]
 800220c:	4013      	ands	r3, r2
 800220e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800222e:	2201      	movs	r2, #1
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	091b      	lsrs	r3, r3, #4
 8002244:	f003 0201 	and.w	r2, r3, #1
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	4313      	orrs	r3, r2
 8002252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b03      	cmp	r3, #3
 8002264:	d017      	beq.n	8002296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	2203      	movs	r2, #3
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	4013      	ands	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d123      	bne.n	80022ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	220f      	movs	r2, #15
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	691a      	ldr	r2, [r3, #16]
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	08da      	lsrs	r2, r3, #3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3208      	adds	r2, #8
 80022e4:	6939      	ldr	r1, [r7, #16]
 80022e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	2203      	movs	r2, #3
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4013      	ands	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	f003 0203 	and.w	r2, r3, #3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80b2 	beq.w	8002490 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232c:	4b61      	ldr	r3, [pc, #388]	@ (80024b4 <HAL_GPIO_Init+0x2fc>)
 800232e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002330:	4a60      	ldr	r2, [pc, #384]	@ (80024b4 <HAL_GPIO_Init+0x2fc>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6613      	str	r3, [r2, #96]	@ 0x60
 8002338:	4b5e      	ldr	r3, [pc, #376]	@ (80024b4 <HAL_GPIO_Init+0x2fc>)
 800233a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002344:	4a5c      	ldr	r2, [pc, #368]	@ (80024b8 <HAL_GPIO_Init+0x300>)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800236e:	d02b      	beq.n	80023c8 <HAL_GPIO_Init+0x210>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a52      	ldr	r2, [pc, #328]	@ (80024bc <HAL_GPIO_Init+0x304>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d025      	beq.n	80023c4 <HAL_GPIO_Init+0x20c>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a51      	ldr	r2, [pc, #324]	@ (80024c0 <HAL_GPIO_Init+0x308>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d01f      	beq.n	80023c0 <HAL_GPIO_Init+0x208>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a50      	ldr	r2, [pc, #320]	@ (80024c4 <HAL_GPIO_Init+0x30c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d019      	beq.n	80023bc <HAL_GPIO_Init+0x204>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a4f      	ldr	r2, [pc, #316]	@ (80024c8 <HAL_GPIO_Init+0x310>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d013      	beq.n	80023b8 <HAL_GPIO_Init+0x200>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a4e      	ldr	r2, [pc, #312]	@ (80024cc <HAL_GPIO_Init+0x314>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00d      	beq.n	80023b4 <HAL_GPIO_Init+0x1fc>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a4d      	ldr	r2, [pc, #308]	@ (80024d0 <HAL_GPIO_Init+0x318>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d007      	beq.n	80023b0 <HAL_GPIO_Init+0x1f8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a4c      	ldr	r2, [pc, #304]	@ (80024d4 <HAL_GPIO_Init+0x31c>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_GPIO_Init+0x1f4>
 80023a8:	2307      	movs	r3, #7
 80023aa:	e00e      	b.n	80023ca <HAL_GPIO_Init+0x212>
 80023ac:	2308      	movs	r3, #8
 80023ae:	e00c      	b.n	80023ca <HAL_GPIO_Init+0x212>
 80023b0:	2306      	movs	r3, #6
 80023b2:	e00a      	b.n	80023ca <HAL_GPIO_Init+0x212>
 80023b4:	2305      	movs	r3, #5
 80023b6:	e008      	b.n	80023ca <HAL_GPIO_Init+0x212>
 80023b8:	2304      	movs	r3, #4
 80023ba:	e006      	b.n	80023ca <HAL_GPIO_Init+0x212>
 80023bc:	2303      	movs	r3, #3
 80023be:	e004      	b.n	80023ca <HAL_GPIO_Init+0x212>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e002      	b.n	80023ca <HAL_GPIO_Init+0x212>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_GPIO_Init+0x212>
 80023c8:	2300      	movs	r3, #0
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	f002 0203 	and.w	r2, r2, #3
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	4093      	lsls	r3, r2
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023da:	4937      	ldr	r1, [pc, #220]	@ (80024b8 <HAL_GPIO_Init+0x300>)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e8:	4b3b      	ldr	r3, [pc, #236]	@ (80024d8 <HAL_GPIO_Init+0x320>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	43db      	mvns	r3, r3
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	4013      	ands	r3, r2
 80023f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4313      	orrs	r3, r2
 800240a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800240c:	4a32      	ldr	r2, [pc, #200]	@ (80024d8 <HAL_GPIO_Init+0x320>)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002412:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <HAL_GPIO_Init+0x320>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d003      	beq.n	8002436 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002436:	4a28      	ldr	r2, [pc, #160]	@ (80024d8 <HAL_GPIO_Init+0x320>)
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800243c:	4b26      	ldr	r3, [pc, #152]	@ (80024d8 <HAL_GPIO_Init+0x320>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	43db      	mvns	r3, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002460:	4a1d      	ldr	r2, [pc, #116]	@ (80024d8 <HAL_GPIO_Init+0x320>)
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002466:	4b1c      	ldr	r3, [pc, #112]	@ (80024d8 <HAL_GPIO_Init+0x320>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800248a:	4a13      	ldr	r2, [pc, #76]	@ (80024d8 <HAL_GPIO_Init+0x320>)
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	3301      	adds	r3, #1
 8002494:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f47f ae91 	bne.w	80021c8 <HAL_GPIO_Init+0x10>
  }
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	371c      	adds	r7, #28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	40021000 	.word	0x40021000
 80024b8:	40010000 	.word	0x40010000
 80024bc:	48000400 	.word	0x48000400
 80024c0:	48000800 	.word	0x48000800
 80024c4:	48000c00 	.word	0x48000c00
 80024c8:	48001000 	.word	0x48001000
 80024cc:	48001400 	.word	0x48001400
 80024d0:	48001800 	.word	0x48001800
 80024d4:	48001c00 	.word	0x48001c00
 80024d8:	40010400 	.word	0x40010400

080024dc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80024dc:	b480      	push	{r7}
 80024de:	b087      	sub	sp, #28
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024e6:	2300      	movs	r3, #0
 80024e8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80024ea:	e0c9      	b.n	8002680 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024ec:	2201      	movs	r2, #1
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 80bc 	beq.w	800267a <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002502:	4a66      	ldr	r2, [pc, #408]	@ (800269c <HAL_GPIO_DeInit+0x1c0>)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800250e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	220f      	movs	r2, #15
 800251a:	fa02 f303 	lsl.w	r3, r2, r3
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4013      	ands	r3, r2
 8002522:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800252a:	d02b      	beq.n	8002584 <HAL_GPIO_DeInit+0xa8>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a5c      	ldr	r2, [pc, #368]	@ (80026a0 <HAL_GPIO_DeInit+0x1c4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d025      	beq.n	8002580 <HAL_GPIO_DeInit+0xa4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a5b      	ldr	r2, [pc, #364]	@ (80026a4 <HAL_GPIO_DeInit+0x1c8>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d01f      	beq.n	800257c <HAL_GPIO_DeInit+0xa0>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a5a      	ldr	r2, [pc, #360]	@ (80026a8 <HAL_GPIO_DeInit+0x1cc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d019      	beq.n	8002578 <HAL_GPIO_DeInit+0x9c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a59      	ldr	r2, [pc, #356]	@ (80026ac <HAL_GPIO_DeInit+0x1d0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_GPIO_DeInit+0x98>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a58      	ldr	r2, [pc, #352]	@ (80026b0 <HAL_GPIO_DeInit+0x1d4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00d      	beq.n	8002570 <HAL_GPIO_DeInit+0x94>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a57      	ldr	r2, [pc, #348]	@ (80026b4 <HAL_GPIO_DeInit+0x1d8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d007      	beq.n	800256c <HAL_GPIO_DeInit+0x90>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a56      	ldr	r2, [pc, #344]	@ (80026b8 <HAL_GPIO_DeInit+0x1dc>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d101      	bne.n	8002568 <HAL_GPIO_DeInit+0x8c>
 8002564:	2307      	movs	r3, #7
 8002566:	e00e      	b.n	8002586 <HAL_GPIO_DeInit+0xaa>
 8002568:	2308      	movs	r3, #8
 800256a:	e00c      	b.n	8002586 <HAL_GPIO_DeInit+0xaa>
 800256c:	2306      	movs	r3, #6
 800256e:	e00a      	b.n	8002586 <HAL_GPIO_DeInit+0xaa>
 8002570:	2305      	movs	r3, #5
 8002572:	e008      	b.n	8002586 <HAL_GPIO_DeInit+0xaa>
 8002574:	2304      	movs	r3, #4
 8002576:	e006      	b.n	8002586 <HAL_GPIO_DeInit+0xaa>
 8002578:	2303      	movs	r3, #3
 800257a:	e004      	b.n	8002586 <HAL_GPIO_DeInit+0xaa>
 800257c:	2302      	movs	r3, #2
 800257e:	e002      	b.n	8002586 <HAL_GPIO_DeInit+0xaa>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <HAL_GPIO_DeInit+0xaa>
 8002584:	2300      	movs	r3, #0
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	f002 0203 	and.w	r2, r2, #3
 800258c:	0092      	lsls	r2, r2, #2
 800258e:	4093      	lsls	r3, r2
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	429a      	cmp	r2, r3
 8002594:	d132      	bne.n	80025fc <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002596:	4b49      	ldr	r3, [pc, #292]	@ (80026bc <HAL_GPIO_DeInit+0x1e0>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	4947      	ldr	r1, [pc, #284]	@ (80026bc <HAL_GPIO_DeInit+0x1e0>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80025a4:	4b45      	ldr	r3, [pc, #276]	@ (80026bc <HAL_GPIO_DeInit+0x1e0>)
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	4943      	ldr	r1, [pc, #268]	@ (80026bc <HAL_GPIO_DeInit+0x1e0>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80025b2:	4b42      	ldr	r3, [pc, #264]	@ (80026bc <HAL_GPIO_DeInit+0x1e0>)
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4940      	ldr	r1, [pc, #256]	@ (80026bc <HAL_GPIO_DeInit+0x1e0>)
 80025bc:	4013      	ands	r3, r2
 80025be:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80025c0:	4b3e      	ldr	r3, [pc, #248]	@ (80026bc <HAL_GPIO_DeInit+0x1e0>)
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	493c      	ldr	r1, [pc, #240]	@ (80026bc <HAL_GPIO_DeInit+0x1e0>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	220f      	movs	r2, #15
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80025de:	4a2f      	ldr	r2, [pc, #188]	@ (800269c <HAL_GPIO_DeInit+0x1c0>)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	43da      	mvns	r2, r3
 80025ee:	482b      	ldr	r0, [pc, #172]	@ (800269c <HAL_GPIO_DeInit+0x1c0>)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	400a      	ands	r2, r1
 80025f6:	3302      	adds	r3, #2
 80025f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2103      	movs	r1, #3
 8002606:	fa01 f303 	lsl.w	r3, r1, r3
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	08da      	lsrs	r2, r3, #3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	3208      	adds	r2, #8
 8002618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	220f      	movs	r2, #15
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	08d2      	lsrs	r2, r2, #3
 8002630:	4019      	ands	r1, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2103      	movs	r1, #3
 8002644:	fa01 f303 	lsl.w	r3, r1, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	401a      	ands	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	2101      	movs	r1, #1
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	43db      	mvns	r3, r3
 800265e:	401a      	ands	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68da      	ldr	r2, [r3, #12]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2103      	movs	r1, #3
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	401a      	ands	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3301      	adds	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f af2f 	bne.w	80024ec <HAL_GPIO_DeInit+0x10>
  }
}
 800268e:	bf00      	nop
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	40010000 	.word	0x40010000
 80026a0:	48000400 	.word	0x48000400
 80026a4:	48000800 	.word	0x48000800
 80026a8:	48000c00 	.word	0x48000c00
 80026ac:	48001000 	.word	0x48001000
 80026b0:	48001400 	.word	0x48001400
 80026b4:	48001800 	.word	0x48001800
 80026b8:	48001c00 	.word	0x48001c00
 80026bc:	40010400 	.word	0x40010400

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026dc:	e002      	b.n	80026e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026de:	887a      	ldrh	r2, [r7, #2]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026fa:	4b08      	ldr	r3, [pc, #32]	@ (800271c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026fc:	695a      	ldr	r2, [r3, #20]
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d006      	beq.n	8002714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002706:	4a05      	ldr	r2, [pc, #20]	@ (800271c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800270c:	88fb      	ldrh	r3, [r7, #6]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f806 	bl	8002720 <HAL_GPIO_EXTI_Callback>
  }
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40010400 	.word	0x40010400

08002720 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e08d      	b.n	8002864 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d106      	bne.n	8002762 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff f853 	bl	8001808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2224      	movs	r2, #36	@ 0x24
 8002766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0201 	bic.w	r2, r2, #1
 8002778:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002786:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002796:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	e006      	b.n	80027be <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d108      	bne.n	80027d8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	e007      	b.n	80027e8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027fa:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800280a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691a      	ldr	r2, [r3, #16]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69d9      	ldr	r1, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1a      	ldr	r2, [r3, #32]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002862:	2300      	movs	r3, #0
}
 8002864:	4618      	mov	r0, r3
 8002866:	3708      	adds	r7, #8
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e021      	b.n	80028c2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2224      	movs	r2, #36	@ 0x24
 8002882:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff f814 	bl	80018c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	4608      	mov	r0, r1
 80028d6:	4611      	mov	r1, r2
 80028d8:	461a      	mov	r2, r3
 80028da:	4603      	mov	r3, r0
 80028dc:	817b      	strh	r3, [r7, #10]
 80028de:	460b      	mov	r3, r1
 80028e0:	813b      	strh	r3, [r7, #8]
 80028e2:	4613      	mov	r3, r2
 80028e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	f040 80f9 	bne.w	8002ae6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_I2C_Mem_Write+0x34>
 80028fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002906:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e0ed      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_I2C_Mem_Write+0x4e>
 8002916:	2302      	movs	r3, #2
 8002918:	e0e6      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x21c>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002922:	f7ff fb07 	bl	8001f34 <HAL_GetTick>
 8002926:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	2319      	movs	r3, #25
 800292e:	2201      	movs	r2, #1
 8002930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fac3 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0d1      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2221      	movs	r2, #33	@ 0x21
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2240      	movs	r2, #64	@ 0x40
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2200      	movs	r2, #0
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a3a      	ldr	r2, [r7, #32]
 800295e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002964:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800296c:	88f8      	ldrh	r0, [r7, #6]
 800296e:	893a      	ldrh	r2, [r7, #8]
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	9301      	str	r3, [sp, #4]
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002978:	9300      	str	r3, [sp, #0]
 800297a:	4603      	mov	r3, r0
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f000 f9d3 	bl	8002d28 <I2C_RequestMemoryWrite>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d005      	beq.n	8002994 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0a9      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2bff      	cmp	r3, #255	@ 0xff
 800299c:	d90e      	bls.n	80029bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	@ 0xff
 80029a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	8979      	ldrh	r1, [r7, #10]
 80029ac:	2300      	movs	r3, #0
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f000 fc47 	bl	8003248 <I2C_TransferConfig>
 80029ba:	e00f      	b.n	80029dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	8979      	ldrh	r1, [r7, #10]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 fc36 	bl	8003248 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fac6 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e07b      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f4:	781a      	ldrb	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d034      	beq.n	8002a94 <HAL_I2C_Mem_Write+0x1c8>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d130      	bne.n	8002a94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2180      	movs	r1, #128	@ 0x80
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fa3f 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e04d      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	2bff      	cmp	r3, #255	@ 0xff
 8002a54:	d90e      	bls.n	8002a74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	22ff      	movs	r2, #255	@ 0xff
 8002a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	2300      	movs	r3, #0
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fbeb 	bl	8003248 <I2C_TransferConfig>
 8002a72:	e00f      	b.n	8002a94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	8979      	ldrh	r1, [r7, #10]
 8002a86:	2300      	movs	r3, #0
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f000 fbda 	bl	8003248 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d19e      	bne.n	80029dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 faac 	bl	8003000 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e01a      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <HAL_I2C_Mem_Write+0x224>)
 8002ac6:	400b      	ands	r3, r1
 8002ac8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e000      	b.n	8002ae8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002ae6:	2302      	movs	r3, #2
  }
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3718      	adds	r7, #24
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	fe00e800 	.word	0xfe00e800

08002af4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	4608      	mov	r0, r1
 8002afe:	4611      	mov	r1, r2
 8002b00:	461a      	mov	r2, r3
 8002b02:	4603      	mov	r3, r0
 8002b04:	817b      	strh	r3, [r7, #10]
 8002b06:	460b      	mov	r3, r1
 8002b08:	813b      	strh	r3, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	f040 80fd 	bne.w	8002d16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_I2C_Mem_Read+0x34>
 8002b22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d105      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0f1      	b.n	8002d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_I2C_Mem_Read+0x4e>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e0ea      	b.n	8002d18 <HAL_I2C_Mem_Read+0x224>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b4a:	f7ff f9f3 	bl	8001f34 <HAL_GetTick>
 8002b4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	2319      	movs	r3, #25
 8002b56:	2201      	movs	r2, #1
 8002b58:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f000 f9af 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0d5      	b.n	8002d18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2222      	movs	r2, #34	@ 0x22
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2240      	movs	r2, #64	@ 0x40
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a3a      	ldr	r2, [r7, #32]
 8002b86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b94:	88f8      	ldrh	r0, [r7, #6]
 8002b96:	893a      	ldrh	r2, [r7, #8]
 8002b98:	8979      	ldrh	r1, [r7, #10]
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	9301      	str	r3, [sp, #4]
 8002b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f913 	bl	8002dd0 <I2C_RequestMemoryRead>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e0ad      	b.n	8002d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2bff      	cmp	r3, #255	@ 0xff
 8002bc4:	d90e      	bls.n	8002be4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	8979      	ldrh	r1, [r7, #10]
 8002bd4:	4b52      	ldr	r3, [pc, #328]	@ (8002d20 <HAL_I2C_Mem_Read+0x22c>)
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 fb33 	bl	8003248 <I2C_TransferConfig>
 8002be2:	e00f      	b.n	8002c04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	8979      	ldrh	r1, [r7, #10]
 8002bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d20 <HAL_I2C_Mem_Read+0x22c>)
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fb22 	bl	8003248 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 f956 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e07c      	b.n	8002d18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d034      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0x1d0>
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d130      	bne.n	8002cc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2180      	movs	r1, #128	@ 0x80
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f927 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e04d      	b.n	8002d18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2bff      	cmp	r3, #255	@ 0xff
 8002c84:	d90e      	bls.n	8002ca4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	2300      	movs	r3, #0
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 fad3 	bl	8003248 <I2C_TransferConfig>
 8002ca2:	e00f      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	8979      	ldrh	r1, [r7, #10]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fac2 	bl	8003248 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d19a      	bne.n	8002c04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f994 	bl	8003000 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e01a      	b.n	8002d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <HAL_I2C_Mem_Read+0x230>)
 8002cf6:	400b      	ands	r3, r1
 8002cf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2220      	movs	r2, #32
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002d12:	2300      	movs	r3, #0
 8002d14:	e000      	b.n	8002d18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002d16:	2302      	movs	r3, #2
  }
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	80002400 	.word	0x80002400
 8002d24:	fe00e800 	.word	0xfe00e800

08002d28 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af02      	add	r7, sp, #8
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	4608      	mov	r0, r1
 8002d32:	4611      	mov	r1, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	4603      	mov	r3, r0
 8002d38:	817b      	strh	r3, [r7, #10]
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	813b      	strh	r3, [r7, #8]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	8979      	ldrh	r1, [r7, #10]
 8002d48:	4b20      	ldr	r3, [pc, #128]	@ (8002dcc <I2C_RequestMemoryWrite+0xa4>)
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fa79 	bl	8003248 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d56:	69fa      	ldr	r2, [r7, #28]
 8002d58:	69b9      	ldr	r1, [r7, #24]
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f909 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e02c      	b.n	8002dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d105      	bne.n	8002d7c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d70:	893b      	ldrh	r3, [r7, #8]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d7a:	e015      	b.n	8002da8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	b2da      	uxtb	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8a:	69fa      	ldr	r2, [r7, #28]
 8002d8c:	69b9      	ldr	r1, [r7, #24]
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f8ef 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e012      	b.n	8002dc4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d9e:	893b      	ldrh	r3, [r7, #8]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	9300      	str	r3, [sp, #0]
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	2200      	movs	r2, #0
 8002db0:	2180      	movs	r1, #128	@ 0x80
 8002db2:	68f8      	ldr	r0, [r7, #12]
 8002db4:	f000 f884 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	80002000 	.word	0x80002000

08002dd0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af02      	add	r7, sp, #8
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	4608      	mov	r0, r1
 8002dda:	4611      	mov	r1, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	4603      	mov	r3, r0
 8002de0:	817b      	strh	r3, [r7, #10]
 8002de2:	460b      	mov	r3, r1
 8002de4:	813b      	strh	r3, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	4b20      	ldr	r3, [pc, #128]	@ (8002e74 <I2C_RequestMemoryRead+0xa4>)
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2300      	movs	r3, #0
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa26 	bl	8003248 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	69b9      	ldr	r1, [r7, #24]
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f8b6 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e02c      	b.n	8002e6a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e10:	88fb      	ldrh	r3, [r7, #6]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d105      	bne.n	8002e22 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e16:	893b      	ldrh	r3, [r7, #8]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e20:	e015      	b.n	8002e4e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002e22:	893b      	ldrh	r3, [r7, #8]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	69b9      	ldr	r1, [r7, #24]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f89c 	bl	8002f72 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e012      	b.n	8002e6a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e44:	893b      	ldrh	r3, [r7, #8]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2140      	movs	r1, #64	@ 0x40
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f831 	bl	8002ec0 <I2C_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e000      	b.n	8002e6a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	80002000 	.word	0x80002000

08002e78 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d103      	bne.n	8002e96 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2200      	movs	r2, #0
 8002e94:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d007      	beq.n	8002eb4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	619a      	str	r2, [r3, #24]
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ed0:	e03b      	b.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	6839      	ldr	r1, [r7, #0]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f8d6 	bl	8003088 <I2C_IsErrorOccurred>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e041      	b.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eec:	d02d      	beq.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7ff f821 	bl	8001f34 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d122      	bne.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	79fb      	ldrb	r3, [r7, #7]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d113      	bne.n	8002f4a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	f043 0220 	orr.w	r2, r3, #32
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2220      	movs	r2, #32
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e00f      	b.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	699a      	ldr	r2, [r3, #24]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4013      	ands	r3, r2
 8002f54:	68ba      	ldr	r2, [r7, #8]
 8002f56:	429a      	cmp	r2, r3
 8002f58:	bf0c      	ite	eq
 8002f5a:	2301      	moveq	r3, #1
 8002f5c:	2300      	movne	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d0b4      	beq.n	8002ed2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	60f8      	str	r0, [r7, #12]
 8002f7a:	60b9      	str	r1, [r7, #8]
 8002f7c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f7e:	e033      	b.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	68b9      	ldr	r1, [r7, #8]
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 f87f 	bl	8003088 <I2C_IsErrorOccurred>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e031      	b.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d025      	beq.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9c:	f7fe ffca 	bl	8001f34 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d302      	bcc.n	8002fb2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11a      	bne.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d013      	beq.n	8002fe8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d1c4      	bne.n	8002f80 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800300c:	e02f      	b.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 f838 	bl	8003088 <I2C_IsErrorOccurred>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e02d      	b.n	800307e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003022:	f7fe ff87 	bl	8001f34 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	429a      	cmp	r2, r3
 8003030:	d302      	bcc.n	8003038 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d11a      	bne.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b20      	cmp	r3, #32
 8003044:	d013      	beq.n	800306e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e007      	b.n	800307e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	699b      	ldr	r3, [r3, #24]
 8003074:	f003 0320 	and.w	r3, r3, #32
 8003078:	2b20      	cmp	r3, #32
 800307a:	d1c8      	bne.n	800300e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	@ 0x28
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003094:	2300      	movs	r3, #0
 8003096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	f003 0310 	and.w	r3, r3, #16
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d068      	beq.n	8003186 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2210      	movs	r2, #16
 80030ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030bc:	e049      	b.n	8003152 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d045      	beq.n	8003152 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fe ff35 	bl	8001f34 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <I2C_IsErrorOccurred+0x54>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d13a      	bne.n	8003152 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030fe:	d121      	bne.n	8003144 <I2C_IsErrorOccurred+0xbc>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003106:	d01d      	beq.n	8003144 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003108:	7cfb      	ldrb	r3, [r7, #19]
 800310a:	2b20      	cmp	r3, #32
 800310c:	d01a      	beq.n	8003144 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800311c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800311e:	f7fe ff09 	bl	8001f34 <HAL_GetTick>
 8003122:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003124:	e00e      	b.n	8003144 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003126:	f7fe ff05 	bl	8001f34 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b19      	cmp	r3, #25
 8003132:	d907      	bls.n	8003144 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	f043 0320 	orr.w	r3, r3, #32
 800313a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003142:	e006      	b.n	8003152 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	2b20      	cmp	r3, #32
 8003150:	d1e9      	bne.n	8003126 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0320 	and.w	r3, r3, #32
 800315c:	2b20      	cmp	r3, #32
 800315e:	d003      	beq.n	8003168 <I2C_IsErrorOccurred+0xe0>
 8003160:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0aa      	beq.n	80030be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003168:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800316c:	2b00      	cmp	r3, #0
 800316e:	d103      	bne.n	8003178 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2220      	movs	r2, #32
 8003176:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	f043 0304 	orr.w	r3, r3, #4
 800317e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031ba:	6a3b      	ldr	r3, [r7, #32]
 80031bc:	f043 0308 	orr.w	r3, r3, #8
 80031c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80031ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00b      	beq.n	80031f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80031f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01c      	beq.n	8003236 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f7ff fe3b 	bl	8002e78 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <I2C_IsErrorOccurred+0x1bc>)
 800320e:	400b      	ands	r3, r1
 8003210:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	431a      	orrs	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003236:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800323a:	4618      	mov	r0, r3
 800323c:	3728      	adds	r7, #40	@ 0x28
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	fe00e800 	.word	0xfe00e800

08003248 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	817b      	strh	r3, [r7, #10]
 8003256:	4613      	mov	r3, r2
 8003258:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003260:	7a7b      	ldrb	r3, [r7, #9]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003268:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	4313      	orrs	r3, r2
 8003272:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003276:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	0d5b      	lsrs	r3, r3, #21
 8003282:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003286:	4b08      	ldr	r3, [pc, #32]	@ (80032a8 <I2C_TransferConfig+0x60>)
 8003288:	430b      	orrs	r3, r1
 800328a:	43db      	mvns	r3, r3
 800328c:	ea02 0103 	and.w	r1, r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	03ff63ff 	.word	0x03ff63ff

080032ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d138      	bne.n	8003334 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e032      	b.n	8003336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	@ 0x24
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	d139      	bne.n	80033cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003362:	2302      	movs	r3, #2
 8003364:	e033      	b.n	80033ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2224      	movs	r2, #36	@ 0x24
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003394:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ec:	d102      	bne.n	80033f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80033ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033f2:	e00b      	b.n	800340c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80033f4:	4b08      	ldr	r3, [pc, #32]	@ (8003418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80033fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003402:	d102      	bne.n	800340a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003404:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003408:	e000      	b.n	800340c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800340a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40007000 	.word	0x40007000

0800341c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d141      	bne.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800342a:	4b4b      	ldr	r3, [pc, #300]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003436:	d131      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003438:	4b47      	ldr	r3, [pc, #284]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800343e:	4a46      	ldr	r2, [pc, #280]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003444:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003448:	4b43      	ldr	r3, [pc, #268]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003450:	4a41      	ldr	r2, [pc, #260]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003458:	4b40      	ldr	r3, [pc, #256]	@ (800355c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2232      	movs	r2, #50	@ 0x32
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	4a3f      	ldr	r2, [pc, #252]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	0c9b      	lsrs	r3, r3, #18
 800346a:	3301      	adds	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346e:	e002      	b.n	8003476 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3b01      	subs	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003476:	4b38      	ldr	r3, [pc, #224]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003482:	d102      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f2      	bne.n	8003470 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800348a:	4b33      	ldr	r3, [pc, #204]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	d158      	bne.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e057      	b.n	800354c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800349c:	4b2e      	ldr	r3, [pc, #184]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80034ac:	e04d      	b.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034b4:	d141      	bne.n	800353a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034b6:	4b28      	ldr	r3, [pc, #160]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034c2:	d131      	bne.n	8003528 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c4:	4b24      	ldr	r3, [pc, #144]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80034ca:	4a23      	ldr	r2, [pc, #140]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d4:	4b20      	ldr	r3, [pc, #128]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80034dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80034e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2232      	movs	r2, #50	@ 0x32
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	4a1c      	ldr	r2, [pc, #112]	@ (8003560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	0c9b      	lsrs	r3, r3, #18
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fa:	e002      	b.n	8003502 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3b01      	subs	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003502:	4b15      	ldr	r3, [pc, #84]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350e:	d102      	bne.n	8003516 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f2      	bne.n	80034fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003522:	d112      	bne.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e011      	b.n	800354c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003528:	4b0b      	ldr	r3, [pc, #44]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800352e:	4a0a      	ldr	r2, [pc, #40]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003534:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003538:	e007      	b.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800353a:	4b07      	ldr	r3, [pc, #28]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003542:	4a05      	ldr	r2, [pc, #20]	@ (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003548:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40007000 	.word	0x40007000
 800355c:	20000000 	.word	0x20000000
 8003560:	431bde83 	.word	0x431bde83

08003564 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b088      	sub	sp, #32
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	f000 bc08 	b.w	8003d88 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003578:	4b96      	ldr	r3, [pc, #600]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 030c 	and.w	r3, r3, #12
 8003580:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003582:	4b94      	ldr	r3, [pc, #592]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80e4 	beq.w	8003762 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4c>
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b0c      	cmp	r3, #12
 80035a4:	f040 808b 	bne.w	80036be <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	f040 8087 	bne.w	80036be <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035b0:	4b88      	ldr	r3, [pc, #544]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_OscConfig+0x64>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d101      	bne.n	80035c8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e3df      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	4b81      	ldr	r3, [pc, #516]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <HAL_RCC_OscConfig+0x7e>
 80035d8:	4b7e      	ldr	r3, [pc, #504]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e0:	e005      	b.n	80035ee <HAL_RCC_OscConfig+0x8a>
 80035e2:	4b7c      	ldr	r3, [pc, #496]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80035e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d223      	bcs.n	800363a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 fdcc 	bl	8004194 <RCC_SetFlashLatencyFromMSIRange>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e3c0      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003606:	4b73      	ldr	r3, [pc, #460]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a72      	ldr	r2, [pc, #456]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800360c:	f043 0308 	orr.w	r3, r3, #8
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	4b70      	ldr	r3, [pc, #448]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	496d      	ldr	r1, [pc, #436]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003624:	4b6b      	ldr	r3, [pc, #428]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	4968      	ldr	r1, [pc, #416]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
 8003638:	e025      	b.n	8003686 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800363a:	4b66      	ldr	r3, [pc, #408]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003640:	f043 0308 	orr.w	r3, r3, #8
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b63      	ldr	r3, [pc, #396]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	4960      	ldr	r1, [pc, #384]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003654:	4313      	orrs	r3, r2
 8003656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003658:	4b5e      	ldr	r3, [pc, #376]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	021b      	lsls	r3, r3, #8
 8003666:	495b      	ldr	r1, [pc, #364]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fd8c 	bl	8004194 <RCC_SetFlashLatencyFromMSIRange>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e380      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003686:	f000 fcc1 	bl	800400c <HAL_RCC_GetSysClockFreq>
 800368a:	4602      	mov	r2, r0
 800368c:	4b51      	ldr	r3, [pc, #324]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	091b      	lsrs	r3, r3, #4
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	4950      	ldr	r1, [pc, #320]	@ (80037d8 <HAL_RCC_OscConfig+0x274>)
 8003698:	5ccb      	ldrb	r3, [r1, r3]
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	fa22 f303 	lsr.w	r3, r2, r3
 80036a2:	4a4e      	ldr	r2, [pc, #312]	@ (80037dc <HAL_RCC_OscConfig+0x278>)
 80036a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036a6:	4b4e      	ldr	r3, [pc, #312]	@ (80037e0 <HAL_RCC_OscConfig+0x27c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7fe fbf2 	bl	8001e94 <HAL_InitTick>
 80036b0:	4603      	mov	r3, r0
 80036b2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036b4:	7bfb      	ldrb	r3, [r7, #15]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d052      	beq.n	8003760 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
 80036bc:	e364      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d032      	beq.n	800372c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036c6:	4b43      	ldr	r3, [pc, #268]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a42      	ldr	r2, [pc, #264]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036cc:	f043 0301 	orr.w	r3, r3, #1
 80036d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036d2:	f7fe fc2f 	bl	8001f34 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036da:	f7fe fc2b 	bl	8001f34 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e34d      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036ec:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d0f0      	beq.n	80036da <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036f8:	4b36      	ldr	r3, [pc, #216]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a35      	ldr	r2, [pc, #212]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80036fe:	f043 0308 	orr.w	r3, r3, #8
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b33      	ldr	r3, [pc, #204]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4930      	ldr	r1, [pc, #192]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003712:	4313      	orrs	r3, r2
 8003714:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003716:	4b2f      	ldr	r3, [pc, #188]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	021b      	lsls	r3, r3, #8
 8003724:	492b      	ldr	r1, [pc, #172]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
 800372a:	e01a      	b.n	8003762 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800372c:	4b29      	ldr	r3, [pc, #164]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a28      	ldr	r2, [pc, #160]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003732:	f023 0301 	bic.w	r3, r3, #1
 8003736:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003738:	f7fe fbfc 	bl	8001f34 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003740:	f7fe fbf8 	bl	8001f34 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e31a      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003752:	4b20      	ldr	r3, [pc, #128]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x1dc>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d073      	beq.n	8003856 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	2b08      	cmp	r3, #8
 8003772:	d005      	beq.n	8003780 <HAL_RCC_OscConfig+0x21c>
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d10e      	bne.n	8003798 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b03      	cmp	r3, #3
 800377e:	d10b      	bne.n	8003798 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	4b14      	ldr	r3, [pc, #80]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d063      	beq.n	8003854 <HAL_RCC_OscConfig+0x2f0>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d15f      	bne.n	8003854 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e2f7      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x24c>
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e025      	b.n	80037fc <HAL_RCC_OscConfig+0x298>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037b8:	d114      	bne.n	80037e4 <HAL_RCC_OscConfig+0x280>
 80037ba:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a02      	ldr	r2, [pc, #8]	@ (80037d4 <HAL_RCC_OscConfig+0x270>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e013      	b.n	80037fc <HAL_RCC_OscConfig+0x298>
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08008b70 	.word	0x08008b70
 80037dc:	20000000 	.word	0x20000000
 80037e0:	20000038 	.word	0x20000038
 80037e4:	4ba0      	ldr	r3, [pc, #640]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a9f      	ldr	r2, [pc, #636]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ee:	6013      	str	r3, [r2, #0]
 80037f0:	4b9d      	ldr	r3, [pc, #628]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a9c      	ldr	r2, [pc, #624]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80037f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d013      	beq.n	800382c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe fb96 	bl	8001f34 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800380c:	f7fe fb92 	bl	8001f34 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	@ 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e2b4      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800381e:	4b92      	ldr	r3, [pc, #584]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d0f0      	beq.n	800380c <HAL_RCC_OscConfig+0x2a8>
 800382a:	e014      	b.n	8003856 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fb82 	bl	8001f34 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003834:	f7fe fb7e 	bl	8001f34 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b64      	cmp	r3, #100	@ 0x64
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e2a0      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003846:	4b88      	ldr	r3, [pc, #544]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x2d0>
 8003852:	e000      	b.n	8003856 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003854:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d060      	beq.n	8003924 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	2b04      	cmp	r3, #4
 8003866:	d005      	beq.n	8003874 <HAL_RCC_OscConfig+0x310>
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b0c      	cmp	r3, #12
 800386c:	d119      	bne.n	80038a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d116      	bne.n	80038a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003874:	4b7c      	ldr	r3, [pc, #496]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_OscConfig+0x328>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e27d      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388c:	4b76      	ldr	r3, [pc, #472]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	061b      	lsls	r3, r3, #24
 800389a:	4973      	ldr	r1, [pc, #460]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800389c:	4313      	orrs	r3, r2
 800389e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a0:	e040      	b.n	8003924 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d023      	beq.n	80038f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038aa:	4b6f      	ldr	r3, [pc, #444]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a6e      	ldr	r2, [pc, #440]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b6:	f7fe fb3d 	bl	8001f34 <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038bc:	e008      	b.n	80038d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038be:	f7fe fb39 	bl	8001f34 <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d901      	bls.n	80038d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e25b      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038d0:	4b65      	ldr	r3, [pc, #404]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d0f0      	beq.n	80038be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038dc:	4b62      	ldr	r3, [pc, #392]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	691b      	ldr	r3, [r3, #16]
 80038e8:	061b      	lsls	r3, r3, #24
 80038ea:	495f      	ldr	r1, [pc, #380]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
 80038f0:	e018      	b.n	8003924 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a5c      	ldr	r2, [pc, #368]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80038f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fe fb19 	bl	8001f34 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003906:	f7fe fb15 	bl	8001f34 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e237      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003918:	4b53      	ldr	r3, [pc, #332]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d03c      	beq.n	80039aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d01c      	beq.n	8003972 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003938:	4b4b      	ldr	r3, [pc, #300]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393e:	4a4a      	ldr	r2, [pc, #296]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003940:	f043 0301 	orr.w	r3, r3, #1
 8003944:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003948:	f7fe faf4 	bl	8001f34 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003950:	f7fe faf0 	bl	8001f34 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e212      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003962:	4b41      	ldr	r3, [pc, #260]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003964:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	d0ef      	beq.n	8003950 <HAL_RCC_OscConfig+0x3ec>
 8003970:	e01b      	b.n	80039aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003972:	4b3d      	ldr	r3, [pc, #244]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003974:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003978:	4a3b      	ldr	r2, [pc, #236]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003982:	f7fe fad7 	bl	8001f34 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800398a:	f7fe fad3 	bl	8001f34 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e1f5      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800399c:	4b32      	ldr	r3, [pc, #200]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 800399e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ef      	bne.n	800398a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80a6 	beq.w	8003b04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b8:	2300      	movs	r3, #0
 80039ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039bc:	4b2a      	ldr	r3, [pc, #168]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10d      	bne.n	80039e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c8:	4b27      	ldr	r3, [pc, #156]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039cc:	4a26      	ldr	r2, [pc, #152]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80039d4:	4b24      	ldr	r3, [pc, #144]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 80039d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039e0:	2301      	movs	r3, #1
 80039e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039e4:	4b21      	ldr	r3, [pc, #132]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d118      	bne.n	8003a22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f0:	4b1e      	ldr	r3, [pc, #120]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 80039f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fc:	f7fe fa9a 	bl	8001f34 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a04:	f7fe fa96 	bl	8001f34 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e1b8      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a16:	4b15      	ldr	r3, [pc, #84]	@ (8003a6c <HAL_RCC_OscConfig+0x508>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d108      	bne.n	8003a3c <HAL_RCC_OscConfig+0x4d8>
 8003a2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a30:	4a0d      	ldr	r2, [pc, #52]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a32:	f043 0301 	orr.w	r3, r3, #1
 8003a36:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a3a:	e029      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	d115      	bne.n	8003a70 <HAL_RCC_OscConfig+0x50c>
 8003a44:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a4a:	4a07      	ldr	r2, [pc, #28]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f043 0304 	orr.w	r3, r3, #4
 8003a50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a54:	4b04      	ldr	r3, [pc, #16]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a5a:	4a03      	ldr	r2, [pc, #12]	@ (8003a68 <HAL_RCC_OscConfig+0x504>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a64:	e014      	b.n	8003a90 <HAL_RCC_OscConfig+0x52c>
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40007000 	.word	0x40007000
 8003a70:	4b9d      	ldr	r3, [pc, #628]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a76:	4a9c      	ldr	r2, [pc, #624]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003a78:	f023 0301 	bic.w	r3, r3, #1
 8003a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a80:	4b99      	ldr	r3, [pc, #612]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a86:	4a98      	ldr	r2, [pc, #608]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003a88:	f023 0304 	bic.w	r3, r3, #4
 8003a8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a98:	f7fe fa4c 	bl	8001f34 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fe fa48 	bl	8001f34 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e168      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab6:	4b8c      	ldr	r3, [pc, #560]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0ed      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x53c>
 8003ac4:	e015      	b.n	8003af2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fe fa35 	bl	8001f34 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fe fa31 	bl	8001f34 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e151      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ae4:	4b80      	ldr	r3, [pc, #512]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ed      	bne.n	8003ace <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af2:	7ffb      	ldrb	r3, [r7, #31]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d105      	bne.n	8003b04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003af8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	4a7a      	ldr	r2, [pc, #488]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b02:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d03c      	beq.n	8003b8a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d01c      	beq.n	8003b52 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b18:	4b73      	ldr	r3, [pc, #460]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b1e:	4a72      	ldr	r2, [pc, #456]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b28:	f7fe fa04 	bl	8001f34 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b30:	f7fe fa00 	bl	8001f34 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e122      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b42:	4b69      	ldr	r3, [pc, #420]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b44:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ef      	beq.n	8003b30 <HAL_RCC_OscConfig+0x5cc>
 8003b50:	e01b      	b.n	8003b8a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b52:	4b65      	ldr	r3, [pc, #404]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b54:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b58:	4a63      	ldr	r2, [pc, #396]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b5a:	f023 0301 	bic.w	r3, r3, #1
 8003b5e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7fe f9e7 	bl	8001f34 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b68:	e008      	b.n	8003b7c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b6a:	f7fe f9e3 	bl	8001f34 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d901      	bls.n	8003b7c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e105      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003b7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1ef      	bne.n	8003b6a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80f9 	beq.w	8003d86 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	f040 80cf 	bne.w	8003d3c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b9e:	4b52      	ldr	r3, [pc, #328]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f003 0203 	and.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d12c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d123      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bce:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d11b      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bde:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d113      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d109      	bne.n	8003c0c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	3b01      	subs	r3, #1
 8003c06:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d071      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d068      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c12:	4b35      	ldr	r3, [pc, #212]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c1e:	4b32      	ldr	r3, [pc, #200]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0ac      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a2d      	ldr	r2, [pc, #180]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c38:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c3a:	f7fe f97b 	bl	8001f34 <HAL_GetTick>
 8003c3e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c40:	e008      	b.n	8003c54 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c42:	f7fe f977 	bl	8001f34 <HAL_GetTick>
 8003c46:	4602      	mov	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d901      	bls.n	8003c54 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e099      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c54:	4b24      	ldr	r3, [pc, #144]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1f0      	bne.n	8003c42 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c60:	4b21      	ldr	r3, [pc, #132]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	4b21      	ldr	r3, [pc, #132]	@ (8003cec <HAL_RCC_OscConfig+0x788>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003c70:	3a01      	subs	r2, #1
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	4311      	orrs	r1, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003c7a:	0212      	lsls	r2, r2, #8
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c82:	0852      	lsrs	r2, r2, #1
 8003c84:	3a01      	subs	r2, #1
 8003c86:	0552      	lsls	r2, r2, #21
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003c8e:	0852      	lsrs	r2, r2, #1
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0652      	lsls	r2, r2, #25
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003c9a:	06d2      	lsls	r2, r2, #27
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	4912      	ldr	r1, [pc, #72]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b10      	ldr	r3, [pc, #64]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a0f      	ldr	r2, [pc, #60]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003caa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003cba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cbc:	f7fe f93a 	bl	8001f34 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fe f936 	bl	8001f34 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e058      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <HAL_RCC_OscConfig+0x784>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce2:	e050      	b.n	8003d86 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e04f      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf0:	4b27      	ldr	r3, [pc, #156]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d144      	bne.n	8003d86 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003cfc:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a23      	ldr	r2, [pc, #140]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d02:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d06:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d08:	4b21      	ldr	r3, [pc, #132]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a20      	ldr	r2, [pc, #128]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d12:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d14:	f7fe f90e 	bl	8001f34 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d1c:	f7fe f90a 	bl	8001f34 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e02c      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	4b18      	ldr	r3, [pc, #96]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x7b8>
 8003d3a:	e024      	b.n	8003d86 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d01f      	beq.n	8003d82 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a12      	ldr	r2, [pc, #72]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fe f8f1 	bl	8001f34 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d56:	f7fe f8ed 	bl	8001f34 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e00f      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d68:	4b09      	ldr	r3, [pc, #36]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f0      	bne.n	8003d56 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d74:	4b06      	ldr	r3, [pc, #24]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d76:	68da      	ldr	r2, [r3, #12]
 8003d78:	4905      	ldr	r1, [pc, #20]	@ (8003d90 <HAL_RCC_OscConfig+0x82c>)
 8003d7a:	4b06      	ldr	r3, [pc, #24]	@ (8003d94 <HAL_RCC_OscConfig+0x830>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	60cb      	str	r3, [r1, #12]
 8003d80:	e001      	b.n	8003d86 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3720      	adds	r7, #32
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40021000 	.word	0x40021000
 8003d94:	feeefffc 	.word	0xfeeefffc

08003d98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003da2:	2300      	movs	r3, #0
 8003da4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e11d      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b90      	ldr	r3, [pc, #576]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 030f 	and.w	r3, r3, #15
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d910      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f023 020f 	bic.w	r2, r3, #15
 8003dc6:	498b      	ldr	r1, [pc, #556]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dce:	4b89      	ldr	r3, [pc, #548]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e105      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d010      	beq.n	8003e0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	4b81      	ldr	r3, [pc, #516]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d908      	bls.n	8003e0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dfc:	4b7e      	ldr	r3, [pc, #504]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	497b      	ldr	r1, [pc, #492]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d079      	beq.n	8003f0e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d11e      	bne.n	8003e60 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e22:	4b75      	ldr	r3, [pc, #468]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0dc      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003e32:	f000 fa09 	bl	8004248 <RCC_GetSysClockFreqFromPLLSource>
 8003e36:	4603      	mov	r3, r0
 8003e38:	4a70      	ldr	r2, [pc, #448]	@ (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d946      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e3e:	4b6e      	ldr	r3, [pc, #440]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d140      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e4a:	4b6b      	ldr	r3, [pc, #428]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e52:	4a69      	ldr	r2, [pc, #420]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	e035      	b.n	8003ecc <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d107      	bne.n	8003e78 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e68:	4b63      	ldr	r3, [pc, #396]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d115      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0b9      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d107      	bne.n	8003e90 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e80:	4b5d      	ldr	r3, [pc, #372]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0ad      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e90:	4b59      	ldr	r3, [pc, #356]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0a5      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ea0:	f000 f8b4 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	4a55      	ldr	r2, [pc, #340]	@ (8003ffc <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d90f      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003eac:	4b52      	ldr	r3, [pc, #328]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d109      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eb8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ec0:	4a4d      	ldr	r2, [pc, #308]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ec8:	2380      	movs	r3, #128	@ 0x80
 8003eca:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f023 0203 	bic.w	r2, r3, #3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4947      	ldr	r1, [pc, #284]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ede:	f7fe f829 	bl	8001f34 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee4:	e00a      	b.n	8003efc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee6:	f7fe f825 	bl	8001f34 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d901      	bls.n	8003efc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e077      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 020c 	and.w	r2, r3, #12
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d1eb      	bne.n	8003ee6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b80      	cmp	r3, #128	@ 0x80
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f14:	4b38      	ldr	r3, [pc, #224]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4a37      	ldr	r2, [pc, #220]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f1e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d010      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	4b31      	ldr	r3, [pc, #196]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d208      	bcs.n	8003f4e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	492b      	ldr	r1, [pc, #172]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4e:	4b29      	ldr	r3, [pc, #164]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d210      	bcs.n	8003f7e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5c:	4b25      	ldr	r3, [pc, #148]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 020f 	bic.w	r2, r3, #15
 8003f64:	4923      	ldr	r1, [pc, #140]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6c:	4b21      	ldr	r3, [pc, #132]	@ (8003ff4 <HAL_RCC_ClockConfig+0x25c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e036      	b.n	8003fec <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	4918      	ldr	r1, [pc, #96]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0308 	and.w	r3, r3, #8
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa8:	4b13      	ldr	r3, [pc, #76]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4910      	ldr	r1, [pc, #64]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fbc:	f000 f826 	bl	800400c <HAL_RCC_GetSysClockFreq>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <HAL_RCC_ClockConfig+0x260>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	091b      	lsrs	r3, r3, #4
 8003fc8:	f003 030f 	and.w	r3, r3, #15
 8003fcc:	490c      	ldr	r1, [pc, #48]	@ (8004000 <HAL_RCC_ClockConfig+0x268>)
 8003fce:	5ccb      	ldrb	r3, [r1, r3]
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8004004 <HAL_RCC_ClockConfig+0x26c>)
 8003fda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <HAL_RCC_ClockConfig+0x270>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd ff57 	bl	8001e94 <HAL_InitTick>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]

  return status;
 8003fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40022000 	.word	0x40022000
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	04c4b400 	.word	0x04c4b400
 8004000:	08008b70 	.word	0x08008b70
 8004004:	20000000 	.word	0x20000000
 8004008:	20000038 	.word	0x20000038

0800400c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800400c:	b480      	push	{r7}
 800400e:	b089      	sub	sp, #36	@ 0x24
 8004010:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	2300      	movs	r3, #0
 8004018:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401a:	4b3e      	ldr	r3, [pc, #248]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004024:	4b3b      	ldr	r3, [pc, #236]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	f003 0303 	and.w	r3, r3, #3
 800402c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x34>
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	2b0c      	cmp	r3, #12
 8004038:	d121      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d11e      	bne.n	800407e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004040:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800404c:	4b31      	ldr	r3, [pc, #196]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800404e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004052:	0a1b      	lsrs	r3, r3, #8
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	61fb      	str	r3, [r7, #28]
 800405a:	e005      	b.n	8004068 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800405c:	4b2d      	ldr	r3, [pc, #180]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004068:	4a2b      	ldr	r2, [pc, #172]	@ (8004118 <HAL_RCC_GetSysClockFreq+0x10c>)
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004070:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10d      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800407c:	e00a      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2b04      	cmp	r3, #4
 8004082:	d102      	bne.n	800408a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004084:	4b25      	ldr	r3, [pc, #148]	@ (800411c <HAL_RCC_GetSysClockFreq+0x110>)
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	e004      	b.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d101      	bne.n	8004094 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004090:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x114>)
 8004092:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b0c      	cmp	r3, #12
 8004098:	d134      	bne.n	8004104 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800409a:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d003      	beq.n	80040b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d003      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0xac>
 80040b0:	e005      	b.n	80040be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040b2:	4b1a      	ldr	r3, [pc, #104]	@ (800411c <HAL_RCC_GetSysClockFreq+0x110>)
 80040b4:	617b      	str	r3, [r7, #20]
      break;
 80040b6:	e005      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040b8:	4b19      	ldr	r3, [pc, #100]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x114>)
 80040ba:	617b      	str	r3, [r7, #20]
      break;
 80040bc:	e002      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	617b      	str	r3, [r7, #20]
      break;
 80040c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040c4:	4b13      	ldr	r3, [pc, #76]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	091b      	lsrs	r3, r3, #4
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	3301      	adds	r3, #1
 80040d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040d2:	4b10      	ldr	r3, [pc, #64]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040dc:	697a      	ldr	r2, [r7, #20]
 80040de:	fb03 f202 	mul.w	r2, r3, r2
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004114 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	0e5b      	lsrs	r3, r3, #25
 80040f0:	f003 0303 	and.w	r3, r3, #3
 80040f4:	3301      	adds	r3, #1
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004104:	69bb      	ldr	r3, [r7, #24]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3724      	adds	r7, #36	@ 0x24
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	40021000 	.word	0x40021000
 8004118:	08008b88 	.word	0x08008b88
 800411c:	00f42400 	.word	0x00f42400
 8004120:	007a1200 	.word	0x007a1200

08004124 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004128:	4b03      	ldr	r3, [pc, #12]	@ (8004138 <HAL_RCC_GetHCLKFreq+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
}
 800412c:	4618      	mov	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	20000000 	.word	0x20000000

0800413c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004140:	f7ff fff0 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0a1b      	lsrs	r3, r3, #8
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4904      	ldr	r1, [pc, #16]	@ (8004164 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	f003 031f 	and.w	r3, r3, #31
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40021000 	.word	0x40021000
 8004164:	08008b80 	.word	0x08008b80

08004168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800416c:	f7ff ffda 	bl	8004124 <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b06      	ldr	r3, [pc, #24]	@ (800418c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0adb      	lsrs	r3, r3, #11
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4904      	ldr	r1, [pc, #16]	@ (8004190 <HAL_RCC_GetPCLK2Freq+0x28>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004188:	4618      	mov	r0, r3
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40021000 	.word	0x40021000
 8004190:	08008b80 	.word	0x08008b80

08004194 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800419c:	2300      	movs	r3, #0
 800419e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041a0:	4b27      	ldr	r3, [pc, #156]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041ac:	f7ff f916 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 80041b0:	6178      	str	r0, [r7, #20]
 80041b2:	e014      	b.n	80041de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041b4:	4b22      	ldr	r3, [pc, #136]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b8:	4a21      	ldr	r2, [pc, #132]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041be:	6593      	str	r3, [r2, #88]	@ 0x58
 80041c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c8:	60fb      	str	r3, [r7, #12]
 80041ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041cc:	f7ff f906 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 80041d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	4a1a      	ldr	r2, [pc, #104]	@ (8004240 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041e4:	d10b      	bne.n	80041fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b80      	cmp	r3, #128	@ 0x80
 80041ea:	d913      	bls.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80041f0:	d902      	bls.n	80041f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80041f2:	2302      	movs	r3, #2
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	e00d      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041f8:	2301      	movs	r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	e00a      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b7f      	cmp	r3, #127	@ 0x7f
 8004202:	d902      	bls.n	800420a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004204:	2302      	movs	r3, #2
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	e004      	b.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b70      	cmp	r3, #112	@ 0x70
 800420e:	d101      	bne.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004210:	2301      	movs	r3, #1
 8004212:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004214:	4b0b      	ldr	r3, [pc, #44]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 020f 	bic.w	r2, r3, #15
 800421c:	4909      	ldr	r1, [pc, #36]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004224:	4b07      	ldr	r3, [pc, #28]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 030f 	and.w	r3, r3, #15
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	429a      	cmp	r2, r3
 8004230:	d001      	beq.n	8004236 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3718      	adds	r7, #24
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	40022000 	.word	0x40022000

08004248 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800424e:	4b2d      	ldr	r3, [pc, #180]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0303 	and.w	r3, r3, #3
 8004256:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b03      	cmp	r3, #3
 800425c:	d00b      	beq.n	8004276 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d825      	bhi.n	80042b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d008      	beq.n	800427c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d11f      	bne.n	80042b0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004270:	4b25      	ldr	r3, [pc, #148]	@ (8004308 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004272:	613b      	str	r3, [r7, #16]
    break;
 8004274:	e01f      	b.n	80042b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004276:	4b25      	ldr	r3, [pc, #148]	@ (800430c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004278:	613b      	str	r3, [r7, #16]
    break;
 800427a:	e01c      	b.n	80042b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800427c:	4b21      	ldr	r3, [pc, #132]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0308 	and.w	r3, r3, #8
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004288:	4b1e      	ldr	r3, [pc, #120]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800428a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 030f 	and.w	r3, r3, #15
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e005      	b.n	80042a4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004298:	4b1a      	ldr	r3, [pc, #104]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80042a4:	4a1a      	ldr	r2, [pc, #104]	@ (8004310 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042ac:	613b      	str	r3, [r7, #16]
    break;
 80042ae:	e002      	b.n	80042b6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
    break;
 80042b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042b6:	4b13      	ldr	r3, [pc, #76]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	091b      	lsrs	r3, r3, #4
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	3301      	adds	r3, #1
 80042c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	fb03 f202 	mul.w	r2, r3, r2
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042dc:	4b09      	ldr	r3, [pc, #36]	@ (8004304 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	0e5b      	lsrs	r3, r3, #25
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	3301      	adds	r3, #1
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80042f6:	683b      	ldr	r3, [r7, #0]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	40021000 	.word	0x40021000
 8004308:	00f42400 	.word	0x00f42400
 800430c:	007a1200 	.word	0x007a1200
 8004310:	08008b88 	.word	0x08008b88

08004314 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800431c:	2300      	movs	r3, #0
 800431e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004320:	2300      	movs	r3, #0
 8004322:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800432c:	2b00      	cmp	r3, #0
 800432e:	d040      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004334:	2b80      	cmp	r3, #128	@ 0x80
 8004336:	d02a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004338:	2b80      	cmp	r3, #128	@ 0x80
 800433a:	d825      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800433c:	2b60      	cmp	r3, #96	@ 0x60
 800433e:	d026      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004340:	2b60      	cmp	r3, #96	@ 0x60
 8004342:	d821      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004344:	2b40      	cmp	r3, #64	@ 0x40
 8004346:	d006      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004348:	2b40      	cmp	r3, #64	@ 0x40
 800434a:	d81d      	bhi.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d009      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004350:	2b20      	cmp	r3, #32
 8004352:	d010      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004354:	e018      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004356:	4b89      	ldr	r3, [pc, #548]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	4a88      	ldr	r2, [pc, #544]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800435c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004360:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004362:	e015      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3304      	adds	r3, #4
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fb02 	bl	8004974 <RCCEx_PLLSAI1_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004374:	e00c      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3320      	adds	r3, #32
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f000 fbed 	bl	8004b5c <RCCEx_PLLSAI2_Config>
 8004382:	4603      	mov	r3, r0
 8004384:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004386:	e003      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	74fb      	strb	r3, [r7, #19]
      break;
 800438c:	e000      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800438e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004390:	7cfb      	ldrb	r3, [r7, #19]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10b      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004396:	4b79      	ldr	r3, [pc, #484]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004398:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800439c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a4:	4975      	ldr	r1, [pc, #468]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80043ac:	e001      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ae:	7cfb      	ldrb	r3, [r7, #19]
 80043b0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d047      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043c6:	d030      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043cc:	d82a      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d2:	d02a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d8:	d824      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043de:	d008      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80043e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e4:	d81e      	bhi.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80043ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ee:	d010      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80043f0:	e018      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043f2:	4b62      	ldr	r3, [pc, #392]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	4a61      	ldr	r2, [pc, #388]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fc:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043fe:	e015      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fab4 	bl	8004974 <RCCEx_PLLSAI1_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004410:	e00c      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3320      	adds	r3, #32
 8004416:	2100      	movs	r1, #0
 8004418:	4618      	mov	r0, r3
 800441a:	f000 fb9f 	bl	8004b5c <RCCEx_PLLSAI2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004422:	e003      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	74fb      	strb	r3, [r7, #19]
      break;
 8004428:	e000      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800442a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442c:	7cfb      	ldrb	r3, [r7, #19]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10b      	bne.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004432:	4b52      	ldr	r3, [pc, #328]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004434:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004438:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004440:	494e      	ldr	r1, [pc, #312]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8004448:	e001      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800444a:	7cfb      	ldrb	r3, [r7, #19]
 800444c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 809f 	beq.w	800459a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445c:	2300      	movs	r3, #0
 800445e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004460:	4b46      	ldr	r3, [pc, #280]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004470:	2300      	movs	r3, #0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004476:	4b41      	ldr	r3, [pc, #260]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800447a:	4a40      	ldr	r2, [pc, #256]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800447c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004480:	6593      	str	r3, [r2, #88]	@ 0x58
 8004482:	4b3e      	ldr	r3, [pc, #248]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800448a:	60bb      	str	r3, [r7, #8]
 800448c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800448e:	2301      	movs	r3, #1
 8004490:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004492:	4b3b      	ldr	r3, [pc, #236]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a3a      	ldr	r2, [pc, #232]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800449e:	f7fd fd49 	bl	8001f34 <HAL_GetTick>
 80044a2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044a4:	e009      	b.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a6:	f7fd fd45 	bl	8001f34 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d902      	bls.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	74fb      	strb	r3, [r7, #19]
        break;
 80044b8:	e005      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044ba:	4b31      	ldr	r3, [pc, #196]	@ (8004580 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0ef      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d15b      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044cc:	4b2b      	ldr	r3, [pc, #172]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d01f      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d019      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044ea:	4b24      	ldr	r3, [pc, #144]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f6:	4b21      	ldr	r3, [pc, #132]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044fc:	4a1f      	ldr	r2, [pc, #124]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004502:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004506:	4b1d      	ldr	r3, [pc, #116]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800450c:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800450e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004516:	4a19      	ldr	r2, [pc, #100]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f003 0301 	and.w	r3, r3, #1
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004528:	f7fd fd04 	bl	8001f34 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800452e:	e00b      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004530:	f7fd fd00 	bl	8001f34 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d902      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	74fb      	strb	r3, [r7, #19]
            break;
 8004546:	e006      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004548:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0ec      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004556:	7cfb      	ldrb	r3, [r7, #19]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10c      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800455c:	4b07      	ldr	r3, [pc, #28]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800455e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004562:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800456c:	4903      	ldr	r1, [pc, #12]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800456e:	4313      	orrs	r3, r2
 8004570:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004574:	e008      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	74bb      	strb	r3, [r7, #18]
 800457a:	e005      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800457c:	40021000 	.word	0x40021000
 8004580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	7cfb      	ldrb	r3, [r7, #19]
 8004586:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004588:	7c7b      	ldrb	r3, [r7, #17]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d105      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458e:	4ba0      	ldr	r3, [pc, #640]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004592:	4a9f      	ldr	r2, [pc, #636]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004594:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004598:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a6:	4b9a      	ldr	r3, [pc, #616]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ac:	f023 0203 	bic.w	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b4:	4996      	ldr	r1, [pc, #600]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c8:	4b91      	ldr	r3, [pc, #580]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	f023 020c 	bic.w	r2, r3, #12
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	498e      	ldr	r1, [pc, #568]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00a      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045ea:	4b89      	ldr	r3, [pc, #548]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f8:	4985      	ldr	r1, [pc, #532]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045fa:	4313      	orrs	r3, r2
 80045fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0308 	and.w	r3, r3, #8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800460c:	4b80      	ldr	r3, [pc, #512]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461a:	497d      	ldr	r1, [pc, #500]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461c:	4313      	orrs	r3, r2
 800461e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 0310 	and.w	r3, r3, #16
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800462e:	4b78      	ldr	r3, [pc, #480]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800463c:	4974      	ldr	r1, [pc, #464]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0320 	and.w	r3, r3, #32
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004650:	4b6f      	ldr	r3, [pc, #444]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800465e:	496c      	ldr	r1, [pc, #432]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004672:	4b67      	ldr	r3, [pc, #412]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004678:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004680:	4963      	ldr	r1, [pc, #396]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004694:	4b5e      	ldr	r3, [pc, #376]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046a2:	495b      	ldr	r1, [pc, #364]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b6:	4b56      	ldr	r3, [pc, #344]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046bc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c4:	4952      	ldr	r1, [pc, #328]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046de:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046e6:	494a      	ldr	r1, [pc, #296]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046fa:	4b45      	ldr	r3, [pc, #276]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004700:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004708:	4941      	ldr	r1, [pc, #260]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800470a:	4313      	orrs	r3, r2
 800470c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00a      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800471c:	4b3c      	ldr	r3, [pc, #240]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800471e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004722:	f023 0203 	bic.w	r2, r3, #3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800472a:	4939      	ldr	r1, [pc, #228]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800472c:	4313      	orrs	r3, r2
 800472e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d028      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800473e:	4b34      	ldr	r3, [pc, #208]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004744:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474c:	4930      	ldr	r1, [pc, #192]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004758:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800475c:	d106      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800475e:	4b2c      	ldr	r3, [pc, #176]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	4a2b      	ldr	r2, [pc, #172]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004764:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004768:	60d3      	str	r3, [r2, #12]
 800476a:	e011      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004770:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004774:	d10c      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	3304      	adds	r3, #4
 800477a:	2101      	movs	r1, #1
 800477c:	4618      	mov	r0, r3
 800477e:	f000 f8f9 	bl	8004974 <RCCEx_PLLSAI1_Config>
 8004782:	4603      	mov	r3, r0
 8004784:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d001      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800478c:	7cfb      	ldrb	r3, [r7, #19]
 800478e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d04d      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047a4:	d108      	bne.n	80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80047a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047ac:	4a18      	ldr	r2, [pc, #96]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047b2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80047b6:	e012      	b.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80047b8:	4b15      	ldr	r3, [pc, #84]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80047be:	4a14      	ldr	r2, [pc, #80]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047c4:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80047c8:	4b11      	ldr	r3, [pc, #68]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047d6:	490e      	ldr	r1, [pc, #56]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047d8:	4313      	orrs	r3, r2
 80047da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047e6:	d106      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047e8:	4b09      	ldr	r3, [pc, #36]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4a08      	ldr	r2, [pc, #32]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047f2:	60d3      	str	r3, [r2, #12]
 80047f4:	e020      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047fe:	d109      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	4a02      	ldr	r2, [pc, #8]	@ (8004810 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004806:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800480a:	60d3      	str	r3, [r2, #12]
 800480c:	e014      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800480e:	bf00      	nop
 8004810:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004818:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800481c:	d10c      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3304      	adds	r3, #4
 8004822:	2101      	movs	r1, #1
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f8a5 	bl	8004974 <RCCEx_PLLSAI1_Config>
 800482a:	4603      	mov	r3, r0
 800482c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800482e:	7cfb      	ldrb	r3, [r7, #19]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d028      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004844:	4b4a      	ldr	r3, [pc, #296]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800484a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004852:	4947      	ldr	r1, [pc, #284]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800485e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004862:	d106      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004864:	4b42      	ldr	r3, [pc, #264]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	4a41      	ldr	r2, [pc, #260]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800486e:	60d3      	str	r3, [r2, #12]
 8004870:	e011      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004876:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800487a:	d10c      	bne.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	3304      	adds	r3, #4
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f876 	bl	8004974 <RCCEx_PLLSAI1_Config>
 8004888:	4603      	mov	r3, r0
 800488a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800488c:	7cfb      	ldrb	r3, [r7, #19]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004892:	7cfb      	ldrb	r3, [r7, #19]
 8004894:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d01e      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048a2:	4b33      	ldr	r3, [pc, #204]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048b2:	492f      	ldr	r1, [pc, #188]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80048c4:	d10c      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2102      	movs	r1, #2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 f851 	bl	8004974 <RCCEx_PLLSAI1_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048d6:	7cfb      	ldrb	r3, [r7, #19]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00b      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048ec:	4b20      	ldr	r3, [pc, #128]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048f2:	f023 0204 	bic.w	r2, r3, #4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048fc:	491c      	ldr	r1, [pc, #112]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00b      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004910:	4b17      	ldr	r3, [pc, #92]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004912:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004916:	f023 0218 	bic.w	r2, r3, #24
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004920:	4913      	ldr	r1, [pc, #76]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d017      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004934:	4b0e      	ldr	r3, [pc, #56]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004936:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800493a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004944:	490a      	ldr	r1, [pc, #40]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004952:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004956:	d105      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004958:	4b05      	ldr	r3, [pc, #20]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4a04      	ldr	r2, [pc, #16]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004962:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004964:	7cbb      	ldrb	r3, [r7, #18]
}
 8004966:	4618      	mov	r0, r3
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40021000 	.word	0x40021000

08004974 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004982:	4b72      	ldr	r3, [pc, #456]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00e      	beq.n	80049ac <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800498e:	4b6f      	ldr	r3, [pc, #444]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0203 	and.w	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d103      	bne.n	80049a6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
       ||
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d142      	bne.n	8004a2c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
 80049aa:	e03f      	b.n	8004a2c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b03      	cmp	r3, #3
 80049b2:	d018      	beq.n	80049e6 <RCCEx_PLLSAI1_Config+0x72>
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d825      	bhi.n	8004a04 <RCCEx_PLLSAI1_Config+0x90>
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d002      	beq.n	80049c2 <RCCEx_PLLSAI1_Config+0x4e>
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d009      	beq.n	80049d4 <RCCEx_PLLSAI1_Config+0x60>
 80049c0:	e020      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049c2:	4b62      	ldr	r3, [pc, #392]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d11d      	bne.n	8004a0a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d2:	e01a      	b.n	8004a0a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049d4:	4b5d      	ldr	r3, [pc, #372]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d116      	bne.n	8004a0e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049e4:	e013      	b.n	8004a0e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80049e6:	4b59      	ldr	r3, [pc, #356]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10f      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80049f2:	4b56      	ldr	r3, [pc, #344]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d109      	bne.n	8004a12 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a02:	e006      	b.n	8004a12 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	73fb      	strb	r3, [r7, #15]
      break;
 8004a08:	e004      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004a0a:	bf00      	nop
 8004a0c:	e002      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004a0e:	bf00      	nop
 8004a10:	e000      	b.n	8004a14 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004a12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d108      	bne.n	8004a2c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004a1a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4949      	ldr	r1, [pc, #292]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a2c:	7bfb      	ldrb	r3, [r7, #15]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 8086 	bne.w	8004b40 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a34:	4b45      	ldr	r3, [pc, #276]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a44      	ldr	r2, [pc, #272]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a3a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a40:	f7fd fa78 	bl	8001f34 <HAL_GetTick>
 8004a44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a46:	e009      	b.n	8004a5c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a48:	f7fd fa74 	bl	8001f34 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d902      	bls.n	8004a5c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	73fb      	strb	r3, [r7, #15]
        break;
 8004a5a:	e005      	b.n	8004a68 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1ef      	bne.n	8004a48 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d168      	bne.n	8004b40 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d113      	bne.n	8004a9c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a74:	4b35      	ldr	r3, [pc, #212]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	4b35      	ldr	r3, [pc, #212]	@ (8004b50 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6892      	ldr	r2, [r2, #8]
 8004a80:	0211      	lsls	r1, r2, #8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68d2      	ldr	r2, [r2, #12]
 8004a86:	06d2      	lsls	r2, r2, #27
 8004a88:	4311      	orrs	r1, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6852      	ldr	r2, [r2, #4]
 8004a8e:	3a01      	subs	r2, #1
 8004a90:	0112      	lsls	r2, r2, #4
 8004a92:	430a      	orrs	r2, r1
 8004a94:	492d      	ldr	r1, [pc, #180]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	610b      	str	r3, [r1, #16]
 8004a9a:	e02d      	b.n	8004af8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d115      	bne.n	8004ace <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aa2:	4b2a      	ldr	r3, [pc, #168]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aa4:	691a      	ldr	r2, [r3, #16]
 8004aa6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b54 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6892      	ldr	r2, [r2, #8]
 8004aae:	0211      	lsls	r1, r2, #8
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	6912      	ldr	r2, [r2, #16]
 8004ab4:	0852      	lsrs	r2, r2, #1
 8004ab6:	3a01      	subs	r2, #1
 8004ab8:	0552      	lsls	r2, r2, #21
 8004aba:	4311      	orrs	r1, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6852      	ldr	r2, [r2, #4]
 8004ac0:	3a01      	subs	r2, #1
 8004ac2:	0112      	lsls	r2, r2, #4
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	4921      	ldr	r1, [pc, #132]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	610b      	str	r3, [r1, #16]
 8004acc:	e014      	b.n	8004af8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ace:	4b1f      	ldr	r3, [pc, #124]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	4b21      	ldr	r3, [pc, #132]	@ (8004b58 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6892      	ldr	r2, [r2, #8]
 8004ada:	0211      	lsls	r1, r2, #8
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6952      	ldr	r2, [r2, #20]
 8004ae0:	0852      	lsrs	r2, r2, #1
 8004ae2:	3a01      	subs	r2, #1
 8004ae4:	0652      	lsls	r2, r2, #25
 8004ae6:	4311      	orrs	r1, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6852      	ldr	r2, [r2, #4]
 8004aec:	3a01      	subs	r2, #1
 8004aee:	0112      	lsls	r2, r2, #4
 8004af0:	430a      	orrs	r2, r1
 8004af2:	4916      	ldr	r1, [pc, #88]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004af8:	4b14      	ldr	r3, [pc, #80]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a13      	ldr	r2, [pc, #76]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004afe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fd fa16 	bl	8001f34 <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b0a:	e009      	b.n	8004b20 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b0c:	f7fd fa12 	bl	8001f34 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d902      	bls.n	8004b20 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b1e:	e005      	b.n	8004b2c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b20:	4b0a      	ldr	r3, [pc, #40]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0ef      	beq.n	8004b0c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b32:	4b06      	ldr	r3, [pc, #24]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b34:	691a      	ldr	r2, [r3, #16]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	4904      	ldr	r1, [pc, #16]	@ (8004b4c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	07ff800f 	.word	0x07ff800f
 8004b54:	ff9f800f 	.word	0xff9f800f
 8004b58:	f9ff800f 	.word	0xf9ff800f

08004b5c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b6a:	4b72      	ldr	r3, [pc, #456]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b76:	4b6f      	ldr	r3, [pc, #444]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0203 	and.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d103      	bne.n	8004b8e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
       ||
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d142      	bne.n	8004c14 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	e03f      	b.n	8004c14 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d018      	beq.n	8004bce <RCCEx_PLLSAI2_Config+0x72>
 8004b9c:	2b03      	cmp	r3, #3
 8004b9e:	d825      	bhi.n	8004bec <RCCEx_PLLSAI2_Config+0x90>
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d002      	beq.n	8004baa <RCCEx_PLLSAI2_Config+0x4e>
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d009      	beq.n	8004bbc <RCCEx_PLLSAI2_Config+0x60>
 8004ba8:	e020      	b.n	8004bec <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004baa:	4b62      	ldr	r3, [pc, #392]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d11d      	bne.n	8004bf2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bba:	e01a      	b.n	8004bf2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bbc:	4b5d      	ldr	r3, [pc, #372]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d116      	bne.n	8004bf6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bcc:	e013      	b.n	8004bf6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bce:	4b59      	ldr	r3, [pc, #356]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10f      	bne.n	8004bfa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bda:	4b56      	ldr	r3, [pc, #344]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bea:	e006      	b.n	8004bfa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf0:	e004      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e002      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bf6:	bf00      	nop
 8004bf8:	e000      	b.n	8004bfc <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004bfa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bfc:	7bfb      	ldrb	r3, [r7, #15]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d108      	bne.n	8004c14 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004c02:	4b4c      	ldr	r3, [pc, #304]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f023 0203 	bic.w	r2, r3, #3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4949      	ldr	r1, [pc, #292]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004c14:	7bfb      	ldrb	r3, [r7, #15]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f040 8086 	bne.w	8004d28 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c1c:	4b45      	ldr	r3, [pc, #276]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a44      	ldr	r2, [pc, #272]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c22:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c28:	f7fd f984 	bl	8001f34 <HAL_GetTick>
 8004c2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c2e:	e009      	b.n	8004c44 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c30:	f7fd f980 	bl	8001f34 <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	2b02      	cmp	r3, #2
 8004c3c:	d902      	bls.n	8004c44 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	73fb      	strb	r3, [r7, #15]
        break;
 8004c42:	e005      	b.n	8004c50 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c44:	4b3b      	ldr	r3, [pc, #236]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1ef      	bne.n	8004c30 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d168      	bne.n	8004d28 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d113      	bne.n	8004c84 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c5c:	4b35      	ldr	r3, [pc, #212]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	4b35      	ldr	r3, [pc, #212]	@ (8004d38 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6892      	ldr	r2, [r2, #8]
 8004c68:	0211      	lsls	r1, r2, #8
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68d2      	ldr	r2, [r2, #12]
 8004c6e:	06d2      	lsls	r2, r2, #27
 8004c70:	4311      	orrs	r1, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6852      	ldr	r2, [r2, #4]
 8004c76:	3a01      	subs	r2, #1
 8004c78:	0112      	lsls	r2, r2, #4
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	492d      	ldr	r1, [pc, #180]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	614b      	str	r3, [r1, #20]
 8004c82:	e02d      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d115      	bne.n	8004cb6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c8c:	695a      	ldr	r2, [r3, #20]
 8004c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8004d3c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6892      	ldr	r2, [r2, #8]
 8004c96:	0211      	lsls	r1, r2, #8
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	6912      	ldr	r2, [r2, #16]
 8004c9c:	0852      	lsrs	r2, r2, #1
 8004c9e:	3a01      	subs	r2, #1
 8004ca0:	0552      	lsls	r2, r2, #21
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6852      	ldr	r2, [r2, #4]
 8004ca8:	3a01      	subs	r2, #1
 8004caa:	0112      	lsls	r2, r2, #4
 8004cac:	430a      	orrs	r2, r1
 8004cae:	4921      	ldr	r1, [pc, #132]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	614b      	str	r3, [r1, #20]
 8004cb4:	e014      	b.n	8004ce0 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cb8:	695a      	ldr	r2, [r3, #20]
 8004cba:	4b21      	ldr	r3, [pc, #132]	@ (8004d40 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	0211      	lsls	r1, r2, #8
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6952      	ldr	r2, [r2, #20]
 8004cc8:	0852      	lsrs	r2, r2, #1
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	0652      	lsls	r2, r2, #25
 8004cce:	4311      	orrs	r1, r2
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	6852      	ldr	r2, [r2, #4]
 8004cd4:	3a01      	subs	r2, #1
 8004cd6:	0112      	lsls	r2, r2, #4
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	4916      	ldr	r1, [pc, #88]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ce0:	4b14      	ldr	r3, [pc, #80]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a13      	ldr	r2, [pc, #76]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ce6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cec:	f7fd f922 	bl	8001f34 <HAL_GetTick>
 8004cf0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cf2:	e009      	b.n	8004d08 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004cf4:	f7fd f91e 	bl	8001f34 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d902      	bls.n	8004d08 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	73fb      	strb	r3, [r7, #15]
          break;
 8004d06:	e005      	b.n	8004d14 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d08:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d0ef      	beq.n	8004cf4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d106      	bne.n	8004d28 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d1a:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	4904      	ldr	r1, [pc, #16]	@ (8004d34 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	40021000 	.word	0x40021000
 8004d38:	07ff800f 	.word	0x07ff800f
 8004d3c:	ff9f800f 	.word	0xff9f800f
 8004d40:	f9ff800f 	.word	0xf9ff800f

08004d44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d101      	bne.n	8004d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e042      	b.n	8004ddc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d106      	bne.n	8004d6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f7fc fdcf 	bl	800190c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2224      	movs	r2, #36	@ 0x24
 8004d72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 0201 	bic.w	r2, r2, #1
 8004d84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fbb2 	bl	80054f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 f8b3 	bl	8004f00 <UART_SetConfig>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e01b      	b.n	8004ddc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f042 0201 	orr.w	r2, r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fc31 	bl	800563c <UART_CheckIdleState>
 8004dda:	4603      	mov	r3, r0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b08a      	sub	sp, #40	@ 0x28
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	4613      	mov	r3, r2
 8004df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d17b      	bne.n	8004ef6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_UART_Transmit+0x26>
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e074      	b.n	8004ef8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2221      	movs	r2, #33	@ 0x21
 8004e1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1e:	f7fd f889 	bl	8001f34 <HAL_GetTick>
 8004e22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	88fa      	ldrh	r2, [r7, #6]
 8004e28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e3c:	d108      	bne.n	8004e50 <HAL_UART_Transmit+0x6c>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	61bb      	str	r3, [r7, #24]
 8004e4e:	e003      	b.n	8004e58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e58:	e030      	b.n	8004ebc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2200      	movs	r2, #0
 8004e62:	2180      	movs	r1, #128	@ 0x80
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f000 fc93 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e03d      	b.n	8004ef8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10b      	bne.n	8004e9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e8e:	b292      	uxth	r2, r2
 8004e90:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	3302      	adds	r3, #2
 8004e96:	61bb      	str	r3, [r7, #24]
 8004e98:	e007      	b.n	8004eaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	781a      	ldrb	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1c8      	bne.n	8004e5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2140      	movs	r1, #64	@ 0x40
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fc5c 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d005      	beq.n	8004eea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e006      	b.n	8004ef8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	e000      	b.n	8004ef8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ef6:	2302      	movs	r3, #2
  }
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3720      	adds	r7, #32
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f04:	b08c      	sub	sp, #48	@ 0x30
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	689a      	ldr	r2, [r3, #8]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4baa      	ldr	r3, [pc, #680]	@ (80051d8 <UART_SetConfig+0x2d8>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	6812      	ldr	r2, [r2, #0]
 8004f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f38:	430b      	orrs	r3, r1
 8004f3a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a9f      	ldr	r2, [pc, #636]	@ (80051dc <UART_SetConfig+0x2dc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004f76:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	f023 010f 	bic.w	r1, r3, #15
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a90      	ldr	r2, [pc, #576]	@ (80051e0 <UART_SetConfig+0x2e0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d125      	bne.n	8004ff0 <UART_SetConfig+0xf0>
 8004fa4:	4b8f      	ldr	r3, [pc, #572]	@ (80051e4 <UART_SetConfig+0x2e4>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004faa:	f003 0303 	and.w	r3, r3, #3
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d81a      	bhi.n	8004fe8 <UART_SetConfig+0xe8>
 8004fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb8 <UART_SetConfig+0xb8>)
 8004fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb8:	08004fc9 	.word	0x08004fc9
 8004fbc:	08004fd9 	.word	0x08004fd9
 8004fc0:	08004fd1 	.word	0x08004fd1
 8004fc4:	08004fe1 	.word	0x08004fe1
 8004fc8:	2301      	movs	r3, #1
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fce:	e116      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e112      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e10e      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe6:	e10a      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fee:	e106      	b.n	80051fe <UART_SetConfig+0x2fe>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a7c      	ldr	r2, [pc, #496]	@ (80051e8 <UART_SetConfig+0x2e8>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d138      	bne.n	800506c <UART_SetConfig+0x16c>
 8004ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80051e4 <UART_SetConfig+0x2e4>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b0c      	cmp	r3, #12
 8005006:	d82d      	bhi.n	8005064 <UART_SetConfig+0x164>
 8005008:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <UART_SetConfig+0x110>)
 800500a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800500e:	bf00      	nop
 8005010:	08005045 	.word	0x08005045
 8005014:	08005065 	.word	0x08005065
 8005018:	08005065 	.word	0x08005065
 800501c:	08005065 	.word	0x08005065
 8005020:	08005055 	.word	0x08005055
 8005024:	08005065 	.word	0x08005065
 8005028:	08005065 	.word	0x08005065
 800502c:	08005065 	.word	0x08005065
 8005030:	0800504d 	.word	0x0800504d
 8005034:	08005065 	.word	0x08005065
 8005038:	08005065 	.word	0x08005065
 800503c:	08005065 	.word	0x08005065
 8005040:	0800505d 	.word	0x0800505d
 8005044:	2300      	movs	r3, #0
 8005046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504a:	e0d8      	b.n	80051fe <UART_SetConfig+0x2fe>
 800504c:	2302      	movs	r3, #2
 800504e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005052:	e0d4      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005054:	2304      	movs	r3, #4
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800505a:	e0d0      	b.n	80051fe <UART_SetConfig+0x2fe>
 800505c:	2308      	movs	r3, #8
 800505e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005062:	e0cc      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005064:	2310      	movs	r3, #16
 8005066:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800506a:	e0c8      	b.n	80051fe <UART_SetConfig+0x2fe>
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a5e      	ldr	r2, [pc, #376]	@ (80051ec <UART_SetConfig+0x2ec>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d125      	bne.n	80050c2 <UART_SetConfig+0x1c2>
 8005076:	4b5b      	ldr	r3, [pc, #364]	@ (80051e4 <UART_SetConfig+0x2e4>)
 8005078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800507c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005080:	2b30      	cmp	r3, #48	@ 0x30
 8005082:	d016      	beq.n	80050b2 <UART_SetConfig+0x1b2>
 8005084:	2b30      	cmp	r3, #48	@ 0x30
 8005086:	d818      	bhi.n	80050ba <UART_SetConfig+0x1ba>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d00a      	beq.n	80050a2 <UART_SetConfig+0x1a2>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d814      	bhi.n	80050ba <UART_SetConfig+0x1ba>
 8005090:	2b00      	cmp	r3, #0
 8005092:	d002      	beq.n	800509a <UART_SetConfig+0x19a>
 8005094:	2b10      	cmp	r3, #16
 8005096:	d008      	beq.n	80050aa <UART_SetConfig+0x1aa>
 8005098:	e00f      	b.n	80050ba <UART_SetConfig+0x1ba>
 800509a:	2300      	movs	r3, #0
 800509c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a0:	e0ad      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050a2:	2302      	movs	r3, #2
 80050a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a8:	e0a9      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050aa:	2304      	movs	r3, #4
 80050ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b0:	e0a5      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050b2:	2308      	movs	r3, #8
 80050b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050b8:	e0a1      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050ba:	2310      	movs	r3, #16
 80050bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050c0:	e09d      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a4a      	ldr	r2, [pc, #296]	@ (80051f0 <UART_SetConfig+0x2f0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d125      	bne.n	8005118 <UART_SetConfig+0x218>
 80050cc:	4b45      	ldr	r3, [pc, #276]	@ (80051e4 <UART_SetConfig+0x2e4>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050d8:	d016      	beq.n	8005108 <UART_SetConfig+0x208>
 80050da:	2bc0      	cmp	r3, #192	@ 0xc0
 80050dc:	d818      	bhi.n	8005110 <UART_SetConfig+0x210>
 80050de:	2b80      	cmp	r3, #128	@ 0x80
 80050e0:	d00a      	beq.n	80050f8 <UART_SetConfig+0x1f8>
 80050e2:	2b80      	cmp	r3, #128	@ 0x80
 80050e4:	d814      	bhi.n	8005110 <UART_SetConfig+0x210>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d002      	beq.n	80050f0 <UART_SetConfig+0x1f0>
 80050ea:	2b40      	cmp	r3, #64	@ 0x40
 80050ec:	d008      	beq.n	8005100 <UART_SetConfig+0x200>
 80050ee:	e00f      	b.n	8005110 <UART_SetConfig+0x210>
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050f6:	e082      	b.n	80051fe <UART_SetConfig+0x2fe>
 80050f8:	2302      	movs	r3, #2
 80050fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050fe:	e07e      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005106:	e07a      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800510e:	e076      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005116:	e072      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a35      	ldr	r2, [pc, #212]	@ (80051f4 <UART_SetConfig+0x2f4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d12a      	bne.n	8005178 <UART_SetConfig+0x278>
 8005122:	4b30      	ldr	r3, [pc, #192]	@ (80051e4 <UART_SetConfig+0x2e4>)
 8005124:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005128:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800512c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005130:	d01a      	beq.n	8005168 <UART_SetConfig+0x268>
 8005132:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005136:	d81b      	bhi.n	8005170 <UART_SetConfig+0x270>
 8005138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800513c:	d00c      	beq.n	8005158 <UART_SetConfig+0x258>
 800513e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005142:	d815      	bhi.n	8005170 <UART_SetConfig+0x270>
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <UART_SetConfig+0x250>
 8005148:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800514c:	d008      	beq.n	8005160 <UART_SetConfig+0x260>
 800514e:	e00f      	b.n	8005170 <UART_SetConfig+0x270>
 8005150:	2300      	movs	r3, #0
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005156:	e052      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005158:	2302      	movs	r3, #2
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800515e:	e04e      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005160:	2304      	movs	r3, #4
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005166:	e04a      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005168:	2308      	movs	r3, #8
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800516e:	e046      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005170:	2310      	movs	r3, #16
 8005172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005176:	e042      	b.n	80051fe <UART_SetConfig+0x2fe>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a17      	ldr	r2, [pc, #92]	@ (80051dc <UART_SetConfig+0x2dc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d13a      	bne.n	80051f8 <UART_SetConfig+0x2f8>
 8005182:	4b18      	ldr	r3, [pc, #96]	@ (80051e4 <UART_SetConfig+0x2e4>)
 8005184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005188:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800518c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005190:	d01a      	beq.n	80051c8 <UART_SetConfig+0x2c8>
 8005192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005196:	d81b      	bhi.n	80051d0 <UART_SetConfig+0x2d0>
 8005198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800519c:	d00c      	beq.n	80051b8 <UART_SetConfig+0x2b8>
 800519e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051a2:	d815      	bhi.n	80051d0 <UART_SetConfig+0x2d0>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <UART_SetConfig+0x2b0>
 80051a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ac:	d008      	beq.n	80051c0 <UART_SetConfig+0x2c0>
 80051ae:	e00f      	b.n	80051d0 <UART_SetConfig+0x2d0>
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051b6:	e022      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051b8:	2302      	movs	r3, #2
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051be:	e01e      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051c0:	2304      	movs	r3, #4
 80051c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051c6:	e01a      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051c8:	2308      	movs	r3, #8
 80051ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051ce:	e016      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80051d6:	e012      	b.n	80051fe <UART_SetConfig+0x2fe>
 80051d8:	cfff69f3 	.word	0xcfff69f3
 80051dc:	40008000 	.word	0x40008000
 80051e0:	40013800 	.word	0x40013800
 80051e4:	40021000 	.word	0x40021000
 80051e8:	40004400 	.word	0x40004400
 80051ec:	40004800 	.word	0x40004800
 80051f0:	40004c00 	.word	0x40004c00
 80051f4:	40005000 	.word	0x40005000
 80051f8:	2310      	movs	r3, #16
 80051fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4aae      	ldr	r2, [pc, #696]	@ (80054bc <UART_SetConfig+0x5bc>)
 8005204:	4293      	cmp	r3, r2
 8005206:	f040 8097 	bne.w	8005338 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800520a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800520e:	2b08      	cmp	r3, #8
 8005210:	d823      	bhi.n	800525a <UART_SetConfig+0x35a>
 8005212:	a201      	add	r2, pc, #4	@ (adr r2, 8005218 <UART_SetConfig+0x318>)
 8005214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005218:	0800523d 	.word	0x0800523d
 800521c:	0800525b 	.word	0x0800525b
 8005220:	08005245 	.word	0x08005245
 8005224:	0800525b 	.word	0x0800525b
 8005228:	0800524b 	.word	0x0800524b
 800522c:	0800525b 	.word	0x0800525b
 8005230:	0800525b 	.word	0x0800525b
 8005234:	0800525b 	.word	0x0800525b
 8005238:	08005253 	.word	0x08005253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800523c:	f7fe ff7e 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 8005240:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005242:	e010      	b.n	8005266 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005244:	4b9e      	ldr	r3, [pc, #632]	@ (80054c0 <UART_SetConfig+0x5c0>)
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005248:	e00d      	b.n	8005266 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524a:	f7fe fedf 	bl	800400c <HAL_RCC_GetSysClockFreq>
 800524e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005250:	e009      	b.n	8005266 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005258:	e005      	b.n	8005266 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005264:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005268:	2b00      	cmp	r3, #0
 800526a:	f000 8130 	beq.w	80054ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	4a94      	ldr	r2, [pc, #592]	@ (80054c4 <UART_SetConfig+0x5c4>)
 8005274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005278:	461a      	mov	r2, r3
 800527a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005280:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	685a      	ldr	r2, [r3, #4]
 8005286:	4613      	mov	r3, r2
 8005288:	005b      	lsls	r3, r3, #1
 800528a:	4413      	add	r3, r2
 800528c:	69ba      	ldr	r2, [r7, #24]
 800528e:	429a      	cmp	r2, r3
 8005290:	d305      	bcc.n	800529e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	429a      	cmp	r2, r3
 800529c:	d903      	bls.n	80052a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052a4:	e113      	b.n	80054ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	2200      	movs	r2, #0
 80052aa:	60bb      	str	r3, [r7, #8]
 80052ac:	60fa      	str	r2, [r7, #12]
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	4a84      	ldr	r2, [pc, #528]	@ (80054c4 <UART_SetConfig+0x5c4>)
 80052b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2200      	movs	r2, #0
 80052bc:	603b      	str	r3, [r7, #0]
 80052be:	607a      	str	r2, [r7, #4]
 80052c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052c8:	f7fb fcd6 	bl	8000c78 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	020b      	lsls	r3, r1, #8
 80052de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052e2:	0202      	lsls	r2, r0, #8
 80052e4:	6979      	ldr	r1, [r7, #20]
 80052e6:	6849      	ldr	r1, [r1, #4]
 80052e8:	0849      	lsrs	r1, r1, #1
 80052ea:	2000      	movs	r0, #0
 80052ec:	460c      	mov	r4, r1
 80052ee:	4605      	mov	r5, r0
 80052f0:	eb12 0804 	adds.w	r8, r2, r4
 80052f4:	eb43 0905 	adc.w	r9, r3, r5
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	469a      	mov	sl, r3
 8005300:	4693      	mov	fp, r2
 8005302:	4652      	mov	r2, sl
 8005304:	465b      	mov	r3, fp
 8005306:	4640      	mov	r0, r8
 8005308:	4649      	mov	r1, r9
 800530a:	f7fb fcb5 	bl	8000c78 <__aeabi_uldivmod>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4613      	mov	r3, r2
 8005314:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800531c:	d308      	bcc.n	8005330 <UART_SetConfig+0x430>
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005324:	d204      	bcs.n	8005330 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a3a      	ldr	r2, [r7, #32]
 800532c:	60da      	str	r2, [r3, #12]
 800532e:	e0ce      	b.n	80054ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005336:	e0ca      	b.n	80054ce <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005340:	d166      	bne.n	8005410 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005342:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005346:	2b08      	cmp	r3, #8
 8005348:	d827      	bhi.n	800539a <UART_SetConfig+0x49a>
 800534a:	a201      	add	r2, pc, #4	@ (adr r2, 8005350 <UART_SetConfig+0x450>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	08005375 	.word	0x08005375
 8005354:	0800537d 	.word	0x0800537d
 8005358:	08005385 	.word	0x08005385
 800535c:	0800539b 	.word	0x0800539b
 8005360:	0800538b 	.word	0x0800538b
 8005364:	0800539b 	.word	0x0800539b
 8005368:	0800539b 	.word	0x0800539b
 800536c:	0800539b 	.word	0x0800539b
 8005370:	08005393 	.word	0x08005393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005374:	f7fe fee2 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 8005378:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800537a:	e014      	b.n	80053a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800537c:	f7fe fef4 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 8005380:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005382:	e010      	b.n	80053a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005384:	4b4e      	ldr	r3, [pc, #312]	@ (80054c0 <UART_SetConfig+0x5c0>)
 8005386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005388:	e00d      	b.n	80053a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800538a:	f7fe fe3f 	bl	800400c <HAL_RCC_GetSysClockFreq>
 800538e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005390:	e009      	b.n	80053a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005396:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005398:	e005      	b.n	80053a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80053a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 8090 	beq.w	80054ce <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b2:	4a44      	ldr	r2, [pc, #272]	@ (80054c4 <UART_SetConfig+0x5c4>)
 80053b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053b8:	461a      	mov	r2, r3
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80053c0:	005a      	lsls	r2, r3, #1
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	085b      	lsrs	r3, r3, #1
 80053c8:	441a      	add	r2, r3
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	d916      	bls.n	8005408 <UART_SetConfig+0x508>
 80053da:	6a3b      	ldr	r3, [r7, #32]
 80053dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053e0:	d212      	bcs.n	8005408 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	f023 030f 	bic.w	r3, r3, #15
 80053ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	085b      	lsrs	r3, r3, #1
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	8bfb      	ldrh	r3, [r7, #30]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	8bfa      	ldrh	r2, [r7, #30]
 8005404:	60da      	str	r2, [r3, #12]
 8005406:	e062      	b.n	80054ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800540e:	e05e      	b.n	80054ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005410:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005414:	2b08      	cmp	r3, #8
 8005416:	d828      	bhi.n	800546a <UART_SetConfig+0x56a>
 8005418:	a201      	add	r2, pc, #4	@ (adr r2, 8005420 <UART_SetConfig+0x520>)
 800541a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800541e:	bf00      	nop
 8005420:	08005445 	.word	0x08005445
 8005424:	0800544d 	.word	0x0800544d
 8005428:	08005455 	.word	0x08005455
 800542c:	0800546b 	.word	0x0800546b
 8005430:	0800545b 	.word	0x0800545b
 8005434:	0800546b 	.word	0x0800546b
 8005438:	0800546b 	.word	0x0800546b
 800543c:	0800546b 	.word	0x0800546b
 8005440:	08005463 	.word	0x08005463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7fe fe7a 	bl	800413c <HAL_RCC_GetPCLK1Freq>
 8005448:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800544a:	e014      	b.n	8005476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800544c:	f7fe fe8c 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 8005450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005452:	e010      	b.n	8005476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005454:	4b1a      	ldr	r3, [pc, #104]	@ (80054c0 <UART_SetConfig+0x5c0>)
 8005456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005458:	e00d      	b.n	8005476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800545a:	f7fe fdd7 	bl	800400c <HAL_RCC_GetSysClockFreq>
 800545e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005460:	e009      	b.n	8005476 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005468:	e005      	b.n	8005476 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005474:	bf00      	nop
    }

    if (pclk != 0U)
 8005476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005478:	2b00      	cmp	r3, #0
 800547a:	d028      	beq.n	80054ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005480:	4a10      	ldr	r2, [pc, #64]	@ (80054c4 <UART_SetConfig+0x5c4>)
 8005482:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005486:	461a      	mov	r2, r3
 8005488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800548a:	fbb3 f2f2 	udiv	r2, r3, r2
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	085b      	lsrs	r3, r3, #1
 8005494:	441a      	add	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	fbb2 f3f3 	udiv	r3, r2, r3
 800549e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	2b0f      	cmp	r3, #15
 80054a4:	d910      	bls.n	80054c8 <UART_SetConfig+0x5c8>
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054ac:	d20c      	bcs.n	80054c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	60da      	str	r2, [r3, #12]
 80054b8:	e009      	b.n	80054ce <UART_SetConfig+0x5ce>
 80054ba:	bf00      	nop
 80054bc:	40008000 	.word	0x40008000
 80054c0:	00f42400 	.word	0x00f42400
 80054c4:	08008bb8 	.word	0x08008bb8
      }
      else
      {
        ret = HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	2201      	movs	r2, #1
 80054da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2200      	movs	r2, #0
 80054e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	2200      	movs	r2, #0
 80054e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80054ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3730      	adds	r7, #48	@ 0x30
 80054f2:	46bd      	mov	sp, r7
 80054f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080054f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005504:	f003 0308 	and.w	r3, r3, #8
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00a      	beq.n	8005522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00a      	beq.n	8005544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00a      	beq.n	8005566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558c:	f003 0310 	and.w	r3, r3, #16
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00a      	beq.n	80055aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ae:	f003 0320 	and.w	r3, r3, #32
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00a      	beq.n	80055cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	430a      	orrs	r2, r1
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01a      	beq.n	800560e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	430a      	orrs	r2, r1
 80055ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055f6:	d10a      	bne.n	800560e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	430a      	orrs	r2, r1
 800562e:	605a      	str	r2, [r3, #4]
  }
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b098      	sub	sp, #96	@ 0x60
 8005640:	af02      	add	r7, sp, #8
 8005642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800564c:	f7fc fc72 	bl	8001f34 <HAL_GetTick>
 8005650:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0308 	and.w	r3, r3, #8
 800565c:	2b08      	cmp	r3, #8
 800565e:	d12f      	bne.n	80056c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005660:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005668:	2200      	movs	r2, #0
 800566a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f88e 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d022      	beq.n	80056c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005682:	e853 3f00 	ldrex	r3, [r3]
 8005686:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800568e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005698:	647b      	str	r3, [r7, #68]	@ 0x44
 800569a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800569e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e6      	bne.n	800567a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2220      	movs	r2, #32
 80056b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e063      	b.n	8005788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0304 	and.w	r3, r3, #4
 80056ca:	2b04      	cmp	r3, #4
 80056cc:	d149      	bne.n	8005762 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056d2:	9300      	str	r3, [sp, #0]
 80056d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056d6:	2200      	movs	r2, #0
 80056d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f857 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d03c      	beq.n	8005762 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f0:	e853 3f00 	ldrex	r3, [r3]
 80056f4:	623b      	str	r3, [r7, #32]
   return(result);
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005706:	633b      	str	r3, [r7, #48]	@ 0x30
 8005708:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800570c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800570e:	e841 2300 	strex	r3, r2, [r1]
 8005712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1e6      	bne.n	80056e8 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	3308      	adds	r3, #8
 8005720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	e853 3f00 	ldrex	r3, [r3]
 8005728:	60fb      	str	r3, [r7, #12]
   return(result);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800573a:	61fa      	str	r2, [r7, #28]
 800573c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573e:	69b9      	ldr	r1, [r7, #24]
 8005740:	69fa      	ldr	r2, [r7, #28]
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	617b      	str	r3, [r7, #20]
   return(result);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d1e5      	bne.n	800571a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2220      	movs	r2, #32
 8005752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e012      	b.n	8005788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2220      	movs	r2, #32
 8005766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2220      	movs	r2, #32
 800576e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3758      	adds	r7, #88	@ 0x58
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	4613      	mov	r3, r2
 800579e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a0:	e04f      	b.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d04b      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057aa:	f7fc fbc3 	bl	8001f34 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d302      	bcc.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e04e      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0304 	and.w	r3, r3, #4
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d037      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b80      	cmp	r3, #128	@ 0x80
 80057d6:	d034      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb2>
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b40      	cmp	r3, #64	@ 0x40
 80057dc:	d031      	beq.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	f003 0308 	and.w	r3, r3, #8
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d110      	bne.n	800580e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2208      	movs	r2, #8
 80057f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f838 	bl	800586a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2208      	movs	r2, #8
 80057fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e029      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800581c:	d111      	bne.n	8005842 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f000 f81e 	bl	800586a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e00f      	b.n	8005862 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4013      	ands	r3, r2
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	429a      	cmp	r2, r3
 8005850:	bf0c      	ite	eq
 8005852:	2301      	moveq	r3, #1
 8005854:	2300      	movne	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	429a      	cmp	r2, r3
 800585e:	d0a0      	beq.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800586a:	b480      	push	{r7}
 800586c:	b095      	sub	sp, #84	@ 0x54
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005882:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005890:	643b      	str	r3, [r7, #64]	@ 0x40
 8005892:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005896:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800589e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e6      	bne.n	8005872 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	3308      	adds	r3, #8
 80058aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	e853 3f00 	ldrex	r3, [r3]
 80058b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058ba:	f023 0301 	bic.w	r3, r3, #1
 80058be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3308      	adds	r3, #8
 80058c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80058ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80058ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80058d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e3      	bne.n	80058a4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d118      	bne.n	8005916 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f023 0310 	bic.w	r3, r3, #16
 80058f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	461a      	mov	r2, r3
 8005900:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005906:	6979      	ldr	r1, [r7, #20]
 8005908:	69ba      	ldr	r2, [r7, #24]
 800590a:	e841 2300 	strex	r3, r2, [r1]
 800590e:	613b      	str	r3, [r7, #16]
   return(result);
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1e6      	bne.n	80058e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800592a:	bf00      	nop
 800592c:	3754      	adds	r7, #84	@ 0x54
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005936:	b480      	push	{r7}
 8005938:	b085      	sub	sp, #20
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_UARTEx_DisableFifoMode+0x16>
 8005948:	2302      	movs	r3, #2
 800594a:	e027      	b.n	800599c <HAL_UARTEx_DisableFifoMode+0x66>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2224      	movs	r2, #36	@ 0x24
 8005958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800597a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2220      	movs	r2, #32
 800598e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3714      	adds	r7, #20
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80059bc:	2302      	movs	r3, #2
 80059be:	e02d      	b.n	8005a1c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2224      	movs	r2, #36	@ 0x24
 80059cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0201 	bic.w	r2, r2, #1
 80059e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f84f 	bl	8005aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e02d      	b.n	8005a98 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2224      	movs	r2, #36	@ 0x24
 8005a48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0201 	bic.w	r2, r2, #1
 8005a62:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	683a      	ldr	r2, [r7, #0]
 8005a74:	430a      	orrs	r2, r1
 8005a76:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f811 	bl	8005aa0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ac0:	e031      	b.n	8005b26 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ac6:	2308      	movs	r3, #8
 8005ac8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	0e5b      	lsrs	r3, r3, #25
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f003 0307 	and.w	r3, r3, #7
 8005ad8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	0f5b      	lsrs	r3, r3, #29
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f003 0307 	and.w	r3, r3, #7
 8005ae8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aea:	7bbb      	ldrb	r3, [r7, #14]
 8005aec:	7b3a      	ldrb	r2, [r7, #12]
 8005aee:	4911      	ldr	r1, [pc, #68]	@ (8005b34 <UARTEx_SetNbDataToProcess+0x94>)
 8005af0:	5c8a      	ldrb	r2, [r1, r2]
 8005af2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005af6:	7b3a      	ldrb	r2, [r7, #12]
 8005af8:	490f      	ldr	r1, [pc, #60]	@ (8005b38 <UARTEx_SetNbDataToProcess+0x98>)
 8005afa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005afc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b00:	b29a      	uxth	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	7b7a      	ldrb	r2, [r7, #13]
 8005b0c:	4909      	ldr	r1, [pc, #36]	@ (8005b34 <UARTEx_SetNbDataToProcess+0x94>)
 8005b0e:	5c8a      	ldrb	r2, [r1, r2]
 8005b10:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b14:	7b7a      	ldrb	r2, [r7, #13]
 8005b16:	4908      	ldr	r1, [pc, #32]	@ (8005b38 <UARTEx_SetNbDataToProcess+0x98>)
 8005b18:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005b26:	bf00      	nop
 8005b28:	3714      	adds	r7, #20
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	08008bd0 	.word	0x08008bd0
 8005b38:	08008bd8 	.word	0x08008bd8

08005b3c <__cvt>:
 8005b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b40:	ec57 6b10 	vmov	r6, r7, d0
 8005b44:	2f00      	cmp	r7, #0
 8005b46:	460c      	mov	r4, r1
 8005b48:	4619      	mov	r1, r3
 8005b4a:	463b      	mov	r3, r7
 8005b4c:	bfbb      	ittet	lt
 8005b4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005b52:	461f      	movlt	r7, r3
 8005b54:	2300      	movge	r3, #0
 8005b56:	232d      	movlt	r3, #45	@ 0x2d
 8005b58:	700b      	strb	r3, [r1, #0]
 8005b5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005b60:	4691      	mov	r9, r2
 8005b62:	f023 0820 	bic.w	r8, r3, #32
 8005b66:	bfbc      	itt	lt
 8005b68:	4632      	movlt	r2, r6
 8005b6a:	4616      	movlt	r6, r2
 8005b6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b70:	d005      	beq.n	8005b7e <__cvt+0x42>
 8005b72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005b76:	d100      	bne.n	8005b7a <__cvt+0x3e>
 8005b78:	3401      	adds	r4, #1
 8005b7a:	2102      	movs	r1, #2
 8005b7c:	e000      	b.n	8005b80 <__cvt+0x44>
 8005b7e:	2103      	movs	r1, #3
 8005b80:	ab03      	add	r3, sp, #12
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	ab02      	add	r3, sp, #8
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	ec47 6b10 	vmov	d0, r6, r7
 8005b8c:	4653      	mov	r3, sl
 8005b8e:	4622      	mov	r2, r4
 8005b90:	f000 fe6a 	bl	8006868 <_dtoa_r>
 8005b94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005b98:	4605      	mov	r5, r0
 8005b9a:	d119      	bne.n	8005bd0 <__cvt+0x94>
 8005b9c:	f019 0f01 	tst.w	r9, #1
 8005ba0:	d00e      	beq.n	8005bc0 <__cvt+0x84>
 8005ba2:	eb00 0904 	add.w	r9, r0, r4
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	2300      	movs	r3, #0
 8005baa:	4630      	mov	r0, r6
 8005bac:	4639      	mov	r1, r7
 8005bae:	f7fa ffa3 	bl	8000af8 <__aeabi_dcmpeq>
 8005bb2:	b108      	cbz	r0, 8005bb8 <__cvt+0x7c>
 8005bb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005bb8:	2230      	movs	r2, #48	@ 0x30
 8005bba:	9b03      	ldr	r3, [sp, #12]
 8005bbc:	454b      	cmp	r3, r9
 8005bbe:	d31e      	bcc.n	8005bfe <__cvt+0xc2>
 8005bc0:	9b03      	ldr	r3, [sp, #12]
 8005bc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bc4:	1b5b      	subs	r3, r3, r5
 8005bc6:	4628      	mov	r0, r5
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	b004      	add	sp, #16
 8005bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005bd4:	eb00 0904 	add.w	r9, r0, r4
 8005bd8:	d1e5      	bne.n	8005ba6 <__cvt+0x6a>
 8005bda:	7803      	ldrb	r3, [r0, #0]
 8005bdc:	2b30      	cmp	r3, #48	@ 0x30
 8005bde:	d10a      	bne.n	8005bf6 <__cvt+0xba>
 8005be0:	2200      	movs	r2, #0
 8005be2:	2300      	movs	r3, #0
 8005be4:	4630      	mov	r0, r6
 8005be6:	4639      	mov	r1, r7
 8005be8:	f7fa ff86 	bl	8000af8 <__aeabi_dcmpeq>
 8005bec:	b918      	cbnz	r0, 8005bf6 <__cvt+0xba>
 8005bee:	f1c4 0401 	rsb	r4, r4, #1
 8005bf2:	f8ca 4000 	str.w	r4, [sl]
 8005bf6:	f8da 3000 	ldr.w	r3, [sl]
 8005bfa:	4499      	add	r9, r3
 8005bfc:	e7d3      	b.n	8005ba6 <__cvt+0x6a>
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	9103      	str	r1, [sp, #12]
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	e7d9      	b.n	8005bba <__cvt+0x7e>

08005c06 <__exponent>:
 8005c06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c08:	2900      	cmp	r1, #0
 8005c0a:	bfba      	itte	lt
 8005c0c:	4249      	neglt	r1, r1
 8005c0e:	232d      	movlt	r3, #45	@ 0x2d
 8005c10:	232b      	movge	r3, #43	@ 0x2b
 8005c12:	2909      	cmp	r1, #9
 8005c14:	7002      	strb	r2, [r0, #0]
 8005c16:	7043      	strb	r3, [r0, #1]
 8005c18:	dd29      	ble.n	8005c6e <__exponent+0x68>
 8005c1a:	f10d 0307 	add.w	r3, sp, #7
 8005c1e:	461d      	mov	r5, r3
 8005c20:	270a      	movs	r7, #10
 8005c22:	461a      	mov	r2, r3
 8005c24:	fbb1 f6f7 	udiv	r6, r1, r7
 8005c28:	fb07 1416 	mls	r4, r7, r6, r1
 8005c2c:	3430      	adds	r4, #48	@ 0x30
 8005c2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005c32:	460c      	mov	r4, r1
 8005c34:	2c63      	cmp	r4, #99	@ 0x63
 8005c36:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c3a:	4631      	mov	r1, r6
 8005c3c:	dcf1      	bgt.n	8005c22 <__exponent+0x1c>
 8005c3e:	3130      	adds	r1, #48	@ 0x30
 8005c40:	1e94      	subs	r4, r2, #2
 8005c42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005c46:	1c41      	adds	r1, r0, #1
 8005c48:	4623      	mov	r3, r4
 8005c4a:	42ab      	cmp	r3, r5
 8005c4c:	d30a      	bcc.n	8005c64 <__exponent+0x5e>
 8005c4e:	f10d 0309 	add.w	r3, sp, #9
 8005c52:	1a9b      	subs	r3, r3, r2
 8005c54:	42ac      	cmp	r4, r5
 8005c56:	bf88      	it	hi
 8005c58:	2300      	movhi	r3, #0
 8005c5a:	3302      	adds	r3, #2
 8005c5c:	4403      	add	r3, r0
 8005c5e:	1a18      	subs	r0, r3, r0
 8005c60:	b003      	add	sp, #12
 8005c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005c68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005c6c:	e7ed      	b.n	8005c4a <__exponent+0x44>
 8005c6e:	2330      	movs	r3, #48	@ 0x30
 8005c70:	3130      	adds	r1, #48	@ 0x30
 8005c72:	7083      	strb	r3, [r0, #2]
 8005c74:	70c1      	strb	r1, [r0, #3]
 8005c76:	1d03      	adds	r3, r0, #4
 8005c78:	e7f1      	b.n	8005c5e <__exponent+0x58>
	...

08005c7c <_printf_float>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	b08d      	sub	sp, #52	@ 0x34
 8005c82:	460c      	mov	r4, r1
 8005c84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005c88:	4616      	mov	r6, r2
 8005c8a:	461f      	mov	r7, r3
 8005c8c:	4605      	mov	r5, r0
 8005c8e:	f000 fcdb 	bl	8006648 <_localeconv_r>
 8005c92:	6803      	ldr	r3, [r0, #0]
 8005c94:	9304      	str	r3, [sp, #16]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f7fa fb02 	bl	80002a0 <strlen>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ca0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca4:	9005      	str	r0, [sp, #20]
 8005ca6:	3307      	adds	r3, #7
 8005ca8:	f023 0307 	bic.w	r3, r3, #7
 8005cac:	f103 0208 	add.w	r2, r3, #8
 8005cb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005cb4:	f8d4 b000 	ldr.w	fp, [r4]
 8005cb8:	f8c8 2000 	str.w	r2, [r8]
 8005cbc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005cc0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005cc4:	9307      	str	r3, [sp, #28]
 8005cc6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005cd2:	4b9c      	ldr	r3, [pc, #624]	@ (8005f44 <_printf_float+0x2c8>)
 8005cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd8:	f7fa ff40 	bl	8000b5c <__aeabi_dcmpun>
 8005cdc:	bb70      	cbnz	r0, 8005d3c <_printf_float+0xc0>
 8005cde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ce2:	4b98      	ldr	r3, [pc, #608]	@ (8005f44 <_printf_float+0x2c8>)
 8005ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce8:	f7fa ff1a 	bl	8000b20 <__aeabi_dcmple>
 8005cec:	bb30      	cbnz	r0, 8005d3c <_printf_float+0xc0>
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	4640      	mov	r0, r8
 8005cf4:	4649      	mov	r1, r9
 8005cf6:	f7fa ff09 	bl	8000b0c <__aeabi_dcmplt>
 8005cfa:	b110      	cbz	r0, 8005d02 <_printf_float+0x86>
 8005cfc:	232d      	movs	r3, #45	@ 0x2d
 8005cfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d02:	4a91      	ldr	r2, [pc, #580]	@ (8005f48 <_printf_float+0x2cc>)
 8005d04:	4b91      	ldr	r3, [pc, #580]	@ (8005f4c <_printf_float+0x2d0>)
 8005d06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005d0a:	bf94      	ite	ls
 8005d0c:	4690      	movls	r8, r2
 8005d0e:	4698      	movhi	r8, r3
 8005d10:	2303      	movs	r3, #3
 8005d12:	6123      	str	r3, [r4, #16]
 8005d14:	f02b 0304 	bic.w	r3, fp, #4
 8005d18:	6023      	str	r3, [r4, #0]
 8005d1a:	f04f 0900 	mov.w	r9, #0
 8005d1e:	9700      	str	r7, [sp, #0]
 8005d20:	4633      	mov	r3, r6
 8005d22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005d24:	4621      	mov	r1, r4
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 f9d2 	bl	80060d0 <_printf_common>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	f040 808d 	bne.w	8005e4c <_printf_float+0x1d0>
 8005d32:	f04f 30ff 	mov.w	r0, #4294967295
 8005d36:	b00d      	add	sp, #52	@ 0x34
 8005d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3c:	4642      	mov	r2, r8
 8005d3e:	464b      	mov	r3, r9
 8005d40:	4640      	mov	r0, r8
 8005d42:	4649      	mov	r1, r9
 8005d44:	f7fa ff0a 	bl	8000b5c <__aeabi_dcmpun>
 8005d48:	b140      	cbz	r0, 8005d5c <_printf_float+0xe0>
 8005d4a:	464b      	mov	r3, r9
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	bfbc      	itt	lt
 8005d50:	232d      	movlt	r3, #45	@ 0x2d
 8005d52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005d56:	4a7e      	ldr	r2, [pc, #504]	@ (8005f50 <_printf_float+0x2d4>)
 8005d58:	4b7e      	ldr	r3, [pc, #504]	@ (8005f54 <_printf_float+0x2d8>)
 8005d5a:	e7d4      	b.n	8005d06 <_printf_float+0x8a>
 8005d5c:	6863      	ldr	r3, [r4, #4]
 8005d5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005d62:	9206      	str	r2, [sp, #24]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	d13b      	bne.n	8005de0 <_printf_float+0x164>
 8005d68:	2306      	movs	r3, #6
 8005d6a:	6063      	str	r3, [r4, #4]
 8005d6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005d70:	2300      	movs	r3, #0
 8005d72:	6022      	str	r2, [r4, #0]
 8005d74:	9303      	str	r3, [sp, #12]
 8005d76:	ab0a      	add	r3, sp, #40	@ 0x28
 8005d78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005d7c:	ab09      	add	r3, sp, #36	@ 0x24
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	6861      	ldr	r1, [r4, #4]
 8005d82:	ec49 8b10 	vmov	d0, r8, r9
 8005d86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f7ff fed6 	bl	8005b3c <__cvt>
 8005d90:	9b06      	ldr	r3, [sp, #24]
 8005d92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d94:	2b47      	cmp	r3, #71	@ 0x47
 8005d96:	4680      	mov	r8, r0
 8005d98:	d129      	bne.n	8005dee <_printf_float+0x172>
 8005d9a:	1cc8      	adds	r0, r1, #3
 8005d9c:	db02      	blt.n	8005da4 <_printf_float+0x128>
 8005d9e:	6863      	ldr	r3, [r4, #4]
 8005da0:	4299      	cmp	r1, r3
 8005da2:	dd41      	ble.n	8005e28 <_printf_float+0x1ac>
 8005da4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005da8:	fa5f fa8a 	uxtb.w	sl, sl
 8005dac:	3901      	subs	r1, #1
 8005dae:	4652      	mov	r2, sl
 8005db0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005db4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005db6:	f7ff ff26 	bl	8005c06 <__exponent>
 8005dba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005dbc:	1813      	adds	r3, r2, r0
 8005dbe:	2a01      	cmp	r2, #1
 8005dc0:	4681      	mov	r9, r0
 8005dc2:	6123      	str	r3, [r4, #16]
 8005dc4:	dc02      	bgt.n	8005dcc <_printf_float+0x150>
 8005dc6:	6822      	ldr	r2, [r4, #0]
 8005dc8:	07d2      	lsls	r2, r2, #31
 8005dca:	d501      	bpl.n	8005dd0 <_printf_float+0x154>
 8005dcc:	3301      	adds	r3, #1
 8005dce:	6123      	str	r3, [r4, #16]
 8005dd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d0a2      	beq.n	8005d1e <_printf_float+0xa2>
 8005dd8:	232d      	movs	r3, #45	@ 0x2d
 8005dda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005dde:	e79e      	b.n	8005d1e <_printf_float+0xa2>
 8005de0:	9a06      	ldr	r2, [sp, #24]
 8005de2:	2a47      	cmp	r2, #71	@ 0x47
 8005de4:	d1c2      	bne.n	8005d6c <_printf_float+0xf0>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1c0      	bne.n	8005d6c <_printf_float+0xf0>
 8005dea:	2301      	movs	r3, #1
 8005dec:	e7bd      	b.n	8005d6a <_printf_float+0xee>
 8005dee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005df2:	d9db      	bls.n	8005dac <_printf_float+0x130>
 8005df4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005df8:	d118      	bne.n	8005e2c <_printf_float+0x1b0>
 8005dfa:	2900      	cmp	r1, #0
 8005dfc:	6863      	ldr	r3, [r4, #4]
 8005dfe:	dd0b      	ble.n	8005e18 <_printf_float+0x19c>
 8005e00:	6121      	str	r1, [r4, #16]
 8005e02:	b913      	cbnz	r3, 8005e0a <_printf_float+0x18e>
 8005e04:	6822      	ldr	r2, [r4, #0]
 8005e06:	07d0      	lsls	r0, r2, #31
 8005e08:	d502      	bpl.n	8005e10 <_printf_float+0x194>
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	440b      	add	r3, r1
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005e12:	f04f 0900 	mov.w	r9, #0
 8005e16:	e7db      	b.n	8005dd0 <_printf_float+0x154>
 8005e18:	b913      	cbnz	r3, 8005e20 <_printf_float+0x1a4>
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	07d2      	lsls	r2, r2, #31
 8005e1e:	d501      	bpl.n	8005e24 <_printf_float+0x1a8>
 8005e20:	3302      	adds	r3, #2
 8005e22:	e7f4      	b.n	8005e0e <_printf_float+0x192>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e7f2      	b.n	8005e0e <_printf_float+0x192>
 8005e28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005e2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e2e:	4299      	cmp	r1, r3
 8005e30:	db05      	blt.n	8005e3e <_printf_float+0x1c2>
 8005e32:	6823      	ldr	r3, [r4, #0]
 8005e34:	6121      	str	r1, [r4, #16]
 8005e36:	07d8      	lsls	r0, r3, #31
 8005e38:	d5ea      	bpl.n	8005e10 <_printf_float+0x194>
 8005e3a:	1c4b      	adds	r3, r1, #1
 8005e3c:	e7e7      	b.n	8005e0e <_printf_float+0x192>
 8005e3e:	2900      	cmp	r1, #0
 8005e40:	bfd4      	ite	le
 8005e42:	f1c1 0202 	rsble	r2, r1, #2
 8005e46:	2201      	movgt	r2, #1
 8005e48:	4413      	add	r3, r2
 8005e4a:	e7e0      	b.n	8005e0e <_printf_float+0x192>
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	055a      	lsls	r2, r3, #21
 8005e50:	d407      	bmi.n	8005e62 <_printf_float+0x1e6>
 8005e52:	6923      	ldr	r3, [r4, #16]
 8005e54:	4642      	mov	r2, r8
 8005e56:	4631      	mov	r1, r6
 8005e58:	4628      	mov	r0, r5
 8005e5a:	47b8      	blx	r7
 8005e5c:	3001      	adds	r0, #1
 8005e5e:	d12b      	bne.n	8005eb8 <_printf_float+0x23c>
 8005e60:	e767      	b.n	8005d32 <_printf_float+0xb6>
 8005e62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005e66:	f240 80dd 	bls.w	8006024 <_printf_float+0x3a8>
 8005e6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2300      	movs	r3, #0
 8005e72:	f7fa fe41 	bl	8000af8 <__aeabi_dcmpeq>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	d033      	beq.n	8005ee2 <_printf_float+0x266>
 8005e7a:	4a37      	ldr	r2, [pc, #220]	@ (8005f58 <_printf_float+0x2dc>)
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f af54 	beq.w	8005d32 <_printf_float+0xb6>
 8005e8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005e8e:	4543      	cmp	r3, r8
 8005e90:	db02      	blt.n	8005e98 <_printf_float+0x21c>
 8005e92:	6823      	ldr	r3, [r4, #0]
 8005e94:	07d8      	lsls	r0, r3, #31
 8005e96:	d50f      	bpl.n	8005eb8 <_printf_float+0x23c>
 8005e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e9c:	4631      	mov	r1, r6
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	47b8      	blx	r7
 8005ea2:	3001      	adds	r0, #1
 8005ea4:	f43f af45 	beq.w	8005d32 <_printf_float+0xb6>
 8005ea8:	f04f 0900 	mov.w	r9, #0
 8005eac:	f108 38ff 	add.w	r8, r8, #4294967295
 8005eb0:	f104 0a1a 	add.w	sl, r4, #26
 8005eb4:	45c8      	cmp	r8, r9
 8005eb6:	dc09      	bgt.n	8005ecc <_printf_float+0x250>
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	079b      	lsls	r3, r3, #30
 8005ebc:	f100 8103 	bmi.w	80060c6 <_printf_float+0x44a>
 8005ec0:	68e0      	ldr	r0, [r4, #12]
 8005ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ec4:	4298      	cmp	r0, r3
 8005ec6:	bfb8      	it	lt
 8005ec8:	4618      	movlt	r0, r3
 8005eca:	e734      	b.n	8005d36 <_printf_float+0xba>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	4652      	mov	r2, sl
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	47b8      	blx	r7
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	f43f af2b 	beq.w	8005d32 <_printf_float+0xb6>
 8005edc:	f109 0901 	add.w	r9, r9, #1
 8005ee0:	e7e8      	b.n	8005eb4 <_printf_float+0x238>
 8005ee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	dc39      	bgt.n	8005f5c <_printf_float+0x2e0>
 8005ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f58 <_printf_float+0x2dc>)
 8005eea:	2301      	movs	r3, #1
 8005eec:	4631      	mov	r1, r6
 8005eee:	4628      	mov	r0, r5
 8005ef0:	47b8      	blx	r7
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	f43f af1d 	beq.w	8005d32 <_printf_float+0xb6>
 8005ef8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005efc:	ea59 0303 	orrs.w	r3, r9, r3
 8005f00:	d102      	bne.n	8005f08 <_printf_float+0x28c>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	07d9      	lsls	r1, r3, #31
 8005f06:	d5d7      	bpl.n	8005eb8 <_printf_float+0x23c>
 8005f08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af0d 	beq.w	8005d32 <_printf_float+0xb6>
 8005f18:	f04f 0a00 	mov.w	sl, #0
 8005f1c:	f104 0b1a 	add.w	fp, r4, #26
 8005f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f22:	425b      	negs	r3, r3
 8005f24:	4553      	cmp	r3, sl
 8005f26:	dc01      	bgt.n	8005f2c <_printf_float+0x2b0>
 8005f28:	464b      	mov	r3, r9
 8005f2a:	e793      	b.n	8005e54 <_printf_float+0x1d8>
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	465a      	mov	r2, fp
 8005f30:	4631      	mov	r1, r6
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b8      	blx	r7
 8005f36:	3001      	adds	r0, #1
 8005f38:	f43f aefb 	beq.w	8005d32 <_printf_float+0xb6>
 8005f3c:	f10a 0a01 	add.w	sl, sl, #1
 8005f40:	e7ee      	b.n	8005f20 <_printf_float+0x2a4>
 8005f42:	bf00      	nop
 8005f44:	7fefffff 	.word	0x7fefffff
 8005f48:	08008be0 	.word	0x08008be0
 8005f4c:	08008be4 	.word	0x08008be4
 8005f50:	08008be8 	.word	0x08008be8
 8005f54:	08008bec 	.word	0x08008bec
 8005f58:	08008bf0 	.word	0x08008bf0
 8005f5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f62:	4553      	cmp	r3, sl
 8005f64:	bfa8      	it	ge
 8005f66:	4653      	movge	r3, sl
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	4699      	mov	r9, r3
 8005f6c:	dc36      	bgt.n	8005fdc <_printf_float+0x360>
 8005f6e:	f04f 0b00 	mov.w	fp, #0
 8005f72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005f76:	f104 021a 	add.w	r2, r4, #26
 8005f7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005f7c:	9306      	str	r3, [sp, #24]
 8005f7e:	eba3 0309 	sub.w	r3, r3, r9
 8005f82:	455b      	cmp	r3, fp
 8005f84:	dc31      	bgt.n	8005fea <_printf_float+0x36e>
 8005f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f88:	459a      	cmp	sl, r3
 8005f8a:	dc3a      	bgt.n	8006002 <_printf_float+0x386>
 8005f8c:	6823      	ldr	r3, [r4, #0]
 8005f8e:	07da      	lsls	r2, r3, #31
 8005f90:	d437      	bmi.n	8006002 <_printf_float+0x386>
 8005f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f94:	ebaa 0903 	sub.w	r9, sl, r3
 8005f98:	9b06      	ldr	r3, [sp, #24]
 8005f9a:	ebaa 0303 	sub.w	r3, sl, r3
 8005f9e:	4599      	cmp	r9, r3
 8005fa0:	bfa8      	it	ge
 8005fa2:	4699      	movge	r9, r3
 8005fa4:	f1b9 0f00 	cmp.w	r9, #0
 8005fa8:	dc33      	bgt.n	8006012 <_printf_float+0x396>
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb2:	f104 0b1a 	add.w	fp, r4, #26
 8005fb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fb8:	ebaa 0303 	sub.w	r3, sl, r3
 8005fbc:	eba3 0309 	sub.w	r3, r3, r9
 8005fc0:	4543      	cmp	r3, r8
 8005fc2:	f77f af79 	ble.w	8005eb8 <_printf_float+0x23c>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	465a      	mov	r2, fp
 8005fca:	4631      	mov	r1, r6
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b8      	blx	r7
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f aeae 	beq.w	8005d32 <_printf_float+0xb6>
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	e7ec      	b.n	8005fb6 <_printf_float+0x33a>
 8005fdc:	4642      	mov	r2, r8
 8005fde:	4631      	mov	r1, r6
 8005fe0:	4628      	mov	r0, r5
 8005fe2:	47b8      	blx	r7
 8005fe4:	3001      	adds	r0, #1
 8005fe6:	d1c2      	bne.n	8005f6e <_printf_float+0x2f2>
 8005fe8:	e6a3      	b.n	8005d32 <_printf_float+0xb6>
 8005fea:	2301      	movs	r3, #1
 8005fec:	4631      	mov	r1, r6
 8005fee:	4628      	mov	r0, r5
 8005ff0:	9206      	str	r2, [sp, #24]
 8005ff2:	47b8      	blx	r7
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	f43f ae9c 	beq.w	8005d32 <_printf_float+0xb6>
 8005ffa:	9a06      	ldr	r2, [sp, #24]
 8005ffc:	f10b 0b01 	add.w	fp, fp, #1
 8006000:	e7bb      	b.n	8005f7a <_printf_float+0x2fe>
 8006002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	d1c0      	bne.n	8005f92 <_printf_float+0x316>
 8006010:	e68f      	b.n	8005d32 <_printf_float+0xb6>
 8006012:	9a06      	ldr	r2, [sp, #24]
 8006014:	464b      	mov	r3, r9
 8006016:	4442      	add	r2, r8
 8006018:	4631      	mov	r1, r6
 800601a:	4628      	mov	r0, r5
 800601c:	47b8      	blx	r7
 800601e:	3001      	adds	r0, #1
 8006020:	d1c3      	bne.n	8005faa <_printf_float+0x32e>
 8006022:	e686      	b.n	8005d32 <_printf_float+0xb6>
 8006024:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006028:	f1ba 0f01 	cmp.w	sl, #1
 800602c:	dc01      	bgt.n	8006032 <_printf_float+0x3b6>
 800602e:	07db      	lsls	r3, r3, #31
 8006030:	d536      	bpl.n	80060a0 <_printf_float+0x424>
 8006032:	2301      	movs	r3, #1
 8006034:	4642      	mov	r2, r8
 8006036:	4631      	mov	r1, r6
 8006038:	4628      	mov	r0, r5
 800603a:	47b8      	blx	r7
 800603c:	3001      	adds	r0, #1
 800603e:	f43f ae78 	beq.w	8005d32 <_printf_float+0xb6>
 8006042:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	f43f ae70 	beq.w	8005d32 <_printf_float+0xb6>
 8006052:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006056:	2200      	movs	r2, #0
 8006058:	2300      	movs	r3, #0
 800605a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800605e:	f7fa fd4b 	bl	8000af8 <__aeabi_dcmpeq>
 8006062:	b9c0      	cbnz	r0, 8006096 <_printf_float+0x41a>
 8006064:	4653      	mov	r3, sl
 8006066:	f108 0201 	add.w	r2, r8, #1
 800606a:	4631      	mov	r1, r6
 800606c:	4628      	mov	r0, r5
 800606e:	47b8      	blx	r7
 8006070:	3001      	adds	r0, #1
 8006072:	d10c      	bne.n	800608e <_printf_float+0x412>
 8006074:	e65d      	b.n	8005d32 <_printf_float+0xb6>
 8006076:	2301      	movs	r3, #1
 8006078:	465a      	mov	r2, fp
 800607a:	4631      	mov	r1, r6
 800607c:	4628      	mov	r0, r5
 800607e:	47b8      	blx	r7
 8006080:	3001      	adds	r0, #1
 8006082:	f43f ae56 	beq.w	8005d32 <_printf_float+0xb6>
 8006086:	f108 0801 	add.w	r8, r8, #1
 800608a:	45d0      	cmp	r8, sl
 800608c:	dbf3      	blt.n	8006076 <_printf_float+0x3fa>
 800608e:	464b      	mov	r3, r9
 8006090:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006094:	e6df      	b.n	8005e56 <_printf_float+0x1da>
 8006096:	f04f 0800 	mov.w	r8, #0
 800609a:	f104 0b1a 	add.w	fp, r4, #26
 800609e:	e7f4      	b.n	800608a <_printf_float+0x40e>
 80060a0:	2301      	movs	r3, #1
 80060a2:	4642      	mov	r2, r8
 80060a4:	e7e1      	b.n	800606a <_printf_float+0x3ee>
 80060a6:	2301      	movs	r3, #1
 80060a8:	464a      	mov	r2, r9
 80060aa:	4631      	mov	r1, r6
 80060ac:	4628      	mov	r0, r5
 80060ae:	47b8      	blx	r7
 80060b0:	3001      	adds	r0, #1
 80060b2:	f43f ae3e 	beq.w	8005d32 <_printf_float+0xb6>
 80060b6:	f108 0801 	add.w	r8, r8, #1
 80060ba:	68e3      	ldr	r3, [r4, #12]
 80060bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80060be:	1a5b      	subs	r3, r3, r1
 80060c0:	4543      	cmp	r3, r8
 80060c2:	dcf0      	bgt.n	80060a6 <_printf_float+0x42a>
 80060c4:	e6fc      	b.n	8005ec0 <_printf_float+0x244>
 80060c6:	f04f 0800 	mov.w	r8, #0
 80060ca:	f104 0919 	add.w	r9, r4, #25
 80060ce:	e7f4      	b.n	80060ba <_printf_float+0x43e>

080060d0 <_printf_common>:
 80060d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	4616      	mov	r6, r2
 80060d6:	4698      	mov	r8, r3
 80060d8:	688a      	ldr	r2, [r1, #8]
 80060da:	690b      	ldr	r3, [r1, #16]
 80060dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060e0:	4293      	cmp	r3, r2
 80060e2:	bfb8      	it	lt
 80060e4:	4613      	movlt	r3, r2
 80060e6:	6033      	str	r3, [r6, #0]
 80060e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060ec:	4607      	mov	r7, r0
 80060ee:	460c      	mov	r4, r1
 80060f0:	b10a      	cbz	r2, 80060f6 <_printf_common+0x26>
 80060f2:	3301      	adds	r3, #1
 80060f4:	6033      	str	r3, [r6, #0]
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	0699      	lsls	r1, r3, #26
 80060fa:	bf42      	ittt	mi
 80060fc:	6833      	ldrmi	r3, [r6, #0]
 80060fe:	3302      	addmi	r3, #2
 8006100:	6033      	strmi	r3, [r6, #0]
 8006102:	6825      	ldr	r5, [r4, #0]
 8006104:	f015 0506 	ands.w	r5, r5, #6
 8006108:	d106      	bne.n	8006118 <_printf_common+0x48>
 800610a:	f104 0a19 	add.w	sl, r4, #25
 800610e:	68e3      	ldr	r3, [r4, #12]
 8006110:	6832      	ldr	r2, [r6, #0]
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	42ab      	cmp	r3, r5
 8006116:	dc26      	bgt.n	8006166 <_printf_common+0x96>
 8006118:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800611c:	6822      	ldr	r2, [r4, #0]
 800611e:	3b00      	subs	r3, #0
 8006120:	bf18      	it	ne
 8006122:	2301      	movne	r3, #1
 8006124:	0692      	lsls	r2, r2, #26
 8006126:	d42b      	bmi.n	8006180 <_printf_common+0xb0>
 8006128:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800612c:	4641      	mov	r1, r8
 800612e:	4638      	mov	r0, r7
 8006130:	47c8      	blx	r9
 8006132:	3001      	adds	r0, #1
 8006134:	d01e      	beq.n	8006174 <_printf_common+0xa4>
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	6922      	ldr	r2, [r4, #16]
 800613a:	f003 0306 	and.w	r3, r3, #6
 800613e:	2b04      	cmp	r3, #4
 8006140:	bf02      	ittt	eq
 8006142:	68e5      	ldreq	r5, [r4, #12]
 8006144:	6833      	ldreq	r3, [r6, #0]
 8006146:	1aed      	subeq	r5, r5, r3
 8006148:	68a3      	ldr	r3, [r4, #8]
 800614a:	bf0c      	ite	eq
 800614c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006150:	2500      	movne	r5, #0
 8006152:	4293      	cmp	r3, r2
 8006154:	bfc4      	itt	gt
 8006156:	1a9b      	subgt	r3, r3, r2
 8006158:	18ed      	addgt	r5, r5, r3
 800615a:	2600      	movs	r6, #0
 800615c:	341a      	adds	r4, #26
 800615e:	42b5      	cmp	r5, r6
 8006160:	d11a      	bne.n	8006198 <_printf_common+0xc8>
 8006162:	2000      	movs	r0, #0
 8006164:	e008      	b.n	8006178 <_printf_common+0xa8>
 8006166:	2301      	movs	r3, #1
 8006168:	4652      	mov	r2, sl
 800616a:	4641      	mov	r1, r8
 800616c:	4638      	mov	r0, r7
 800616e:	47c8      	blx	r9
 8006170:	3001      	adds	r0, #1
 8006172:	d103      	bne.n	800617c <_printf_common+0xac>
 8006174:	f04f 30ff 	mov.w	r0, #4294967295
 8006178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800617c:	3501      	adds	r5, #1
 800617e:	e7c6      	b.n	800610e <_printf_common+0x3e>
 8006180:	18e1      	adds	r1, r4, r3
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	2030      	movs	r0, #48	@ 0x30
 8006186:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800618a:	4422      	add	r2, r4
 800618c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006190:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006194:	3302      	adds	r3, #2
 8006196:	e7c7      	b.n	8006128 <_printf_common+0x58>
 8006198:	2301      	movs	r3, #1
 800619a:	4622      	mov	r2, r4
 800619c:	4641      	mov	r1, r8
 800619e:	4638      	mov	r0, r7
 80061a0:	47c8      	blx	r9
 80061a2:	3001      	adds	r0, #1
 80061a4:	d0e6      	beq.n	8006174 <_printf_common+0xa4>
 80061a6:	3601      	adds	r6, #1
 80061a8:	e7d9      	b.n	800615e <_printf_common+0x8e>
	...

080061ac <_printf_i>:
 80061ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061b0:	7e0f      	ldrb	r7, [r1, #24]
 80061b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061b4:	2f78      	cmp	r7, #120	@ 0x78
 80061b6:	4691      	mov	r9, r2
 80061b8:	4680      	mov	r8, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	469a      	mov	sl, r3
 80061be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061c2:	d807      	bhi.n	80061d4 <_printf_i+0x28>
 80061c4:	2f62      	cmp	r7, #98	@ 0x62
 80061c6:	d80a      	bhi.n	80061de <_printf_i+0x32>
 80061c8:	2f00      	cmp	r7, #0
 80061ca:	f000 80d2 	beq.w	8006372 <_printf_i+0x1c6>
 80061ce:	2f58      	cmp	r7, #88	@ 0x58
 80061d0:	f000 80b9 	beq.w	8006346 <_printf_i+0x19a>
 80061d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061dc:	e03a      	b.n	8006254 <_printf_i+0xa8>
 80061de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061e2:	2b15      	cmp	r3, #21
 80061e4:	d8f6      	bhi.n	80061d4 <_printf_i+0x28>
 80061e6:	a101      	add	r1, pc, #4	@ (adr r1, 80061ec <_printf_i+0x40>)
 80061e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061ec:	08006245 	.word	0x08006245
 80061f0:	08006259 	.word	0x08006259
 80061f4:	080061d5 	.word	0x080061d5
 80061f8:	080061d5 	.word	0x080061d5
 80061fc:	080061d5 	.word	0x080061d5
 8006200:	080061d5 	.word	0x080061d5
 8006204:	08006259 	.word	0x08006259
 8006208:	080061d5 	.word	0x080061d5
 800620c:	080061d5 	.word	0x080061d5
 8006210:	080061d5 	.word	0x080061d5
 8006214:	080061d5 	.word	0x080061d5
 8006218:	08006359 	.word	0x08006359
 800621c:	08006283 	.word	0x08006283
 8006220:	08006313 	.word	0x08006313
 8006224:	080061d5 	.word	0x080061d5
 8006228:	080061d5 	.word	0x080061d5
 800622c:	0800637b 	.word	0x0800637b
 8006230:	080061d5 	.word	0x080061d5
 8006234:	08006283 	.word	0x08006283
 8006238:	080061d5 	.word	0x080061d5
 800623c:	080061d5 	.word	0x080061d5
 8006240:	0800631b 	.word	0x0800631b
 8006244:	6833      	ldr	r3, [r6, #0]
 8006246:	1d1a      	adds	r2, r3, #4
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6032      	str	r2, [r6, #0]
 800624c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006250:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006254:	2301      	movs	r3, #1
 8006256:	e09d      	b.n	8006394 <_printf_i+0x1e8>
 8006258:	6833      	ldr	r3, [r6, #0]
 800625a:	6820      	ldr	r0, [r4, #0]
 800625c:	1d19      	adds	r1, r3, #4
 800625e:	6031      	str	r1, [r6, #0]
 8006260:	0606      	lsls	r6, r0, #24
 8006262:	d501      	bpl.n	8006268 <_printf_i+0xbc>
 8006264:	681d      	ldr	r5, [r3, #0]
 8006266:	e003      	b.n	8006270 <_printf_i+0xc4>
 8006268:	0645      	lsls	r5, r0, #25
 800626a:	d5fb      	bpl.n	8006264 <_printf_i+0xb8>
 800626c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006270:	2d00      	cmp	r5, #0
 8006272:	da03      	bge.n	800627c <_printf_i+0xd0>
 8006274:	232d      	movs	r3, #45	@ 0x2d
 8006276:	426d      	negs	r5, r5
 8006278:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800627c:	4859      	ldr	r0, [pc, #356]	@ (80063e4 <_printf_i+0x238>)
 800627e:	230a      	movs	r3, #10
 8006280:	e011      	b.n	80062a6 <_printf_i+0xfa>
 8006282:	6821      	ldr	r1, [r4, #0]
 8006284:	6833      	ldr	r3, [r6, #0]
 8006286:	0608      	lsls	r0, r1, #24
 8006288:	f853 5b04 	ldr.w	r5, [r3], #4
 800628c:	d402      	bmi.n	8006294 <_printf_i+0xe8>
 800628e:	0649      	lsls	r1, r1, #25
 8006290:	bf48      	it	mi
 8006292:	b2ad      	uxthmi	r5, r5
 8006294:	2f6f      	cmp	r7, #111	@ 0x6f
 8006296:	4853      	ldr	r0, [pc, #332]	@ (80063e4 <_printf_i+0x238>)
 8006298:	6033      	str	r3, [r6, #0]
 800629a:	bf14      	ite	ne
 800629c:	230a      	movne	r3, #10
 800629e:	2308      	moveq	r3, #8
 80062a0:	2100      	movs	r1, #0
 80062a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062a6:	6866      	ldr	r6, [r4, #4]
 80062a8:	60a6      	str	r6, [r4, #8]
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	bfa2      	ittt	ge
 80062ae:	6821      	ldrge	r1, [r4, #0]
 80062b0:	f021 0104 	bicge.w	r1, r1, #4
 80062b4:	6021      	strge	r1, [r4, #0]
 80062b6:	b90d      	cbnz	r5, 80062bc <_printf_i+0x110>
 80062b8:	2e00      	cmp	r6, #0
 80062ba:	d04b      	beq.n	8006354 <_printf_i+0x1a8>
 80062bc:	4616      	mov	r6, r2
 80062be:	fbb5 f1f3 	udiv	r1, r5, r3
 80062c2:	fb03 5711 	mls	r7, r3, r1, r5
 80062c6:	5dc7      	ldrb	r7, [r0, r7]
 80062c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062cc:	462f      	mov	r7, r5
 80062ce:	42bb      	cmp	r3, r7
 80062d0:	460d      	mov	r5, r1
 80062d2:	d9f4      	bls.n	80062be <_printf_i+0x112>
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d10b      	bne.n	80062f0 <_printf_i+0x144>
 80062d8:	6823      	ldr	r3, [r4, #0]
 80062da:	07df      	lsls	r7, r3, #31
 80062dc:	d508      	bpl.n	80062f0 <_printf_i+0x144>
 80062de:	6923      	ldr	r3, [r4, #16]
 80062e0:	6861      	ldr	r1, [r4, #4]
 80062e2:	4299      	cmp	r1, r3
 80062e4:	bfde      	ittt	le
 80062e6:	2330      	movle	r3, #48	@ 0x30
 80062e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80062f0:	1b92      	subs	r2, r2, r6
 80062f2:	6122      	str	r2, [r4, #16]
 80062f4:	f8cd a000 	str.w	sl, [sp]
 80062f8:	464b      	mov	r3, r9
 80062fa:	aa03      	add	r2, sp, #12
 80062fc:	4621      	mov	r1, r4
 80062fe:	4640      	mov	r0, r8
 8006300:	f7ff fee6 	bl	80060d0 <_printf_common>
 8006304:	3001      	adds	r0, #1
 8006306:	d14a      	bne.n	800639e <_printf_i+0x1f2>
 8006308:	f04f 30ff 	mov.w	r0, #4294967295
 800630c:	b004      	add	sp, #16
 800630e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	f043 0320 	orr.w	r3, r3, #32
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	4833      	ldr	r0, [pc, #204]	@ (80063e8 <_printf_i+0x23c>)
 800631c:	2778      	movs	r7, #120	@ 0x78
 800631e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	6831      	ldr	r1, [r6, #0]
 8006326:	061f      	lsls	r7, r3, #24
 8006328:	f851 5b04 	ldr.w	r5, [r1], #4
 800632c:	d402      	bmi.n	8006334 <_printf_i+0x188>
 800632e:	065f      	lsls	r7, r3, #25
 8006330:	bf48      	it	mi
 8006332:	b2ad      	uxthmi	r5, r5
 8006334:	6031      	str	r1, [r6, #0]
 8006336:	07d9      	lsls	r1, r3, #31
 8006338:	bf44      	itt	mi
 800633a:	f043 0320 	orrmi.w	r3, r3, #32
 800633e:	6023      	strmi	r3, [r4, #0]
 8006340:	b11d      	cbz	r5, 800634a <_printf_i+0x19e>
 8006342:	2310      	movs	r3, #16
 8006344:	e7ac      	b.n	80062a0 <_printf_i+0xf4>
 8006346:	4827      	ldr	r0, [pc, #156]	@ (80063e4 <_printf_i+0x238>)
 8006348:	e7e9      	b.n	800631e <_printf_i+0x172>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	f023 0320 	bic.w	r3, r3, #32
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	e7f6      	b.n	8006342 <_printf_i+0x196>
 8006354:	4616      	mov	r6, r2
 8006356:	e7bd      	b.n	80062d4 <_printf_i+0x128>
 8006358:	6833      	ldr	r3, [r6, #0]
 800635a:	6825      	ldr	r5, [r4, #0]
 800635c:	6961      	ldr	r1, [r4, #20]
 800635e:	1d18      	adds	r0, r3, #4
 8006360:	6030      	str	r0, [r6, #0]
 8006362:	062e      	lsls	r6, r5, #24
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	d501      	bpl.n	800636c <_printf_i+0x1c0>
 8006368:	6019      	str	r1, [r3, #0]
 800636a:	e002      	b.n	8006372 <_printf_i+0x1c6>
 800636c:	0668      	lsls	r0, r5, #25
 800636e:	d5fb      	bpl.n	8006368 <_printf_i+0x1bc>
 8006370:	8019      	strh	r1, [r3, #0]
 8006372:	2300      	movs	r3, #0
 8006374:	6123      	str	r3, [r4, #16]
 8006376:	4616      	mov	r6, r2
 8006378:	e7bc      	b.n	80062f4 <_printf_i+0x148>
 800637a:	6833      	ldr	r3, [r6, #0]
 800637c:	1d1a      	adds	r2, r3, #4
 800637e:	6032      	str	r2, [r6, #0]
 8006380:	681e      	ldr	r6, [r3, #0]
 8006382:	6862      	ldr	r2, [r4, #4]
 8006384:	2100      	movs	r1, #0
 8006386:	4630      	mov	r0, r6
 8006388:	f7f9 ff3a 	bl	8000200 <memchr>
 800638c:	b108      	cbz	r0, 8006392 <_printf_i+0x1e6>
 800638e:	1b80      	subs	r0, r0, r6
 8006390:	6060      	str	r0, [r4, #4]
 8006392:	6863      	ldr	r3, [r4, #4]
 8006394:	6123      	str	r3, [r4, #16]
 8006396:	2300      	movs	r3, #0
 8006398:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800639c:	e7aa      	b.n	80062f4 <_printf_i+0x148>
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	4632      	mov	r2, r6
 80063a2:	4649      	mov	r1, r9
 80063a4:	4640      	mov	r0, r8
 80063a6:	47d0      	blx	sl
 80063a8:	3001      	adds	r0, #1
 80063aa:	d0ad      	beq.n	8006308 <_printf_i+0x15c>
 80063ac:	6823      	ldr	r3, [r4, #0]
 80063ae:	079b      	lsls	r3, r3, #30
 80063b0:	d413      	bmi.n	80063da <_printf_i+0x22e>
 80063b2:	68e0      	ldr	r0, [r4, #12]
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	4298      	cmp	r0, r3
 80063b8:	bfb8      	it	lt
 80063ba:	4618      	movlt	r0, r3
 80063bc:	e7a6      	b.n	800630c <_printf_i+0x160>
 80063be:	2301      	movs	r3, #1
 80063c0:	4632      	mov	r2, r6
 80063c2:	4649      	mov	r1, r9
 80063c4:	4640      	mov	r0, r8
 80063c6:	47d0      	blx	sl
 80063c8:	3001      	adds	r0, #1
 80063ca:	d09d      	beq.n	8006308 <_printf_i+0x15c>
 80063cc:	3501      	adds	r5, #1
 80063ce:	68e3      	ldr	r3, [r4, #12]
 80063d0:	9903      	ldr	r1, [sp, #12]
 80063d2:	1a5b      	subs	r3, r3, r1
 80063d4:	42ab      	cmp	r3, r5
 80063d6:	dcf2      	bgt.n	80063be <_printf_i+0x212>
 80063d8:	e7eb      	b.n	80063b2 <_printf_i+0x206>
 80063da:	2500      	movs	r5, #0
 80063dc:	f104 0619 	add.w	r6, r4, #25
 80063e0:	e7f5      	b.n	80063ce <_printf_i+0x222>
 80063e2:	bf00      	nop
 80063e4:	08008bf2 	.word	0x08008bf2
 80063e8:	08008c03 	.word	0x08008c03

080063ec <std>:
 80063ec:	2300      	movs	r3, #0
 80063ee:	b510      	push	{r4, lr}
 80063f0:	4604      	mov	r4, r0
 80063f2:	e9c0 3300 	strd	r3, r3, [r0]
 80063f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063fa:	6083      	str	r3, [r0, #8]
 80063fc:	8181      	strh	r1, [r0, #12]
 80063fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006400:	81c2      	strh	r2, [r0, #14]
 8006402:	6183      	str	r3, [r0, #24]
 8006404:	4619      	mov	r1, r3
 8006406:	2208      	movs	r2, #8
 8006408:	305c      	adds	r0, #92	@ 0x5c
 800640a:	f000 f914 	bl	8006636 <memset>
 800640e:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <std+0x58>)
 8006410:	6263      	str	r3, [r4, #36]	@ 0x24
 8006412:	4b0d      	ldr	r3, [pc, #52]	@ (8006448 <std+0x5c>)
 8006414:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006416:	4b0d      	ldr	r3, [pc, #52]	@ (800644c <std+0x60>)
 8006418:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800641a:	4b0d      	ldr	r3, [pc, #52]	@ (8006450 <std+0x64>)
 800641c:	6323      	str	r3, [r4, #48]	@ 0x30
 800641e:	4b0d      	ldr	r3, [pc, #52]	@ (8006454 <std+0x68>)
 8006420:	6224      	str	r4, [r4, #32]
 8006422:	429c      	cmp	r4, r3
 8006424:	d006      	beq.n	8006434 <std+0x48>
 8006426:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800642a:	4294      	cmp	r4, r2
 800642c:	d002      	beq.n	8006434 <std+0x48>
 800642e:	33d0      	adds	r3, #208	@ 0xd0
 8006430:	429c      	cmp	r4, r3
 8006432:	d105      	bne.n	8006440 <std+0x54>
 8006434:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800643c:	f000 b978 	b.w	8006730 <__retarget_lock_init_recursive>
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	080065b1 	.word	0x080065b1
 8006448:	080065d3 	.word	0x080065d3
 800644c:	0800660b 	.word	0x0800660b
 8006450:	0800662f 	.word	0x0800662f
 8006454:	2000036c 	.word	0x2000036c

08006458 <stdio_exit_handler>:
 8006458:	4a02      	ldr	r2, [pc, #8]	@ (8006464 <stdio_exit_handler+0xc>)
 800645a:	4903      	ldr	r1, [pc, #12]	@ (8006468 <stdio_exit_handler+0x10>)
 800645c:	4803      	ldr	r0, [pc, #12]	@ (800646c <stdio_exit_handler+0x14>)
 800645e:	f000 b869 	b.w	8006534 <_fwalk_sglue>
 8006462:	bf00      	nop
 8006464:	20000040 	.word	0x20000040
 8006468:	080080ad 	.word	0x080080ad
 800646c:	20000050 	.word	0x20000050

08006470 <cleanup_stdio>:
 8006470:	6841      	ldr	r1, [r0, #4]
 8006472:	4b0c      	ldr	r3, [pc, #48]	@ (80064a4 <cleanup_stdio+0x34>)
 8006474:	4299      	cmp	r1, r3
 8006476:	b510      	push	{r4, lr}
 8006478:	4604      	mov	r4, r0
 800647a:	d001      	beq.n	8006480 <cleanup_stdio+0x10>
 800647c:	f001 fe16 	bl	80080ac <_fflush_r>
 8006480:	68a1      	ldr	r1, [r4, #8]
 8006482:	4b09      	ldr	r3, [pc, #36]	@ (80064a8 <cleanup_stdio+0x38>)
 8006484:	4299      	cmp	r1, r3
 8006486:	d002      	beq.n	800648e <cleanup_stdio+0x1e>
 8006488:	4620      	mov	r0, r4
 800648a:	f001 fe0f 	bl	80080ac <_fflush_r>
 800648e:	68e1      	ldr	r1, [r4, #12]
 8006490:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <cleanup_stdio+0x3c>)
 8006492:	4299      	cmp	r1, r3
 8006494:	d004      	beq.n	80064a0 <cleanup_stdio+0x30>
 8006496:	4620      	mov	r0, r4
 8006498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800649c:	f001 be06 	b.w	80080ac <_fflush_r>
 80064a0:	bd10      	pop	{r4, pc}
 80064a2:	bf00      	nop
 80064a4:	2000036c 	.word	0x2000036c
 80064a8:	200003d4 	.word	0x200003d4
 80064ac:	2000043c 	.word	0x2000043c

080064b0 <global_stdio_init.part.0>:
 80064b0:	b510      	push	{r4, lr}
 80064b2:	4b0b      	ldr	r3, [pc, #44]	@ (80064e0 <global_stdio_init.part.0+0x30>)
 80064b4:	4c0b      	ldr	r4, [pc, #44]	@ (80064e4 <global_stdio_init.part.0+0x34>)
 80064b6:	4a0c      	ldr	r2, [pc, #48]	@ (80064e8 <global_stdio_init.part.0+0x38>)
 80064b8:	601a      	str	r2, [r3, #0]
 80064ba:	4620      	mov	r0, r4
 80064bc:	2200      	movs	r2, #0
 80064be:	2104      	movs	r1, #4
 80064c0:	f7ff ff94 	bl	80063ec <std>
 80064c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80064c8:	2201      	movs	r2, #1
 80064ca:	2109      	movs	r1, #9
 80064cc:	f7ff ff8e 	bl	80063ec <std>
 80064d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80064d4:	2202      	movs	r2, #2
 80064d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064da:	2112      	movs	r1, #18
 80064dc:	f7ff bf86 	b.w	80063ec <std>
 80064e0:	200004a4 	.word	0x200004a4
 80064e4:	2000036c 	.word	0x2000036c
 80064e8:	08006459 	.word	0x08006459

080064ec <__sfp_lock_acquire>:
 80064ec:	4801      	ldr	r0, [pc, #4]	@ (80064f4 <__sfp_lock_acquire+0x8>)
 80064ee:	f000 b920 	b.w	8006732 <__retarget_lock_acquire_recursive>
 80064f2:	bf00      	nop
 80064f4:	200004ad 	.word	0x200004ad

080064f8 <__sfp_lock_release>:
 80064f8:	4801      	ldr	r0, [pc, #4]	@ (8006500 <__sfp_lock_release+0x8>)
 80064fa:	f000 b91b 	b.w	8006734 <__retarget_lock_release_recursive>
 80064fe:	bf00      	nop
 8006500:	200004ad 	.word	0x200004ad

08006504 <__sinit>:
 8006504:	b510      	push	{r4, lr}
 8006506:	4604      	mov	r4, r0
 8006508:	f7ff fff0 	bl	80064ec <__sfp_lock_acquire>
 800650c:	6a23      	ldr	r3, [r4, #32]
 800650e:	b11b      	cbz	r3, 8006518 <__sinit+0x14>
 8006510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006514:	f7ff bff0 	b.w	80064f8 <__sfp_lock_release>
 8006518:	4b04      	ldr	r3, [pc, #16]	@ (800652c <__sinit+0x28>)
 800651a:	6223      	str	r3, [r4, #32]
 800651c:	4b04      	ldr	r3, [pc, #16]	@ (8006530 <__sinit+0x2c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f5      	bne.n	8006510 <__sinit+0xc>
 8006524:	f7ff ffc4 	bl	80064b0 <global_stdio_init.part.0>
 8006528:	e7f2      	b.n	8006510 <__sinit+0xc>
 800652a:	bf00      	nop
 800652c:	08006471 	.word	0x08006471
 8006530:	200004a4 	.word	0x200004a4

08006534 <_fwalk_sglue>:
 8006534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006538:	4607      	mov	r7, r0
 800653a:	4688      	mov	r8, r1
 800653c:	4614      	mov	r4, r2
 800653e:	2600      	movs	r6, #0
 8006540:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006544:	f1b9 0901 	subs.w	r9, r9, #1
 8006548:	d505      	bpl.n	8006556 <_fwalk_sglue+0x22>
 800654a:	6824      	ldr	r4, [r4, #0]
 800654c:	2c00      	cmp	r4, #0
 800654e:	d1f7      	bne.n	8006540 <_fwalk_sglue+0xc>
 8006550:	4630      	mov	r0, r6
 8006552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006556:	89ab      	ldrh	r3, [r5, #12]
 8006558:	2b01      	cmp	r3, #1
 800655a:	d907      	bls.n	800656c <_fwalk_sglue+0x38>
 800655c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006560:	3301      	adds	r3, #1
 8006562:	d003      	beq.n	800656c <_fwalk_sglue+0x38>
 8006564:	4629      	mov	r1, r5
 8006566:	4638      	mov	r0, r7
 8006568:	47c0      	blx	r8
 800656a:	4306      	orrs	r6, r0
 800656c:	3568      	adds	r5, #104	@ 0x68
 800656e:	e7e9      	b.n	8006544 <_fwalk_sglue+0x10>

08006570 <siprintf>:
 8006570:	b40e      	push	{r1, r2, r3}
 8006572:	b500      	push	{lr}
 8006574:	b09c      	sub	sp, #112	@ 0x70
 8006576:	ab1d      	add	r3, sp, #116	@ 0x74
 8006578:	9002      	str	r0, [sp, #8]
 800657a:	9006      	str	r0, [sp, #24]
 800657c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006580:	4809      	ldr	r0, [pc, #36]	@ (80065a8 <siprintf+0x38>)
 8006582:	9107      	str	r1, [sp, #28]
 8006584:	9104      	str	r1, [sp, #16]
 8006586:	4909      	ldr	r1, [pc, #36]	@ (80065ac <siprintf+0x3c>)
 8006588:	f853 2b04 	ldr.w	r2, [r3], #4
 800658c:	9105      	str	r1, [sp, #20]
 800658e:	6800      	ldr	r0, [r0, #0]
 8006590:	9301      	str	r3, [sp, #4]
 8006592:	a902      	add	r1, sp, #8
 8006594:	f001 fc0a 	bl	8007dac <_svfiprintf_r>
 8006598:	9b02      	ldr	r3, [sp, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	b01c      	add	sp, #112	@ 0x70
 80065a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a4:	b003      	add	sp, #12
 80065a6:	4770      	bx	lr
 80065a8:	2000004c 	.word	0x2000004c
 80065ac:	ffff0208 	.word	0xffff0208

080065b0 <__sread>:
 80065b0:	b510      	push	{r4, lr}
 80065b2:	460c      	mov	r4, r1
 80065b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b8:	f000 f86c 	bl	8006694 <_read_r>
 80065bc:	2800      	cmp	r0, #0
 80065be:	bfab      	itete	ge
 80065c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80065c2:	89a3      	ldrhlt	r3, [r4, #12]
 80065c4:	181b      	addge	r3, r3, r0
 80065c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80065ca:	bfac      	ite	ge
 80065cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80065ce:	81a3      	strhlt	r3, [r4, #12]
 80065d0:	bd10      	pop	{r4, pc}

080065d2 <__swrite>:
 80065d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065d6:	461f      	mov	r7, r3
 80065d8:	898b      	ldrh	r3, [r1, #12]
 80065da:	05db      	lsls	r3, r3, #23
 80065dc:	4605      	mov	r5, r0
 80065de:	460c      	mov	r4, r1
 80065e0:	4616      	mov	r6, r2
 80065e2:	d505      	bpl.n	80065f0 <__swrite+0x1e>
 80065e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e8:	2302      	movs	r3, #2
 80065ea:	2200      	movs	r2, #0
 80065ec:	f000 f840 	bl	8006670 <_lseek_r>
 80065f0:	89a3      	ldrh	r3, [r4, #12]
 80065f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80065fa:	81a3      	strh	r3, [r4, #12]
 80065fc:	4632      	mov	r2, r6
 80065fe:	463b      	mov	r3, r7
 8006600:	4628      	mov	r0, r5
 8006602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006606:	f000 b857 	b.w	80066b8 <_write_r>

0800660a <__sseek>:
 800660a:	b510      	push	{r4, lr}
 800660c:	460c      	mov	r4, r1
 800660e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006612:	f000 f82d 	bl	8006670 <_lseek_r>
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	89a3      	ldrh	r3, [r4, #12]
 800661a:	bf15      	itete	ne
 800661c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800661e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006622:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006626:	81a3      	strheq	r3, [r4, #12]
 8006628:	bf18      	it	ne
 800662a:	81a3      	strhne	r3, [r4, #12]
 800662c:	bd10      	pop	{r4, pc}

0800662e <__sclose>:
 800662e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006632:	f000 b80d 	b.w	8006650 <_close_r>

08006636 <memset>:
 8006636:	4402      	add	r2, r0
 8006638:	4603      	mov	r3, r0
 800663a:	4293      	cmp	r3, r2
 800663c:	d100      	bne.n	8006640 <memset+0xa>
 800663e:	4770      	bx	lr
 8006640:	f803 1b01 	strb.w	r1, [r3], #1
 8006644:	e7f9      	b.n	800663a <memset+0x4>
	...

08006648 <_localeconv_r>:
 8006648:	4800      	ldr	r0, [pc, #0]	@ (800664c <_localeconv_r+0x4>)
 800664a:	4770      	bx	lr
 800664c:	2000018c 	.word	0x2000018c

08006650 <_close_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4d06      	ldr	r5, [pc, #24]	@ (800666c <_close_r+0x1c>)
 8006654:	2300      	movs	r3, #0
 8006656:	4604      	mov	r4, r0
 8006658:	4608      	mov	r0, r1
 800665a:	602b      	str	r3, [r5, #0]
 800665c:	f7fb fa47 	bl	8001aee <_close>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_close_r+0x1a>
 8006664:	682b      	ldr	r3, [r5, #0]
 8006666:	b103      	cbz	r3, 800666a <_close_r+0x1a>
 8006668:	6023      	str	r3, [r4, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	200004a8 	.word	0x200004a8

08006670 <_lseek_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d07      	ldr	r5, [pc, #28]	@ (8006690 <_lseek_r+0x20>)
 8006674:	4604      	mov	r4, r0
 8006676:	4608      	mov	r0, r1
 8006678:	4611      	mov	r1, r2
 800667a:	2200      	movs	r2, #0
 800667c:	602a      	str	r2, [r5, #0]
 800667e:	461a      	mov	r2, r3
 8006680:	f7fb fa5c 	bl	8001b3c <_lseek>
 8006684:	1c43      	adds	r3, r0, #1
 8006686:	d102      	bne.n	800668e <_lseek_r+0x1e>
 8006688:	682b      	ldr	r3, [r5, #0]
 800668a:	b103      	cbz	r3, 800668e <_lseek_r+0x1e>
 800668c:	6023      	str	r3, [r4, #0]
 800668e:	bd38      	pop	{r3, r4, r5, pc}
 8006690:	200004a8 	.word	0x200004a8

08006694 <_read_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d07      	ldr	r5, [pc, #28]	@ (80066b4 <_read_r+0x20>)
 8006698:	4604      	mov	r4, r0
 800669a:	4608      	mov	r0, r1
 800669c:	4611      	mov	r1, r2
 800669e:	2200      	movs	r2, #0
 80066a0:	602a      	str	r2, [r5, #0]
 80066a2:	461a      	mov	r2, r3
 80066a4:	f7fb f9ea 	bl	8001a7c <_read>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d102      	bne.n	80066b2 <_read_r+0x1e>
 80066ac:	682b      	ldr	r3, [r5, #0]
 80066ae:	b103      	cbz	r3, 80066b2 <_read_r+0x1e>
 80066b0:	6023      	str	r3, [r4, #0]
 80066b2:	bd38      	pop	{r3, r4, r5, pc}
 80066b4:	200004a8 	.word	0x200004a8

080066b8 <_write_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4d07      	ldr	r5, [pc, #28]	@ (80066d8 <_write_r+0x20>)
 80066bc:	4604      	mov	r4, r0
 80066be:	4608      	mov	r0, r1
 80066c0:	4611      	mov	r1, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	602a      	str	r2, [r5, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f7fb f9f5 	bl	8001ab6 <_write>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_write_r+0x1e>
 80066d0:	682b      	ldr	r3, [r5, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_write_r+0x1e>
 80066d4:	6023      	str	r3, [r4, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	200004a8 	.word	0x200004a8

080066dc <__errno>:
 80066dc:	4b01      	ldr	r3, [pc, #4]	@ (80066e4 <__errno+0x8>)
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	2000004c 	.word	0x2000004c

080066e8 <__libc_init_array>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006720 <__libc_init_array+0x38>)
 80066ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006724 <__libc_init_array+0x3c>)
 80066ee:	1b64      	subs	r4, r4, r5
 80066f0:	10a4      	asrs	r4, r4, #2
 80066f2:	2600      	movs	r6, #0
 80066f4:	42a6      	cmp	r6, r4
 80066f6:	d109      	bne.n	800670c <__libc_init_array+0x24>
 80066f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006728 <__libc_init_array+0x40>)
 80066fa:	4c0c      	ldr	r4, [pc, #48]	@ (800672c <__libc_init_array+0x44>)
 80066fc:	f002 fa12 	bl	8008b24 <_init>
 8006700:	1b64      	subs	r4, r4, r5
 8006702:	10a4      	asrs	r4, r4, #2
 8006704:	2600      	movs	r6, #0
 8006706:	42a6      	cmp	r6, r4
 8006708:	d105      	bne.n	8006716 <__libc_init_array+0x2e>
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006710:	4798      	blx	r3
 8006712:	3601      	adds	r6, #1
 8006714:	e7ee      	b.n	80066f4 <__libc_init_array+0xc>
 8006716:	f855 3b04 	ldr.w	r3, [r5], #4
 800671a:	4798      	blx	r3
 800671c:	3601      	adds	r6, #1
 800671e:	e7f2      	b.n	8006706 <__libc_init_array+0x1e>
 8006720:	08008f90 	.word	0x08008f90
 8006724:	08008f90 	.word	0x08008f90
 8006728:	08008f90 	.word	0x08008f90
 800672c:	08008f94 	.word	0x08008f94

08006730 <__retarget_lock_init_recursive>:
 8006730:	4770      	bx	lr

08006732 <__retarget_lock_acquire_recursive>:
 8006732:	4770      	bx	lr

08006734 <__retarget_lock_release_recursive>:
 8006734:	4770      	bx	lr

08006736 <memcpy>:
 8006736:	440a      	add	r2, r1
 8006738:	4291      	cmp	r1, r2
 800673a:	f100 33ff 	add.w	r3, r0, #4294967295
 800673e:	d100      	bne.n	8006742 <memcpy+0xc>
 8006740:	4770      	bx	lr
 8006742:	b510      	push	{r4, lr}
 8006744:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800674c:	4291      	cmp	r1, r2
 800674e:	d1f9      	bne.n	8006744 <memcpy+0xe>
 8006750:	bd10      	pop	{r4, pc}

08006752 <quorem>:
 8006752:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006756:	6903      	ldr	r3, [r0, #16]
 8006758:	690c      	ldr	r4, [r1, #16]
 800675a:	42a3      	cmp	r3, r4
 800675c:	4607      	mov	r7, r0
 800675e:	db7e      	blt.n	800685e <quorem+0x10c>
 8006760:	3c01      	subs	r4, #1
 8006762:	f101 0814 	add.w	r8, r1, #20
 8006766:	00a3      	lsls	r3, r4, #2
 8006768:	f100 0514 	add.w	r5, r0, #20
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006778:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800677c:	3301      	adds	r3, #1
 800677e:	429a      	cmp	r2, r3
 8006780:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006784:	fbb2 f6f3 	udiv	r6, r2, r3
 8006788:	d32e      	bcc.n	80067e8 <quorem+0x96>
 800678a:	f04f 0a00 	mov.w	sl, #0
 800678e:	46c4      	mov	ip, r8
 8006790:	46ae      	mov	lr, r5
 8006792:	46d3      	mov	fp, sl
 8006794:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006798:	b298      	uxth	r0, r3
 800679a:	fb06 a000 	mla	r0, r6, r0, sl
 800679e:	0c02      	lsrs	r2, r0, #16
 80067a0:	0c1b      	lsrs	r3, r3, #16
 80067a2:	fb06 2303 	mla	r3, r6, r3, r2
 80067a6:	f8de 2000 	ldr.w	r2, [lr]
 80067aa:	b280      	uxth	r0, r0
 80067ac:	b292      	uxth	r2, r2
 80067ae:	1a12      	subs	r2, r2, r0
 80067b0:	445a      	add	r2, fp
 80067b2:	f8de 0000 	ldr.w	r0, [lr]
 80067b6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80067c0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80067c4:	b292      	uxth	r2, r2
 80067c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80067ca:	45e1      	cmp	r9, ip
 80067cc:	f84e 2b04 	str.w	r2, [lr], #4
 80067d0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80067d4:	d2de      	bcs.n	8006794 <quorem+0x42>
 80067d6:	9b00      	ldr	r3, [sp, #0]
 80067d8:	58eb      	ldr	r3, [r5, r3]
 80067da:	b92b      	cbnz	r3, 80067e8 <quorem+0x96>
 80067dc:	9b01      	ldr	r3, [sp, #4]
 80067de:	3b04      	subs	r3, #4
 80067e0:	429d      	cmp	r5, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	d32f      	bcc.n	8006846 <quorem+0xf4>
 80067e6:	613c      	str	r4, [r7, #16]
 80067e8:	4638      	mov	r0, r7
 80067ea:	f001 f97b 	bl	8007ae4 <__mcmp>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	db25      	blt.n	800683e <quorem+0xec>
 80067f2:	4629      	mov	r1, r5
 80067f4:	2000      	movs	r0, #0
 80067f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80067fa:	f8d1 c000 	ldr.w	ip, [r1]
 80067fe:	fa1f fe82 	uxth.w	lr, r2
 8006802:	fa1f f38c 	uxth.w	r3, ip
 8006806:	eba3 030e 	sub.w	r3, r3, lr
 800680a:	4403      	add	r3, r0
 800680c:	0c12      	lsrs	r2, r2, #16
 800680e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006812:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006816:	b29b      	uxth	r3, r3
 8006818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800681c:	45c1      	cmp	r9, r8
 800681e:	f841 3b04 	str.w	r3, [r1], #4
 8006822:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006826:	d2e6      	bcs.n	80067f6 <quorem+0xa4>
 8006828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800682c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006830:	b922      	cbnz	r2, 800683c <quorem+0xea>
 8006832:	3b04      	subs	r3, #4
 8006834:	429d      	cmp	r5, r3
 8006836:	461a      	mov	r2, r3
 8006838:	d30b      	bcc.n	8006852 <quorem+0x100>
 800683a:	613c      	str	r4, [r7, #16]
 800683c:	3601      	adds	r6, #1
 800683e:	4630      	mov	r0, r6
 8006840:	b003      	add	sp, #12
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	3b04      	subs	r3, #4
 800684a:	2a00      	cmp	r2, #0
 800684c:	d1cb      	bne.n	80067e6 <quorem+0x94>
 800684e:	3c01      	subs	r4, #1
 8006850:	e7c6      	b.n	80067e0 <quorem+0x8e>
 8006852:	6812      	ldr	r2, [r2, #0]
 8006854:	3b04      	subs	r3, #4
 8006856:	2a00      	cmp	r2, #0
 8006858:	d1ef      	bne.n	800683a <quorem+0xe8>
 800685a:	3c01      	subs	r4, #1
 800685c:	e7ea      	b.n	8006834 <quorem+0xe2>
 800685e:	2000      	movs	r0, #0
 8006860:	e7ee      	b.n	8006840 <quorem+0xee>
 8006862:	0000      	movs	r0, r0
 8006864:	0000      	movs	r0, r0
	...

08006868 <_dtoa_r>:
 8006868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800686c:	69c7      	ldr	r7, [r0, #28]
 800686e:	b099      	sub	sp, #100	@ 0x64
 8006870:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006874:	ec55 4b10 	vmov	r4, r5, d0
 8006878:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800687a:	9109      	str	r1, [sp, #36]	@ 0x24
 800687c:	4683      	mov	fp, r0
 800687e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006880:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006882:	b97f      	cbnz	r7, 80068a4 <_dtoa_r+0x3c>
 8006884:	2010      	movs	r0, #16
 8006886:	f000 fdfd 	bl	8007484 <malloc>
 800688a:	4602      	mov	r2, r0
 800688c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006890:	b920      	cbnz	r0, 800689c <_dtoa_r+0x34>
 8006892:	4ba7      	ldr	r3, [pc, #668]	@ (8006b30 <_dtoa_r+0x2c8>)
 8006894:	21ef      	movs	r1, #239	@ 0xef
 8006896:	48a7      	ldr	r0, [pc, #668]	@ (8006b34 <_dtoa_r+0x2cc>)
 8006898:	f001 fc5a 	bl	8008150 <__assert_func>
 800689c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80068a0:	6007      	str	r7, [r0, #0]
 80068a2:	60c7      	str	r7, [r0, #12]
 80068a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068a8:	6819      	ldr	r1, [r3, #0]
 80068aa:	b159      	cbz	r1, 80068c4 <_dtoa_r+0x5c>
 80068ac:	685a      	ldr	r2, [r3, #4]
 80068ae:	604a      	str	r2, [r1, #4]
 80068b0:	2301      	movs	r3, #1
 80068b2:	4093      	lsls	r3, r2
 80068b4:	608b      	str	r3, [r1, #8]
 80068b6:	4658      	mov	r0, fp
 80068b8:	f000 feda 	bl	8007670 <_Bfree>
 80068bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068c0:	2200      	movs	r2, #0
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	1e2b      	subs	r3, r5, #0
 80068c6:	bfb9      	ittee	lt
 80068c8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80068cc:	9303      	strlt	r3, [sp, #12]
 80068ce:	2300      	movge	r3, #0
 80068d0:	6033      	strge	r3, [r6, #0]
 80068d2:	9f03      	ldr	r7, [sp, #12]
 80068d4:	4b98      	ldr	r3, [pc, #608]	@ (8006b38 <_dtoa_r+0x2d0>)
 80068d6:	bfbc      	itt	lt
 80068d8:	2201      	movlt	r2, #1
 80068da:	6032      	strlt	r2, [r6, #0]
 80068dc:	43bb      	bics	r3, r7
 80068de:	d112      	bne.n	8006906 <_dtoa_r+0x9e>
 80068e0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80068e2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068ec:	4323      	orrs	r3, r4
 80068ee:	f000 854d 	beq.w	800738c <_dtoa_r+0xb24>
 80068f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006b4c <_dtoa_r+0x2e4>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 854f 	beq.w	800739c <_dtoa_r+0xb34>
 80068fe:	f10a 0303 	add.w	r3, sl, #3
 8006902:	f000 bd49 	b.w	8007398 <_dtoa_r+0xb30>
 8006906:	ed9d 7b02 	vldr	d7, [sp, #8]
 800690a:	2200      	movs	r2, #0
 800690c:	ec51 0b17 	vmov	r0, r1, d7
 8006910:	2300      	movs	r3, #0
 8006912:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006916:	f7fa f8ef 	bl	8000af8 <__aeabi_dcmpeq>
 800691a:	4680      	mov	r8, r0
 800691c:	b158      	cbz	r0, 8006936 <_dtoa_r+0xce>
 800691e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006920:	2301      	movs	r3, #1
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006926:	b113      	cbz	r3, 800692e <_dtoa_r+0xc6>
 8006928:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800692a:	4b84      	ldr	r3, [pc, #528]	@ (8006b3c <_dtoa_r+0x2d4>)
 800692c:	6013      	str	r3, [r2, #0]
 800692e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006b50 <_dtoa_r+0x2e8>
 8006932:	f000 bd33 	b.w	800739c <_dtoa_r+0xb34>
 8006936:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800693a:	aa16      	add	r2, sp, #88	@ 0x58
 800693c:	a917      	add	r1, sp, #92	@ 0x5c
 800693e:	4658      	mov	r0, fp
 8006940:	f001 f980 	bl	8007c44 <__d2b>
 8006944:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006948:	4681      	mov	r9, r0
 800694a:	2e00      	cmp	r6, #0
 800694c:	d077      	beq.n	8006a3e <_dtoa_r+0x1d6>
 800694e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006950:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800695c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006960:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006964:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006968:	4619      	mov	r1, r3
 800696a:	2200      	movs	r2, #0
 800696c:	4b74      	ldr	r3, [pc, #464]	@ (8006b40 <_dtoa_r+0x2d8>)
 800696e:	f7f9 fca3 	bl	80002b8 <__aeabi_dsub>
 8006972:	a369      	add	r3, pc, #420	@ (adr r3, 8006b18 <_dtoa_r+0x2b0>)
 8006974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006978:	f7f9 fe56 	bl	8000628 <__aeabi_dmul>
 800697c:	a368      	add	r3, pc, #416	@ (adr r3, 8006b20 <_dtoa_r+0x2b8>)
 800697e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006982:	f7f9 fc9b 	bl	80002bc <__adddf3>
 8006986:	4604      	mov	r4, r0
 8006988:	4630      	mov	r0, r6
 800698a:	460d      	mov	r5, r1
 800698c:	f7f9 fde2 	bl	8000554 <__aeabi_i2d>
 8006990:	a365      	add	r3, pc, #404	@ (adr r3, 8006b28 <_dtoa_r+0x2c0>)
 8006992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006996:	f7f9 fe47 	bl	8000628 <__aeabi_dmul>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4620      	mov	r0, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	f7f9 fc8b 	bl	80002bc <__adddf3>
 80069a6:	4604      	mov	r4, r0
 80069a8:	460d      	mov	r5, r1
 80069aa:	f7fa f8ed 	bl	8000b88 <__aeabi_d2iz>
 80069ae:	2200      	movs	r2, #0
 80069b0:	4607      	mov	r7, r0
 80069b2:	2300      	movs	r3, #0
 80069b4:	4620      	mov	r0, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	f7fa f8a8 	bl	8000b0c <__aeabi_dcmplt>
 80069bc:	b140      	cbz	r0, 80069d0 <_dtoa_r+0x168>
 80069be:	4638      	mov	r0, r7
 80069c0:	f7f9 fdc8 	bl	8000554 <__aeabi_i2d>
 80069c4:	4622      	mov	r2, r4
 80069c6:	462b      	mov	r3, r5
 80069c8:	f7fa f896 	bl	8000af8 <__aeabi_dcmpeq>
 80069cc:	b900      	cbnz	r0, 80069d0 <_dtoa_r+0x168>
 80069ce:	3f01      	subs	r7, #1
 80069d0:	2f16      	cmp	r7, #22
 80069d2:	d851      	bhi.n	8006a78 <_dtoa_r+0x210>
 80069d4:	4b5b      	ldr	r3, [pc, #364]	@ (8006b44 <_dtoa_r+0x2dc>)
 80069d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069e2:	f7fa f893 	bl	8000b0c <__aeabi_dcmplt>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d048      	beq.n	8006a7c <_dtoa_r+0x214>
 80069ea:	3f01      	subs	r7, #1
 80069ec:	2300      	movs	r3, #0
 80069ee:	9312      	str	r3, [sp, #72]	@ 0x48
 80069f0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80069f2:	1b9b      	subs	r3, r3, r6
 80069f4:	1e5a      	subs	r2, r3, #1
 80069f6:	bf44      	itt	mi
 80069f8:	f1c3 0801 	rsbmi	r8, r3, #1
 80069fc:	2300      	movmi	r3, #0
 80069fe:	9208      	str	r2, [sp, #32]
 8006a00:	bf54      	ite	pl
 8006a02:	f04f 0800 	movpl.w	r8, #0
 8006a06:	9308      	strmi	r3, [sp, #32]
 8006a08:	2f00      	cmp	r7, #0
 8006a0a:	db39      	blt.n	8006a80 <_dtoa_r+0x218>
 8006a0c:	9b08      	ldr	r3, [sp, #32]
 8006a0e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006a10:	443b      	add	r3, r7
 8006a12:	9308      	str	r3, [sp, #32]
 8006a14:	2300      	movs	r3, #0
 8006a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1a:	2b09      	cmp	r3, #9
 8006a1c:	d864      	bhi.n	8006ae8 <_dtoa_r+0x280>
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	bfc4      	itt	gt
 8006a22:	3b04      	subgt	r3, #4
 8006a24:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a28:	f1a3 0302 	sub.w	r3, r3, #2
 8006a2c:	bfcc      	ite	gt
 8006a2e:	2400      	movgt	r4, #0
 8006a30:	2401      	movle	r4, #1
 8006a32:	2b03      	cmp	r3, #3
 8006a34:	d863      	bhi.n	8006afe <_dtoa_r+0x296>
 8006a36:	e8df f003 	tbb	[pc, r3]
 8006a3a:	372a      	.short	0x372a
 8006a3c:	5535      	.short	0x5535
 8006a3e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006a42:	441e      	add	r6, r3
 8006a44:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	bfc1      	itttt	gt
 8006a4c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006a50:	409f      	lslgt	r7, r3
 8006a52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006a56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a5a:	bfd6      	itet	le
 8006a5c:	f1c3 0320 	rsble	r3, r3, #32
 8006a60:	ea47 0003 	orrgt.w	r0, r7, r3
 8006a64:	fa04 f003 	lslle.w	r0, r4, r3
 8006a68:	f7f9 fd64 	bl	8000534 <__aeabi_ui2d>
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a72:	3e01      	subs	r6, #1
 8006a74:	9214      	str	r2, [sp, #80]	@ 0x50
 8006a76:	e777      	b.n	8006968 <_dtoa_r+0x100>
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e7b8      	b.n	80069ee <_dtoa_r+0x186>
 8006a7c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006a7e:	e7b7      	b.n	80069f0 <_dtoa_r+0x188>
 8006a80:	427b      	negs	r3, r7
 8006a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a84:	2300      	movs	r3, #0
 8006a86:	eba8 0807 	sub.w	r8, r8, r7
 8006a8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a8c:	e7c4      	b.n	8006a18 <_dtoa_r+0x1b0>
 8006a8e:	2300      	movs	r3, #0
 8006a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	dc35      	bgt.n	8006b04 <_dtoa_r+0x29c>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	9307      	str	r3, [sp, #28]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006aa2:	e00b      	b.n	8006abc <_dtoa_r+0x254>
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e7f3      	b.n	8006a90 <_dtoa_r+0x228>
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aae:	18fb      	adds	r3, r7, r3
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	2b01      	cmp	r3, #1
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	bfb8      	it	lt
 8006aba:	2301      	movlt	r3, #1
 8006abc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	2204      	movs	r2, #4
 8006ac4:	f102 0514 	add.w	r5, r2, #20
 8006ac8:	429d      	cmp	r5, r3
 8006aca:	d91f      	bls.n	8006b0c <_dtoa_r+0x2a4>
 8006acc:	6041      	str	r1, [r0, #4]
 8006ace:	4658      	mov	r0, fp
 8006ad0:	f000 fd8e 	bl	80075f0 <_Balloc>
 8006ad4:	4682      	mov	sl, r0
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d13c      	bne.n	8006b54 <_dtoa_r+0x2ec>
 8006ada:	4b1b      	ldr	r3, [pc, #108]	@ (8006b48 <_dtoa_r+0x2e0>)
 8006adc:	4602      	mov	r2, r0
 8006ade:	f240 11af 	movw	r1, #431	@ 0x1af
 8006ae2:	e6d8      	b.n	8006896 <_dtoa_r+0x2e>
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e7e0      	b.n	8006aaa <_dtoa_r+0x242>
 8006ae8:	2401      	movs	r4, #1
 8006aea:	2300      	movs	r3, #0
 8006aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006aee:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295
 8006af4:	9300      	str	r3, [sp, #0]
 8006af6:	9307      	str	r3, [sp, #28]
 8006af8:	2200      	movs	r2, #0
 8006afa:	2312      	movs	r3, #18
 8006afc:	e7d0      	b.n	8006aa0 <_dtoa_r+0x238>
 8006afe:	2301      	movs	r3, #1
 8006b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b02:	e7f5      	b.n	8006af0 <_dtoa_r+0x288>
 8006b04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b06:	9300      	str	r3, [sp, #0]
 8006b08:	9307      	str	r3, [sp, #28]
 8006b0a:	e7d7      	b.n	8006abc <_dtoa_r+0x254>
 8006b0c:	3101      	adds	r1, #1
 8006b0e:	0052      	lsls	r2, r2, #1
 8006b10:	e7d8      	b.n	8006ac4 <_dtoa_r+0x25c>
 8006b12:	bf00      	nop
 8006b14:	f3af 8000 	nop.w
 8006b18:	636f4361 	.word	0x636f4361
 8006b1c:	3fd287a7 	.word	0x3fd287a7
 8006b20:	8b60c8b3 	.word	0x8b60c8b3
 8006b24:	3fc68a28 	.word	0x3fc68a28
 8006b28:	509f79fb 	.word	0x509f79fb
 8006b2c:	3fd34413 	.word	0x3fd34413
 8006b30:	08008c21 	.word	0x08008c21
 8006b34:	08008c38 	.word	0x08008c38
 8006b38:	7ff00000 	.word	0x7ff00000
 8006b3c:	08008bf1 	.word	0x08008bf1
 8006b40:	3ff80000 	.word	0x3ff80000
 8006b44:	08008d30 	.word	0x08008d30
 8006b48:	08008c90 	.word	0x08008c90
 8006b4c:	08008c1d 	.word	0x08008c1d
 8006b50:	08008bf0 	.word	0x08008bf0
 8006b54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006b58:	6018      	str	r0, [r3, #0]
 8006b5a:	9b07      	ldr	r3, [sp, #28]
 8006b5c:	2b0e      	cmp	r3, #14
 8006b5e:	f200 80a4 	bhi.w	8006caa <_dtoa_r+0x442>
 8006b62:	2c00      	cmp	r4, #0
 8006b64:	f000 80a1 	beq.w	8006caa <_dtoa_r+0x442>
 8006b68:	2f00      	cmp	r7, #0
 8006b6a:	dd33      	ble.n	8006bd4 <_dtoa_r+0x36c>
 8006b6c:	4bad      	ldr	r3, [pc, #692]	@ (8006e24 <_dtoa_r+0x5bc>)
 8006b6e:	f007 020f 	and.w	r2, r7, #15
 8006b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b76:	ed93 7b00 	vldr	d7, [r3]
 8006b7a:	05f8      	lsls	r0, r7, #23
 8006b7c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006b80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b84:	d516      	bpl.n	8006bb4 <_dtoa_r+0x34c>
 8006b86:	4ba8      	ldr	r3, [pc, #672]	@ (8006e28 <_dtoa_r+0x5c0>)
 8006b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b90:	f7f9 fe74 	bl	800087c <__aeabi_ddiv>
 8006b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b98:	f004 040f 	and.w	r4, r4, #15
 8006b9c:	2603      	movs	r6, #3
 8006b9e:	4da2      	ldr	r5, [pc, #648]	@ (8006e28 <_dtoa_r+0x5c0>)
 8006ba0:	b954      	cbnz	r4, 8006bb8 <_dtoa_r+0x350>
 8006ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ba6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006baa:	f7f9 fe67 	bl	800087c <__aeabi_ddiv>
 8006bae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bb2:	e028      	b.n	8006c06 <_dtoa_r+0x39e>
 8006bb4:	2602      	movs	r6, #2
 8006bb6:	e7f2      	b.n	8006b9e <_dtoa_r+0x336>
 8006bb8:	07e1      	lsls	r1, r4, #31
 8006bba:	d508      	bpl.n	8006bce <_dtoa_r+0x366>
 8006bbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006bc4:	f7f9 fd30 	bl	8000628 <__aeabi_dmul>
 8006bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006bcc:	3601      	adds	r6, #1
 8006bce:	1064      	asrs	r4, r4, #1
 8006bd0:	3508      	adds	r5, #8
 8006bd2:	e7e5      	b.n	8006ba0 <_dtoa_r+0x338>
 8006bd4:	f000 80d2 	beq.w	8006d7c <_dtoa_r+0x514>
 8006bd8:	427c      	negs	r4, r7
 8006bda:	4b92      	ldr	r3, [pc, #584]	@ (8006e24 <_dtoa_r+0x5bc>)
 8006bdc:	4d92      	ldr	r5, [pc, #584]	@ (8006e28 <_dtoa_r+0x5c0>)
 8006bde:	f004 020f 	and.w	r2, r4, #15
 8006be2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bee:	f7f9 fd1b 	bl	8000628 <__aeabi_dmul>
 8006bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bf6:	1124      	asrs	r4, r4, #4
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	2602      	movs	r6, #2
 8006bfc:	2c00      	cmp	r4, #0
 8006bfe:	f040 80b2 	bne.w	8006d66 <_dtoa_r+0x4fe>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1d3      	bne.n	8006bae <_dtoa_r+0x346>
 8006c06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c08:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f000 80b7 	beq.w	8006d80 <_dtoa_r+0x518>
 8006c12:	4b86      	ldr	r3, [pc, #536]	@ (8006e2c <_dtoa_r+0x5c4>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	4620      	mov	r0, r4
 8006c18:	4629      	mov	r1, r5
 8006c1a:	f7f9 ff77 	bl	8000b0c <__aeabi_dcmplt>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	f000 80ae 	beq.w	8006d80 <_dtoa_r+0x518>
 8006c24:	9b07      	ldr	r3, [sp, #28]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80aa 	beq.w	8006d80 <_dtoa_r+0x518>
 8006c2c:	9b00      	ldr	r3, [sp, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	dd37      	ble.n	8006ca2 <_dtoa_r+0x43a>
 8006c32:	1e7b      	subs	r3, r7, #1
 8006c34:	9304      	str	r3, [sp, #16]
 8006c36:	4620      	mov	r0, r4
 8006c38:	4b7d      	ldr	r3, [pc, #500]	@ (8006e30 <_dtoa_r+0x5c8>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	4629      	mov	r1, r5
 8006c3e:	f7f9 fcf3 	bl	8000628 <__aeabi_dmul>
 8006c42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c46:	9c00      	ldr	r4, [sp, #0]
 8006c48:	3601      	adds	r6, #1
 8006c4a:	4630      	mov	r0, r6
 8006c4c:	f7f9 fc82 	bl	8000554 <__aeabi_i2d>
 8006c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c54:	f7f9 fce8 	bl	8000628 <__aeabi_dmul>
 8006c58:	4b76      	ldr	r3, [pc, #472]	@ (8006e34 <_dtoa_r+0x5cc>)
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f7f9 fb2e 	bl	80002bc <__adddf3>
 8006c60:	4605      	mov	r5, r0
 8006c62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c66:	2c00      	cmp	r4, #0
 8006c68:	f040 808d 	bne.w	8006d86 <_dtoa_r+0x51e>
 8006c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c70:	4b71      	ldr	r3, [pc, #452]	@ (8006e38 <_dtoa_r+0x5d0>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	f7f9 fb20 	bl	80002b8 <__aeabi_dsub>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c80:	462a      	mov	r2, r5
 8006c82:	4633      	mov	r3, r6
 8006c84:	f7f9 ff60 	bl	8000b48 <__aeabi_dcmpgt>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	f040 828b 	bne.w	80071a4 <_dtoa_r+0x93c>
 8006c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c92:	462a      	mov	r2, r5
 8006c94:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c98:	f7f9 ff38 	bl	8000b0c <__aeabi_dcmplt>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	f040 8128 	bne.w	8006ef2 <_dtoa_r+0x68a>
 8006ca2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006ca6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006caa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f2c0 815a 	blt.w	8006f66 <_dtoa_r+0x6fe>
 8006cb2:	2f0e      	cmp	r7, #14
 8006cb4:	f300 8157 	bgt.w	8006f66 <_dtoa_r+0x6fe>
 8006cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8006e24 <_dtoa_r+0x5bc>)
 8006cba:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006cbe:	ed93 7b00 	vldr	d7, [r3]
 8006cc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	ed8d 7b00 	vstr	d7, [sp]
 8006cca:	da03      	bge.n	8006cd4 <_dtoa_r+0x46c>
 8006ccc:	9b07      	ldr	r3, [sp, #28]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f340 8101 	ble.w	8006ed6 <_dtoa_r+0x66e>
 8006cd4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006cd8:	4656      	mov	r6, sl
 8006cda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cde:	4620      	mov	r0, r4
 8006ce0:	4629      	mov	r1, r5
 8006ce2:	f7f9 fdcb 	bl	800087c <__aeabi_ddiv>
 8006ce6:	f7f9 ff4f 	bl	8000b88 <__aeabi_d2iz>
 8006cea:	4680      	mov	r8, r0
 8006cec:	f7f9 fc32 	bl	8000554 <__aeabi_i2d>
 8006cf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cf4:	f7f9 fc98 	bl	8000628 <__aeabi_dmul>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	4629      	mov	r1, r5
 8006d00:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d04:	f7f9 fad8 	bl	80002b8 <__aeabi_dsub>
 8006d08:	f806 4b01 	strb.w	r4, [r6], #1
 8006d0c:	9d07      	ldr	r5, [sp, #28]
 8006d0e:	eba6 040a 	sub.w	r4, r6, sl
 8006d12:	42a5      	cmp	r5, r4
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	f040 8117 	bne.w	8006f4a <_dtoa_r+0x6e2>
 8006d1c:	f7f9 face 	bl	80002bc <__adddf3>
 8006d20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d24:	4604      	mov	r4, r0
 8006d26:	460d      	mov	r5, r1
 8006d28:	f7f9 ff0e 	bl	8000b48 <__aeabi_dcmpgt>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	f040 80f9 	bne.w	8006f24 <_dtoa_r+0x6bc>
 8006d32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006d36:	4620      	mov	r0, r4
 8006d38:	4629      	mov	r1, r5
 8006d3a:	f7f9 fedd 	bl	8000af8 <__aeabi_dcmpeq>
 8006d3e:	b118      	cbz	r0, 8006d48 <_dtoa_r+0x4e0>
 8006d40:	f018 0f01 	tst.w	r8, #1
 8006d44:	f040 80ee 	bne.w	8006f24 <_dtoa_r+0x6bc>
 8006d48:	4649      	mov	r1, r9
 8006d4a:	4658      	mov	r0, fp
 8006d4c:	f000 fc90 	bl	8007670 <_Bfree>
 8006d50:	2300      	movs	r3, #0
 8006d52:	7033      	strb	r3, [r6, #0]
 8006d54:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006d56:	3701      	adds	r7, #1
 8006d58:	601f      	str	r7, [r3, #0]
 8006d5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 831d 	beq.w	800739c <_dtoa_r+0xb34>
 8006d62:	601e      	str	r6, [r3, #0]
 8006d64:	e31a      	b.n	800739c <_dtoa_r+0xb34>
 8006d66:	07e2      	lsls	r2, r4, #31
 8006d68:	d505      	bpl.n	8006d76 <_dtoa_r+0x50e>
 8006d6a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d6e:	f7f9 fc5b 	bl	8000628 <__aeabi_dmul>
 8006d72:	3601      	adds	r6, #1
 8006d74:	2301      	movs	r3, #1
 8006d76:	1064      	asrs	r4, r4, #1
 8006d78:	3508      	adds	r5, #8
 8006d7a:	e73f      	b.n	8006bfc <_dtoa_r+0x394>
 8006d7c:	2602      	movs	r6, #2
 8006d7e:	e742      	b.n	8006c06 <_dtoa_r+0x39e>
 8006d80:	9c07      	ldr	r4, [sp, #28]
 8006d82:	9704      	str	r7, [sp, #16]
 8006d84:	e761      	b.n	8006c4a <_dtoa_r+0x3e2>
 8006d86:	4b27      	ldr	r3, [pc, #156]	@ (8006e24 <_dtoa_r+0x5bc>)
 8006d88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d8e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d92:	4454      	add	r4, sl
 8006d94:	2900      	cmp	r1, #0
 8006d96:	d053      	beq.n	8006e40 <_dtoa_r+0x5d8>
 8006d98:	4928      	ldr	r1, [pc, #160]	@ (8006e3c <_dtoa_r+0x5d4>)
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	f7f9 fd6e 	bl	800087c <__aeabi_ddiv>
 8006da0:	4633      	mov	r3, r6
 8006da2:	462a      	mov	r2, r5
 8006da4:	f7f9 fa88 	bl	80002b8 <__aeabi_dsub>
 8006da8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006dac:	4656      	mov	r6, sl
 8006dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006db2:	f7f9 fee9 	bl	8000b88 <__aeabi_d2iz>
 8006db6:	4605      	mov	r5, r0
 8006db8:	f7f9 fbcc 	bl	8000554 <__aeabi_i2d>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dc4:	f7f9 fa78 	bl	80002b8 <__aeabi_dsub>
 8006dc8:	3530      	adds	r5, #48	@ 0x30
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006dd2:	f806 5b01 	strb.w	r5, [r6], #1
 8006dd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006dda:	f7f9 fe97 	bl	8000b0c <__aeabi_dcmplt>
 8006dde:	2800      	cmp	r0, #0
 8006de0:	d171      	bne.n	8006ec6 <_dtoa_r+0x65e>
 8006de2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006de6:	4911      	ldr	r1, [pc, #68]	@ (8006e2c <_dtoa_r+0x5c4>)
 8006de8:	2000      	movs	r0, #0
 8006dea:	f7f9 fa65 	bl	80002b8 <__aeabi_dsub>
 8006dee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006df2:	f7f9 fe8b 	bl	8000b0c <__aeabi_dcmplt>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f040 8095 	bne.w	8006f26 <_dtoa_r+0x6be>
 8006dfc:	42a6      	cmp	r6, r4
 8006dfe:	f43f af50 	beq.w	8006ca2 <_dtoa_r+0x43a>
 8006e02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e06:	4b0a      	ldr	r3, [pc, #40]	@ (8006e30 <_dtoa_r+0x5c8>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f7f9 fc0d 	bl	8000628 <__aeabi_dmul>
 8006e0e:	4b08      	ldr	r3, [pc, #32]	@ (8006e30 <_dtoa_r+0x5c8>)
 8006e10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e14:	2200      	movs	r2, #0
 8006e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1a:	f7f9 fc05 	bl	8000628 <__aeabi_dmul>
 8006e1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e22:	e7c4      	b.n	8006dae <_dtoa_r+0x546>
 8006e24:	08008d30 	.word	0x08008d30
 8006e28:	08008d08 	.word	0x08008d08
 8006e2c:	3ff00000 	.word	0x3ff00000
 8006e30:	40240000 	.word	0x40240000
 8006e34:	401c0000 	.word	0x401c0000
 8006e38:	40140000 	.word	0x40140000
 8006e3c:	3fe00000 	.word	0x3fe00000
 8006e40:	4631      	mov	r1, r6
 8006e42:	4628      	mov	r0, r5
 8006e44:	f7f9 fbf0 	bl	8000628 <__aeabi_dmul>
 8006e48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e4c:	9415      	str	r4, [sp, #84]	@ 0x54
 8006e4e:	4656      	mov	r6, sl
 8006e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e54:	f7f9 fe98 	bl	8000b88 <__aeabi_d2iz>
 8006e58:	4605      	mov	r5, r0
 8006e5a:	f7f9 fb7b 	bl	8000554 <__aeabi_i2d>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e66:	f7f9 fa27 	bl	80002b8 <__aeabi_dsub>
 8006e6a:	3530      	adds	r5, #48	@ 0x30
 8006e6c:	f806 5b01 	strb.w	r5, [r6], #1
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	42a6      	cmp	r6, r4
 8006e76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	d124      	bne.n	8006eca <_dtoa_r+0x662>
 8006e80:	4bac      	ldr	r3, [pc, #688]	@ (8007134 <_dtoa_r+0x8cc>)
 8006e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e86:	f7f9 fa19 	bl	80002bc <__adddf3>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e92:	f7f9 fe59 	bl	8000b48 <__aeabi_dcmpgt>
 8006e96:	2800      	cmp	r0, #0
 8006e98:	d145      	bne.n	8006f26 <_dtoa_r+0x6be>
 8006e9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e9e:	49a5      	ldr	r1, [pc, #660]	@ (8007134 <_dtoa_r+0x8cc>)
 8006ea0:	2000      	movs	r0, #0
 8006ea2:	f7f9 fa09 	bl	80002b8 <__aeabi_dsub>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eae:	f7f9 fe2d 	bl	8000b0c <__aeabi_dcmplt>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	f43f aef5 	beq.w	8006ca2 <_dtoa_r+0x43a>
 8006eb8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006eba:	1e73      	subs	r3, r6, #1
 8006ebc:	9315      	str	r3, [sp, #84]	@ 0x54
 8006ebe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ec2:	2b30      	cmp	r3, #48	@ 0x30
 8006ec4:	d0f8      	beq.n	8006eb8 <_dtoa_r+0x650>
 8006ec6:	9f04      	ldr	r7, [sp, #16]
 8006ec8:	e73e      	b.n	8006d48 <_dtoa_r+0x4e0>
 8006eca:	4b9b      	ldr	r3, [pc, #620]	@ (8007138 <_dtoa_r+0x8d0>)
 8006ecc:	f7f9 fbac 	bl	8000628 <__aeabi_dmul>
 8006ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ed4:	e7bc      	b.n	8006e50 <_dtoa_r+0x5e8>
 8006ed6:	d10c      	bne.n	8006ef2 <_dtoa_r+0x68a>
 8006ed8:	4b98      	ldr	r3, [pc, #608]	@ (800713c <_dtoa_r+0x8d4>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ee0:	f7f9 fba2 	bl	8000628 <__aeabi_dmul>
 8006ee4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ee8:	f7f9 fe24 	bl	8000b34 <__aeabi_dcmpge>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	f000 8157 	beq.w	80071a0 <_dtoa_r+0x938>
 8006ef2:	2400      	movs	r4, #0
 8006ef4:	4625      	mov	r5, r4
 8006ef6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	9304      	str	r3, [sp, #16]
 8006efc:	4656      	mov	r6, sl
 8006efe:	2700      	movs	r7, #0
 8006f00:	4621      	mov	r1, r4
 8006f02:	4658      	mov	r0, fp
 8006f04:	f000 fbb4 	bl	8007670 <_Bfree>
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	d0dc      	beq.n	8006ec6 <_dtoa_r+0x65e>
 8006f0c:	b12f      	cbz	r7, 8006f1a <_dtoa_r+0x6b2>
 8006f0e:	42af      	cmp	r7, r5
 8006f10:	d003      	beq.n	8006f1a <_dtoa_r+0x6b2>
 8006f12:	4639      	mov	r1, r7
 8006f14:	4658      	mov	r0, fp
 8006f16:	f000 fbab 	bl	8007670 <_Bfree>
 8006f1a:	4629      	mov	r1, r5
 8006f1c:	4658      	mov	r0, fp
 8006f1e:	f000 fba7 	bl	8007670 <_Bfree>
 8006f22:	e7d0      	b.n	8006ec6 <_dtoa_r+0x65e>
 8006f24:	9704      	str	r7, [sp, #16]
 8006f26:	4633      	mov	r3, r6
 8006f28:	461e      	mov	r6, r3
 8006f2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f2e:	2a39      	cmp	r2, #57	@ 0x39
 8006f30:	d107      	bne.n	8006f42 <_dtoa_r+0x6da>
 8006f32:	459a      	cmp	sl, r3
 8006f34:	d1f8      	bne.n	8006f28 <_dtoa_r+0x6c0>
 8006f36:	9a04      	ldr	r2, [sp, #16]
 8006f38:	3201      	adds	r2, #1
 8006f3a:	9204      	str	r2, [sp, #16]
 8006f3c:	2230      	movs	r2, #48	@ 0x30
 8006f3e:	f88a 2000 	strb.w	r2, [sl]
 8006f42:	781a      	ldrb	r2, [r3, #0]
 8006f44:	3201      	adds	r2, #1
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	e7bd      	b.n	8006ec6 <_dtoa_r+0x65e>
 8006f4a:	4b7b      	ldr	r3, [pc, #492]	@ (8007138 <_dtoa_r+0x8d0>)
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f7f9 fb6b 	bl	8000628 <__aeabi_dmul>
 8006f52:	2200      	movs	r2, #0
 8006f54:	2300      	movs	r3, #0
 8006f56:	4604      	mov	r4, r0
 8006f58:	460d      	mov	r5, r1
 8006f5a:	f7f9 fdcd 	bl	8000af8 <__aeabi_dcmpeq>
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f43f aebb 	beq.w	8006cda <_dtoa_r+0x472>
 8006f64:	e6f0      	b.n	8006d48 <_dtoa_r+0x4e0>
 8006f66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006f68:	2a00      	cmp	r2, #0
 8006f6a:	f000 80db 	beq.w	8007124 <_dtoa_r+0x8bc>
 8006f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f70:	2a01      	cmp	r2, #1
 8006f72:	f300 80bf 	bgt.w	80070f4 <_dtoa_r+0x88c>
 8006f76:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006f78:	2a00      	cmp	r2, #0
 8006f7a:	f000 80b7 	beq.w	80070ec <_dtoa_r+0x884>
 8006f7e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f82:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f84:	4646      	mov	r6, r8
 8006f86:	9a08      	ldr	r2, [sp, #32]
 8006f88:	2101      	movs	r1, #1
 8006f8a:	441a      	add	r2, r3
 8006f8c:	4658      	mov	r0, fp
 8006f8e:	4498      	add	r8, r3
 8006f90:	9208      	str	r2, [sp, #32]
 8006f92:	f000 fc21 	bl	80077d8 <__i2b>
 8006f96:	4605      	mov	r5, r0
 8006f98:	b15e      	cbz	r6, 8006fb2 <_dtoa_r+0x74a>
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	dd08      	ble.n	8006fb2 <_dtoa_r+0x74a>
 8006fa0:	42b3      	cmp	r3, r6
 8006fa2:	9a08      	ldr	r2, [sp, #32]
 8006fa4:	bfa8      	it	ge
 8006fa6:	4633      	movge	r3, r6
 8006fa8:	eba8 0803 	sub.w	r8, r8, r3
 8006fac:	1af6      	subs	r6, r6, r3
 8006fae:	1ad3      	subs	r3, r2, r3
 8006fb0:	9308      	str	r3, [sp, #32]
 8006fb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb4:	b1f3      	cbz	r3, 8006ff4 <_dtoa_r+0x78c>
 8006fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f000 80b7 	beq.w	800712c <_dtoa_r+0x8c4>
 8006fbe:	b18c      	cbz	r4, 8006fe4 <_dtoa_r+0x77c>
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4622      	mov	r2, r4
 8006fc4:	4658      	mov	r0, fp
 8006fc6:	f000 fcc7 	bl	8007958 <__pow5mult>
 8006fca:	464a      	mov	r2, r9
 8006fcc:	4601      	mov	r1, r0
 8006fce:	4605      	mov	r5, r0
 8006fd0:	4658      	mov	r0, fp
 8006fd2:	f000 fc17 	bl	8007804 <__multiply>
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	9004      	str	r0, [sp, #16]
 8006fda:	4658      	mov	r0, fp
 8006fdc:	f000 fb48 	bl	8007670 <_Bfree>
 8006fe0:	9b04      	ldr	r3, [sp, #16]
 8006fe2:	4699      	mov	r9, r3
 8006fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fe6:	1b1a      	subs	r2, r3, r4
 8006fe8:	d004      	beq.n	8006ff4 <_dtoa_r+0x78c>
 8006fea:	4649      	mov	r1, r9
 8006fec:	4658      	mov	r0, fp
 8006fee:	f000 fcb3 	bl	8007958 <__pow5mult>
 8006ff2:	4681      	mov	r9, r0
 8006ff4:	2101      	movs	r1, #1
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	f000 fbee 	bl	80077d8 <__i2b>
 8006ffc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ffe:	4604      	mov	r4, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 81cf 	beq.w	80073a4 <_dtoa_r+0xb3c>
 8007006:	461a      	mov	r2, r3
 8007008:	4601      	mov	r1, r0
 800700a:	4658      	mov	r0, fp
 800700c:	f000 fca4 	bl	8007958 <__pow5mult>
 8007010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007012:	2b01      	cmp	r3, #1
 8007014:	4604      	mov	r4, r0
 8007016:	f300 8095 	bgt.w	8007144 <_dtoa_r+0x8dc>
 800701a:	9b02      	ldr	r3, [sp, #8]
 800701c:	2b00      	cmp	r3, #0
 800701e:	f040 8087 	bne.w	8007130 <_dtoa_r+0x8c8>
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007028:	2b00      	cmp	r3, #0
 800702a:	f040 8089 	bne.w	8007140 <_dtoa_r+0x8d8>
 800702e:	9b03      	ldr	r3, [sp, #12]
 8007030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007034:	0d1b      	lsrs	r3, r3, #20
 8007036:	051b      	lsls	r3, r3, #20
 8007038:	b12b      	cbz	r3, 8007046 <_dtoa_r+0x7de>
 800703a:	9b08      	ldr	r3, [sp, #32]
 800703c:	3301      	adds	r3, #1
 800703e:	9308      	str	r3, [sp, #32]
 8007040:	f108 0801 	add.w	r8, r8, #1
 8007044:	2301      	movs	r3, #1
 8007046:	930a      	str	r3, [sp, #40]	@ 0x28
 8007048:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 81b0 	beq.w	80073b0 <_dtoa_r+0xb48>
 8007050:	6923      	ldr	r3, [r4, #16]
 8007052:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007056:	6918      	ldr	r0, [r3, #16]
 8007058:	f000 fb72 	bl	8007740 <__hi0bits>
 800705c:	f1c0 0020 	rsb	r0, r0, #32
 8007060:	9b08      	ldr	r3, [sp, #32]
 8007062:	4418      	add	r0, r3
 8007064:	f010 001f 	ands.w	r0, r0, #31
 8007068:	d077      	beq.n	800715a <_dtoa_r+0x8f2>
 800706a:	f1c0 0320 	rsb	r3, r0, #32
 800706e:	2b04      	cmp	r3, #4
 8007070:	dd6b      	ble.n	800714a <_dtoa_r+0x8e2>
 8007072:	9b08      	ldr	r3, [sp, #32]
 8007074:	f1c0 001c 	rsb	r0, r0, #28
 8007078:	4403      	add	r3, r0
 800707a:	4480      	add	r8, r0
 800707c:	4406      	add	r6, r0
 800707e:	9308      	str	r3, [sp, #32]
 8007080:	f1b8 0f00 	cmp.w	r8, #0
 8007084:	dd05      	ble.n	8007092 <_dtoa_r+0x82a>
 8007086:	4649      	mov	r1, r9
 8007088:	4642      	mov	r2, r8
 800708a:	4658      	mov	r0, fp
 800708c:	f000 fcbe 	bl	8007a0c <__lshift>
 8007090:	4681      	mov	r9, r0
 8007092:	9b08      	ldr	r3, [sp, #32]
 8007094:	2b00      	cmp	r3, #0
 8007096:	dd05      	ble.n	80070a4 <_dtoa_r+0x83c>
 8007098:	4621      	mov	r1, r4
 800709a:	461a      	mov	r2, r3
 800709c:	4658      	mov	r0, fp
 800709e:	f000 fcb5 	bl	8007a0c <__lshift>
 80070a2:	4604      	mov	r4, r0
 80070a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d059      	beq.n	800715e <_dtoa_r+0x8f6>
 80070aa:	4621      	mov	r1, r4
 80070ac:	4648      	mov	r0, r9
 80070ae:	f000 fd19 	bl	8007ae4 <__mcmp>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	da53      	bge.n	800715e <_dtoa_r+0x8f6>
 80070b6:	1e7b      	subs	r3, r7, #1
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	4649      	mov	r1, r9
 80070bc:	2300      	movs	r3, #0
 80070be:	220a      	movs	r2, #10
 80070c0:	4658      	mov	r0, fp
 80070c2:	f000 faf7 	bl	80076b4 <__multadd>
 80070c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070c8:	4681      	mov	r9, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	f000 8172 	beq.w	80073b4 <_dtoa_r+0xb4c>
 80070d0:	2300      	movs	r3, #0
 80070d2:	4629      	mov	r1, r5
 80070d4:	220a      	movs	r2, #10
 80070d6:	4658      	mov	r0, fp
 80070d8:	f000 faec 	bl	80076b4 <__multadd>
 80070dc:	9b00      	ldr	r3, [sp, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	4605      	mov	r5, r0
 80070e2:	dc67      	bgt.n	80071b4 <_dtoa_r+0x94c>
 80070e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	dc41      	bgt.n	800716e <_dtoa_r+0x906>
 80070ea:	e063      	b.n	80071b4 <_dtoa_r+0x94c>
 80070ec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80070ee:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80070f2:	e746      	b.n	8006f82 <_dtoa_r+0x71a>
 80070f4:	9b07      	ldr	r3, [sp, #28]
 80070f6:	1e5c      	subs	r4, r3, #1
 80070f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070fa:	42a3      	cmp	r3, r4
 80070fc:	bfbf      	itttt	lt
 80070fe:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007100:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007102:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007104:	1ae3      	sublt	r3, r4, r3
 8007106:	bfb4      	ite	lt
 8007108:	18d2      	addlt	r2, r2, r3
 800710a:	1b1c      	subge	r4, r3, r4
 800710c:	9b07      	ldr	r3, [sp, #28]
 800710e:	bfbc      	itt	lt
 8007110:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007112:	2400      	movlt	r4, #0
 8007114:	2b00      	cmp	r3, #0
 8007116:	bfb5      	itete	lt
 8007118:	eba8 0603 	sublt.w	r6, r8, r3
 800711c:	9b07      	ldrge	r3, [sp, #28]
 800711e:	2300      	movlt	r3, #0
 8007120:	4646      	movge	r6, r8
 8007122:	e730      	b.n	8006f86 <_dtoa_r+0x71e>
 8007124:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007126:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007128:	4646      	mov	r6, r8
 800712a:	e735      	b.n	8006f98 <_dtoa_r+0x730>
 800712c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800712e:	e75c      	b.n	8006fea <_dtoa_r+0x782>
 8007130:	2300      	movs	r3, #0
 8007132:	e788      	b.n	8007046 <_dtoa_r+0x7de>
 8007134:	3fe00000 	.word	0x3fe00000
 8007138:	40240000 	.word	0x40240000
 800713c:	40140000 	.word	0x40140000
 8007140:	9b02      	ldr	r3, [sp, #8]
 8007142:	e780      	b.n	8007046 <_dtoa_r+0x7de>
 8007144:	2300      	movs	r3, #0
 8007146:	930a      	str	r3, [sp, #40]	@ 0x28
 8007148:	e782      	b.n	8007050 <_dtoa_r+0x7e8>
 800714a:	d099      	beq.n	8007080 <_dtoa_r+0x818>
 800714c:	9a08      	ldr	r2, [sp, #32]
 800714e:	331c      	adds	r3, #28
 8007150:	441a      	add	r2, r3
 8007152:	4498      	add	r8, r3
 8007154:	441e      	add	r6, r3
 8007156:	9208      	str	r2, [sp, #32]
 8007158:	e792      	b.n	8007080 <_dtoa_r+0x818>
 800715a:	4603      	mov	r3, r0
 800715c:	e7f6      	b.n	800714c <_dtoa_r+0x8e4>
 800715e:	9b07      	ldr	r3, [sp, #28]
 8007160:	9704      	str	r7, [sp, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	dc20      	bgt.n	80071a8 <_dtoa_r+0x940>
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800716a:	2b02      	cmp	r3, #2
 800716c:	dd1e      	ble.n	80071ac <_dtoa_r+0x944>
 800716e:	9b00      	ldr	r3, [sp, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f47f aec0 	bne.w	8006ef6 <_dtoa_r+0x68e>
 8007176:	4621      	mov	r1, r4
 8007178:	2205      	movs	r2, #5
 800717a:	4658      	mov	r0, fp
 800717c:	f000 fa9a 	bl	80076b4 <__multadd>
 8007180:	4601      	mov	r1, r0
 8007182:	4604      	mov	r4, r0
 8007184:	4648      	mov	r0, r9
 8007186:	f000 fcad 	bl	8007ae4 <__mcmp>
 800718a:	2800      	cmp	r0, #0
 800718c:	f77f aeb3 	ble.w	8006ef6 <_dtoa_r+0x68e>
 8007190:	4656      	mov	r6, sl
 8007192:	2331      	movs	r3, #49	@ 0x31
 8007194:	f806 3b01 	strb.w	r3, [r6], #1
 8007198:	9b04      	ldr	r3, [sp, #16]
 800719a:	3301      	adds	r3, #1
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	e6ae      	b.n	8006efe <_dtoa_r+0x696>
 80071a0:	9c07      	ldr	r4, [sp, #28]
 80071a2:	9704      	str	r7, [sp, #16]
 80071a4:	4625      	mov	r5, r4
 80071a6:	e7f3      	b.n	8007190 <_dtoa_r+0x928>
 80071a8:	9b07      	ldr	r3, [sp, #28]
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 8104 	beq.w	80073bc <_dtoa_r+0xb54>
 80071b4:	2e00      	cmp	r6, #0
 80071b6:	dd05      	ble.n	80071c4 <_dtoa_r+0x95c>
 80071b8:	4629      	mov	r1, r5
 80071ba:	4632      	mov	r2, r6
 80071bc:	4658      	mov	r0, fp
 80071be:	f000 fc25 	bl	8007a0c <__lshift>
 80071c2:	4605      	mov	r5, r0
 80071c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d05a      	beq.n	8007280 <_dtoa_r+0xa18>
 80071ca:	6869      	ldr	r1, [r5, #4]
 80071cc:	4658      	mov	r0, fp
 80071ce:	f000 fa0f 	bl	80075f0 <_Balloc>
 80071d2:	4606      	mov	r6, r0
 80071d4:	b928      	cbnz	r0, 80071e2 <_dtoa_r+0x97a>
 80071d6:	4b84      	ldr	r3, [pc, #528]	@ (80073e8 <_dtoa_r+0xb80>)
 80071d8:	4602      	mov	r2, r0
 80071da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80071de:	f7ff bb5a 	b.w	8006896 <_dtoa_r+0x2e>
 80071e2:	692a      	ldr	r2, [r5, #16]
 80071e4:	3202      	adds	r2, #2
 80071e6:	0092      	lsls	r2, r2, #2
 80071e8:	f105 010c 	add.w	r1, r5, #12
 80071ec:	300c      	adds	r0, #12
 80071ee:	f7ff faa2 	bl	8006736 <memcpy>
 80071f2:	2201      	movs	r2, #1
 80071f4:	4631      	mov	r1, r6
 80071f6:	4658      	mov	r0, fp
 80071f8:	f000 fc08 	bl	8007a0c <__lshift>
 80071fc:	f10a 0301 	add.w	r3, sl, #1
 8007200:	9307      	str	r3, [sp, #28]
 8007202:	9b00      	ldr	r3, [sp, #0]
 8007204:	4453      	add	r3, sl
 8007206:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007208:	9b02      	ldr	r3, [sp, #8]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	462f      	mov	r7, r5
 8007210:	930a      	str	r3, [sp, #40]	@ 0x28
 8007212:	4605      	mov	r5, r0
 8007214:	9b07      	ldr	r3, [sp, #28]
 8007216:	4621      	mov	r1, r4
 8007218:	3b01      	subs	r3, #1
 800721a:	4648      	mov	r0, r9
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	f7ff fa98 	bl	8006752 <quorem>
 8007222:	4639      	mov	r1, r7
 8007224:	9002      	str	r0, [sp, #8]
 8007226:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800722a:	4648      	mov	r0, r9
 800722c:	f000 fc5a 	bl	8007ae4 <__mcmp>
 8007230:	462a      	mov	r2, r5
 8007232:	9008      	str	r0, [sp, #32]
 8007234:	4621      	mov	r1, r4
 8007236:	4658      	mov	r0, fp
 8007238:	f000 fc70 	bl	8007b1c <__mdiff>
 800723c:	68c2      	ldr	r2, [r0, #12]
 800723e:	4606      	mov	r6, r0
 8007240:	bb02      	cbnz	r2, 8007284 <_dtoa_r+0xa1c>
 8007242:	4601      	mov	r1, r0
 8007244:	4648      	mov	r0, r9
 8007246:	f000 fc4d 	bl	8007ae4 <__mcmp>
 800724a:	4602      	mov	r2, r0
 800724c:	4631      	mov	r1, r6
 800724e:	4658      	mov	r0, fp
 8007250:	920e      	str	r2, [sp, #56]	@ 0x38
 8007252:	f000 fa0d 	bl	8007670 <_Bfree>
 8007256:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800725a:	9e07      	ldr	r6, [sp, #28]
 800725c:	ea43 0102 	orr.w	r1, r3, r2
 8007260:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007262:	4319      	orrs	r1, r3
 8007264:	d110      	bne.n	8007288 <_dtoa_r+0xa20>
 8007266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800726a:	d029      	beq.n	80072c0 <_dtoa_r+0xa58>
 800726c:	9b08      	ldr	r3, [sp, #32]
 800726e:	2b00      	cmp	r3, #0
 8007270:	dd02      	ble.n	8007278 <_dtoa_r+0xa10>
 8007272:	9b02      	ldr	r3, [sp, #8]
 8007274:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007278:	9b00      	ldr	r3, [sp, #0]
 800727a:	f883 8000 	strb.w	r8, [r3]
 800727e:	e63f      	b.n	8006f00 <_dtoa_r+0x698>
 8007280:	4628      	mov	r0, r5
 8007282:	e7bb      	b.n	80071fc <_dtoa_r+0x994>
 8007284:	2201      	movs	r2, #1
 8007286:	e7e1      	b.n	800724c <_dtoa_r+0x9e4>
 8007288:	9b08      	ldr	r3, [sp, #32]
 800728a:	2b00      	cmp	r3, #0
 800728c:	db04      	blt.n	8007298 <_dtoa_r+0xa30>
 800728e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007290:	430b      	orrs	r3, r1
 8007292:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007294:	430b      	orrs	r3, r1
 8007296:	d120      	bne.n	80072da <_dtoa_r+0xa72>
 8007298:	2a00      	cmp	r2, #0
 800729a:	dded      	ble.n	8007278 <_dtoa_r+0xa10>
 800729c:	4649      	mov	r1, r9
 800729e:	2201      	movs	r2, #1
 80072a0:	4658      	mov	r0, fp
 80072a2:	f000 fbb3 	bl	8007a0c <__lshift>
 80072a6:	4621      	mov	r1, r4
 80072a8:	4681      	mov	r9, r0
 80072aa:	f000 fc1b 	bl	8007ae4 <__mcmp>
 80072ae:	2800      	cmp	r0, #0
 80072b0:	dc03      	bgt.n	80072ba <_dtoa_r+0xa52>
 80072b2:	d1e1      	bne.n	8007278 <_dtoa_r+0xa10>
 80072b4:	f018 0f01 	tst.w	r8, #1
 80072b8:	d0de      	beq.n	8007278 <_dtoa_r+0xa10>
 80072ba:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072be:	d1d8      	bne.n	8007272 <_dtoa_r+0xa0a>
 80072c0:	9a00      	ldr	r2, [sp, #0]
 80072c2:	2339      	movs	r3, #57	@ 0x39
 80072c4:	7013      	strb	r3, [r2, #0]
 80072c6:	4633      	mov	r3, r6
 80072c8:	461e      	mov	r6, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80072d0:	2a39      	cmp	r2, #57	@ 0x39
 80072d2:	d052      	beq.n	800737a <_dtoa_r+0xb12>
 80072d4:	3201      	adds	r2, #1
 80072d6:	701a      	strb	r2, [r3, #0]
 80072d8:	e612      	b.n	8006f00 <_dtoa_r+0x698>
 80072da:	2a00      	cmp	r2, #0
 80072dc:	dd07      	ble.n	80072ee <_dtoa_r+0xa86>
 80072de:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072e2:	d0ed      	beq.n	80072c0 <_dtoa_r+0xa58>
 80072e4:	9a00      	ldr	r2, [sp, #0]
 80072e6:	f108 0301 	add.w	r3, r8, #1
 80072ea:	7013      	strb	r3, [r2, #0]
 80072ec:	e608      	b.n	8006f00 <_dtoa_r+0x698>
 80072ee:	9b07      	ldr	r3, [sp, #28]
 80072f0:	9a07      	ldr	r2, [sp, #28]
 80072f2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80072f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d028      	beq.n	800734e <_dtoa_r+0xae6>
 80072fc:	4649      	mov	r1, r9
 80072fe:	2300      	movs	r3, #0
 8007300:	220a      	movs	r2, #10
 8007302:	4658      	mov	r0, fp
 8007304:	f000 f9d6 	bl	80076b4 <__multadd>
 8007308:	42af      	cmp	r7, r5
 800730a:	4681      	mov	r9, r0
 800730c:	f04f 0300 	mov.w	r3, #0
 8007310:	f04f 020a 	mov.w	r2, #10
 8007314:	4639      	mov	r1, r7
 8007316:	4658      	mov	r0, fp
 8007318:	d107      	bne.n	800732a <_dtoa_r+0xac2>
 800731a:	f000 f9cb 	bl	80076b4 <__multadd>
 800731e:	4607      	mov	r7, r0
 8007320:	4605      	mov	r5, r0
 8007322:	9b07      	ldr	r3, [sp, #28]
 8007324:	3301      	adds	r3, #1
 8007326:	9307      	str	r3, [sp, #28]
 8007328:	e774      	b.n	8007214 <_dtoa_r+0x9ac>
 800732a:	f000 f9c3 	bl	80076b4 <__multadd>
 800732e:	4629      	mov	r1, r5
 8007330:	4607      	mov	r7, r0
 8007332:	2300      	movs	r3, #0
 8007334:	220a      	movs	r2, #10
 8007336:	4658      	mov	r0, fp
 8007338:	f000 f9bc 	bl	80076b4 <__multadd>
 800733c:	4605      	mov	r5, r0
 800733e:	e7f0      	b.n	8007322 <_dtoa_r+0xaba>
 8007340:	9b00      	ldr	r3, [sp, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	bfcc      	ite	gt
 8007346:	461e      	movgt	r6, r3
 8007348:	2601      	movle	r6, #1
 800734a:	4456      	add	r6, sl
 800734c:	2700      	movs	r7, #0
 800734e:	4649      	mov	r1, r9
 8007350:	2201      	movs	r2, #1
 8007352:	4658      	mov	r0, fp
 8007354:	f000 fb5a 	bl	8007a0c <__lshift>
 8007358:	4621      	mov	r1, r4
 800735a:	4681      	mov	r9, r0
 800735c:	f000 fbc2 	bl	8007ae4 <__mcmp>
 8007360:	2800      	cmp	r0, #0
 8007362:	dcb0      	bgt.n	80072c6 <_dtoa_r+0xa5e>
 8007364:	d102      	bne.n	800736c <_dtoa_r+0xb04>
 8007366:	f018 0f01 	tst.w	r8, #1
 800736a:	d1ac      	bne.n	80072c6 <_dtoa_r+0xa5e>
 800736c:	4633      	mov	r3, r6
 800736e:	461e      	mov	r6, r3
 8007370:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007374:	2a30      	cmp	r2, #48	@ 0x30
 8007376:	d0fa      	beq.n	800736e <_dtoa_r+0xb06>
 8007378:	e5c2      	b.n	8006f00 <_dtoa_r+0x698>
 800737a:	459a      	cmp	sl, r3
 800737c:	d1a4      	bne.n	80072c8 <_dtoa_r+0xa60>
 800737e:	9b04      	ldr	r3, [sp, #16]
 8007380:	3301      	adds	r3, #1
 8007382:	9304      	str	r3, [sp, #16]
 8007384:	2331      	movs	r3, #49	@ 0x31
 8007386:	f88a 3000 	strb.w	r3, [sl]
 800738a:	e5b9      	b.n	8006f00 <_dtoa_r+0x698>
 800738c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800738e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80073ec <_dtoa_r+0xb84>
 8007392:	b11b      	cbz	r3, 800739c <_dtoa_r+0xb34>
 8007394:	f10a 0308 	add.w	r3, sl, #8
 8007398:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	4650      	mov	r0, sl
 800739e:	b019      	add	sp, #100	@ 0x64
 80073a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	f77f ae37 	ble.w	800701a <_dtoa_r+0x7b2>
 80073ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b0:	2001      	movs	r0, #1
 80073b2:	e655      	b.n	8007060 <_dtoa_r+0x7f8>
 80073b4:	9b00      	ldr	r3, [sp, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f77f aed6 	ble.w	8007168 <_dtoa_r+0x900>
 80073bc:	4656      	mov	r6, sl
 80073be:	4621      	mov	r1, r4
 80073c0:	4648      	mov	r0, r9
 80073c2:	f7ff f9c6 	bl	8006752 <quorem>
 80073c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073ca:	f806 8b01 	strb.w	r8, [r6], #1
 80073ce:	9b00      	ldr	r3, [sp, #0]
 80073d0:	eba6 020a 	sub.w	r2, r6, sl
 80073d4:	4293      	cmp	r3, r2
 80073d6:	ddb3      	ble.n	8007340 <_dtoa_r+0xad8>
 80073d8:	4649      	mov	r1, r9
 80073da:	2300      	movs	r3, #0
 80073dc:	220a      	movs	r2, #10
 80073de:	4658      	mov	r0, fp
 80073e0:	f000 f968 	bl	80076b4 <__multadd>
 80073e4:	4681      	mov	r9, r0
 80073e6:	e7ea      	b.n	80073be <_dtoa_r+0xb56>
 80073e8:	08008c90 	.word	0x08008c90
 80073ec:	08008c14 	.word	0x08008c14

080073f0 <_free_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4605      	mov	r5, r0
 80073f4:	2900      	cmp	r1, #0
 80073f6:	d041      	beq.n	800747c <_free_r+0x8c>
 80073f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073fc:	1f0c      	subs	r4, r1, #4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	bfb8      	it	lt
 8007402:	18e4      	addlt	r4, r4, r3
 8007404:	f000 f8e8 	bl	80075d8 <__malloc_lock>
 8007408:	4a1d      	ldr	r2, [pc, #116]	@ (8007480 <_free_r+0x90>)
 800740a:	6813      	ldr	r3, [r2, #0]
 800740c:	b933      	cbnz	r3, 800741c <_free_r+0x2c>
 800740e:	6063      	str	r3, [r4, #4]
 8007410:	6014      	str	r4, [r2, #0]
 8007412:	4628      	mov	r0, r5
 8007414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007418:	f000 b8e4 	b.w	80075e4 <__malloc_unlock>
 800741c:	42a3      	cmp	r3, r4
 800741e:	d908      	bls.n	8007432 <_free_r+0x42>
 8007420:	6820      	ldr	r0, [r4, #0]
 8007422:	1821      	adds	r1, r4, r0
 8007424:	428b      	cmp	r3, r1
 8007426:	bf01      	itttt	eq
 8007428:	6819      	ldreq	r1, [r3, #0]
 800742a:	685b      	ldreq	r3, [r3, #4]
 800742c:	1809      	addeq	r1, r1, r0
 800742e:	6021      	streq	r1, [r4, #0]
 8007430:	e7ed      	b.n	800740e <_free_r+0x1e>
 8007432:	461a      	mov	r2, r3
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	b10b      	cbz	r3, 800743c <_free_r+0x4c>
 8007438:	42a3      	cmp	r3, r4
 800743a:	d9fa      	bls.n	8007432 <_free_r+0x42>
 800743c:	6811      	ldr	r1, [r2, #0]
 800743e:	1850      	adds	r0, r2, r1
 8007440:	42a0      	cmp	r0, r4
 8007442:	d10b      	bne.n	800745c <_free_r+0x6c>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	4401      	add	r1, r0
 8007448:	1850      	adds	r0, r2, r1
 800744a:	4283      	cmp	r3, r0
 800744c:	6011      	str	r1, [r2, #0]
 800744e:	d1e0      	bne.n	8007412 <_free_r+0x22>
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	6053      	str	r3, [r2, #4]
 8007456:	4408      	add	r0, r1
 8007458:	6010      	str	r0, [r2, #0]
 800745a:	e7da      	b.n	8007412 <_free_r+0x22>
 800745c:	d902      	bls.n	8007464 <_free_r+0x74>
 800745e:	230c      	movs	r3, #12
 8007460:	602b      	str	r3, [r5, #0]
 8007462:	e7d6      	b.n	8007412 <_free_r+0x22>
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	1821      	adds	r1, r4, r0
 8007468:	428b      	cmp	r3, r1
 800746a:	bf04      	itt	eq
 800746c:	6819      	ldreq	r1, [r3, #0]
 800746e:	685b      	ldreq	r3, [r3, #4]
 8007470:	6063      	str	r3, [r4, #4]
 8007472:	bf04      	itt	eq
 8007474:	1809      	addeq	r1, r1, r0
 8007476:	6021      	streq	r1, [r4, #0]
 8007478:	6054      	str	r4, [r2, #4]
 800747a:	e7ca      	b.n	8007412 <_free_r+0x22>
 800747c:	bd38      	pop	{r3, r4, r5, pc}
 800747e:	bf00      	nop
 8007480:	200004b4 	.word	0x200004b4

08007484 <malloc>:
 8007484:	4b02      	ldr	r3, [pc, #8]	@ (8007490 <malloc+0xc>)
 8007486:	4601      	mov	r1, r0
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	f000 b825 	b.w	80074d8 <_malloc_r>
 800748e:	bf00      	nop
 8007490:	2000004c 	.word	0x2000004c

08007494 <sbrk_aligned>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4e0f      	ldr	r6, [pc, #60]	@ (80074d4 <sbrk_aligned+0x40>)
 8007498:	460c      	mov	r4, r1
 800749a:	6831      	ldr	r1, [r6, #0]
 800749c:	4605      	mov	r5, r0
 800749e:	b911      	cbnz	r1, 80074a6 <sbrk_aligned+0x12>
 80074a0:	f000 fe46 	bl	8008130 <_sbrk_r>
 80074a4:	6030      	str	r0, [r6, #0]
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 fe41 	bl	8008130 <_sbrk_r>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d103      	bne.n	80074ba <sbrk_aligned+0x26>
 80074b2:	f04f 34ff 	mov.w	r4, #4294967295
 80074b6:	4620      	mov	r0, r4
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
 80074ba:	1cc4      	adds	r4, r0, #3
 80074bc:	f024 0403 	bic.w	r4, r4, #3
 80074c0:	42a0      	cmp	r0, r4
 80074c2:	d0f8      	beq.n	80074b6 <sbrk_aligned+0x22>
 80074c4:	1a21      	subs	r1, r4, r0
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 fe32 	bl	8008130 <_sbrk_r>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d1f2      	bne.n	80074b6 <sbrk_aligned+0x22>
 80074d0:	e7ef      	b.n	80074b2 <sbrk_aligned+0x1e>
 80074d2:	bf00      	nop
 80074d4:	200004b0 	.word	0x200004b0

080074d8 <_malloc_r>:
 80074d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074dc:	1ccd      	adds	r5, r1, #3
 80074de:	f025 0503 	bic.w	r5, r5, #3
 80074e2:	3508      	adds	r5, #8
 80074e4:	2d0c      	cmp	r5, #12
 80074e6:	bf38      	it	cc
 80074e8:	250c      	movcc	r5, #12
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	4606      	mov	r6, r0
 80074ee:	db01      	blt.n	80074f4 <_malloc_r+0x1c>
 80074f0:	42a9      	cmp	r1, r5
 80074f2:	d904      	bls.n	80074fe <_malloc_r+0x26>
 80074f4:	230c      	movs	r3, #12
 80074f6:	6033      	str	r3, [r6, #0]
 80074f8:	2000      	movs	r0, #0
 80074fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075d4 <_malloc_r+0xfc>
 8007502:	f000 f869 	bl	80075d8 <__malloc_lock>
 8007506:	f8d8 3000 	ldr.w	r3, [r8]
 800750a:	461c      	mov	r4, r3
 800750c:	bb44      	cbnz	r4, 8007560 <_malloc_r+0x88>
 800750e:	4629      	mov	r1, r5
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff ffbf 	bl	8007494 <sbrk_aligned>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	4604      	mov	r4, r0
 800751a:	d158      	bne.n	80075ce <_malloc_r+0xf6>
 800751c:	f8d8 4000 	ldr.w	r4, [r8]
 8007520:	4627      	mov	r7, r4
 8007522:	2f00      	cmp	r7, #0
 8007524:	d143      	bne.n	80075ae <_malloc_r+0xd6>
 8007526:	2c00      	cmp	r4, #0
 8007528:	d04b      	beq.n	80075c2 <_malloc_r+0xea>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	4639      	mov	r1, r7
 800752e:	4630      	mov	r0, r6
 8007530:	eb04 0903 	add.w	r9, r4, r3
 8007534:	f000 fdfc 	bl	8008130 <_sbrk_r>
 8007538:	4581      	cmp	r9, r0
 800753a:	d142      	bne.n	80075c2 <_malloc_r+0xea>
 800753c:	6821      	ldr	r1, [r4, #0]
 800753e:	1a6d      	subs	r5, r5, r1
 8007540:	4629      	mov	r1, r5
 8007542:	4630      	mov	r0, r6
 8007544:	f7ff ffa6 	bl	8007494 <sbrk_aligned>
 8007548:	3001      	adds	r0, #1
 800754a:	d03a      	beq.n	80075c2 <_malloc_r+0xea>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	442b      	add	r3, r5
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	f8d8 3000 	ldr.w	r3, [r8]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	bb62      	cbnz	r2, 80075b4 <_malloc_r+0xdc>
 800755a:	f8c8 7000 	str.w	r7, [r8]
 800755e:	e00f      	b.n	8007580 <_malloc_r+0xa8>
 8007560:	6822      	ldr	r2, [r4, #0]
 8007562:	1b52      	subs	r2, r2, r5
 8007564:	d420      	bmi.n	80075a8 <_malloc_r+0xd0>
 8007566:	2a0b      	cmp	r2, #11
 8007568:	d917      	bls.n	800759a <_malloc_r+0xc2>
 800756a:	1961      	adds	r1, r4, r5
 800756c:	42a3      	cmp	r3, r4
 800756e:	6025      	str	r5, [r4, #0]
 8007570:	bf18      	it	ne
 8007572:	6059      	strne	r1, [r3, #4]
 8007574:	6863      	ldr	r3, [r4, #4]
 8007576:	bf08      	it	eq
 8007578:	f8c8 1000 	streq.w	r1, [r8]
 800757c:	5162      	str	r2, [r4, r5]
 800757e:	604b      	str	r3, [r1, #4]
 8007580:	4630      	mov	r0, r6
 8007582:	f000 f82f 	bl	80075e4 <__malloc_unlock>
 8007586:	f104 000b 	add.w	r0, r4, #11
 800758a:	1d23      	adds	r3, r4, #4
 800758c:	f020 0007 	bic.w	r0, r0, #7
 8007590:	1ac2      	subs	r2, r0, r3
 8007592:	bf1c      	itt	ne
 8007594:	1a1b      	subne	r3, r3, r0
 8007596:	50a3      	strne	r3, [r4, r2]
 8007598:	e7af      	b.n	80074fa <_malloc_r+0x22>
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	42a3      	cmp	r3, r4
 800759e:	bf0c      	ite	eq
 80075a0:	f8c8 2000 	streq.w	r2, [r8]
 80075a4:	605a      	strne	r2, [r3, #4]
 80075a6:	e7eb      	b.n	8007580 <_malloc_r+0xa8>
 80075a8:	4623      	mov	r3, r4
 80075aa:	6864      	ldr	r4, [r4, #4]
 80075ac:	e7ae      	b.n	800750c <_malloc_r+0x34>
 80075ae:	463c      	mov	r4, r7
 80075b0:	687f      	ldr	r7, [r7, #4]
 80075b2:	e7b6      	b.n	8007522 <_malloc_r+0x4a>
 80075b4:	461a      	mov	r2, r3
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	d1fb      	bne.n	80075b4 <_malloc_r+0xdc>
 80075bc:	2300      	movs	r3, #0
 80075be:	6053      	str	r3, [r2, #4]
 80075c0:	e7de      	b.n	8007580 <_malloc_r+0xa8>
 80075c2:	230c      	movs	r3, #12
 80075c4:	6033      	str	r3, [r6, #0]
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 f80c 	bl	80075e4 <__malloc_unlock>
 80075cc:	e794      	b.n	80074f8 <_malloc_r+0x20>
 80075ce:	6005      	str	r5, [r0, #0]
 80075d0:	e7d6      	b.n	8007580 <_malloc_r+0xa8>
 80075d2:	bf00      	nop
 80075d4:	200004b4 	.word	0x200004b4

080075d8 <__malloc_lock>:
 80075d8:	4801      	ldr	r0, [pc, #4]	@ (80075e0 <__malloc_lock+0x8>)
 80075da:	f7ff b8aa 	b.w	8006732 <__retarget_lock_acquire_recursive>
 80075de:	bf00      	nop
 80075e0:	200004ac 	.word	0x200004ac

080075e4 <__malloc_unlock>:
 80075e4:	4801      	ldr	r0, [pc, #4]	@ (80075ec <__malloc_unlock+0x8>)
 80075e6:	f7ff b8a5 	b.w	8006734 <__retarget_lock_release_recursive>
 80075ea:	bf00      	nop
 80075ec:	200004ac 	.word	0x200004ac

080075f0 <_Balloc>:
 80075f0:	b570      	push	{r4, r5, r6, lr}
 80075f2:	69c6      	ldr	r6, [r0, #28]
 80075f4:	4604      	mov	r4, r0
 80075f6:	460d      	mov	r5, r1
 80075f8:	b976      	cbnz	r6, 8007618 <_Balloc+0x28>
 80075fa:	2010      	movs	r0, #16
 80075fc:	f7ff ff42 	bl	8007484 <malloc>
 8007600:	4602      	mov	r2, r0
 8007602:	61e0      	str	r0, [r4, #28]
 8007604:	b920      	cbnz	r0, 8007610 <_Balloc+0x20>
 8007606:	4b18      	ldr	r3, [pc, #96]	@ (8007668 <_Balloc+0x78>)
 8007608:	4818      	ldr	r0, [pc, #96]	@ (800766c <_Balloc+0x7c>)
 800760a:	216b      	movs	r1, #107	@ 0x6b
 800760c:	f000 fda0 	bl	8008150 <__assert_func>
 8007610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007614:	6006      	str	r6, [r0, #0]
 8007616:	60c6      	str	r6, [r0, #12]
 8007618:	69e6      	ldr	r6, [r4, #28]
 800761a:	68f3      	ldr	r3, [r6, #12]
 800761c:	b183      	cbz	r3, 8007640 <_Balloc+0x50>
 800761e:	69e3      	ldr	r3, [r4, #28]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007626:	b9b8      	cbnz	r0, 8007658 <_Balloc+0x68>
 8007628:	2101      	movs	r1, #1
 800762a:	fa01 f605 	lsl.w	r6, r1, r5
 800762e:	1d72      	adds	r2, r6, #5
 8007630:	0092      	lsls	r2, r2, #2
 8007632:	4620      	mov	r0, r4
 8007634:	f000 fdaa 	bl	800818c <_calloc_r>
 8007638:	b160      	cbz	r0, 8007654 <_Balloc+0x64>
 800763a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800763e:	e00e      	b.n	800765e <_Balloc+0x6e>
 8007640:	2221      	movs	r2, #33	@ 0x21
 8007642:	2104      	movs	r1, #4
 8007644:	4620      	mov	r0, r4
 8007646:	f000 fda1 	bl	800818c <_calloc_r>
 800764a:	69e3      	ldr	r3, [r4, #28]
 800764c:	60f0      	str	r0, [r6, #12]
 800764e:	68db      	ldr	r3, [r3, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e4      	bne.n	800761e <_Balloc+0x2e>
 8007654:	2000      	movs	r0, #0
 8007656:	bd70      	pop	{r4, r5, r6, pc}
 8007658:	6802      	ldr	r2, [r0, #0]
 800765a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800765e:	2300      	movs	r3, #0
 8007660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007664:	e7f7      	b.n	8007656 <_Balloc+0x66>
 8007666:	bf00      	nop
 8007668:	08008c21 	.word	0x08008c21
 800766c:	08008ca1 	.word	0x08008ca1

08007670 <_Bfree>:
 8007670:	b570      	push	{r4, r5, r6, lr}
 8007672:	69c6      	ldr	r6, [r0, #28]
 8007674:	4605      	mov	r5, r0
 8007676:	460c      	mov	r4, r1
 8007678:	b976      	cbnz	r6, 8007698 <_Bfree+0x28>
 800767a:	2010      	movs	r0, #16
 800767c:	f7ff ff02 	bl	8007484 <malloc>
 8007680:	4602      	mov	r2, r0
 8007682:	61e8      	str	r0, [r5, #28]
 8007684:	b920      	cbnz	r0, 8007690 <_Bfree+0x20>
 8007686:	4b09      	ldr	r3, [pc, #36]	@ (80076ac <_Bfree+0x3c>)
 8007688:	4809      	ldr	r0, [pc, #36]	@ (80076b0 <_Bfree+0x40>)
 800768a:	218f      	movs	r1, #143	@ 0x8f
 800768c:	f000 fd60 	bl	8008150 <__assert_func>
 8007690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007694:	6006      	str	r6, [r0, #0]
 8007696:	60c6      	str	r6, [r0, #12]
 8007698:	b13c      	cbz	r4, 80076aa <_Bfree+0x3a>
 800769a:	69eb      	ldr	r3, [r5, #28]
 800769c:	6862      	ldr	r2, [r4, #4]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076a4:	6021      	str	r1, [r4, #0]
 80076a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076aa:	bd70      	pop	{r4, r5, r6, pc}
 80076ac:	08008c21 	.word	0x08008c21
 80076b0:	08008ca1 	.word	0x08008ca1

080076b4 <__multadd>:
 80076b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b8:	690d      	ldr	r5, [r1, #16]
 80076ba:	4607      	mov	r7, r0
 80076bc:	460c      	mov	r4, r1
 80076be:	461e      	mov	r6, r3
 80076c0:	f101 0c14 	add.w	ip, r1, #20
 80076c4:	2000      	movs	r0, #0
 80076c6:	f8dc 3000 	ldr.w	r3, [ip]
 80076ca:	b299      	uxth	r1, r3
 80076cc:	fb02 6101 	mla	r1, r2, r1, r6
 80076d0:	0c1e      	lsrs	r6, r3, #16
 80076d2:	0c0b      	lsrs	r3, r1, #16
 80076d4:	fb02 3306 	mla	r3, r2, r6, r3
 80076d8:	b289      	uxth	r1, r1
 80076da:	3001      	adds	r0, #1
 80076dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076e0:	4285      	cmp	r5, r0
 80076e2:	f84c 1b04 	str.w	r1, [ip], #4
 80076e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076ea:	dcec      	bgt.n	80076c6 <__multadd+0x12>
 80076ec:	b30e      	cbz	r6, 8007732 <__multadd+0x7e>
 80076ee:	68a3      	ldr	r3, [r4, #8]
 80076f0:	42ab      	cmp	r3, r5
 80076f2:	dc19      	bgt.n	8007728 <__multadd+0x74>
 80076f4:	6861      	ldr	r1, [r4, #4]
 80076f6:	4638      	mov	r0, r7
 80076f8:	3101      	adds	r1, #1
 80076fa:	f7ff ff79 	bl	80075f0 <_Balloc>
 80076fe:	4680      	mov	r8, r0
 8007700:	b928      	cbnz	r0, 800770e <__multadd+0x5a>
 8007702:	4602      	mov	r2, r0
 8007704:	4b0c      	ldr	r3, [pc, #48]	@ (8007738 <__multadd+0x84>)
 8007706:	480d      	ldr	r0, [pc, #52]	@ (800773c <__multadd+0x88>)
 8007708:	21ba      	movs	r1, #186	@ 0xba
 800770a:	f000 fd21 	bl	8008150 <__assert_func>
 800770e:	6922      	ldr	r2, [r4, #16]
 8007710:	3202      	adds	r2, #2
 8007712:	f104 010c 	add.w	r1, r4, #12
 8007716:	0092      	lsls	r2, r2, #2
 8007718:	300c      	adds	r0, #12
 800771a:	f7ff f80c 	bl	8006736 <memcpy>
 800771e:	4621      	mov	r1, r4
 8007720:	4638      	mov	r0, r7
 8007722:	f7ff ffa5 	bl	8007670 <_Bfree>
 8007726:	4644      	mov	r4, r8
 8007728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800772c:	3501      	adds	r5, #1
 800772e:	615e      	str	r6, [r3, #20]
 8007730:	6125      	str	r5, [r4, #16]
 8007732:	4620      	mov	r0, r4
 8007734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007738:	08008c90 	.word	0x08008c90
 800773c:	08008ca1 	.word	0x08008ca1

08007740 <__hi0bits>:
 8007740:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007744:	4603      	mov	r3, r0
 8007746:	bf36      	itet	cc
 8007748:	0403      	lslcc	r3, r0, #16
 800774a:	2000      	movcs	r0, #0
 800774c:	2010      	movcc	r0, #16
 800774e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007752:	bf3c      	itt	cc
 8007754:	021b      	lslcc	r3, r3, #8
 8007756:	3008      	addcc	r0, #8
 8007758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800775c:	bf3c      	itt	cc
 800775e:	011b      	lslcc	r3, r3, #4
 8007760:	3004      	addcc	r0, #4
 8007762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007766:	bf3c      	itt	cc
 8007768:	009b      	lslcc	r3, r3, #2
 800776a:	3002      	addcc	r0, #2
 800776c:	2b00      	cmp	r3, #0
 800776e:	db05      	blt.n	800777c <__hi0bits+0x3c>
 8007770:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007774:	f100 0001 	add.w	r0, r0, #1
 8007778:	bf08      	it	eq
 800777a:	2020      	moveq	r0, #32
 800777c:	4770      	bx	lr

0800777e <__lo0bits>:
 800777e:	6803      	ldr	r3, [r0, #0]
 8007780:	4602      	mov	r2, r0
 8007782:	f013 0007 	ands.w	r0, r3, #7
 8007786:	d00b      	beq.n	80077a0 <__lo0bits+0x22>
 8007788:	07d9      	lsls	r1, r3, #31
 800778a:	d421      	bmi.n	80077d0 <__lo0bits+0x52>
 800778c:	0798      	lsls	r0, r3, #30
 800778e:	bf49      	itett	mi
 8007790:	085b      	lsrmi	r3, r3, #1
 8007792:	089b      	lsrpl	r3, r3, #2
 8007794:	2001      	movmi	r0, #1
 8007796:	6013      	strmi	r3, [r2, #0]
 8007798:	bf5c      	itt	pl
 800779a:	6013      	strpl	r3, [r2, #0]
 800779c:	2002      	movpl	r0, #2
 800779e:	4770      	bx	lr
 80077a0:	b299      	uxth	r1, r3
 80077a2:	b909      	cbnz	r1, 80077a8 <__lo0bits+0x2a>
 80077a4:	0c1b      	lsrs	r3, r3, #16
 80077a6:	2010      	movs	r0, #16
 80077a8:	b2d9      	uxtb	r1, r3
 80077aa:	b909      	cbnz	r1, 80077b0 <__lo0bits+0x32>
 80077ac:	3008      	adds	r0, #8
 80077ae:	0a1b      	lsrs	r3, r3, #8
 80077b0:	0719      	lsls	r1, r3, #28
 80077b2:	bf04      	itt	eq
 80077b4:	091b      	lsreq	r3, r3, #4
 80077b6:	3004      	addeq	r0, #4
 80077b8:	0799      	lsls	r1, r3, #30
 80077ba:	bf04      	itt	eq
 80077bc:	089b      	lsreq	r3, r3, #2
 80077be:	3002      	addeq	r0, #2
 80077c0:	07d9      	lsls	r1, r3, #31
 80077c2:	d403      	bmi.n	80077cc <__lo0bits+0x4e>
 80077c4:	085b      	lsrs	r3, r3, #1
 80077c6:	f100 0001 	add.w	r0, r0, #1
 80077ca:	d003      	beq.n	80077d4 <__lo0bits+0x56>
 80077cc:	6013      	str	r3, [r2, #0]
 80077ce:	4770      	bx	lr
 80077d0:	2000      	movs	r0, #0
 80077d2:	4770      	bx	lr
 80077d4:	2020      	movs	r0, #32
 80077d6:	4770      	bx	lr

080077d8 <__i2b>:
 80077d8:	b510      	push	{r4, lr}
 80077da:	460c      	mov	r4, r1
 80077dc:	2101      	movs	r1, #1
 80077de:	f7ff ff07 	bl	80075f0 <_Balloc>
 80077e2:	4602      	mov	r2, r0
 80077e4:	b928      	cbnz	r0, 80077f2 <__i2b+0x1a>
 80077e6:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <__i2b+0x24>)
 80077e8:	4805      	ldr	r0, [pc, #20]	@ (8007800 <__i2b+0x28>)
 80077ea:	f240 1145 	movw	r1, #325	@ 0x145
 80077ee:	f000 fcaf 	bl	8008150 <__assert_func>
 80077f2:	2301      	movs	r3, #1
 80077f4:	6144      	str	r4, [r0, #20]
 80077f6:	6103      	str	r3, [r0, #16]
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	bf00      	nop
 80077fc:	08008c90 	.word	0x08008c90
 8007800:	08008ca1 	.word	0x08008ca1

08007804 <__multiply>:
 8007804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007808:	4614      	mov	r4, r2
 800780a:	690a      	ldr	r2, [r1, #16]
 800780c:	6923      	ldr	r3, [r4, #16]
 800780e:	429a      	cmp	r2, r3
 8007810:	bfa8      	it	ge
 8007812:	4623      	movge	r3, r4
 8007814:	460f      	mov	r7, r1
 8007816:	bfa4      	itt	ge
 8007818:	460c      	movge	r4, r1
 800781a:	461f      	movge	r7, r3
 800781c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007820:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007824:	68a3      	ldr	r3, [r4, #8]
 8007826:	6861      	ldr	r1, [r4, #4]
 8007828:	eb0a 0609 	add.w	r6, sl, r9
 800782c:	42b3      	cmp	r3, r6
 800782e:	b085      	sub	sp, #20
 8007830:	bfb8      	it	lt
 8007832:	3101      	addlt	r1, #1
 8007834:	f7ff fedc 	bl	80075f0 <_Balloc>
 8007838:	b930      	cbnz	r0, 8007848 <__multiply+0x44>
 800783a:	4602      	mov	r2, r0
 800783c:	4b44      	ldr	r3, [pc, #272]	@ (8007950 <__multiply+0x14c>)
 800783e:	4845      	ldr	r0, [pc, #276]	@ (8007954 <__multiply+0x150>)
 8007840:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007844:	f000 fc84 	bl	8008150 <__assert_func>
 8007848:	f100 0514 	add.w	r5, r0, #20
 800784c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007850:	462b      	mov	r3, r5
 8007852:	2200      	movs	r2, #0
 8007854:	4543      	cmp	r3, r8
 8007856:	d321      	bcc.n	800789c <__multiply+0x98>
 8007858:	f107 0114 	add.w	r1, r7, #20
 800785c:	f104 0214 	add.w	r2, r4, #20
 8007860:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007864:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007868:	9302      	str	r3, [sp, #8]
 800786a:	1b13      	subs	r3, r2, r4
 800786c:	3b15      	subs	r3, #21
 800786e:	f023 0303 	bic.w	r3, r3, #3
 8007872:	3304      	adds	r3, #4
 8007874:	f104 0715 	add.w	r7, r4, #21
 8007878:	42ba      	cmp	r2, r7
 800787a:	bf38      	it	cc
 800787c:	2304      	movcc	r3, #4
 800787e:	9301      	str	r3, [sp, #4]
 8007880:	9b02      	ldr	r3, [sp, #8]
 8007882:	9103      	str	r1, [sp, #12]
 8007884:	428b      	cmp	r3, r1
 8007886:	d80c      	bhi.n	80078a2 <__multiply+0x9e>
 8007888:	2e00      	cmp	r6, #0
 800788a:	dd03      	ble.n	8007894 <__multiply+0x90>
 800788c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007890:	2b00      	cmp	r3, #0
 8007892:	d05b      	beq.n	800794c <__multiply+0x148>
 8007894:	6106      	str	r6, [r0, #16]
 8007896:	b005      	add	sp, #20
 8007898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800789c:	f843 2b04 	str.w	r2, [r3], #4
 80078a0:	e7d8      	b.n	8007854 <__multiply+0x50>
 80078a2:	f8b1 a000 	ldrh.w	sl, [r1]
 80078a6:	f1ba 0f00 	cmp.w	sl, #0
 80078aa:	d024      	beq.n	80078f6 <__multiply+0xf2>
 80078ac:	f104 0e14 	add.w	lr, r4, #20
 80078b0:	46a9      	mov	r9, r5
 80078b2:	f04f 0c00 	mov.w	ip, #0
 80078b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078ba:	f8d9 3000 	ldr.w	r3, [r9]
 80078be:	fa1f fb87 	uxth.w	fp, r7
 80078c2:	b29b      	uxth	r3, r3
 80078c4:	fb0a 330b 	mla	r3, sl, fp, r3
 80078c8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80078cc:	f8d9 7000 	ldr.w	r7, [r9]
 80078d0:	4463      	add	r3, ip
 80078d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80078d6:	fb0a c70b 	mla	r7, sl, fp, ip
 80078da:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80078de:	b29b      	uxth	r3, r3
 80078e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80078e4:	4572      	cmp	r2, lr
 80078e6:	f849 3b04 	str.w	r3, [r9], #4
 80078ea:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80078ee:	d8e2      	bhi.n	80078b6 <__multiply+0xb2>
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	f845 c003 	str.w	ip, [r5, r3]
 80078f6:	9b03      	ldr	r3, [sp, #12]
 80078f8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80078fc:	3104      	adds	r1, #4
 80078fe:	f1b9 0f00 	cmp.w	r9, #0
 8007902:	d021      	beq.n	8007948 <__multiply+0x144>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	f104 0c14 	add.w	ip, r4, #20
 800790a:	46ae      	mov	lr, r5
 800790c:	f04f 0a00 	mov.w	sl, #0
 8007910:	f8bc b000 	ldrh.w	fp, [ip]
 8007914:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007918:	fb09 770b 	mla	r7, r9, fp, r7
 800791c:	4457      	add	r7, sl
 800791e:	b29b      	uxth	r3, r3
 8007920:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007924:	f84e 3b04 	str.w	r3, [lr], #4
 8007928:	f85c 3b04 	ldr.w	r3, [ip], #4
 800792c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007930:	f8be 3000 	ldrh.w	r3, [lr]
 8007934:	fb09 330a 	mla	r3, r9, sl, r3
 8007938:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800793c:	4562      	cmp	r2, ip
 800793e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007942:	d8e5      	bhi.n	8007910 <__multiply+0x10c>
 8007944:	9f01      	ldr	r7, [sp, #4]
 8007946:	51eb      	str	r3, [r5, r7]
 8007948:	3504      	adds	r5, #4
 800794a:	e799      	b.n	8007880 <__multiply+0x7c>
 800794c:	3e01      	subs	r6, #1
 800794e:	e79b      	b.n	8007888 <__multiply+0x84>
 8007950:	08008c90 	.word	0x08008c90
 8007954:	08008ca1 	.word	0x08008ca1

08007958 <__pow5mult>:
 8007958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800795c:	4615      	mov	r5, r2
 800795e:	f012 0203 	ands.w	r2, r2, #3
 8007962:	4607      	mov	r7, r0
 8007964:	460e      	mov	r6, r1
 8007966:	d007      	beq.n	8007978 <__pow5mult+0x20>
 8007968:	4c25      	ldr	r4, [pc, #148]	@ (8007a00 <__pow5mult+0xa8>)
 800796a:	3a01      	subs	r2, #1
 800796c:	2300      	movs	r3, #0
 800796e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007972:	f7ff fe9f 	bl	80076b4 <__multadd>
 8007976:	4606      	mov	r6, r0
 8007978:	10ad      	asrs	r5, r5, #2
 800797a:	d03d      	beq.n	80079f8 <__pow5mult+0xa0>
 800797c:	69fc      	ldr	r4, [r7, #28]
 800797e:	b97c      	cbnz	r4, 80079a0 <__pow5mult+0x48>
 8007980:	2010      	movs	r0, #16
 8007982:	f7ff fd7f 	bl	8007484 <malloc>
 8007986:	4602      	mov	r2, r0
 8007988:	61f8      	str	r0, [r7, #28]
 800798a:	b928      	cbnz	r0, 8007998 <__pow5mult+0x40>
 800798c:	4b1d      	ldr	r3, [pc, #116]	@ (8007a04 <__pow5mult+0xac>)
 800798e:	481e      	ldr	r0, [pc, #120]	@ (8007a08 <__pow5mult+0xb0>)
 8007990:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007994:	f000 fbdc 	bl	8008150 <__assert_func>
 8007998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800799c:	6004      	str	r4, [r0, #0]
 800799e:	60c4      	str	r4, [r0, #12]
 80079a0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80079a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079a8:	b94c      	cbnz	r4, 80079be <__pow5mult+0x66>
 80079aa:	f240 2171 	movw	r1, #625	@ 0x271
 80079ae:	4638      	mov	r0, r7
 80079b0:	f7ff ff12 	bl	80077d8 <__i2b>
 80079b4:	2300      	movs	r3, #0
 80079b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80079ba:	4604      	mov	r4, r0
 80079bc:	6003      	str	r3, [r0, #0]
 80079be:	f04f 0900 	mov.w	r9, #0
 80079c2:	07eb      	lsls	r3, r5, #31
 80079c4:	d50a      	bpl.n	80079dc <__pow5mult+0x84>
 80079c6:	4631      	mov	r1, r6
 80079c8:	4622      	mov	r2, r4
 80079ca:	4638      	mov	r0, r7
 80079cc:	f7ff ff1a 	bl	8007804 <__multiply>
 80079d0:	4631      	mov	r1, r6
 80079d2:	4680      	mov	r8, r0
 80079d4:	4638      	mov	r0, r7
 80079d6:	f7ff fe4b 	bl	8007670 <_Bfree>
 80079da:	4646      	mov	r6, r8
 80079dc:	106d      	asrs	r5, r5, #1
 80079de:	d00b      	beq.n	80079f8 <__pow5mult+0xa0>
 80079e0:	6820      	ldr	r0, [r4, #0]
 80079e2:	b938      	cbnz	r0, 80079f4 <__pow5mult+0x9c>
 80079e4:	4622      	mov	r2, r4
 80079e6:	4621      	mov	r1, r4
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff ff0b 	bl	8007804 <__multiply>
 80079ee:	6020      	str	r0, [r4, #0]
 80079f0:	f8c0 9000 	str.w	r9, [r0]
 80079f4:	4604      	mov	r4, r0
 80079f6:	e7e4      	b.n	80079c2 <__pow5mult+0x6a>
 80079f8:	4630      	mov	r0, r6
 80079fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079fe:	bf00      	nop
 8007a00:	08008cfc 	.word	0x08008cfc
 8007a04:	08008c21 	.word	0x08008c21
 8007a08:	08008ca1 	.word	0x08008ca1

08007a0c <__lshift>:
 8007a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	460c      	mov	r4, r1
 8007a12:	6849      	ldr	r1, [r1, #4]
 8007a14:	6923      	ldr	r3, [r4, #16]
 8007a16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a1a:	68a3      	ldr	r3, [r4, #8]
 8007a1c:	4607      	mov	r7, r0
 8007a1e:	4691      	mov	r9, r2
 8007a20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a24:	f108 0601 	add.w	r6, r8, #1
 8007a28:	42b3      	cmp	r3, r6
 8007a2a:	db0b      	blt.n	8007a44 <__lshift+0x38>
 8007a2c:	4638      	mov	r0, r7
 8007a2e:	f7ff fddf 	bl	80075f0 <_Balloc>
 8007a32:	4605      	mov	r5, r0
 8007a34:	b948      	cbnz	r0, 8007a4a <__lshift+0x3e>
 8007a36:	4602      	mov	r2, r0
 8007a38:	4b28      	ldr	r3, [pc, #160]	@ (8007adc <__lshift+0xd0>)
 8007a3a:	4829      	ldr	r0, [pc, #164]	@ (8007ae0 <__lshift+0xd4>)
 8007a3c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007a40:	f000 fb86 	bl	8008150 <__assert_func>
 8007a44:	3101      	adds	r1, #1
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	e7ee      	b.n	8007a28 <__lshift+0x1c>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f100 0114 	add.w	r1, r0, #20
 8007a50:	f100 0210 	add.w	r2, r0, #16
 8007a54:	4618      	mov	r0, r3
 8007a56:	4553      	cmp	r3, sl
 8007a58:	db33      	blt.n	8007ac2 <__lshift+0xb6>
 8007a5a:	6920      	ldr	r0, [r4, #16]
 8007a5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a60:	f104 0314 	add.w	r3, r4, #20
 8007a64:	f019 091f 	ands.w	r9, r9, #31
 8007a68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007a70:	d02b      	beq.n	8007aca <__lshift+0xbe>
 8007a72:	f1c9 0e20 	rsb	lr, r9, #32
 8007a76:	468a      	mov	sl, r1
 8007a78:	2200      	movs	r2, #0
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	fa00 f009 	lsl.w	r0, r0, r9
 8007a80:	4310      	orrs	r0, r2
 8007a82:	f84a 0b04 	str.w	r0, [sl], #4
 8007a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a8a:	459c      	cmp	ip, r3
 8007a8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007a90:	d8f3      	bhi.n	8007a7a <__lshift+0x6e>
 8007a92:	ebac 0304 	sub.w	r3, ip, r4
 8007a96:	3b15      	subs	r3, #21
 8007a98:	f023 0303 	bic.w	r3, r3, #3
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	f104 0015 	add.w	r0, r4, #21
 8007aa2:	4584      	cmp	ip, r0
 8007aa4:	bf38      	it	cc
 8007aa6:	2304      	movcc	r3, #4
 8007aa8:	50ca      	str	r2, [r1, r3]
 8007aaa:	b10a      	cbz	r2, 8007ab0 <__lshift+0xa4>
 8007aac:	f108 0602 	add.w	r6, r8, #2
 8007ab0:	3e01      	subs	r6, #1
 8007ab2:	4638      	mov	r0, r7
 8007ab4:	612e      	str	r6, [r5, #16]
 8007ab6:	4621      	mov	r1, r4
 8007ab8:	f7ff fdda 	bl	8007670 <_Bfree>
 8007abc:	4628      	mov	r0, r5
 8007abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ac2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	e7c5      	b.n	8007a56 <__lshift+0x4a>
 8007aca:	3904      	subs	r1, #4
 8007acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ad0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ad4:	459c      	cmp	ip, r3
 8007ad6:	d8f9      	bhi.n	8007acc <__lshift+0xc0>
 8007ad8:	e7ea      	b.n	8007ab0 <__lshift+0xa4>
 8007ada:	bf00      	nop
 8007adc:	08008c90 	.word	0x08008c90
 8007ae0:	08008ca1 	.word	0x08008ca1

08007ae4 <__mcmp>:
 8007ae4:	690a      	ldr	r2, [r1, #16]
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	6900      	ldr	r0, [r0, #16]
 8007aea:	1a80      	subs	r0, r0, r2
 8007aec:	b530      	push	{r4, r5, lr}
 8007aee:	d10e      	bne.n	8007b0e <__mcmp+0x2a>
 8007af0:	3314      	adds	r3, #20
 8007af2:	3114      	adds	r1, #20
 8007af4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007af8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007afc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b04:	4295      	cmp	r5, r2
 8007b06:	d003      	beq.n	8007b10 <__mcmp+0x2c>
 8007b08:	d205      	bcs.n	8007b16 <__mcmp+0x32>
 8007b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0e:	bd30      	pop	{r4, r5, pc}
 8007b10:	42a3      	cmp	r3, r4
 8007b12:	d3f3      	bcc.n	8007afc <__mcmp+0x18>
 8007b14:	e7fb      	b.n	8007b0e <__mcmp+0x2a>
 8007b16:	2001      	movs	r0, #1
 8007b18:	e7f9      	b.n	8007b0e <__mcmp+0x2a>
	...

08007b1c <__mdiff>:
 8007b1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b20:	4689      	mov	r9, r1
 8007b22:	4606      	mov	r6, r0
 8007b24:	4611      	mov	r1, r2
 8007b26:	4648      	mov	r0, r9
 8007b28:	4614      	mov	r4, r2
 8007b2a:	f7ff ffdb 	bl	8007ae4 <__mcmp>
 8007b2e:	1e05      	subs	r5, r0, #0
 8007b30:	d112      	bne.n	8007b58 <__mdiff+0x3c>
 8007b32:	4629      	mov	r1, r5
 8007b34:	4630      	mov	r0, r6
 8007b36:	f7ff fd5b 	bl	80075f0 <_Balloc>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	b928      	cbnz	r0, 8007b4a <__mdiff+0x2e>
 8007b3e:	4b3f      	ldr	r3, [pc, #252]	@ (8007c3c <__mdiff+0x120>)
 8007b40:	f240 2137 	movw	r1, #567	@ 0x237
 8007b44:	483e      	ldr	r0, [pc, #248]	@ (8007c40 <__mdiff+0x124>)
 8007b46:	f000 fb03 	bl	8008150 <__assert_func>
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b50:	4610      	mov	r0, r2
 8007b52:	b003      	add	sp, #12
 8007b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b58:	bfbc      	itt	lt
 8007b5a:	464b      	movlt	r3, r9
 8007b5c:	46a1      	movlt	r9, r4
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007b64:	bfba      	itte	lt
 8007b66:	461c      	movlt	r4, r3
 8007b68:	2501      	movlt	r5, #1
 8007b6a:	2500      	movge	r5, #0
 8007b6c:	f7ff fd40 	bl	80075f0 <_Balloc>
 8007b70:	4602      	mov	r2, r0
 8007b72:	b918      	cbnz	r0, 8007b7c <__mdiff+0x60>
 8007b74:	4b31      	ldr	r3, [pc, #196]	@ (8007c3c <__mdiff+0x120>)
 8007b76:	f240 2145 	movw	r1, #581	@ 0x245
 8007b7a:	e7e3      	b.n	8007b44 <__mdiff+0x28>
 8007b7c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007b80:	6926      	ldr	r6, [r4, #16]
 8007b82:	60c5      	str	r5, [r0, #12]
 8007b84:	f109 0310 	add.w	r3, r9, #16
 8007b88:	f109 0514 	add.w	r5, r9, #20
 8007b8c:	f104 0e14 	add.w	lr, r4, #20
 8007b90:	f100 0b14 	add.w	fp, r0, #20
 8007b94:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b98:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	46d9      	mov	r9, fp
 8007ba0:	f04f 0c00 	mov.w	ip, #0
 8007ba4:	9b01      	ldr	r3, [sp, #4]
 8007ba6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007baa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	fa1f f38a 	uxth.w	r3, sl
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	b283      	uxth	r3, r0
 8007bb8:	1acb      	subs	r3, r1, r3
 8007bba:	0c00      	lsrs	r0, r0, #16
 8007bbc:	4463      	add	r3, ip
 8007bbe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007bc2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007bcc:	4576      	cmp	r6, lr
 8007bce:	f849 3b04 	str.w	r3, [r9], #4
 8007bd2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007bd6:	d8e5      	bhi.n	8007ba4 <__mdiff+0x88>
 8007bd8:	1b33      	subs	r3, r6, r4
 8007bda:	3b15      	subs	r3, #21
 8007bdc:	f023 0303 	bic.w	r3, r3, #3
 8007be0:	3415      	adds	r4, #21
 8007be2:	3304      	adds	r3, #4
 8007be4:	42a6      	cmp	r6, r4
 8007be6:	bf38      	it	cc
 8007be8:	2304      	movcc	r3, #4
 8007bea:	441d      	add	r5, r3
 8007bec:	445b      	add	r3, fp
 8007bee:	461e      	mov	r6, r3
 8007bf0:	462c      	mov	r4, r5
 8007bf2:	4544      	cmp	r4, r8
 8007bf4:	d30e      	bcc.n	8007c14 <__mdiff+0xf8>
 8007bf6:	f108 0103 	add.w	r1, r8, #3
 8007bfa:	1b49      	subs	r1, r1, r5
 8007bfc:	f021 0103 	bic.w	r1, r1, #3
 8007c00:	3d03      	subs	r5, #3
 8007c02:	45a8      	cmp	r8, r5
 8007c04:	bf38      	it	cc
 8007c06:	2100      	movcc	r1, #0
 8007c08:	440b      	add	r3, r1
 8007c0a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c0e:	b191      	cbz	r1, 8007c36 <__mdiff+0x11a>
 8007c10:	6117      	str	r7, [r2, #16]
 8007c12:	e79d      	b.n	8007b50 <__mdiff+0x34>
 8007c14:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c18:	46e6      	mov	lr, ip
 8007c1a:	0c08      	lsrs	r0, r1, #16
 8007c1c:	fa1c fc81 	uxtah	ip, ip, r1
 8007c20:	4471      	add	r1, lr
 8007c22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c26:	b289      	uxth	r1, r1
 8007c28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c2c:	f846 1b04 	str.w	r1, [r6], #4
 8007c30:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c34:	e7dd      	b.n	8007bf2 <__mdiff+0xd6>
 8007c36:	3f01      	subs	r7, #1
 8007c38:	e7e7      	b.n	8007c0a <__mdiff+0xee>
 8007c3a:	bf00      	nop
 8007c3c:	08008c90 	.word	0x08008c90
 8007c40:	08008ca1 	.word	0x08008ca1

08007c44 <__d2b>:
 8007c44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c48:	460f      	mov	r7, r1
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	ec59 8b10 	vmov	r8, r9, d0
 8007c50:	4616      	mov	r6, r2
 8007c52:	f7ff fccd 	bl	80075f0 <_Balloc>
 8007c56:	4604      	mov	r4, r0
 8007c58:	b930      	cbnz	r0, 8007c68 <__d2b+0x24>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	4b23      	ldr	r3, [pc, #140]	@ (8007cec <__d2b+0xa8>)
 8007c5e:	4824      	ldr	r0, [pc, #144]	@ (8007cf0 <__d2b+0xac>)
 8007c60:	f240 310f 	movw	r1, #783	@ 0x30f
 8007c64:	f000 fa74 	bl	8008150 <__assert_func>
 8007c68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c70:	b10d      	cbz	r5, 8007c76 <__d2b+0x32>
 8007c72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007c76:	9301      	str	r3, [sp, #4]
 8007c78:	f1b8 0300 	subs.w	r3, r8, #0
 8007c7c:	d023      	beq.n	8007cc6 <__d2b+0x82>
 8007c7e:	4668      	mov	r0, sp
 8007c80:	9300      	str	r3, [sp, #0]
 8007c82:	f7ff fd7c 	bl	800777e <__lo0bits>
 8007c86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007c8a:	b1d0      	cbz	r0, 8007cc2 <__d2b+0x7e>
 8007c8c:	f1c0 0320 	rsb	r3, r0, #32
 8007c90:	fa02 f303 	lsl.w	r3, r2, r3
 8007c94:	430b      	orrs	r3, r1
 8007c96:	40c2      	lsrs	r2, r0
 8007c98:	6163      	str	r3, [r4, #20]
 8007c9a:	9201      	str	r2, [sp, #4]
 8007c9c:	9b01      	ldr	r3, [sp, #4]
 8007c9e:	61a3      	str	r3, [r4, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	bf0c      	ite	eq
 8007ca4:	2201      	moveq	r2, #1
 8007ca6:	2202      	movne	r2, #2
 8007ca8:	6122      	str	r2, [r4, #16]
 8007caa:	b1a5      	cbz	r5, 8007cd6 <__d2b+0x92>
 8007cac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007cb0:	4405      	add	r5, r0
 8007cb2:	603d      	str	r5, [r7, #0]
 8007cb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007cb8:	6030      	str	r0, [r6, #0]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	b003      	add	sp, #12
 8007cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cc2:	6161      	str	r1, [r4, #20]
 8007cc4:	e7ea      	b.n	8007c9c <__d2b+0x58>
 8007cc6:	a801      	add	r0, sp, #4
 8007cc8:	f7ff fd59 	bl	800777e <__lo0bits>
 8007ccc:	9b01      	ldr	r3, [sp, #4]
 8007cce:	6163      	str	r3, [r4, #20]
 8007cd0:	3020      	adds	r0, #32
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	e7e8      	b.n	8007ca8 <__d2b+0x64>
 8007cd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007cda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007cde:	6038      	str	r0, [r7, #0]
 8007ce0:	6918      	ldr	r0, [r3, #16]
 8007ce2:	f7ff fd2d 	bl	8007740 <__hi0bits>
 8007ce6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cea:	e7e5      	b.n	8007cb8 <__d2b+0x74>
 8007cec:	08008c90 	.word	0x08008c90
 8007cf0:	08008ca1 	.word	0x08008ca1

08007cf4 <__ssputs_r>:
 8007cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf8:	688e      	ldr	r6, [r1, #8]
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	42be      	cmp	r6, r7
 8007cfe:	680b      	ldr	r3, [r1, #0]
 8007d00:	4682      	mov	sl, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	4690      	mov	r8, r2
 8007d06:	d82d      	bhi.n	8007d64 <__ssputs_r+0x70>
 8007d08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d10:	d026      	beq.n	8007d60 <__ssputs_r+0x6c>
 8007d12:	6965      	ldr	r5, [r4, #20]
 8007d14:	6909      	ldr	r1, [r1, #16]
 8007d16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d1a:	eba3 0901 	sub.w	r9, r3, r1
 8007d1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d22:	1c7b      	adds	r3, r7, #1
 8007d24:	444b      	add	r3, r9
 8007d26:	106d      	asrs	r5, r5, #1
 8007d28:	429d      	cmp	r5, r3
 8007d2a:	bf38      	it	cc
 8007d2c:	461d      	movcc	r5, r3
 8007d2e:	0553      	lsls	r3, r2, #21
 8007d30:	d527      	bpl.n	8007d82 <__ssputs_r+0x8e>
 8007d32:	4629      	mov	r1, r5
 8007d34:	f7ff fbd0 	bl	80074d8 <_malloc_r>
 8007d38:	4606      	mov	r6, r0
 8007d3a:	b360      	cbz	r0, 8007d96 <__ssputs_r+0xa2>
 8007d3c:	6921      	ldr	r1, [r4, #16]
 8007d3e:	464a      	mov	r2, r9
 8007d40:	f7fe fcf9 	bl	8006736 <memcpy>
 8007d44:	89a3      	ldrh	r3, [r4, #12]
 8007d46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	6126      	str	r6, [r4, #16]
 8007d52:	6165      	str	r5, [r4, #20]
 8007d54:	444e      	add	r6, r9
 8007d56:	eba5 0509 	sub.w	r5, r5, r9
 8007d5a:	6026      	str	r6, [r4, #0]
 8007d5c:	60a5      	str	r5, [r4, #8]
 8007d5e:	463e      	mov	r6, r7
 8007d60:	42be      	cmp	r6, r7
 8007d62:	d900      	bls.n	8007d66 <__ssputs_r+0x72>
 8007d64:	463e      	mov	r6, r7
 8007d66:	6820      	ldr	r0, [r4, #0]
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4641      	mov	r1, r8
 8007d6c:	f000 f9c6 	bl	80080fc <memmove>
 8007d70:	68a3      	ldr	r3, [r4, #8]
 8007d72:	1b9b      	subs	r3, r3, r6
 8007d74:	60a3      	str	r3, [r4, #8]
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	4433      	add	r3, r6
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d82:	462a      	mov	r2, r5
 8007d84:	f000 fa28 	bl	80081d8 <_realloc_r>
 8007d88:	4606      	mov	r6, r0
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d1e0      	bne.n	8007d50 <__ssputs_r+0x5c>
 8007d8e:	6921      	ldr	r1, [r4, #16]
 8007d90:	4650      	mov	r0, sl
 8007d92:	f7ff fb2d 	bl	80073f0 <_free_r>
 8007d96:	230c      	movs	r3, #12
 8007d98:	f8ca 3000 	str.w	r3, [sl]
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da2:	81a3      	strh	r3, [r4, #12]
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	e7e9      	b.n	8007d7e <__ssputs_r+0x8a>
	...

08007dac <_svfiprintf_r>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	4698      	mov	r8, r3
 8007db2:	898b      	ldrh	r3, [r1, #12]
 8007db4:	061b      	lsls	r3, r3, #24
 8007db6:	b09d      	sub	sp, #116	@ 0x74
 8007db8:	4607      	mov	r7, r0
 8007dba:	460d      	mov	r5, r1
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	d510      	bpl.n	8007de2 <_svfiprintf_r+0x36>
 8007dc0:	690b      	ldr	r3, [r1, #16]
 8007dc2:	b973      	cbnz	r3, 8007de2 <_svfiprintf_r+0x36>
 8007dc4:	2140      	movs	r1, #64	@ 0x40
 8007dc6:	f7ff fb87 	bl	80074d8 <_malloc_r>
 8007dca:	6028      	str	r0, [r5, #0]
 8007dcc:	6128      	str	r0, [r5, #16]
 8007dce:	b930      	cbnz	r0, 8007dde <_svfiprintf_r+0x32>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd8:	b01d      	add	sp, #116	@ 0x74
 8007dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dde:	2340      	movs	r3, #64	@ 0x40
 8007de0:	616b      	str	r3, [r5, #20]
 8007de2:	2300      	movs	r3, #0
 8007de4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007de6:	2320      	movs	r3, #32
 8007de8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8007df0:	2330      	movs	r3, #48	@ 0x30
 8007df2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007f90 <_svfiprintf_r+0x1e4>
 8007df6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007dfa:	f04f 0901 	mov.w	r9, #1
 8007dfe:	4623      	mov	r3, r4
 8007e00:	469a      	mov	sl, r3
 8007e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e06:	b10a      	cbz	r2, 8007e0c <_svfiprintf_r+0x60>
 8007e08:	2a25      	cmp	r2, #37	@ 0x25
 8007e0a:	d1f9      	bne.n	8007e00 <_svfiprintf_r+0x54>
 8007e0c:	ebba 0b04 	subs.w	fp, sl, r4
 8007e10:	d00b      	beq.n	8007e2a <_svfiprintf_r+0x7e>
 8007e12:	465b      	mov	r3, fp
 8007e14:	4622      	mov	r2, r4
 8007e16:	4629      	mov	r1, r5
 8007e18:	4638      	mov	r0, r7
 8007e1a:	f7ff ff6b 	bl	8007cf4 <__ssputs_r>
 8007e1e:	3001      	adds	r0, #1
 8007e20:	f000 80a7 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e26:	445a      	add	r2, fp
 8007e28:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 809f 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e34:	2300      	movs	r3, #0
 8007e36:	f04f 32ff 	mov.w	r2, #4294967295
 8007e3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e3e:	f10a 0a01 	add.w	sl, sl, #1
 8007e42:	9304      	str	r3, [sp, #16]
 8007e44:	9307      	str	r3, [sp, #28]
 8007e46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e4c:	4654      	mov	r4, sl
 8007e4e:	2205      	movs	r2, #5
 8007e50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e54:	484e      	ldr	r0, [pc, #312]	@ (8007f90 <_svfiprintf_r+0x1e4>)
 8007e56:	f7f8 f9d3 	bl	8000200 <memchr>
 8007e5a:	9a04      	ldr	r2, [sp, #16]
 8007e5c:	b9d8      	cbnz	r0, 8007e96 <_svfiprintf_r+0xea>
 8007e5e:	06d0      	lsls	r0, r2, #27
 8007e60:	bf44      	itt	mi
 8007e62:	2320      	movmi	r3, #32
 8007e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e68:	0711      	lsls	r1, r2, #28
 8007e6a:	bf44      	itt	mi
 8007e6c:	232b      	movmi	r3, #43	@ 0x2b
 8007e6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e72:	f89a 3000 	ldrb.w	r3, [sl]
 8007e76:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e78:	d015      	beq.n	8007ea6 <_svfiprintf_r+0xfa>
 8007e7a:	9a07      	ldr	r2, [sp, #28]
 8007e7c:	4654      	mov	r4, sl
 8007e7e:	2000      	movs	r0, #0
 8007e80:	f04f 0c0a 	mov.w	ip, #10
 8007e84:	4621      	mov	r1, r4
 8007e86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e8a:	3b30      	subs	r3, #48	@ 0x30
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	d94b      	bls.n	8007f28 <_svfiprintf_r+0x17c>
 8007e90:	b1b0      	cbz	r0, 8007ec0 <_svfiprintf_r+0x114>
 8007e92:	9207      	str	r2, [sp, #28]
 8007e94:	e014      	b.n	8007ec0 <_svfiprintf_r+0x114>
 8007e96:	eba0 0308 	sub.w	r3, r0, r8
 8007e9a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	9304      	str	r3, [sp, #16]
 8007ea2:	46a2      	mov	sl, r4
 8007ea4:	e7d2      	b.n	8007e4c <_svfiprintf_r+0xa0>
 8007ea6:	9b03      	ldr	r3, [sp, #12]
 8007ea8:	1d19      	adds	r1, r3, #4
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	9103      	str	r1, [sp, #12]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	bfbb      	ittet	lt
 8007eb2:	425b      	neglt	r3, r3
 8007eb4:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb8:	9307      	strge	r3, [sp, #28]
 8007eba:	9307      	strlt	r3, [sp, #28]
 8007ebc:	bfb8      	it	lt
 8007ebe:	9204      	strlt	r2, [sp, #16]
 8007ec0:	7823      	ldrb	r3, [r4, #0]
 8007ec2:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ec4:	d10a      	bne.n	8007edc <_svfiprintf_r+0x130>
 8007ec6:	7863      	ldrb	r3, [r4, #1]
 8007ec8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eca:	d132      	bne.n	8007f32 <_svfiprintf_r+0x186>
 8007ecc:	9b03      	ldr	r3, [sp, #12]
 8007ece:	1d1a      	adds	r2, r3, #4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	9203      	str	r2, [sp, #12]
 8007ed4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ed8:	3402      	adds	r4, #2
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007fa0 <_svfiprintf_r+0x1f4>
 8007ee0:	7821      	ldrb	r1, [r4, #0]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	f7f8 f98b 	bl	8000200 <memchr>
 8007eea:	b138      	cbz	r0, 8007efc <_svfiprintf_r+0x150>
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	eba0 000a 	sub.w	r0, r0, sl
 8007ef2:	2240      	movs	r2, #64	@ 0x40
 8007ef4:	4082      	lsls	r2, r0
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f00:	4824      	ldr	r0, [pc, #144]	@ (8007f94 <_svfiprintf_r+0x1e8>)
 8007f02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f06:	2206      	movs	r2, #6
 8007f08:	f7f8 f97a 	bl	8000200 <memchr>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d036      	beq.n	8007f7e <_svfiprintf_r+0x1d2>
 8007f10:	4b21      	ldr	r3, [pc, #132]	@ (8007f98 <_svfiprintf_r+0x1ec>)
 8007f12:	bb1b      	cbnz	r3, 8007f5c <_svfiprintf_r+0x1b0>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	3307      	adds	r3, #7
 8007f18:	f023 0307 	bic.w	r3, r3, #7
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f22:	4433      	add	r3, r6
 8007f24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f26:	e76a      	b.n	8007dfe <_svfiprintf_r+0x52>
 8007f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e7a8      	b.n	8007e84 <_svfiprintf_r+0xd8>
 8007f32:	2300      	movs	r3, #0
 8007f34:	3401      	adds	r4, #1
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f04f 0c0a 	mov.w	ip, #10
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f44:	3a30      	subs	r2, #48	@ 0x30
 8007f46:	2a09      	cmp	r2, #9
 8007f48:	d903      	bls.n	8007f52 <_svfiprintf_r+0x1a6>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0c6      	beq.n	8007edc <_svfiprintf_r+0x130>
 8007f4e:	9105      	str	r1, [sp, #20]
 8007f50:	e7c4      	b.n	8007edc <_svfiprintf_r+0x130>
 8007f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f56:	4604      	mov	r4, r0
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e7f0      	b.n	8007f3e <_svfiprintf_r+0x192>
 8007f5c:	ab03      	add	r3, sp, #12
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4b0e      	ldr	r3, [pc, #56]	@ (8007f9c <_svfiprintf_r+0x1f0>)
 8007f64:	a904      	add	r1, sp, #16
 8007f66:	4638      	mov	r0, r7
 8007f68:	f7fd fe88 	bl	8005c7c <_printf_float>
 8007f6c:	1c42      	adds	r2, r0, #1
 8007f6e:	4606      	mov	r6, r0
 8007f70:	d1d6      	bne.n	8007f20 <_svfiprintf_r+0x174>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	065b      	lsls	r3, r3, #25
 8007f76:	f53f af2d 	bmi.w	8007dd4 <_svfiprintf_r+0x28>
 8007f7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007f7c:	e72c      	b.n	8007dd8 <_svfiprintf_r+0x2c>
 8007f7e:	ab03      	add	r3, sp, #12
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	462a      	mov	r2, r5
 8007f84:	4b05      	ldr	r3, [pc, #20]	@ (8007f9c <_svfiprintf_r+0x1f0>)
 8007f86:	a904      	add	r1, sp, #16
 8007f88:	4638      	mov	r0, r7
 8007f8a:	f7fe f90f 	bl	80061ac <_printf_i>
 8007f8e:	e7ed      	b.n	8007f6c <_svfiprintf_r+0x1c0>
 8007f90:	08008df8 	.word	0x08008df8
 8007f94:	08008e02 	.word	0x08008e02
 8007f98:	08005c7d 	.word	0x08005c7d
 8007f9c:	08007cf5 	.word	0x08007cf5
 8007fa0:	08008dfe 	.word	0x08008dfe

08007fa4 <__sflush_r>:
 8007fa4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fac:	0716      	lsls	r6, r2, #28
 8007fae:	4605      	mov	r5, r0
 8007fb0:	460c      	mov	r4, r1
 8007fb2:	d454      	bmi.n	800805e <__sflush_r+0xba>
 8007fb4:	684b      	ldr	r3, [r1, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dc02      	bgt.n	8007fc0 <__sflush_r+0x1c>
 8007fba:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dd48      	ble.n	8008052 <__sflush_r+0xae>
 8007fc0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	d045      	beq.n	8008052 <__sflush_r+0xae>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007fcc:	682f      	ldr	r7, [r5, #0]
 8007fce:	6a21      	ldr	r1, [r4, #32]
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	d030      	beq.n	8008036 <__sflush_r+0x92>
 8007fd4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007fd6:	89a3      	ldrh	r3, [r4, #12]
 8007fd8:	0759      	lsls	r1, r3, #29
 8007fda:	d505      	bpl.n	8007fe8 <__sflush_r+0x44>
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	1ad2      	subs	r2, r2, r3
 8007fe0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007fe2:	b10b      	cbz	r3, 8007fe8 <__sflush_r+0x44>
 8007fe4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007fe6:	1ad2      	subs	r2, r2, r3
 8007fe8:	2300      	movs	r3, #0
 8007fea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007fec:	6a21      	ldr	r1, [r4, #32]
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b0      	blx	r6
 8007ff2:	1c43      	adds	r3, r0, #1
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	d106      	bne.n	8008006 <__sflush_r+0x62>
 8007ff8:	6829      	ldr	r1, [r5, #0]
 8007ffa:	291d      	cmp	r1, #29
 8007ffc:	d82b      	bhi.n	8008056 <__sflush_r+0xb2>
 8007ffe:	4a2a      	ldr	r2, [pc, #168]	@ (80080a8 <__sflush_r+0x104>)
 8008000:	410a      	asrs	r2, r1
 8008002:	07d6      	lsls	r6, r2, #31
 8008004:	d427      	bmi.n	8008056 <__sflush_r+0xb2>
 8008006:	2200      	movs	r2, #0
 8008008:	6062      	str	r2, [r4, #4]
 800800a:	04d9      	lsls	r1, r3, #19
 800800c:	6922      	ldr	r2, [r4, #16]
 800800e:	6022      	str	r2, [r4, #0]
 8008010:	d504      	bpl.n	800801c <__sflush_r+0x78>
 8008012:	1c42      	adds	r2, r0, #1
 8008014:	d101      	bne.n	800801a <__sflush_r+0x76>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	b903      	cbnz	r3, 800801c <__sflush_r+0x78>
 800801a:	6560      	str	r0, [r4, #84]	@ 0x54
 800801c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800801e:	602f      	str	r7, [r5, #0]
 8008020:	b1b9      	cbz	r1, 8008052 <__sflush_r+0xae>
 8008022:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008026:	4299      	cmp	r1, r3
 8008028:	d002      	beq.n	8008030 <__sflush_r+0x8c>
 800802a:	4628      	mov	r0, r5
 800802c:	f7ff f9e0 	bl	80073f0 <_free_r>
 8008030:	2300      	movs	r3, #0
 8008032:	6363      	str	r3, [r4, #52]	@ 0x34
 8008034:	e00d      	b.n	8008052 <__sflush_r+0xae>
 8008036:	2301      	movs	r3, #1
 8008038:	4628      	mov	r0, r5
 800803a:	47b0      	blx	r6
 800803c:	4602      	mov	r2, r0
 800803e:	1c50      	adds	r0, r2, #1
 8008040:	d1c9      	bne.n	8007fd6 <__sflush_r+0x32>
 8008042:	682b      	ldr	r3, [r5, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d0c6      	beq.n	8007fd6 <__sflush_r+0x32>
 8008048:	2b1d      	cmp	r3, #29
 800804a:	d001      	beq.n	8008050 <__sflush_r+0xac>
 800804c:	2b16      	cmp	r3, #22
 800804e:	d11e      	bne.n	800808e <__sflush_r+0xea>
 8008050:	602f      	str	r7, [r5, #0]
 8008052:	2000      	movs	r0, #0
 8008054:	e022      	b.n	800809c <__sflush_r+0xf8>
 8008056:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800805a:	b21b      	sxth	r3, r3
 800805c:	e01b      	b.n	8008096 <__sflush_r+0xf2>
 800805e:	690f      	ldr	r7, [r1, #16]
 8008060:	2f00      	cmp	r7, #0
 8008062:	d0f6      	beq.n	8008052 <__sflush_r+0xae>
 8008064:	0793      	lsls	r3, r2, #30
 8008066:	680e      	ldr	r6, [r1, #0]
 8008068:	bf08      	it	eq
 800806a:	694b      	ldreq	r3, [r1, #20]
 800806c:	600f      	str	r7, [r1, #0]
 800806e:	bf18      	it	ne
 8008070:	2300      	movne	r3, #0
 8008072:	eba6 0807 	sub.w	r8, r6, r7
 8008076:	608b      	str	r3, [r1, #8]
 8008078:	f1b8 0f00 	cmp.w	r8, #0
 800807c:	dde9      	ble.n	8008052 <__sflush_r+0xae>
 800807e:	6a21      	ldr	r1, [r4, #32]
 8008080:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008082:	4643      	mov	r3, r8
 8008084:	463a      	mov	r2, r7
 8008086:	4628      	mov	r0, r5
 8008088:	47b0      	blx	r6
 800808a:	2800      	cmp	r0, #0
 800808c:	dc08      	bgt.n	80080a0 <__sflush_r+0xfc>
 800808e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008092:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a0:	4407      	add	r7, r0
 80080a2:	eba8 0800 	sub.w	r8, r8, r0
 80080a6:	e7e7      	b.n	8008078 <__sflush_r+0xd4>
 80080a8:	dfbffffe 	.word	0xdfbffffe

080080ac <_fflush_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	690b      	ldr	r3, [r1, #16]
 80080b0:	4605      	mov	r5, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	b913      	cbnz	r3, 80080bc <_fflush_r+0x10>
 80080b6:	2500      	movs	r5, #0
 80080b8:	4628      	mov	r0, r5
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	b118      	cbz	r0, 80080c6 <_fflush_r+0x1a>
 80080be:	6a03      	ldr	r3, [r0, #32]
 80080c0:	b90b      	cbnz	r3, 80080c6 <_fflush_r+0x1a>
 80080c2:	f7fe fa1f 	bl	8006504 <__sinit>
 80080c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d0f3      	beq.n	80080b6 <_fflush_r+0xa>
 80080ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80080d0:	07d0      	lsls	r0, r2, #31
 80080d2:	d404      	bmi.n	80080de <_fflush_r+0x32>
 80080d4:	0599      	lsls	r1, r3, #22
 80080d6:	d402      	bmi.n	80080de <_fflush_r+0x32>
 80080d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080da:	f7fe fb2a 	bl	8006732 <__retarget_lock_acquire_recursive>
 80080de:	4628      	mov	r0, r5
 80080e0:	4621      	mov	r1, r4
 80080e2:	f7ff ff5f 	bl	8007fa4 <__sflush_r>
 80080e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80080e8:	07da      	lsls	r2, r3, #31
 80080ea:	4605      	mov	r5, r0
 80080ec:	d4e4      	bmi.n	80080b8 <_fflush_r+0xc>
 80080ee:	89a3      	ldrh	r3, [r4, #12]
 80080f0:	059b      	lsls	r3, r3, #22
 80080f2:	d4e1      	bmi.n	80080b8 <_fflush_r+0xc>
 80080f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80080f6:	f7fe fb1d 	bl	8006734 <__retarget_lock_release_recursive>
 80080fa:	e7dd      	b.n	80080b8 <_fflush_r+0xc>

080080fc <memmove>:
 80080fc:	4288      	cmp	r0, r1
 80080fe:	b510      	push	{r4, lr}
 8008100:	eb01 0402 	add.w	r4, r1, r2
 8008104:	d902      	bls.n	800810c <memmove+0x10>
 8008106:	4284      	cmp	r4, r0
 8008108:	4623      	mov	r3, r4
 800810a:	d807      	bhi.n	800811c <memmove+0x20>
 800810c:	1e43      	subs	r3, r0, #1
 800810e:	42a1      	cmp	r1, r4
 8008110:	d008      	beq.n	8008124 <memmove+0x28>
 8008112:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008116:	f803 2f01 	strb.w	r2, [r3, #1]!
 800811a:	e7f8      	b.n	800810e <memmove+0x12>
 800811c:	4402      	add	r2, r0
 800811e:	4601      	mov	r1, r0
 8008120:	428a      	cmp	r2, r1
 8008122:	d100      	bne.n	8008126 <memmove+0x2a>
 8008124:	bd10      	pop	{r4, pc}
 8008126:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800812a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800812e:	e7f7      	b.n	8008120 <memmove+0x24>

08008130 <_sbrk_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d06      	ldr	r5, [pc, #24]	@ (800814c <_sbrk_r+0x1c>)
 8008134:	2300      	movs	r3, #0
 8008136:	4604      	mov	r4, r0
 8008138:	4608      	mov	r0, r1
 800813a:	602b      	str	r3, [r5, #0]
 800813c:	f7f9 fd0c 	bl	8001b58 <_sbrk>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_sbrk_r+0x1a>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_sbrk_r+0x1a>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	200004a8 	.word	0x200004a8

08008150 <__assert_func>:
 8008150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008152:	4614      	mov	r4, r2
 8008154:	461a      	mov	r2, r3
 8008156:	4b09      	ldr	r3, [pc, #36]	@ (800817c <__assert_func+0x2c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4605      	mov	r5, r0
 800815c:	68d8      	ldr	r0, [r3, #12]
 800815e:	b954      	cbnz	r4, 8008176 <__assert_func+0x26>
 8008160:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <__assert_func+0x30>)
 8008162:	461c      	mov	r4, r3
 8008164:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008168:	9100      	str	r1, [sp, #0]
 800816a:	462b      	mov	r3, r5
 800816c:	4905      	ldr	r1, [pc, #20]	@ (8008184 <__assert_func+0x34>)
 800816e:	f000 f86f 	bl	8008250 <fiprintf>
 8008172:	f000 f87f 	bl	8008274 <abort>
 8008176:	4b04      	ldr	r3, [pc, #16]	@ (8008188 <__assert_func+0x38>)
 8008178:	e7f4      	b.n	8008164 <__assert_func+0x14>
 800817a:	bf00      	nop
 800817c:	2000004c 	.word	0x2000004c
 8008180:	08008e4e 	.word	0x08008e4e
 8008184:	08008e20 	.word	0x08008e20
 8008188:	08008e13 	.word	0x08008e13

0800818c <_calloc_r>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	fba1 5402 	umull	r5, r4, r1, r2
 8008192:	b93c      	cbnz	r4, 80081a4 <_calloc_r+0x18>
 8008194:	4629      	mov	r1, r5
 8008196:	f7ff f99f 	bl	80074d8 <_malloc_r>
 800819a:	4606      	mov	r6, r0
 800819c:	b928      	cbnz	r0, 80081aa <_calloc_r+0x1e>
 800819e:	2600      	movs	r6, #0
 80081a0:	4630      	mov	r0, r6
 80081a2:	bd70      	pop	{r4, r5, r6, pc}
 80081a4:	220c      	movs	r2, #12
 80081a6:	6002      	str	r2, [r0, #0]
 80081a8:	e7f9      	b.n	800819e <_calloc_r+0x12>
 80081aa:	462a      	mov	r2, r5
 80081ac:	4621      	mov	r1, r4
 80081ae:	f7fe fa42 	bl	8006636 <memset>
 80081b2:	e7f5      	b.n	80081a0 <_calloc_r+0x14>

080081b4 <__ascii_mbtowc>:
 80081b4:	b082      	sub	sp, #8
 80081b6:	b901      	cbnz	r1, 80081ba <__ascii_mbtowc+0x6>
 80081b8:	a901      	add	r1, sp, #4
 80081ba:	b142      	cbz	r2, 80081ce <__ascii_mbtowc+0x1a>
 80081bc:	b14b      	cbz	r3, 80081d2 <__ascii_mbtowc+0x1e>
 80081be:	7813      	ldrb	r3, [r2, #0]
 80081c0:	600b      	str	r3, [r1, #0]
 80081c2:	7812      	ldrb	r2, [r2, #0]
 80081c4:	1e10      	subs	r0, r2, #0
 80081c6:	bf18      	it	ne
 80081c8:	2001      	movne	r0, #1
 80081ca:	b002      	add	sp, #8
 80081cc:	4770      	bx	lr
 80081ce:	4610      	mov	r0, r2
 80081d0:	e7fb      	b.n	80081ca <__ascii_mbtowc+0x16>
 80081d2:	f06f 0001 	mvn.w	r0, #1
 80081d6:	e7f8      	b.n	80081ca <__ascii_mbtowc+0x16>

080081d8 <_realloc_r>:
 80081d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081dc:	4680      	mov	r8, r0
 80081de:	4615      	mov	r5, r2
 80081e0:	460c      	mov	r4, r1
 80081e2:	b921      	cbnz	r1, 80081ee <_realloc_r+0x16>
 80081e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081e8:	4611      	mov	r1, r2
 80081ea:	f7ff b975 	b.w	80074d8 <_malloc_r>
 80081ee:	b92a      	cbnz	r2, 80081fc <_realloc_r+0x24>
 80081f0:	f7ff f8fe 	bl	80073f0 <_free_r>
 80081f4:	2400      	movs	r4, #0
 80081f6:	4620      	mov	r0, r4
 80081f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081fc:	f000 f841 	bl	8008282 <_malloc_usable_size_r>
 8008200:	4285      	cmp	r5, r0
 8008202:	4606      	mov	r6, r0
 8008204:	d802      	bhi.n	800820c <_realloc_r+0x34>
 8008206:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800820a:	d8f4      	bhi.n	80081f6 <_realloc_r+0x1e>
 800820c:	4629      	mov	r1, r5
 800820e:	4640      	mov	r0, r8
 8008210:	f7ff f962 	bl	80074d8 <_malloc_r>
 8008214:	4607      	mov	r7, r0
 8008216:	2800      	cmp	r0, #0
 8008218:	d0ec      	beq.n	80081f4 <_realloc_r+0x1c>
 800821a:	42b5      	cmp	r5, r6
 800821c:	462a      	mov	r2, r5
 800821e:	4621      	mov	r1, r4
 8008220:	bf28      	it	cs
 8008222:	4632      	movcs	r2, r6
 8008224:	f7fe fa87 	bl	8006736 <memcpy>
 8008228:	4621      	mov	r1, r4
 800822a:	4640      	mov	r0, r8
 800822c:	f7ff f8e0 	bl	80073f0 <_free_r>
 8008230:	463c      	mov	r4, r7
 8008232:	e7e0      	b.n	80081f6 <_realloc_r+0x1e>

08008234 <__ascii_wctomb>:
 8008234:	4603      	mov	r3, r0
 8008236:	4608      	mov	r0, r1
 8008238:	b141      	cbz	r1, 800824c <__ascii_wctomb+0x18>
 800823a:	2aff      	cmp	r2, #255	@ 0xff
 800823c:	d904      	bls.n	8008248 <__ascii_wctomb+0x14>
 800823e:	228a      	movs	r2, #138	@ 0x8a
 8008240:	601a      	str	r2, [r3, #0]
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
 8008246:	4770      	bx	lr
 8008248:	700a      	strb	r2, [r1, #0]
 800824a:	2001      	movs	r0, #1
 800824c:	4770      	bx	lr
	...

08008250 <fiprintf>:
 8008250:	b40e      	push	{r1, r2, r3}
 8008252:	b503      	push	{r0, r1, lr}
 8008254:	4601      	mov	r1, r0
 8008256:	ab03      	add	r3, sp, #12
 8008258:	4805      	ldr	r0, [pc, #20]	@ (8008270 <fiprintf+0x20>)
 800825a:	f853 2b04 	ldr.w	r2, [r3], #4
 800825e:	6800      	ldr	r0, [r0, #0]
 8008260:	9301      	str	r3, [sp, #4]
 8008262:	f000 f83f 	bl	80082e4 <_vfiprintf_r>
 8008266:	b002      	add	sp, #8
 8008268:	f85d eb04 	ldr.w	lr, [sp], #4
 800826c:	b003      	add	sp, #12
 800826e:	4770      	bx	lr
 8008270:	2000004c 	.word	0x2000004c

08008274 <abort>:
 8008274:	b508      	push	{r3, lr}
 8008276:	2006      	movs	r0, #6
 8008278:	f000 fa08 	bl	800868c <raise>
 800827c:	2001      	movs	r0, #1
 800827e:	f7f9 fbf2 	bl	8001a66 <_exit>

08008282 <_malloc_usable_size_r>:
 8008282:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008286:	1f18      	subs	r0, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfbc      	itt	lt
 800828c:	580b      	ldrlt	r3, [r1, r0]
 800828e:	18c0      	addlt	r0, r0, r3
 8008290:	4770      	bx	lr

08008292 <__sfputc_r>:
 8008292:	6893      	ldr	r3, [r2, #8]
 8008294:	3b01      	subs	r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	b410      	push	{r4}
 800829a:	6093      	str	r3, [r2, #8]
 800829c:	da08      	bge.n	80082b0 <__sfputc_r+0x1e>
 800829e:	6994      	ldr	r4, [r2, #24]
 80082a0:	42a3      	cmp	r3, r4
 80082a2:	db01      	blt.n	80082a8 <__sfputc_r+0x16>
 80082a4:	290a      	cmp	r1, #10
 80082a6:	d103      	bne.n	80082b0 <__sfputc_r+0x1e>
 80082a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082ac:	f000 b932 	b.w	8008514 <__swbuf_r>
 80082b0:	6813      	ldr	r3, [r2, #0]
 80082b2:	1c58      	adds	r0, r3, #1
 80082b4:	6010      	str	r0, [r2, #0]
 80082b6:	7019      	strb	r1, [r3, #0]
 80082b8:	4608      	mov	r0, r1
 80082ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <__sfputs_r>:
 80082c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c2:	4606      	mov	r6, r0
 80082c4:	460f      	mov	r7, r1
 80082c6:	4614      	mov	r4, r2
 80082c8:	18d5      	adds	r5, r2, r3
 80082ca:	42ac      	cmp	r4, r5
 80082cc:	d101      	bne.n	80082d2 <__sfputs_r+0x12>
 80082ce:	2000      	movs	r0, #0
 80082d0:	e007      	b.n	80082e2 <__sfputs_r+0x22>
 80082d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082d6:	463a      	mov	r2, r7
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff ffda 	bl	8008292 <__sfputc_r>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	d1f3      	bne.n	80082ca <__sfputs_r+0xa>
 80082e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080082e4 <_vfiprintf_r>:
 80082e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082e8:	460d      	mov	r5, r1
 80082ea:	b09d      	sub	sp, #116	@ 0x74
 80082ec:	4614      	mov	r4, r2
 80082ee:	4698      	mov	r8, r3
 80082f0:	4606      	mov	r6, r0
 80082f2:	b118      	cbz	r0, 80082fc <_vfiprintf_r+0x18>
 80082f4:	6a03      	ldr	r3, [r0, #32]
 80082f6:	b90b      	cbnz	r3, 80082fc <_vfiprintf_r+0x18>
 80082f8:	f7fe f904 	bl	8006504 <__sinit>
 80082fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082fe:	07d9      	lsls	r1, r3, #31
 8008300:	d405      	bmi.n	800830e <_vfiprintf_r+0x2a>
 8008302:	89ab      	ldrh	r3, [r5, #12]
 8008304:	059a      	lsls	r2, r3, #22
 8008306:	d402      	bmi.n	800830e <_vfiprintf_r+0x2a>
 8008308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800830a:	f7fe fa12 	bl	8006732 <__retarget_lock_acquire_recursive>
 800830e:	89ab      	ldrh	r3, [r5, #12]
 8008310:	071b      	lsls	r3, r3, #28
 8008312:	d501      	bpl.n	8008318 <_vfiprintf_r+0x34>
 8008314:	692b      	ldr	r3, [r5, #16]
 8008316:	b99b      	cbnz	r3, 8008340 <_vfiprintf_r+0x5c>
 8008318:	4629      	mov	r1, r5
 800831a:	4630      	mov	r0, r6
 800831c:	f000 f938 	bl	8008590 <__swsetup_r>
 8008320:	b170      	cbz	r0, 8008340 <_vfiprintf_r+0x5c>
 8008322:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008324:	07dc      	lsls	r4, r3, #31
 8008326:	d504      	bpl.n	8008332 <_vfiprintf_r+0x4e>
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	b01d      	add	sp, #116	@ 0x74
 800832e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008332:	89ab      	ldrh	r3, [r5, #12]
 8008334:	0598      	lsls	r0, r3, #22
 8008336:	d4f7      	bmi.n	8008328 <_vfiprintf_r+0x44>
 8008338:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800833a:	f7fe f9fb 	bl	8006734 <__retarget_lock_release_recursive>
 800833e:	e7f3      	b.n	8008328 <_vfiprintf_r+0x44>
 8008340:	2300      	movs	r3, #0
 8008342:	9309      	str	r3, [sp, #36]	@ 0x24
 8008344:	2320      	movs	r3, #32
 8008346:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800834a:	f8cd 800c 	str.w	r8, [sp, #12]
 800834e:	2330      	movs	r3, #48	@ 0x30
 8008350:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008500 <_vfiprintf_r+0x21c>
 8008354:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008358:	f04f 0901 	mov.w	r9, #1
 800835c:	4623      	mov	r3, r4
 800835e:	469a      	mov	sl, r3
 8008360:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008364:	b10a      	cbz	r2, 800836a <_vfiprintf_r+0x86>
 8008366:	2a25      	cmp	r2, #37	@ 0x25
 8008368:	d1f9      	bne.n	800835e <_vfiprintf_r+0x7a>
 800836a:	ebba 0b04 	subs.w	fp, sl, r4
 800836e:	d00b      	beq.n	8008388 <_vfiprintf_r+0xa4>
 8008370:	465b      	mov	r3, fp
 8008372:	4622      	mov	r2, r4
 8008374:	4629      	mov	r1, r5
 8008376:	4630      	mov	r0, r6
 8008378:	f7ff ffa2 	bl	80082c0 <__sfputs_r>
 800837c:	3001      	adds	r0, #1
 800837e:	f000 80a7 	beq.w	80084d0 <_vfiprintf_r+0x1ec>
 8008382:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008384:	445a      	add	r2, fp
 8008386:	9209      	str	r2, [sp, #36]	@ 0x24
 8008388:	f89a 3000 	ldrb.w	r3, [sl]
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 809f 	beq.w	80084d0 <_vfiprintf_r+0x1ec>
 8008392:	2300      	movs	r3, #0
 8008394:	f04f 32ff 	mov.w	r2, #4294967295
 8008398:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800839c:	f10a 0a01 	add.w	sl, sl, #1
 80083a0:	9304      	str	r3, [sp, #16]
 80083a2:	9307      	str	r3, [sp, #28]
 80083a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80083aa:	4654      	mov	r4, sl
 80083ac:	2205      	movs	r2, #5
 80083ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b2:	4853      	ldr	r0, [pc, #332]	@ (8008500 <_vfiprintf_r+0x21c>)
 80083b4:	f7f7 ff24 	bl	8000200 <memchr>
 80083b8:	9a04      	ldr	r2, [sp, #16]
 80083ba:	b9d8      	cbnz	r0, 80083f4 <_vfiprintf_r+0x110>
 80083bc:	06d1      	lsls	r1, r2, #27
 80083be:	bf44      	itt	mi
 80083c0:	2320      	movmi	r3, #32
 80083c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083c6:	0713      	lsls	r3, r2, #28
 80083c8:	bf44      	itt	mi
 80083ca:	232b      	movmi	r3, #43	@ 0x2b
 80083cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083d0:	f89a 3000 	ldrb.w	r3, [sl]
 80083d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80083d6:	d015      	beq.n	8008404 <_vfiprintf_r+0x120>
 80083d8:	9a07      	ldr	r2, [sp, #28]
 80083da:	4654      	mov	r4, sl
 80083dc:	2000      	movs	r0, #0
 80083de:	f04f 0c0a 	mov.w	ip, #10
 80083e2:	4621      	mov	r1, r4
 80083e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083e8:	3b30      	subs	r3, #48	@ 0x30
 80083ea:	2b09      	cmp	r3, #9
 80083ec:	d94b      	bls.n	8008486 <_vfiprintf_r+0x1a2>
 80083ee:	b1b0      	cbz	r0, 800841e <_vfiprintf_r+0x13a>
 80083f0:	9207      	str	r2, [sp, #28]
 80083f2:	e014      	b.n	800841e <_vfiprintf_r+0x13a>
 80083f4:	eba0 0308 	sub.w	r3, r0, r8
 80083f8:	fa09 f303 	lsl.w	r3, r9, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	9304      	str	r3, [sp, #16]
 8008400:	46a2      	mov	sl, r4
 8008402:	e7d2      	b.n	80083aa <_vfiprintf_r+0xc6>
 8008404:	9b03      	ldr	r3, [sp, #12]
 8008406:	1d19      	adds	r1, r3, #4
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	9103      	str	r1, [sp, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	bfbb      	ittet	lt
 8008410:	425b      	neglt	r3, r3
 8008412:	f042 0202 	orrlt.w	r2, r2, #2
 8008416:	9307      	strge	r3, [sp, #28]
 8008418:	9307      	strlt	r3, [sp, #28]
 800841a:	bfb8      	it	lt
 800841c:	9204      	strlt	r2, [sp, #16]
 800841e:	7823      	ldrb	r3, [r4, #0]
 8008420:	2b2e      	cmp	r3, #46	@ 0x2e
 8008422:	d10a      	bne.n	800843a <_vfiprintf_r+0x156>
 8008424:	7863      	ldrb	r3, [r4, #1]
 8008426:	2b2a      	cmp	r3, #42	@ 0x2a
 8008428:	d132      	bne.n	8008490 <_vfiprintf_r+0x1ac>
 800842a:	9b03      	ldr	r3, [sp, #12]
 800842c:	1d1a      	adds	r2, r3, #4
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	9203      	str	r2, [sp, #12]
 8008432:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008436:	3402      	adds	r4, #2
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008510 <_vfiprintf_r+0x22c>
 800843e:	7821      	ldrb	r1, [r4, #0]
 8008440:	2203      	movs	r2, #3
 8008442:	4650      	mov	r0, sl
 8008444:	f7f7 fedc 	bl	8000200 <memchr>
 8008448:	b138      	cbz	r0, 800845a <_vfiprintf_r+0x176>
 800844a:	9b04      	ldr	r3, [sp, #16]
 800844c:	eba0 000a 	sub.w	r0, r0, sl
 8008450:	2240      	movs	r2, #64	@ 0x40
 8008452:	4082      	lsls	r2, r0
 8008454:	4313      	orrs	r3, r2
 8008456:	3401      	adds	r4, #1
 8008458:	9304      	str	r3, [sp, #16]
 800845a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800845e:	4829      	ldr	r0, [pc, #164]	@ (8008504 <_vfiprintf_r+0x220>)
 8008460:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008464:	2206      	movs	r2, #6
 8008466:	f7f7 fecb 	bl	8000200 <memchr>
 800846a:	2800      	cmp	r0, #0
 800846c:	d03f      	beq.n	80084ee <_vfiprintf_r+0x20a>
 800846e:	4b26      	ldr	r3, [pc, #152]	@ (8008508 <_vfiprintf_r+0x224>)
 8008470:	bb1b      	cbnz	r3, 80084ba <_vfiprintf_r+0x1d6>
 8008472:	9b03      	ldr	r3, [sp, #12]
 8008474:	3307      	adds	r3, #7
 8008476:	f023 0307 	bic.w	r3, r3, #7
 800847a:	3308      	adds	r3, #8
 800847c:	9303      	str	r3, [sp, #12]
 800847e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008480:	443b      	add	r3, r7
 8008482:	9309      	str	r3, [sp, #36]	@ 0x24
 8008484:	e76a      	b.n	800835c <_vfiprintf_r+0x78>
 8008486:	fb0c 3202 	mla	r2, ip, r2, r3
 800848a:	460c      	mov	r4, r1
 800848c:	2001      	movs	r0, #1
 800848e:	e7a8      	b.n	80083e2 <_vfiprintf_r+0xfe>
 8008490:	2300      	movs	r3, #0
 8008492:	3401      	adds	r4, #1
 8008494:	9305      	str	r3, [sp, #20]
 8008496:	4619      	mov	r1, r3
 8008498:	f04f 0c0a 	mov.w	ip, #10
 800849c:	4620      	mov	r0, r4
 800849e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084a2:	3a30      	subs	r2, #48	@ 0x30
 80084a4:	2a09      	cmp	r2, #9
 80084a6:	d903      	bls.n	80084b0 <_vfiprintf_r+0x1cc>
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d0c6      	beq.n	800843a <_vfiprintf_r+0x156>
 80084ac:	9105      	str	r1, [sp, #20]
 80084ae:	e7c4      	b.n	800843a <_vfiprintf_r+0x156>
 80084b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80084b4:	4604      	mov	r4, r0
 80084b6:	2301      	movs	r3, #1
 80084b8:	e7f0      	b.n	800849c <_vfiprintf_r+0x1b8>
 80084ba:	ab03      	add	r3, sp, #12
 80084bc:	9300      	str	r3, [sp, #0]
 80084be:	462a      	mov	r2, r5
 80084c0:	4b12      	ldr	r3, [pc, #72]	@ (800850c <_vfiprintf_r+0x228>)
 80084c2:	a904      	add	r1, sp, #16
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7fd fbd9 	bl	8005c7c <_printf_float>
 80084ca:	4607      	mov	r7, r0
 80084cc:	1c78      	adds	r0, r7, #1
 80084ce:	d1d6      	bne.n	800847e <_vfiprintf_r+0x19a>
 80084d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084d2:	07d9      	lsls	r1, r3, #31
 80084d4:	d405      	bmi.n	80084e2 <_vfiprintf_r+0x1fe>
 80084d6:	89ab      	ldrh	r3, [r5, #12]
 80084d8:	059a      	lsls	r2, r3, #22
 80084da:	d402      	bmi.n	80084e2 <_vfiprintf_r+0x1fe>
 80084dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084de:	f7fe f929 	bl	8006734 <__retarget_lock_release_recursive>
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	065b      	lsls	r3, r3, #25
 80084e6:	f53f af1f 	bmi.w	8008328 <_vfiprintf_r+0x44>
 80084ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084ec:	e71e      	b.n	800832c <_vfiprintf_r+0x48>
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	462a      	mov	r2, r5
 80084f4:	4b05      	ldr	r3, [pc, #20]	@ (800850c <_vfiprintf_r+0x228>)
 80084f6:	a904      	add	r1, sp, #16
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7fd fe57 	bl	80061ac <_printf_i>
 80084fe:	e7e4      	b.n	80084ca <_vfiprintf_r+0x1e6>
 8008500:	08008df8 	.word	0x08008df8
 8008504:	08008e02 	.word	0x08008e02
 8008508:	08005c7d 	.word	0x08005c7d
 800850c:	080082c1 	.word	0x080082c1
 8008510:	08008dfe 	.word	0x08008dfe

08008514 <__swbuf_r>:
 8008514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008516:	460e      	mov	r6, r1
 8008518:	4614      	mov	r4, r2
 800851a:	4605      	mov	r5, r0
 800851c:	b118      	cbz	r0, 8008526 <__swbuf_r+0x12>
 800851e:	6a03      	ldr	r3, [r0, #32]
 8008520:	b90b      	cbnz	r3, 8008526 <__swbuf_r+0x12>
 8008522:	f7fd ffef 	bl	8006504 <__sinit>
 8008526:	69a3      	ldr	r3, [r4, #24]
 8008528:	60a3      	str	r3, [r4, #8]
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	071a      	lsls	r2, r3, #28
 800852e:	d501      	bpl.n	8008534 <__swbuf_r+0x20>
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	b943      	cbnz	r3, 8008546 <__swbuf_r+0x32>
 8008534:	4621      	mov	r1, r4
 8008536:	4628      	mov	r0, r5
 8008538:	f000 f82a 	bl	8008590 <__swsetup_r>
 800853c:	b118      	cbz	r0, 8008546 <__swbuf_r+0x32>
 800853e:	f04f 37ff 	mov.w	r7, #4294967295
 8008542:	4638      	mov	r0, r7
 8008544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008546:	6823      	ldr	r3, [r4, #0]
 8008548:	6922      	ldr	r2, [r4, #16]
 800854a:	1a98      	subs	r0, r3, r2
 800854c:	6963      	ldr	r3, [r4, #20]
 800854e:	b2f6      	uxtb	r6, r6
 8008550:	4283      	cmp	r3, r0
 8008552:	4637      	mov	r7, r6
 8008554:	dc05      	bgt.n	8008562 <__swbuf_r+0x4e>
 8008556:	4621      	mov	r1, r4
 8008558:	4628      	mov	r0, r5
 800855a:	f7ff fda7 	bl	80080ac <_fflush_r>
 800855e:	2800      	cmp	r0, #0
 8008560:	d1ed      	bne.n	800853e <__swbuf_r+0x2a>
 8008562:	68a3      	ldr	r3, [r4, #8]
 8008564:	3b01      	subs	r3, #1
 8008566:	60a3      	str	r3, [r4, #8]
 8008568:	6823      	ldr	r3, [r4, #0]
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	6022      	str	r2, [r4, #0]
 800856e:	701e      	strb	r6, [r3, #0]
 8008570:	6962      	ldr	r2, [r4, #20]
 8008572:	1c43      	adds	r3, r0, #1
 8008574:	429a      	cmp	r2, r3
 8008576:	d004      	beq.n	8008582 <__swbuf_r+0x6e>
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	07db      	lsls	r3, r3, #31
 800857c:	d5e1      	bpl.n	8008542 <__swbuf_r+0x2e>
 800857e:	2e0a      	cmp	r6, #10
 8008580:	d1df      	bne.n	8008542 <__swbuf_r+0x2e>
 8008582:	4621      	mov	r1, r4
 8008584:	4628      	mov	r0, r5
 8008586:	f7ff fd91 	bl	80080ac <_fflush_r>
 800858a:	2800      	cmp	r0, #0
 800858c:	d0d9      	beq.n	8008542 <__swbuf_r+0x2e>
 800858e:	e7d6      	b.n	800853e <__swbuf_r+0x2a>

08008590 <__swsetup_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4b29      	ldr	r3, [pc, #164]	@ (8008638 <__swsetup_r+0xa8>)
 8008594:	4605      	mov	r5, r0
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	460c      	mov	r4, r1
 800859a:	b118      	cbz	r0, 80085a4 <__swsetup_r+0x14>
 800859c:	6a03      	ldr	r3, [r0, #32]
 800859e:	b90b      	cbnz	r3, 80085a4 <__swsetup_r+0x14>
 80085a0:	f7fd ffb0 	bl	8006504 <__sinit>
 80085a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085a8:	0719      	lsls	r1, r3, #28
 80085aa:	d422      	bmi.n	80085f2 <__swsetup_r+0x62>
 80085ac:	06da      	lsls	r2, r3, #27
 80085ae:	d407      	bmi.n	80085c0 <__swsetup_r+0x30>
 80085b0:	2209      	movs	r2, #9
 80085b2:	602a      	str	r2, [r5, #0]
 80085b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085b8:	81a3      	strh	r3, [r4, #12]
 80085ba:	f04f 30ff 	mov.w	r0, #4294967295
 80085be:	e033      	b.n	8008628 <__swsetup_r+0x98>
 80085c0:	0758      	lsls	r0, r3, #29
 80085c2:	d512      	bpl.n	80085ea <__swsetup_r+0x5a>
 80085c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80085c6:	b141      	cbz	r1, 80085da <__swsetup_r+0x4a>
 80085c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80085cc:	4299      	cmp	r1, r3
 80085ce:	d002      	beq.n	80085d6 <__swsetup_r+0x46>
 80085d0:	4628      	mov	r0, r5
 80085d2:	f7fe ff0d 	bl	80073f0 <_free_r>
 80085d6:	2300      	movs	r3, #0
 80085d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80085e0:	81a3      	strh	r3, [r4, #12]
 80085e2:	2300      	movs	r3, #0
 80085e4:	6063      	str	r3, [r4, #4]
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	6023      	str	r3, [r4, #0]
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	f043 0308 	orr.w	r3, r3, #8
 80085f0:	81a3      	strh	r3, [r4, #12]
 80085f2:	6923      	ldr	r3, [r4, #16]
 80085f4:	b94b      	cbnz	r3, 800860a <__swsetup_r+0x7a>
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80085fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008600:	d003      	beq.n	800860a <__swsetup_r+0x7a>
 8008602:	4621      	mov	r1, r4
 8008604:	4628      	mov	r0, r5
 8008606:	f000 f883 	bl	8008710 <__smakebuf_r>
 800860a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860e:	f013 0201 	ands.w	r2, r3, #1
 8008612:	d00a      	beq.n	800862a <__swsetup_r+0x9a>
 8008614:	2200      	movs	r2, #0
 8008616:	60a2      	str	r2, [r4, #8]
 8008618:	6962      	ldr	r2, [r4, #20]
 800861a:	4252      	negs	r2, r2
 800861c:	61a2      	str	r2, [r4, #24]
 800861e:	6922      	ldr	r2, [r4, #16]
 8008620:	b942      	cbnz	r2, 8008634 <__swsetup_r+0xa4>
 8008622:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008626:	d1c5      	bne.n	80085b4 <__swsetup_r+0x24>
 8008628:	bd38      	pop	{r3, r4, r5, pc}
 800862a:	0799      	lsls	r1, r3, #30
 800862c:	bf58      	it	pl
 800862e:	6962      	ldrpl	r2, [r4, #20]
 8008630:	60a2      	str	r2, [r4, #8]
 8008632:	e7f4      	b.n	800861e <__swsetup_r+0x8e>
 8008634:	2000      	movs	r0, #0
 8008636:	e7f7      	b.n	8008628 <__swsetup_r+0x98>
 8008638:	2000004c 	.word	0x2000004c

0800863c <_raise_r>:
 800863c:	291f      	cmp	r1, #31
 800863e:	b538      	push	{r3, r4, r5, lr}
 8008640:	4605      	mov	r5, r0
 8008642:	460c      	mov	r4, r1
 8008644:	d904      	bls.n	8008650 <_raise_r+0x14>
 8008646:	2316      	movs	r3, #22
 8008648:	6003      	str	r3, [r0, #0]
 800864a:	f04f 30ff 	mov.w	r0, #4294967295
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008652:	b112      	cbz	r2, 800865a <_raise_r+0x1e>
 8008654:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008658:	b94b      	cbnz	r3, 800866e <_raise_r+0x32>
 800865a:	4628      	mov	r0, r5
 800865c:	f000 f830 	bl	80086c0 <_getpid_r>
 8008660:	4622      	mov	r2, r4
 8008662:	4601      	mov	r1, r0
 8008664:	4628      	mov	r0, r5
 8008666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800866a:	f000 b817 	b.w	800869c <_kill_r>
 800866e:	2b01      	cmp	r3, #1
 8008670:	d00a      	beq.n	8008688 <_raise_r+0x4c>
 8008672:	1c59      	adds	r1, r3, #1
 8008674:	d103      	bne.n	800867e <_raise_r+0x42>
 8008676:	2316      	movs	r3, #22
 8008678:	6003      	str	r3, [r0, #0]
 800867a:	2001      	movs	r0, #1
 800867c:	e7e7      	b.n	800864e <_raise_r+0x12>
 800867e:	2100      	movs	r1, #0
 8008680:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008684:	4620      	mov	r0, r4
 8008686:	4798      	blx	r3
 8008688:	2000      	movs	r0, #0
 800868a:	e7e0      	b.n	800864e <_raise_r+0x12>

0800868c <raise>:
 800868c:	4b02      	ldr	r3, [pc, #8]	@ (8008698 <raise+0xc>)
 800868e:	4601      	mov	r1, r0
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	f7ff bfd3 	b.w	800863c <_raise_r>
 8008696:	bf00      	nop
 8008698:	2000004c 	.word	0x2000004c

0800869c <_kill_r>:
 800869c:	b538      	push	{r3, r4, r5, lr}
 800869e:	4d07      	ldr	r5, [pc, #28]	@ (80086bc <_kill_r+0x20>)
 80086a0:	2300      	movs	r3, #0
 80086a2:	4604      	mov	r4, r0
 80086a4:	4608      	mov	r0, r1
 80086a6:	4611      	mov	r1, r2
 80086a8:	602b      	str	r3, [r5, #0]
 80086aa:	f7f9 f9cc 	bl	8001a46 <_kill>
 80086ae:	1c43      	adds	r3, r0, #1
 80086b0:	d102      	bne.n	80086b8 <_kill_r+0x1c>
 80086b2:	682b      	ldr	r3, [r5, #0]
 80086b4:	b103      	cbz	r3, 80086b8 <_kill_r+0x1c>
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	bd38      	pop	{r3, r4, r5, pc}
 80086ba:	bf00      	nop
 80086bc:	200004a8 	.word	0x200004a8

080086c0 <_getpid_r>:
 80086c0:	f7f9 b9b9 	b.w	8001a36 <_getpid>

080086c4 <__swhatbuf_r>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	460c      	mov	r4, r1
 80086c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086cc:	2900      	cmp	r1, #0
 80086ce:	b096      	sub	sp, #88	@ 0x58
 80086d0:	4615      	mov	r5, r2
 80086d2:	461e      	mov	r6, r3
 80086d4:	da0d      	bge.n	80086f2 <__swhatbuf_r+0x2e>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80086dc:	f04f 0100 	mov.w	r1, #0
 80086e0:	bf14      	ite	ne
 80086e2:	2340      	movne	r3, #64	@ 0x40
 80086e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80086e8:	2000      	movs	r0, #0
 80086ea:	6031      	str	r1, [r6, #0]
 80086ec:	602b      	str	r3, [r5, #0]
 80086ee:	b016      	add	sp, #88	@ 0x58
 80086f0:	bd70      	pop	{r4, r5, r6, pc}
 80086f2:	466a      	mov	r2, sp
 80086f4:	f000 f848 	bl	8008788 <_fstat_r>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	dbec      	blt.n	80086d6 <__swhatbuf_r+0x12>
 80086fc:	9901      	ldr	r1, [sp, #4]
 80086fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008702:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008706:	4259      	negs	r1, r3
 8008708:	4159      	adcs	r1, r3
 800870a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800870e:	e7eb      	b.n	80086e8 <__swhatbuf_r+0x24>

08008710 <__smakebuf_r>:
 8008710:	898b      	ldrh	r3, [r1, #12]
 8008712:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008714:	079d      	lsls	r5, r3, #30
 8008716:	4606      	mov	r6, r0
 8008718:	460c      	mov	r4, r1
 800871a:	d507      	bpl.n	800872c <__smakebuf_r+0x1c>
 800871c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	6123      	str	r3, [r4, #16]
 8008724:	2301      	movs	r3, #1
 8008726:	6163      	str	r3, [r4, #20]
 8008728:	b003      	add	sp, #12
 800872a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800872c:	ab01      	add	r3, sp, #4
 800872e:	466a      	mov	r2, sp
 8008730:	f7ff ffc8 	bl	80086c4 <__swhatbuf_r>
 8008734:	9f00      	ldr	r7, [sp, #0]
 8008736:	4605      	mov	r5, r0
 8008738:	4639      	mov	r1, r7
 800873a:	4630      	mov	r0, r6
 800873c:	f7fe fecc 	bl	80074d8 <_malloc_r>
 8008740:	b948      	cbnz	r0, 8008756 <__smakebuf_r+0x46>
 8008742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008746:	059a      	lsls	r2, r3, #22
 8008748:	d4ee      	bmi.n	8008728 <__smakebuf_r+0x18>
 800874a:	f023 0303 	bic.w	r3, r3, #3
 800874e:	f043 0302 	orr.w	r3, r3, #2
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	e7e2      	b.n	800871c <__smakebuf_r+0xc>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	6020      	str	r0, [r4, #0]
 800875a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	9b01      	ldr	r3, [sp, #4]
 8008762:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008766:	b15b      	cbz	r3, 8008780 <__smakebuf_r+0x70>
 8008768:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800876c:	4630      	mov	r0, r6
 800876e:	f000 f81d 	bl	80087ac <_isatty_r>
 8008772:	b128      	cbz	r0, 8008780 <__smakebuf_r+0x70>
 8008774:	89a3      	ldrh	r3, [r4, #12]
 8008776:	f023 0303 	bic.w	r3, r3, #3
 800877a:	f043 0301 	orr.w	r3, r3, #1
 800877e:	81a3      	strh	r3, [r4, #12]
 8008780:	89a3      	ldrh	r3, [r4, #12]
 8008782:	431d      	orrs	r5, r3
 8008784:	81a5      	strh	r5, [r4, #12]
 8008786:	e7cf      	b.n	8008728 <__smakebuf_r+0x18>

08008788 <_fstat_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d07      	ldr	r5, [pc, #28]	@ (80087a8 <_fstat_r+0x20>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	4611      	mov	r1, r2
 8008794:	602b      	str	r3, [r5, #0]
 8008796:	f7f9 f9b6 	bl	8001b06 <_fstat>
 800879a:	1c43      	adds	r3, r0, #1
 800879c:	d102      	bne.n	80087a4 <_fstat_r+0x1c>
 800879e:	682b      	ldr	r3, [r5, #0]
 80087a0:	b103      	cbz	r3, 80087a4 <_fstat_r+0x1c>
 80087a2:	6023      	str	r3, [r4, #0]
 80087a4:	bd38      	pop	{r3, r4, r5, pc}
 80087a6:	bf00      	nop
 80087a8:	200004a8 	.word	0x200004a8

080087ac <_isatty_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	4d06      	ldr	r5, [pc, #24]	@ (80087c8 <_isatty_r+0x1c>)
 80087b0:	2300      	movs	r3, #0
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	602b      	str	r3, [r5, #0]
 80087b8:	f7f9 f9b5 	bl	8001b26 <_isatty>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_isatty_r+0x1a>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_isatty_r+0x1a>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	200004a8 	.word	0x200004a8

080087cc <atan2f>:
 80087cc:	f000 b82e 	b.w	800882c <__ieee754_atan2f>

080087d0 <sqrtf>:
 80087d0:	b508      	push	{r3, lr}
 80087d2:	ed2d 8b02 	vpush	{d8}
 80087d6:	eeb0 8a40 	vmov.f32	s16, s0
 80087da:	f000 f817 	bl	800880c <__ieee754_sqrtf>
 80087de:	eeb4 8a48 	vcmp.f32	s16, s16
 80087e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e6:	d60c      	bvs.n	8008802 <sqrtf+0x32>
 80087e8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8008808 <sqrtf+0x38>
 80087ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80087f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087f4:	d505      	bpl.n	8008802 <sqrtf+0x32>
 80087f6:	f7fd ff71 	bl	80066dc <__errno>
 80087fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80087fe:	2321      	movs	r3, #33	@ 0x21
 8008800:	6003      	str	r3, [r0, #0]
 8008802:	ecbd 8b02 	vpop	{d8}
 8008806:	bd08      	pop	{r3, pc}
 8008808:	00000000 	.word	0x00000000

0800880c <__ieee754_sqrtf>:
 800880c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008810:	4770      	bx	lr

08008812 <feclearexcept>:
 8008812:	eef1 3a10 	vmrs	r3, fpscr
 8008816:	ea23 0000 	bic.w	r0, r3, r0
 800881a:	eee1 0a10 	vmsr	fpscr, r0
 800881e:	2000      	movs	r0, #0
 8008820:	4770      	bx	lr

08008822 <fetestexcept>:
 8008822:	eef1 3a10 	vmrs	r3, fpscr
 8008826:	4018      	ands	r0, r3
 8008828:	4770      	bx	lr
	...

0800882c <__ieee754_atan2f>:
 800882c:	ee10 2a90 	vmov	r2, s1
 8008830:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008834:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008838:	b510      	push	{r4, lr}
 800883a:	eef0 7a40 	vmov.f32	s15, s0
 800883e:	d806      	bhi.n	800884e <__ieee754_atan2f+0x22>
 8008840:	ee10 0a10 	vmov	r0, s0
 8008844:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008848:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800884c:	d904      	bls.n	8008858 <__ieee754_atan2f+0x2c>
 800884e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008852:	eeb0 0a67 	vmov.f32	s0, s15
 8008856:	bd10      	pop	{r4, pc}
 8008858:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800885c:	d103      	bne.n	8008866 <__ieee754_atan2f+0x3a>
 800885e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008862:	f000 b883 	b.w	800896c <atanf>
 8008866:	1794      	asrs	r4, r2, #30
 8008868:	f004 0402 	and.w	r4, r4, #2
 800886c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008870:	b943      	cbnz	r3, 8008884 <__ieee754_atan2f+0x58>
 8008872:	2c02      	cmp	r4, #2
 8008874:	d05e      	beq.n	8008934 <__ieee754_atan2f+0x108>
 8008876:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008948 <__ieee754_atan2f+0x11c>
 800887a:	2c03      	cmp	r4, #3
 800887c:	bf08      	it	eq
 800887e:	eef0 7a47 	vmoveq.f32	s15, s14
 8008882:	e7e6      	b.n	8008852 <__ieee754_atan2f+0x26>
 8008884:	b941      	cbnz	r1, 8008898 <__ieee754_atan2f+0x6c>
 8008886:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800894c <__ieee754_atan2f+0x120>
 800888a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008950 <__ieee754_atan2f+0x124>
 800888e:	2800      	cmp	r0, #0
 8008890:	bfb8      	it	lt
 8008892:	eef0 7a47 	vmovlt.f32	s15, s14
 8008896:	e7dc      	b.n	8008852 <__ieee754_atan2f+0x26>
 8008898:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800889c:	d110      	bne.n	80088c0 <__ieee754_atan2f+0x94>
 800889e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80088a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80088a6:	d107      	bne.n	80088b8 <__ieee754_atan2f+0x8c>
 80088a8:	2c02      	cmp	r4, #2
 80088aa:	d846      	bhi.n	800893a <__ieee754_atan2f+0x10e>
 80088ac:	4b29      	ldr	r3, [pc, #164]	@ (8008954 <__ieee754_atan2f+0x128>)
 80088ae:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80088b2:	edd3 7a00 	vldr	s15, [r3]
 80088b6:	e7cc      	b.n	8008852 <__ieee754_atan2f+0x26>
 80088b8:	2c02      	cmp	r4, #2
 80088ba:	d841      	bhi.n	8008940 <__ieee754_atan2f+0x114>
 80088bc:	4b26      	ldr	r3, [pc, #152]	@ (8008958 <__ieee754_atan2f+0x12c>)
 80088be:	e7f6      	b.n	80088ae <__ieee754_atan2f+0x82>
 80088c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80088c4:	d0df      	beq.n	8008886 <__ieee754_atan2f+0x5a>
 80088c6:	1a5b      	subs	r3, r3, r1
 80088c8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80088cc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80088d0:	da1a      	bge.n	8008908 <__ieee754_atan2f+0xdc>
 80088d2:	2a00      	cmp	r2, #0
 80088d4:	da01      	bge.n	80088da <__ieee754_atan2f+0xae>
 80088d6:	313c      	adds	r1, #60	@ 0x3c
 80088d8:	db19      	blt.n	800890e <__ieee754_atan2f+0xe2>
 80088da:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80088de:	f000 f919 	bl	8008b14 <fabsf>
 80088e2:	f000 f843 	bl	800896c <atanf>
 80088e6:	eef0 7a40 	vmov.f32	s15, s0
 80088ea:	2c01      	cmp	r4, #1
 80088ec:	d012      	beq.n	8008914 <__ieee754_atan2f+0xe8>
 80088ee:	2c02      	cmp	r4, #2
 80088f0:	d017      	beq.n	8008922 <__ieee754_atan2f+0xf6>
 80088f2:	2c00      	cmp	r4, #0
 80088f4:	d0ad      	beq.n	8008852 <__ieee754_atan2f+0x26>
 80088f6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800895c <__ieee754_atan2f+0x130>
 80088fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088fe:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008960 <__ieee754_atan2f+0x134>
 8008902:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008906:	e7a4      	b.n	8008852 <__ieee754_atan2f+0x26>
 8008908:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800894c <__ieee754_atan2f+0x120>
 800890c:	e7ed      	b.n	80088ea <__ieee754_atan2f+0xbe>
 800890e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008964 <__ieee754_atan2f+0x138>
 8008912:	e7ea      	b.n	80088ea <__ieee754_atan2f+0xbe>
 8008914:	ee17 3a90 	vmov	r3, s15
 8008918:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	e797      	b.n	8008852 <__ieee754_atan2f+0x26>
 8008922:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800895c <__ieee754_atan2f+0x130>
 8008926:	ee77 7a87 	vadd.f32	s15, s15, s14
 800892a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8008960 <__ieee754_atan2f+0x134>
 800892e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008932:	e78e      	b.n	8008852 <__ieee754_atan2f+0x26>
 8008934:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8008960 <__ieee754_atan2f+0x134>
 8008938:	e78b      	b.n	8008852 <__ieee754_atan2f+0x26>
 800893a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8008968 <__ieee754_atan2f+0x13c>
 800893e:	e788      	b.n	8008852 <__ieee754_atan2f+0x26>
 8008940:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008964 <__ieee754_atan2f+0x138>
 8008944:	e785      	b.n	8008852 <__ieee754_atan2f+0x26>
 8008946:	bf00      	nop
 8008948:	c0490fdb 	.word	0xc0490fdb
 800894c:	3fc90fdb 	.word	0x3fc90fdb
 8008950:	bfc90fdb 	.word	0xbfc90fdb
 8008954:	08008f5c 	.word	0x08008f5c
 8008958:	08008f50 	.word	0x08008f50
 800895c:	33bbbd2e 	.word	0x33bbbd2e
 8008960:	40490fdb 	.word	0x40490fdb
 8008964:	00000000 	.word	0x00000000
 8008968:	3f490fdb 	.word	0x3f490fdb

0800896c <atanf>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	ee10 5a10 	vmov	r5, s0
 8008972:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8008976:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800897a:	eef0 7a40 	vmov.f32	s15, s0
 800897e:	d310      	bcc.n	80089a2 <atanf+0x36>
 8008980:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8008984:	d904      	bls.n	8008990 <atanf+0x24>
 8008986:	ee70 7a00 	vadd.f32	s15, s0, s0
 800898a:	eeb0 0a67 	vmov.f32	s0, s15
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8008ac8 <atanf+0x15c>
 8008994:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8008acc <atanf+0x160>
 8008998:	2d00      	cmp	r5, #0
 800899a:	bfc8      	it	gt
 800899c:	eef0 7a47 	vmovgt.f32	s15, s14
 80089a0:	e7f3      	b.n	800898a <atanf+0x1e>
 80089a2:	4b4b      	ldr	r3, [pc, #300]	@ (8008ad0 <atanf+0x164>)
 80089a4:	429c      	cmp	r4, r3
 80089a6:	d810      	bhi.n	80089ca <atanf+0x5e>
 80089a8:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80089ac:	d20a      	bcs.n	80089c4 <atanf+0x58>
 80089ae:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8008ad4 <atanf+0x168>
 80089b2:	ee30 7a07 	vadd.f32	s14, s0, s14
 80089b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80089ba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80089be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089c2:	dce2      	bgt.n	800898a <atanf+0x1e>
 80089c4:	f04f 33ff 	mov.w	r3, #4294967295
 80089c8:	e013      	b.n	80089f2 <atanf+0x86>
 80089ca:	f000 f8a3 	bl	8008b14 <fabsf>
 80089ce:	4b42      	ldr	r3, [pc, #264]	@ (8008ad8 <atanf+0x16c>)
 80089d0:	429c      	cmp	r4, r3
 80089d2:	d84f      	bhi.n	8008a74 <atanf+0x108>
 80089d4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80089d8:	429c      	cmp	r4, r3
 80089da:	d841      	bhi.n	8008a60 <atanf+0xf4>
 80089dc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80089e0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80089e4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80089e8:	2300      	movs	r3, #0
 80089ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 80089ee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80089f2:	1c5a      	adds	r2, r3, #1
 80089f4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80089f8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008adc <atanf+0x170>
 80089fc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8008ae0 <atanf+0x174>
 8008a00:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8008ae4 <atanf+0x178>
 8008a04:	ee66 6a06 	vmul.f32	s13, s12, s12
 8008a08:	eee6 5a87 	vfma.f32	s11, s13, s14
 8008a0c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8008ae8 <atanf+0x17c>
 8008a10:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008a14:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8008aec <atanf+0x180>
 8008a18:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008a1c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008af0 <atanf+0x184>
 8008a20:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8008a24:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008af4 <atanf+0x188>
 8008a28:	eee7 5a26 	vfma.f32	s11, s14, s13
 8008a2c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8008af8 <atanf+0x18c>
 8008a30:	eea6 5a87 	vfma.f32	s10, s13, s14
 8008a34:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008afc <atanf+0x190>
 8008a38:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008a3c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8008b00 <atanf+0x194>
 8008a40:	eea7 5a26 	vfma.f32	s10, s14, s13
 8008a44:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008b04 <atanf+0x198>
 8008a48:	eea5 7a26 	vfma.f32	s14, s10, s13
 8008a4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008a50:	eea5 7a86 	vfma.f32	s14, s11, s12
 8008a54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008a58:	d121      	bne.n	8008a9e <atanf+0x132>
 8008a5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a5e:	e794      	b.n	800898a <atanf+0x1e>
 8008a60:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8008a64:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008a68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008a72:	e7be      	b.n	80089f2 <atanf+0x86>
 8008a74:	4b24      	ldr	r3, [pc, #144]	@ (8008b08 <atanf+0x19c>)
 8008a76:	429c      	cmp	r4, r3
 8008a78:	d80b      	bhi.n	8008a92 <atanf+0x126>
 8008a7a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8008a7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008a82:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008a86:	2302      	movs	r3, #2
 8008a88:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a90:	e7af      	b.n	80089f2 <atanf+0x86>
 8008a92:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008a96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e7a9      	b.n	80089f2 <atanf+0x86>
 8008a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8008b0c <atanf+0x1a0>)
 8008aa0:	491b      	ldr	r1, [pc, #108]	@ (8008b10 <atanf+0x1a4>)
 8008aa2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008aa6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008aaa:	edd3 6a00 	vldr	s13, [r3]
 8008aae:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008ab2:	2d00      	cmp	r5, #0
 8008ab4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008ab8:	edd2 7a00 	vldr	s15, [r2]
 8008abc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008ac0:	bfb8      	it	lt
 8008ac2:	eef1 7a67 	vneglt.f32	s15, s15
 8008ac6:	e760      	b.n	800898a <atanf+0x1e>
 8008ac8:	bfc90fdb 	.word	0xbfc90fdb
 8008acc:	3fc90fdb 	.word	0x3fc90fdb
 8008ad0:	3edfffff 	.word	0x3edfffff
 8008ad4:	7149f2ca 	.word	0x7149f2ca
 8008ad8:	3f97ffff 	.word	0x3f97ffff
 8008adc:	3c8569d7 	.word	0x3c8569d7
 8008ae0:	3d4bda59 	.word	0x3d4bda59
 8008ae4:	bd6ef16b 	.word	0xbd6ef16b
 8008ae8:	3d886b35 	.word	0x3d886b35
 8008aec:	3dba2e6e 	.word	0x3dba2e6e
 8008af0:	3e124925 	.word	0x3e124925
 8008af4:	3eaaaaab 	.word	0x3eaaaaab
 8008af8:	bd15a221 	.word	0xbd15a221
 8008afc:	bd9d8795 	.word	0xbd9d8795
 8008b00:	bde38e38 	.word	0xbde38e38
 8008b04:	be4ccccd 	.word	0xbe4ccccd
 8008b08:	401bffff 	.word	0x401bffff
 8008b0c:	08008f78 	.word	0x08008f78
 8008b10:	08008f68 	.word	0x08008f68

08008b14 <fabsf>:
 8008b14:	ee10 3a10 	vmov	r3, s0
 8008b18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b1c:	ee00 3a10 	vmov	s0, r3
 8008b20:	4770      	bx	lr
	...

08008b24 <_init>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	bf00      	nop
 8008b28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b2a:	bc08      	pop	{r3}
 8008b2c:	469e      	mov	lr, r3
 8008b2e:	4770      	bx	lr

08008b30 <_fini>:
 8008b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b32:	bf00      	nop
 8008b34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b36:	bc08      	pop	{r3}
 8008b38:	469e      	mov	lr, r3
 8008b3a:	4770      	bx	lr
